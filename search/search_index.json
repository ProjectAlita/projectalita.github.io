{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to ELITEA Documentation ELITEA is a platform designed to streamline the management, development, and collaboration of Large Language Model (LLM) assets within organizations. Our Values: Democratize AI Access for all organizational levels with accessible, user-friendly AI technology. Embrace Creativity by providing a flexible, intuitive environment for innovative AI solutions. Enhance Productivity by maximizing team efficiency with integrated tools and environments. Foster Collaboration by providing environments where people can share their assets within projects and organization. Scale with Your Needs with a platform that scales from small teams to enterprise levels.","title":"Welcome to ELITEA Documentation"},{"location":"#welcome-to-elitea-documentation","text":"ELITEA is a platform designed to streamline the management, development, and collaboration of Large Language Model (LLM) assets within organizations.","title":"Welcome to ELITEA Documentation"},{"location":"#our-values","text":"Democratize AI Access for all organizational levels with accessible, user-friendly AI technology. Embrace Creativity by providing a flexible, intuitive environment for innovative AI solutions. Enhance Productivity by maximizing team efficiency with integrated tools and environments. Foster Collaboration by providing environments where people can share their assets within projects and organization. Scale with Your Needs with a platform that scales from small teams to enterprise levels.","title":"Our Values:"},{"location":"admin-guide/agents/agents-examples/","text":"Agents Examples and Materials Agents - Helpful Materials To assist you in maximizing the capabilities of Agents within the ELITEA platform, we have compiled a selection of helpful materials. These resources are designed to guide you through the processes of creating, setting up, configuring, and effectively using Agents. Video Tutorials Explore our curated video tutorials that provide step-by-step instructions and insights on various aspects of working with Agents: Alita AQA Agent for QAvaJS autromation EBSCO Automated test generation Agent Frameworks General Guidelines for Both Agent Types When working with either the React or Raw agent types, it is imperative to adhere to the following general guidelines: Toolkit Interaction : Ensure to address the appropriate toolkits (e.g., JIRA, GitHub) and address the specific tools available within these toolkits (e.g., Create issue, Add comments). Execution Constraints : Always provide clear instructions or constraints to ensure that each toolkit is executed only once to avoid loops. This is crucial for maintaining efficient and error-free operations. ReAct Agent Type For the ReAct agent type, follow these detailed instructions to effectively integrate and utilize various toolkits and tools: Example: Test Case Generation ### Objective: You are an expert Software Testing engineer. Your task is to connect to a Git repository using the GitHub toolkit, read files related to \"Alita Documentation\" to find information about datasources, analyze this information, create three test cases covering datasource creation functionality, and save the generated test cases in a newly created Jira ticket using the Jira toolkit. ### Instructions: 1. Connect to GitHub Repository: - Use the GitHub toolkit to connect to the specified Git repository. - Ensure you have the necessary permissions to read files from the repository. 2. Read Files: - Use the \"Read file\" tool to read files related to \"Alita Documentation\" from the repository. - Focus on finding information about datasources. 3. Analyze Information: - As an expert Software Testing engineer, analyze the information about datasources. - Identify key functionalities and requirements for datasource creation. 4. Create Test Cases: - Based on your analysis, create three test cases covering datasource creation functionality. - Ensure the test cases are detailed, clear, and follow industry best practices. 5. Save Test Cases in Jira: - Use the Jira toolkit to create a new Jira Task. - Use the following project: ETSTCC - The created Issue type must be Task. - Ensure the Jira Task has the next available issue ID. - Save the generated test cases in the Description field. - Use the following Label: AI_Generated. - Generate a corresponding Summary and apply it to the Summary field of the Task. - Use only standard fields in Jira, do not use neither custom fileds or fields from plugins, they are not available. ### Constraints: - Execute each toolkit only once. - Do not get into a loop. - Provide the best possible output based on the available information. ### Example Test Case Format: Test Case ID: TC001 Title: Verify datasource creation with valid inputs Description: Ensure that a datasource can be created successfully when valid inputs are provided. Preconditions: User is logged in and has access to the datasource creation page. Steps: 1. Navigate to the datasource creation page. 2. Enter valid inputs in all required fields. 3. Click on the \"Create\" button. Expected Result: The datasource is created successfully, and a confirmation message is displayed. Test Case ID: TC002 Title: Verify error message for missing required fields Description: Ensure that an appropriate error message is displayed when required fields are left blank during datasource creation. Preconditions: User is logged in and has access to the datasource creation page. Steps: 1. Navigate to the datasource creation page. 2. Leave one or more required fields blank. 3. Click on the \"Create\" button. Expected Result: An error message is displayed indicating that required fields must be filled. ### Execution: - Follow the instructions step-by-step. - Ensure each toolkit is executed only once. - Provide the best possible output based on the available information. Raw Agent Type For the Raw agent type, adhere to these specific guidelines to ensure the agent operates correctly: Preserve Existing Variables : Do not remove any pre-existing variables in the configuration as they are crucial for the agent's functionality. Avoid Assigning Values to Variables : Leave variables unassigned; they will be automatically populated during execution. Include the following essential sections in your configuration: ### Tools: {{tools}} - Say to user: tool: \"complete_task\", args: \"final_answer\" - complete message to be communicated to the user, shoudl contain as much details as possible ### Scratchpad {{agent_scratchpad}} ### Chat History {{chat_history}} ### User Input: {{input}} ### Response format { \"thoughts\": { \"text\": \"message to a user follow the style of your persona\", \"plan\": \"short bulleted, list that conveys long-term plan\", \"criticism\": \"constructive self-criticism\", }, \"tool\": { \"name\": \"tool name\", \"args\": { \"arg name\": \"value\" } } } You must answer with only JSON and it could be parsed by Python json.loads By following these guidelines and including the necessary code snippet, you ensure that the Raw Agent functions correctly and integrates seamlessly with the intended processes. Practical Examples Gain hands-on experience with our detailed examples that illustrate the practical application of Agents in real-world scenarios:","title":"Agents Examples and Materials"},{"location":"admin-guide/agents/agents-examples/#agents-examples-and-materials","text":"","title":"Agents Examples and Materials"},{"location":"admin-guide/agents/agents-examples/#agents-helpful-materials","text":"To assist you in maximizing the capabilities of Agents within the ELITEA platform, we have compiled a selection of helpful materials. These resources are designed to guide you through the processes of creating, setting up, configuring, and effectively using Agents.","title":"Agents - Helpful Materials"},{"location":"admin-guide/agents/agents-examples/#video-tutorials","text":"Explore our curated video tutorials that provide step-by-step instructions and insights on various aspects of working with Agents: Alita AQA Agent for QAvaJS autromation EBSCO Automated test generation","title":"Video Tutorials"},{"location":"admin-guide/agents/agents-examples/#agent-frameworks","text":"General Guidelines for Both Agent Types When working with either the React or Raw agent types, it is imperative to adhere to the following general guidelines: Toolkit Interaction : Ensure to address the appropriate toolkits (e.g., JIRA, GitHub) and address the specific tools available within these toolkits (e.g., Create issue, Add comments). Execution Constraints : Always provide clear instructions or constraints to ensure that each toolkit is executed only once to avoid loops. This is crucial for maintaining efficient and error-free operations. ReAct Agent Type For the ReAct agent type, follow these detailed instructions to effectively integrate and utilize various toolkits and tools: Example: Test Case Generation ### Objective: You are an expert Software Testing engineer. Your task is to connect to a Git repository using the GitHub toolkit, read files related to \"Alita Documentation\" to find information about datasources, analyze this information, create three test cases covering datasource creation functionality, and save the generated test cases in a newly created Jira ticket using the Jira toolkit. ### Instructions: 1. Connect to GitHub Repository: - Use the GitHub toolkit to connect to the specified Git repository. - Ensure you have the necessary permissions to read files from the repository. 2. Read Files: - Use the \"Read file\" tool to read files related to \"Alita Documentation\" from the repository. - Focus on finding information about datasources. 3. Analyze Information: - As an expert Software Testing engineer, analyze the information about datasources. - Identify key functionalities and requirements for datasource creation. 4. Create Test Cases: - Based on your analysis, create three test cases covering datasource creation functionality. - Ensure the test cases are detailed, clear, and follow industry best practices. 5. Save Test Cases in Jira: - Use the Jira toolkit to create a new Jira Task. - Use the following project: ETSTCC - The created Issue type must be Task. - Ensure the Jira Task has the next available issue ID. - Save the generated test cases in the Description field. - Use the following Label: AI_Generated. - Generate a corresponding Summary and apply it to the Summary field of the Task. - Use only standard fields in Jira, do not use neither custom fileds or fields from plugins, they are not available. ### Constraints: - Execute each toolkit only once. - Do not get into a loop. - Provide the best possible output based on the available information. ### Example Test Case Format: Test Case ID: TC001 Title: Verify datasource creation with valid inputs Description: Ensure that a datasource can be created successfully when valid inputs are provided. Preconditions: User is logged in and has access to the datasource creation page. Steps: 1. Navigate to the datasource creation page. 2. Enter valid inputs in all required fields. 3. Click on the \"Create\" button. Expected Result: The datasource is created successfully, and a confirmation message is displayed. Test Case ID: TC002 Title: Verify error message for missing required fields Description: Ensure that an appropriate error message is displayed when required fields are left blank during datasource creation. Preconditions: User is logged in and has access to the datasource creation page. Steps: 1. Navigate to the datasource creation page. 2. Leave one or more required fields blank. 3. Click on the \"Create\" button. Expected Result: An error message is displayed indicating that required fields must be filled. ### Execution: - Follow the instructions step-by-step. - Ensure each toolkit is executed only once. - Provide the best possible output based on the available information. Raw Agent Type For the Raw agent type, adhere to these specific guidelines to ensure the agent operates correctly: Preserve Existing Variables : Do not remove any pre-existing variables in the configuration as they are crucial for the agent's functionality. Avoid Assigning Values to Variables : Leave variables unassigned; they will be automatically populated during execution. Include the following essential sections in your configuration: ### Tools: {{tools}} - Say to user: tool: \"complete_task\", args: \"final_answer\" - complete message to be communicated to the user, shoudl contain as much details as possible ### Scratchpad {{agent_scratchpad}} ### Chat History {{chat_history}} ### User Input: {{input}} ### Response format { \"thoughts\": { \"text\": \"message to a user follow the style of your persona\", \"plan\": \"short bulleted, list that conveys long-term plan\", \"criticism\": \"constructive self-criticism\", }, \"tool\": { \"name\": \"tool name\", \"args\": { \"arg name\": \"value\" } } } You must answer with only JSON and it could be parsed by Python json.loads By following these guidelines and including the necessary code snippet, you ensure that the Raw Agent functions correctly and integrates seamlessly with the intended processes.","title":"Agent Frameworks"},{"location":"admin-guide/agents/agents-examples/#practical-examples","text":"Gain hands-on experience with our detailed examples that illustrate the practical application of Agents in real-world scenarios:","title":"Practical Examples"},{"location":"admin-guide/prompts/prompts-examples/","text":"Prompts Examples and Materials Prompts - Helpful Materials To assist you in maximizing the capabilities of Prompts within the ELITEA platform, we have compiled a selection of helpful materials. These resources are designed to guide you through the processes of creating, setting up, configuring, and effectively using Prompts. Prompting Frameworks To further refine the instructions and ensure high-quality responses from LLMs, you can utilize structured prompting frameworks. These frameworks help in crafting precise and effective prompts by breaking down the requirements into specific components. Below are examples of how to apply these frameworks in the context of software testing: CREATE Framework The CREATE framework helps in constructing detailed and focused prompts by defining the Character, Request, Examples, Adjustment, Type of Output, and Extras. **Character**: Act as a senior software tester with expertise in regression testing. **Request**: Develop a detailed regression testing strategy for an upcoming version release of our CRM software. **Examples**: Include scenarios like: **Preconditions**: CRM software has been updated to the latest version. **Steps to reproduce**: User logs in and accesses the customer data module. **Expected results**: User should see updated customer data without any data loss. **Adjustment**: Focus on critical modules like customer data management and transaction processing. **Type of Output**: Format the strategy as a formal document with sections for objectives, scope, test scenarios, and resources. **Extras**: After formulating the strategy, provide a rationale for the choice of specific test scenarios and their expected impact on the software quality. Elavis Saravia Framework This framework simplifies the prompt creation process into four main elements: Instruction, Context, Input Data, and Output Indicator. **Instruction**: Generate test cases for user interface consistency across different devices. **Context**: The application is a cross-platform tool accessible on desktops, tablets, and smartphones. **Input Data**: User accesses the application from different devices. **Output Indicator**: The output should be a list of test cases, each describing the test steps, the expected results, and the device type. CRISPE Framework The CRISPE framework provides a comprehensive approach by incorporating Capacity and Role, Insight, Statement, Personality, and Experiment. **Capacity and Role**: Serve as an automated testing tool expert. **Insight**: The software to be tested is an e-commerce platform with high transaction volumes and user concurrency. **Statement**: Create automated test scripts that simulate multiple user transactions simultaneously. **Personality**: Maintain a technical and precise tone throughout the test scripts. **Experiment**: Offer three variations of the test script focusing on different aspects of the transaction process (e.g., payment processing, cart updates, and user login). By integrating these frameworks into the Context section of your prompts, you can guide LLMs to produce more targeted and effective outputs. Each framework helps in structuring your request to the Gen AI, ensuring that all necessary details are included to generate the desired results.","title":"Prompts Examples and Materials"},{"location":"admin-guide/prompts/prompts-examples/#prompts-examples-and-materials","text":"","title":"Prompts Examples and Materials"},{"location":"admin-guide/prompts/prompts-examples/#prompts-helpful-materials","text":"To assist you in maximizing the capabilities of Prompts within the ELITEA platform, we have compiled a selection of helpful materials. These resources are designed to guide you through the processes of creating, setting up, configuring, and effectively using Prompts.","title":"Prompts - Helpful Materials"},{"location":"admin-guide/prompts/prompts-examples/#prompting-frameworks","text":"To further refine the instructions and ensure high-quality responses from LLMs, you can utilize structured prompting frameworks. These frameworks help in crafting precise and effective prompts by breaking down the requirements into specific components. Below are examples of how to apply these frameworks in the context of software testing:","title":"Prompting Frameworks"},{"location":"admin-guide/prompts/prompts-examples/#create-framework","text":"The CREATE framework helps in constructing detailed and focused prompts by defining the Character, Request, Examples, Adjustment, Type of Output, and Extras. **Character**: Act as a senior software tester with expertise in regression testing. **Request**: Develop a detailed regression testing strategy for an upcoming version release of our CRM software. **Examples**: Include scenarios like: **Preconditions**: CRM software has been updated to the latest version. **Steps to reproduce**: User logs in and accesses the customer data module. **Expected results**: User should see updated customer data without any data loss. **Adjustment**: Focus on critical modules like customer data management and transaction processing. **Type of Output**: Format the strategy as a formal document with sections for objectives, scope, test scenarios, and resources. **Extras**: After formulating the strategy, provide a rationale for the choice of specific test scenarios and their expected impact on the software quality.","title":"CREATE Framework"},{"location":"admin-guide/prompts/prompts-examples/#elavis-saravia-framework","text":"This framework simplifies the prompt creation process into four main elements: Instruction, Context, Input Data, and Output Indicator. **Instruction**: Generate test cases for user interface consistency across different devices. **Context**: The application is a cross-platform tool accessible on desktops, tablets, and smartphones. **Input Data**: User accesses the application from different devices. **Output Indicator**: The output should be a list of test cases, each describing the test steps, the expected results, and the device type.","title":"Elavis Saravia Framework"},{"location":"admin-guide/prompts/prompts-examples/#crispe-framework","text":"The CRISPE framework provides a comprehensive approach by incorporating Capacity and Role, Insight, Statement, Personality, and Experiment. **Capacity and Role**: Serve as an automated testing tool expert. **Insight**: The software to be tested is an e-commerce platform with high transaction volumes and user concurrency. **Statement**: Create automated test scripts that simulate multiple user transactions simultaneously. **Personality**: Maintain a technical and precise tone throughout the test scripts. **Experiment**: Offer three variations of the test script focusing on different aspects of the transaction process (e.g., payment processing, cart updates, and user login). By integrating these frameworks into the Context section of your prompts, you can guide LLMs to produce more targeted and effective outputs. Each framework helps in structuring your request to the Gen AI, ensuring that all necessary details are included to generate the desired results.","title":"CRISPE Framework"},{"location":"feature-guides/advanced-features/roles/","text":"Roles Management How to access Admin menu: To configure or modify the admin settings for a specific project: Navigate to https://alita.lab.epam.com/-/configuration/users/ . Select the project from the dropdown list for which you want to set up or adjust the admin settings. Roles Menu The Roles menu allows for the detailed configuration of permissions across default and custom roles, tailoring access to the project's needs. Default Roles : System : Grants comprehensive permissions, including additional administrative capabilities. Admin : Allows full project access and user management. Editor : Provides editing rights within the project without administrative privileges. Viewer : Limits access to viewing permissions, excluding any create, read, update, delete (CRUD) actions. Customizing Roles : To adjust permissions for any role: Click the Edit roles icon. Toggle the checkboxes for each permission as needed. Click the Save to apply changes. Creating a New Role : Click Edit roles . Then Add role . After naming the new role, select the desired permissions. This custom role will now be available for assignment in the ELITEA HUB\u2192Settings\u2192Projects menu. By understanding and utilizing the Roles menu, administrators can ensure that project participants have the appropriate access levels, fostering a secure and efficient collaborative environment.","title":"Roles Management"},{"location":"feature-guides/advanced-features/roles/#roles-management","text":"","title":"Roles Management"},{"location":"feature-guides/advanced-features/roles/#how-to-access-admin-menu","text":"To configure or modify the admin settings for a specific project: Navigate to https://alita.lab.epam.com/-/configuration/users/ . Select the project from the dropdown list for which you want to set up or adjust the admin settings.","title":"How to access Admin menu:"},{"location":"feature-guides/advanced-features/roles/#roles-menu","text":"The Roles menu allows for the detailed configuration of permissions across default and custom roles, tailoring access to the project's needs. Default Roles : System : Grants comprehensive permissions, including additional administrative capabilities. Admin : Allows full project access and user management. Editor : Provides editing rights within the project without administrative privileges. Viewer : Limits access to viewing permissions, excluding any create, read, update, delete (CRUD) actions. Customizing Roles : To adjust permissions for any role: Click the Edit roles icon. Toggle the checkboxes for each permission as needed. Click the Save to apply changes. Creating a New Role : Click Edit roles . Then Add role . After naming the new role, select the desired permissions. This custom role will now be available for assignment in the ELITEA HUB\u2192Settings\u2192Projects menu. By understanding and utilizing the Roles menu, administrators can ensure that project participants have the appropriate access levels, fostering a secure and efficient collaborative environment.","title":"Roles Menu"},{"location":"feature-guides/core-features/export-import/","text":"Export and Import Guide: Managing Prompts, Datasources, and Agents for Backup, Migration, and Collaboration Introduction This user guide provides a comprehensive overview of the Export and Import features within ELITEA. These powerful functionalities allow you to seamlessly transfer your valuable entities \u2013 Prompts , Datasources , and Agents \u2013 between different ELITEA environments, projects, or for backup purposes. The ability to export and import entities offers significant flexibility and control over your AI workflows. You can leverage these features in various scenarios, including: Migrating Entities: Effortlessly move your carefully crafted prompts, configured datasources, and intelligent agents from one ELITEA environment to another. For instance, you can migrate entities from an ELITEA Alita LAB environment to a new Nexus environment. Sharing and Collaboration: Share your entities with colleagues working in different projects or ELITEA instances, fostering collaboration and knowledge sharing. Backup and Recovery: Create backups of your critical entities, ensuring data safety and enabling quick recovery in case of unforeseen issues. Development and Testing: Develop and test entities in a dedicated environment and then easily import them into your production environment. This guide will detail the process of exporting and importing each entity type, along with best practices and practical use cases to help you effectively utilize these features. Import and Export Features: A General Overview The Export feature allows you to save a snapshot of your prompts, datasources, or agents as JSON files. These files contain the complete configuration and relevant data of the entity at the time of export. The Import feature enables you to bring previously exported JSON files back into ELITEA. During the import process, you have the flexibility to configure certain aspects of the imported entity, such as the target project and specific settings. These features provide a convenient and reliable way to manage and transfer your assets within and across ELITEA environments. How to Export Entities ELITEA allows you to export prompts, datasources, and agents individually. The export process is similar for each entity type. Log in to ELITEA : Access the ELITEA platform using your credentials. Navigate to the Project : Go to the specific project that contains the prompt, datasource, or agent you wish to export. Access the Relevant Menu : Within the project, navigate to the menu corresponding to the entity type you want to export (e.g., Prompts , Datasources , or Agents ). Locate the Entity for Export : Find the specific entity you want to export within the list. ELITEA offers two view options, and the export process varies slightly depending on the view you are using: a. Card List View : If you are viewing your entities in a card format, click on the specific entity's card that you wish to export. This will open the entity's details. Once open, locate and click the Export [entity type] icon (e.g., Export prompt , Export datasource , or Export agent ). b. Table View : If you are viewing your entities in a table format, locate the entity you want to export in the list. In the Actions column, which is usually the last column in the table, click on the ellipsis icon ( ... ) next to the entity. A dropdown menu will appear. Select the Export option from this menu. Automatic Download : Upon clicking the Export icon or selecting the Export option, your web browser will automatically initiate the download of a JSON file. This file contains all the configuration data for the exported entity and will be saved to your local device's default download location. This process allows you to easily export your ELITEA entities for various purposes, such as sharing them with others or creating backups of your configurations. Exporting a Prompt Navigate to the Prompts menu within the project containing the prompt you wish to export. Locate the specific prompt you want to export. Open the prompt and click the Export prompt icon. Your browser will automatically download a JSON file containing the prompt's data to your local device. The exported JSON file includes: All versions of the prompt. The complete configuration of each version, including: Context Messages (System, Assistant, User) Variables and their potential values Settings (Model, Temperature, Top-P, Top-K, Max Completion Tokens) Welcome Message Conversation Starters Tags Exporting a Datasource Navigate to the Datasources menu within the project containing the datasource you wish to export. Locate the specific datasource you want to export. Open the datasource and click the Export datasource icon. Your browser will automatically download a JSON file containing the datasource's data to your local device. The exported JSON file includes: The complete configuration of the datasource, including: Name and Description Context Welcome Message Conversation Starters Tags Settings for Chat, Search, and Deduplicate functionalities (including selected LLM and Embedding Models) Dataset configurations (including storage details and connection parameters, excluding authentication credentials ) Important Security Note: For security purposes, the authentication information for datasets (such as API Keys, usernames, tokens, and passwords) is not included in the exported datasource file. You will need to re-enter this information when importing the datasource. Exporting an Agent Navigate to the Agents menu within the project containing the agent you wish to export. Locate the specific agent you want to export. Open the agent and click the Export agent icon. Your browser will automatically download a JSON file containing the agent's data to your local device. The exported JSON file includes: All versions of the agent. The complete configuration of each version, including: Name and Description Context Welcome Message Conversation Starters Tags Settings (Model, Temperature, Top-P, Top-K, Max Completion Tokens) Toolkit configurations (including tool details and parameters, excluding authentication credentials ) Important Security Note: For security purposes, the authentication information for toolkits (such as API Keys, usernames, tokens, and passwords) is not included in the exported agent file. You will need to re-enter this information when importing the agent. Exporting Collections Collections in ELITEA provide a powerful way to group and organize various entities such as prompts, datasources, and agents into a single, manageable unit. This organizational structure offers the significant advantage of being able to export an entire collection at once, ensuring that all the entities within that collection are included in the export. This feature is particularly convenient for backing up related items, sharing groups of resources, or transferring sets of configurations between environments. Benefits of Exporting Collections: Convenient Batch Export : Export all grouped entities (prompts, datasources, and agents) simultaneously, saving time and effort compared to exporting each item individually. Preserve Relationships : Maintain the logical grouping of your entities as defined by the collection structure. Simplified Sharing and Backup : Easily share a related set of resources or create a comprehensive backup of a specific project component. To export a collection: Navigate to the Collections menu within the project that contains the collection you wish to export. Locate the specific collection you want to export within the list of available collections. Open the collection by clicking on its name or card. Once the collection is open, you will find an Export Collection icon. Click this icon to initiate the export process. Your browser will automatically download a JSON file to your local device. This file contains the data for the collection itself, along with the configuration details of all the prompts, datasources, and agents currently included within that collection. This streamlined process allows you to efficiently manage and transfer groups of related assets within ELITEA. How to Import Entities ELITEA provides a straightforward import process for prompts, datasources, and agents. Login ELITEA. Click the +Quick button switcher, located in the top right corner of the interface. Click the Import button. Choose the appropiate file (in *.json) from your local device. An Import Wizard will appear, guiding you through the import process. Importing a Prompt Select File: Choose the appropiate prompt file (in *.json) from your local device. Import Wizard - Prompt Options: Select Project: Choose the target project where you want to import the prompt. You can select your Private workspace or any other project where you have the necessary permissions. Select Versions to Import: You can choose to import all versions of the prompt or select specific versions. Note: It is highly recommended to select and import the 'latest' version of the prompt, otherwise you might have validation errors, preventing successful import, or resulting the imported prompt not to function as expected. Select LLM Model: For each version you are importing, you can select the desired LLM Model. If the LLM Model specified in the exported file is also available in your current ELITEA environment, it will be selected automatically. If the model is not available, the first available model in your environment will be selected as a default. You can manually change the selected model to your preferred choice before completing the import. Click the Import button in the Import Wizard. The imported prompt will now be available in the Prompts menu of the selected project. Importing a Datasource Select File: Choose the appropiate datasource file (in *.json) from your local device. Import Wizard - Datasource Options: Select Project: Choose the target project where you want to import the datasource. Select Embedding Model: Choose the desired Embedding Model for the datasource. If the Embedding Model specified in the exported file is also available in your current ELITEA environment, it will be selected automatically. If the model is not available, the first available model in your environment will be selected as a default. You can manually change the selected model to your preferred choice. Configure Models for Chat, Search, and Deduplicate: Select the desired LLM models for the Chat, Search, and Deduplicate functionalities of the datasource. Provide Mandatory Parameters: Fill in all mandatory fields and parameters, which are highlighted with an asterisk * . This typically includes the Storage type and various authentication parameters for the datasets. Select Datasets to Import: Choose which datasets you want to import along with the datasource. Provide Dataset Authentication: For any datasets requiring authentication, you will need to manually provide the necessary credentials (API Keys, usernames, tokens, passwords). Click the Import button in the Import Wizard. The imported datasource will now be available in the Datasources menu of the selected project. Reindexing Datasets: After successfully importing the datasource, you must open the datasource and initiate the reindexing of the imported datasets. This step is crucial as the actual vector databases are not exported or imported. Importing an Agent Select File: Choose the appropiate agent file (in *.json) from your local device. Import Wizard - Agent Options: Select Project: Choose the target project where you want to import the agent. Select Versions to Import: You can choose to import all versions of the agent or select specific versions. Note: It is highly recommended to select and import the 'latest' version of the agent, otherwise you might have validation errors, preventing successful import, or resulting the imported agent not to function as expected. Select LLM Model: For each version you are importing, you can select the desired LLM Model. If the LLM Model specified in the exported file is also available in your current ELITEA environment, it will be selected automatically. If the model is not available, the first available model in your environment will be selected as a default. You can manually change the selected model to your preferred choice before completing the import. Provide Mandatory Parameters: Fill in all mandatory fields and parameters, which are highlighted with an asterisk * . This typically includes various authentication parameters for the agent's toolkits. Select Tools to Import: Choose which tools you want to import along with the agent. Configure Tool Parameters: You can review and reconfigure the available options and parameters for each tool being imported. You can either use the default values from the exported file or customize them as needed. Provide Toolkit Authentication: For any toolkits requiring authentication, you will need to manually provide the necessary credentials (API Keys, usernames, tokens, passwords). Click the Import button in the Import Wizard. The imported agent will now be available in the Agents menu of the selected project. Managing Master Agents with Connected Entities: Exporting and Importing ELITEA simplifies the management of complex AI workflows by providing integrated features for exporting and importing 'master' agents along with their connected entities. This allows for efficient transfer of intricate AI workflows between different ELITEA environments or for creating comprehensive backups. Exporting Master Agents with Connected Entities: ELITEA offers a convenient feature to export a 'master' agent, ensuring that all its directly connected prompts, datasources, and child agents are included in the exported file. This is particularly useful for transferring complex AI solutions between different ELITEA environments or for creating comprehensive backups. When you export a 'master' agent that has other agents, prompts, or datasources configured as toolkits, these nested entities are automatically included in the exported JSON file. This single file contains the configuration details for the 'master' agent and all its connected resources, simplifying the transfer process. Importing Master Agents with Connected Entities: When importing a 'master' agent from an exported file, ELITEA automatically imports all the connected prompts, datasources, and child agents that were included in the file. This streamlined process eliminates the need to import each component individually, making it significantly easier to transfer complex AI workflows between ELITEA environments. Upon importing the 'master' agent's file, ELITEA will create the 'master' agent and all its associated toolkit entities in the target project, preserving the structure and relationships of the original workflow. Benefits of Managing Master Agents with Connected Entities: Simplified Transfer of Complex Workflows: Move entire AI workflows, including agents and their dependencies, in a single operation. Preservation of Relationships: Maintain the connections and configurations between the 'master' agent and its toolkits during the transfer process. Time Efficiency: Avoid the manual effort of locating and importing each connected entity individually. How it Works: Export: When exporting a 'master' agent, ELITEA identifies all the child prompts, datasources, and agents configured as toolkits and includes their configurations in the exported JSON file. Import: During import, ELITEA reads the file and creates the 'master' agent and all its listed toolkit entities in the target project, re-establishing the connections. Important Considerations: As with individual entity importing, the actual datasets within datasources will need to be reindexed in the target project after importing the 'master' agent and its connected entities. As with individual entity importing, the authentication details for any configured toolkits and datasets are not copied to the new project. You will need to re-enter the authentication credentials (API Keys, usernames, tokens, passwords) for any toolkits and datasets while importing the 'master' agent. These integrated features for managing 'master' agents and their connected entities provide a powerful and efficient way to handle complex AI workflows within ELITEA. Importing a Collection ELITEA allows you to import previously exported collection files, streamlining the process of adding multiple related entities to your project. This feature is particularly useful for quickly setting up pre-configured groups of prompts, datasources, and agents. You can import a JSON file that contains all the information of an exported collection. This simplifies the process of adding multiple related entities at once. Important Note: While importing a collection file will successfully import all the prompts, datasources, and agents contained within that file and add them to their respective menus, the Collection entity itself will not be automatically created as part of this import process. This is a current limitation of the platform. The individual entities will be imported, but you will need to manually recreate the collection and add the imported entities to it if you wish to maintain the original grouping. This functionality is planned for future updates. To import a collection file: Select File: Choose the appropiate collection file (in *.json) from your local device. Import Wizard - Options: Select Project: Choose the target project where you want to import the entities. Select Entities: Choose the enities that you want to import, make corresponding configurations for each selected entity. Click the Import button in the Import Wizard. The individual entities will be imported and added to their respective menus. After Importing: After successfully importing the collection file, you will find the individual prompts, datasources, and agents in their respective menus (Prompts, Datasources, Agents). To recreate the original collection structure, you will need to: Navigate to the Collections menu. Create a new collection. Manually add the imported prompts, datasources, and agents to this newly created collection. This process ensures that while the collection entity itself is not automatically recreated, all the individual components of the exported collection are successfully imported into your project. Important Considerations for Importing Entities File Format: Ensure that the file you are importing is a valid ELITEA file in JSON format for the corresponding entity type. If you are making manual changes to the export file, ensure you save it in the correct JSON format and maintain the structure and required parameters of the file. Incorrect formatting or missing parameters will prevent successful import. Version Compatibility: While ELITEA strives for backward compatibility, importing entities created in significantly older versions of ELITEA might encounter compatibility issues. Context and Dependencies: If the imported entity has dependencies on other entities (e.g., an agent using other prompts, agents or datasources as toolkits), ensure that these dependencies are also present. Best Practices and Use Cases Regular Backups: Utilize the export feature to create regular backups of your important prompts, datasources, and agents. Store these exported files in a safe location for disaster recovery purposes. Environment Migration: When migrating from one ELITEA environment to another (e.g., from a development to a production environment), export your entities from the source environment and import them into the target environment. Sharing with Colleagues: Export your well-crafted prompts or useful datasources, agents and share the JSON files with colleagues so they can import them into their own projects. Collaborative Development: Developers can work on different parts of an AI solution in separate ELITEA instances and then use export/import to integrate their work. For example, one developer might create a set of prompts, while another configures a datasource and the third one - agents. Template Creation: Create a library of reusable prompt, agent and datasource templates by exporting them. These templates can then be easily imported into new projects, saving time and effort. Security Considerations: Remember that authentication credentials for datasets and toolkits are not included in exported files. Ensure you have a secure way to manage and provide these credentials when importing. Testing in Isolation: Export a production agent and import it into a separate testing environment. This allows you to test new changes without impacting the live system. By understanding and utilizing the Export and Import features effectively, you can significantly enhance your workflow within ELITEA, improve collaboration, and ensure the safety and portability of your valuable AI assets.","title":"Export and Import Guide"},{"location":"feature-guides/core-features/export-import/#export-and-import-guide-managing-prompts-datasources-and-agents-for-backup-migration-and-collaboration","text":"","title":"Export and Import Guide: Managing Prompts, Datasources, and Agents for Backup, Migration, and Collaboration"},{"location":"feature-guides/core-features/export-import/#introduction","text":"This user guide provides a comprehensive overview of the Export and Import features within ELITEA. These powerful functionalities allow you to seamlessly transfer your valuable entities \u2013 Prompts , Datasources , and Agents \u2013 between different ELITEA environments, projects, or for backup purposes. The ability to export and import entities offers significant flexibility and control over your AI workflows. You can leverage these features in various scenarios, including: Migrating Entities: Effortlessly move your carefully crafted prompts, configured datasources, and intelligent agents from one ELITEA environment to another. For instance, you can migrate entities from an ELITEA Alita LAB environment to a new Nexus environment. Sharing and Collaboration: Share your entities with colleagues working in different projects or ELITEA instances, fostering collaboration and knowledge sharing. Backup and Recovery: Create backups of your critical entities, ensuring data safety and enabling quick recovery in case of unforeseen issues. Development and Testing: Develop and test entities in a dedicated environment and then easily import them into your production environment. This guide will detail the process of exporting and importing each entity type, along with best practices and practical use cases to help you effectively utilize these features.","title":"Introduction"},{"location":"feature-guides/core-features/export-import/#import-and-export-features-a-general-overview","text":"The Export feature allows you to save a snapshot of your prompts, datasources, or agents as JSON files. These files contain the complete configuration and relevant data of the entity at the time of export. The Import feature enables you to bring previously exported JSON files back into ELITEA. During the import process, you have the flexibility to configure certain aspects of the imported entity, such as the target project and specific settings. These features provide a convenient and reliable way to manage and transfer your assets within and across ELITEA environments.","title":"Import and Export Features: A General Overview"},{"location":"feature-guides/core-features/export-import/#how-to-export-entities","text":"ELITEA allows you to export prompts, datasources, and agents individually. The export process is similar for each entity type. Log in to ELITEA : Access the ELITEA platform using your credentials. Navigate to the Project : Go to the specific project that contains the prompt, datasource, or agent you wish to export. Access the Relevant Menu : Within the project, navigate to the menu corresponding to the entity type you want to export (e.g., Prompts , Datasources , or Agents ). Locate the Entity for Export : Find the specific entity you want to export within the list. ELITEA offers two view options, and the export process varies slightly depending on the view you are using: a. Card List View : If you are viewing your entities in a card format, click on the specific entity's card that you wish to export. This will open the entity's details. Once open, locate and click the Export [entity type] icon (e.g., Export prompt , Export datasource , or Export agent ). b. Table View : If you are viewing your entities in a table format, locate the entity you want to export in the list. In the Actions column, which is usually the last column in the table, click on the ellipsis icon ( ... ) next to the entity. A dropdown menu will appear. Select the Export option from this menu. Automatic Download : Upon clicking the Export icon or selecting the Export option, your web browser will automatically initiate the download of a JSON file. This file contains all the configuration data for the exported entity and will be saved to your local device's default download location. This process allows you to easily export your ELITEA entities for various purposes, such as sharing them with others or creating backups of your configurations.","title":"How to Export Entities"},{"location":"feature-guides/core-features/export-import/#exporting-a-prompt","text":"Navigate to the Prompts menu within the project containing the prompt you wish to export. Locate the specific prompt you want to export. Open the prompt and click the Export prompt icon. Your browser will automatically download a JSON file containing the prompt's data to your local device. The exported JSON file includes: All versions of the prompt. The complete configuration of each version, including: Context Messages (System, Assistant, User) Variables and their potential values Settings (Model, Temperature, Top-P, Top-K, Max Completion Tokens) Welcome Message Conversation Starters Tags","title":"Exporting a Prompt"},{"location":"feature-guides/core-features/export-import/#exporting-a-datasource","text":"Navigate to the Datasources menu within the project containing the datasource you wish to export. Locate the specific datasource you want to export. Open the datasource and click the Export datasource icon. Your browser will automatically download a JSON file containing the datasource's data to your local device. The exported JSON file includes: The complete configuration of the datasource, including: Name and Description Context Welcome Message Conversation Starters Tags Settings for Chat, Search, and Deduplicate functionalities (including selected LLM and Embedding Models) Dataset configurations (including storage details and connection parameters, excluding authentication credentials ) Important Security Note: For security purposes, the authentication information for datasets (such as API Keys, usernames, tokens, and passwords) is not included in the exported datasource file. You will need to re-enter this information when importing the datasource.","title":"Exporting a Datasource"},{"location":"feature-guides/core-features/export-import/#exporting-an-agent","text":"Navigate to the Agents menu within the project containing the agent you wish to export. Locate the specific agent you want to export. Open the agent and click the Export agent icon. Your browser will automatically download a JSON file containing the agent's data to your local device. The exported JSON file includes: All versions of the agent. The complete configuration of each version, including: Name and Description Context Welcome Message Conversation Starters Tags Settings (Model, Temperature, Top-P, Top-K, Max Completion Tokens) Toolkit configurations (including tool details and parameters, excluding authentication credentials ) Important Security Note: For security purposes, the authentication information for toolkits (such as API Keys, usernames, tokens, and passwords) is not included in the exported agent file. You will need to re-enter this information when importing the agent.","title":"Exporting an Agent"},{"location":"feature-guides/core-features/export-import/#exporting-collections","text":"Collections in ELITEA provide a powerful way to group and organize various entities such as prompts, datasources, and agents into a single, manageable unit. This organizational structure offers the significant advantage of being able to export an entire collection at once, ensuring that all the entities within that collection are included in the export. This feature is particularly convenient for backing up related items, sharing groups of resources, or transferring sets of configurations between environments. Benefits of Exporting Collections: Convenient Batch Export : Export all grouped entities (prompts, datasources, and agents) simultaneously, saving time and effort compared to exporting each item individually. Preserve Relationships : Maintain the logical grouping of your entities as defined by the collection structure. Simplified Sharing and Backup : Easily share a related set of resources or create a comprehensive backup of a specific project component. To export a collection: Navigate to the Collections menu within the project that contains the collection you wish to export. Locate the specific collection you want to export within the list of available collections. Open the collection by clicking on its name or card. Once the collection is open, you will find an Export Collection icon. Click this icon to initiate the export process. Your browser will automatically download a JSON file to your local device. This file contains the data for the collection itself, along with the configuration details of all the prompts, datasources, and agents currently included within that collection. This streamlined process allows you to efficiently manage and transfer groups of related assets within ELITEA.","title":"Exporting Collections"},{"location":"feature-guides/core-features/export-import/#how-to-import-entities","text":"ELITEA provides a straightforward import process for prompts, datasources, and agents. Login ELITEA. Click the +Quick button switcher, located in the top right corner of the interface. Click the Import button. Choose the appropiate file (in *.json) from your local device. An Import Wizard will appear, guiding you through the import process.","title":"How to Import Entities"},{"location":"feature-guides/core-features/export-import/#importing-a-prompt","text":"Select File: Choose the appropiate prompt file (in *.json) from your local device. Import Wizard - Prompt Options: Select Project: Choose the target project where you want to import the prompt. You can select your Private workspace or any other project where you have the necessary permissions. Select Versions to Import: You can choose to import all versions of the prompt or select specific versions. Note: It is highly recommended to select and import the 'latest' version of the prompt, otherwise you might have validation errors, preventing successful import, or resulting the imported prompt not to function as expected. Select LLM Model: For each version you are importing, you can select the desired LLM Model. If the LLM Model specified in the exported file is also available in your current ELITEA environment, it will be selected automatically. If the model is not available, the first available model in your environment will be selected as a default. You can manually change the selected model to your preferred choice before completing the import. Click the Import button in the Import Wizard. The imported prompt will now be available in the Prompts menu of the selected project.","title":"Importing a Prompt"},{"location":"feature-guides/core-features/export-import/#importing-a-datasource","text":"Select File: Choose the appropiate datasource file (in *.json) from your local device. Import Wizard - Datasource Options: Select Project: Choose the target project where you want to import the datasource. Select Embedding Model: Choose the desired Embedding Model for the datasource. If the Embedding Model specified in the exported file is also available in your current ELITEA environment, it will be selected automatically. If the model is not available, the first available model in your environment will be selected as a default. You can manually change the selected model to your preferred choice. Configure Models for Chat, Search, and Deduplicate: Select the desired LLM models for the Chat, Search, and Deduplicate functionalities of the datasource. Provide Mandatory Parameters: Fill in all mandatory fields and parameters, which are highlighted with an asterisk * . This typically includes the Storage type and various authentication parameters for the datasets. Select Datasets to Import: Choose which datasets you want to import along with the datasource. Provide Dataset Authentication: For any datasets requiring authentication, you will need to manually provide the necessary credentials (API Keys, usernames, tokens, passwords). Click the Import button in the Import Wizard. The imported datasource will now be available in the Datasources menu of the selected project. Reindexing Datasets: After successfully importing the datasource, you must open the datasource and initiate the reindexing of the imported datasets. This step is crucial as the actual vector databases are not exported or imported.","title":"Importing a Datasource"},{"location":"feature-guides/core-features/export-import/#importing-an-agent","text":"Select File: Choose the appropiate agent file (in *.json) from your local device. Import Wizard - Agent Options: Select Project: Choose the target project where you want to import the agent. Select Versions to Import: You can choose to import all versions of the agent or select specific versions. Note: It is highly recommended to select and import the 'latest' version of the agent, otherwise you might have validation errors, preventing successful import, or resulting the imported agent not to function as expected. Select LLM Model: For each version you are importing, you can select the desired LLM Model. If the LLM Model specified in the exported file is also available in your current ELITEA environment, it will be selected automatically. If the model is not available, the first available model in your environment will be selected as a default. You can manually change the selected model to your preferred choice before completing the import. Provide Mandatory Parameters: Fill in all mandatory fields and parameters, which are highlighted with an asterisk * . This typically includes various authentication parameters for the agent's toolkits. Select Tools to Import: Choose which tools you want to import along with the agent. Configure Tool Parameters: You can review and reconfigure the available options and parameters for each tool being imported. You can either use the default values from the exported file or customize them as needed. Provide Toolkit Authentication: For any toolkits requiring authentication, you will need to manually provide the necessary credentials (API Keys, usernames, tokens, passwords). Click the Import button in the Import Wizard. The imported agent will now be available in the Agents menu of the selected project.","title":"Importing an Agent"},{"location":"feature-guides/core-features/export-import/#managing-master-agents-with-connected-entities-exporting-and-importing","text":"ELITEA simplifies the management of complex AI workflows by providing integrated features for exporting and importing 'master' agents along with their connected entities. This allows for efficient transfer of intricate AI workflows between different ELITEA environments or for creating comprehensive backups. Exporting Master Agents with Connected Entities: ELITEA offers a convenient feature to export a 'master' agent, ensuring that all its directly connected prompts, datasources, and child agents are included in the exported file. This is particularly useful for transferring complex AI solutions between different ELITEA environments or for creating comprehensive backups. When you export a 'master' agent that has other agents, prompts, or datasources configured as toolkits, these nested entities are automatically included in the exported JSON file. This single file contains the configuration details for the 'master' agent and all its connected resources, simplifying the transfer process. Importing Master Agents with Connected Entities: When importing a 'master' agent from an exported file, ELITEA automatically imports all the connected prompts, datasources, and child agents that were included in the file. This streamlined process eliminates the need to import each component individually, making it significantly easier to transfer complex AI workflows between ELITEA environments. Upon importing the 'master' agent's file, ELITEA will create the 'master' agent and all its associated toolkit entities in the target project, preserving the structure and relationships of the original workflow. Benefits of Managing Master Agents with Connected Entities: Simplified Transfer of Complex Workflows: Move entire AI workflows, including agents and their dependencies, in a single operation. Preservation of Relationships: Maintain the connections and configurations between the 'master' agent and its toolkits during the transfer process. Time Efficiency: Avoid the manual effort of locating and importing each connected entity individually. How it Works: Export: When exporting a 'master' agent, ELITEA identifies all the child prompts, datasources, and agents configured as toolkits and includes their configurations in the exported JSON file. Import: During import, ELITEA reads the file and creates the 'master' agent and all its listed toolkit entities in the target project, re-establishing the connections. Important Considerations: As with individual entity importing, the actual datasets within datasources will need to be reindexed in the target project after importing the 'master' agent and its connected entities. As with individual entity importing, the authentication details for any configured toolkits and datasets are not copied to the new project. You will need to re-enter the authentication credentials (API Keys, usernames, tokens, passwords) for any toolkits and datasets while importing the 'master' agent. These integrated features for managing 'master' agents and their connected entities provide a powerful and efficient way to handle complex AI workflows within ELITEA.","title":"Managing Master Agents with Connected Entities: Exporting and Importing"},{"location":"feature-guides/core-features/export-import/#importing-a-collection","text":"ELITEA allows you to import previously exported collection files, streamlining the process of adding multiple related entities to your project. This feature is particularly useful for quickly setting up pre-configured groups of prompts, datasources, and agents. You can import a JSON file that contains all the information of an exported collection. This simplifies the process of adding multiple related entities at once. Important Note: While importing a collection file will successfully import all the prompts, datasources, and agents contained within that file and add them to their respective menus, the Collection entity itself will not be automatically created as part of this import process. This is a current limitation of the platform. The individual entities will be imported, but you will need to manually recreate the collection and add the imported entities to it if you wish to maintain the original grouping. This functionality is planned for future updates. To import a collection file: Select File: Choose the appropiate collection file (in *.json) from your local device. Import Wizard - Options: Select Project: Choose the target project where you want to import the entities. Select Entities: Choose the enities that you want to import, make corresponding configurations for each selected entity. Click the Import button in the Import Wizard. The individual entities will be imported and added to their respective menus. After Importing: After successfully importing the collection file, you will find the individual prompts, datasources, and agents in their respective menus (Prompts, Datasources, Agents). To recreate the original collection structure, you will need to: Navigate to the Collections menu. Create a new collection. Manually add the imported prompts, datasources, and agents to this newly created collection. This process ensures that while the collection entity itself is not automatically recreated, all the individual components of the exported collection are successfully imported into your project.","title":"Importing a Collection"},{"location":"feature-guides/core-features/export-import/#important-considerations-for-importing-entities","text":"File Format: Ensure that the file you are importing is a valid ELITEA file in JSON format for the corresponding entity type. If you are making manual changes to the export file, ensure you save it in the correct JSON format and maintain the structure and required parameters of the file. Incorrect formatting or missing parameters will prevent successful import. Version Compatibility: While ELITEA strives for backward compatibility, importing entities created in significantly older versions of ELITEA might encounter compatibility issues. Context and Dependencies: If the imported entity has dependencies on other entities (e.g., an agent using other prompts, agents or datasources as toolkits), ensure that these dependencies are also present.","title":"Important Considerations for Importing Entities"},{"location":"feature-guides/core-features/export-import/#best-practices-and-use-cases","text":"Regular Backups: Utilize the export feature to create regular backups of your important prompts, datasources, and agents. Store these exported files in a safe location for disaster recovery purposes. Environment Migration: When migrating from one ELITEA environment to another (e.g., from a development to a production environment), export your entities from the source environment and import them into the target environment. Sharing with Colleagues: Export your well-crafted prompts or useful datasources, agents and share the JSON files with colleagues so they can import them into their own projects. Collaborative Development: Developers can work on different parts of an AI solution in separate ELITEA instances and then use export/import to integrate their work. For example, one developer might create a set of prompts, while another configures a datasource and the third one - agents. Template Creation: Create a library of reusable prompt, agent and datasource templates by exporting them. These templates can then be easily imported into new projects, saving time and effort. Security Considerations: Remember that authentication credentials for datasets and toolkits are not included in exported files. Ensure you have a secure way to manage and provide these credentials when importing. Testing in Isolation: Export a production agent and import it into a separate testing environment. This allows you to test new changes without impacting the live system. By understanding and utilizing the Export and Import features effectively, you can significantly enhance your workflow within ELITEA, improve collaboration, and ensure the safety and portability of your valuable AI assets.","title":"Best Practices and Use Cases"},{"location":"feature-guides/core-features/forking/","text":"Forking Guide: Transferring Entities Between Projects in ELITEA Introduction This user guide provides a comprehensive overview of the Forking feature within ELITEA. Forking offers a streamlined method for transferring your valuable entities \u2013 Prompts , Datasources , and Agents \u2013 between different projects within the same ELITEA environment. The ability to fork entities provides a convenient and efficient way to manage your ELITEA assets. You can leverage this feature in various scenarios, including: Moving Entities Between Projects: Easily transfer prompts, datasources, and agents from one project to another within your current ELITEA environment. This is useful for reorganizing your work, sharing resources between teams, or consolidating entities into a central project. Duplicating Entities for Experimentation: Create a copy of an existing entity in a different project to experiment with modifications or new configurations without affecting the original entity. Sharing Resources Within an Environment: Make your carefully crafted prompts, configured datasources, and intelligent agents available to other projects within the same ELITEA instance. This guide will detail the process of forking each entity type, along with best practices and practical use cases to help you effectively utilize this feature. Forking Feature: A General Overview The Forking feature in ELITEA provides a direct way to copy an existing entity (Prompt, Datasource, or Agent) from its current project to another project within the same ELITEA environment. Think of it as creating a branch or a copy of your entity in a new location. The forking process is conceptually similar to exporting and importing, but it is more direct and integrated within the ELITEA interface, eliminating the need to download and upload files. Important Considerations: Same Environment Only: Forking is limited to transferring entities between projects within the same ELITEA environment. To move entities between different ELITEA environments (e.g., from an ELITEA Alita LAB environment to a new Nexus environment ), you should use the Export and Import features. Exclusion of Sensitive Data: For security reasons, the authentication information (such as API Keys, usernames, tokens, and passwords) are NOT being forked automatically. You will need to re-enter this information when forking the entity. No Collection Forking: Currently, forking of Collections is not supported. Preventing Duplicates: You cannot fork the same entity to the same project twice. ELITEA checks the uniqueness of the entity's 'object id' to prevent the creation of duplicates within a single project. If you need to create a duplicate of an entity within the same project, you can use the Export and Import features. How to Fork Entities The process for forking Agents, Prompts, and Datasources is similar. Log in to ELITEA : Access the ELITEA platform using your credentials. Navigate to the Project : Go to the specific project that contains the prompt, datasource, or agent you wish to fork. Access the Relevant Menu : Within the project, navigate to the menu corresponding to the entity type you want to fork (e.g., Prompts , Datasources , or Agents ). Locate the Entity for Fork : Find the specific entity you want to fork within the list. ELITEA offers two view options, and the fork process varies slightly depending on the view you are using: a. Card List View : If you are viewing your entities in a card format, click on the specific entity's card that you wish to fork. This will open the entity's details. Once open, locate and click the Fork [entity type] icon (e.g., Fork prompt , Fork datasource , or Fork agent ). b. Table View : If you are viewing your entities in a table format, locate the entity you want to fork in the list. In the Actions column, which is usually the last column in the table, click on the ellipsis icon ( ... ) next to the entity. A dropdown menu will appear. Select the Fork option from this menu. A Forking wizard will appear. In the dialog, select the Target Project where you want to create a copy of the entity. Click the Fork button. A copy of the entity will now be created in the selected target project. You will be forwarded to that entity created in the target project. Forking a Prompt Navigate to the Prompts menu within the project containing the prompt you wish to for. Locate the specific prompt you want to fork. Open the prompt and click the Fork prompt icon. Forking Wizard - Prompt Options: Select Project: Choose the target project where you want to fork the prompt. You can select your Private workspace or any other project where you have the necessary permissions. Select Versions to Fork: You can choose to fork all versions of the prompt or select specific versions. Note: It is always highly recommended to select and fork the 'latest' version of the prompt, otherwise you might have validation errors, preventing successful fork, or latest version will be cloned from one of the versions Select LLM Model: For each version you are forking, you can select the desired LLM Model. You can manually change the selected model to your preferred choice before completing the fork. Click the Fork button in the Forking Wizard . A copy of the prompt will now be created in the selected target project. You will be forwarded to that prompt created in the target project. Forking a Datasource Navigate to the Datasources menu within the project containing the datasource you wish to fork. Locate the specific datasource you want to fork. Open the datasource and click the Fork datasource icon. Forking Wizard - Datasource Options: Select Project: Choose the target project where you want to fork the datasource. Select Embedding Model: Choose the desired Embedding Model for the datasource. You can manually change the selected model to your preferred choice. Configure Models for Chat, Search, and Deduplicate: Select the desired LLM models for the Chat, Search, and Deduplicate functionalities of the datasource. Provide Mandatory Parameters: Fill in all mandatory fields and parameters, which are highlighted with an asterisk * . This typically includes the Storage type and various authentication parameters for the datasets. Select Datasets to Fork: Choose which datasets you want to fork along with the datasource. Provide Dataset Authentication: For any datasets requiring authentication, you will need to manually provide the necessary credentials (API Keys, usernames, tokens, passwords). Click the Fork button in the Forking Wizard . A copy of the datasource will now be created in the selected target project. You will be forwarded to that datasource created in the target project. Reindexing Datasets: After successfully forking the datasource, you must initiate the reindexing of the forked datasets. This step is crucial as the actual vector databases are not forked. Important Note: When forking a datasource, the actual datasets and authentication details are not copied to the new project: Reconfigure Dataset Connections: You will need to re-enter the storage details and connection parameters, including authentication credentials (API Keys, usernames, tokens, passwords) while forking. Reindex Datasets: You will need to initiate the reindexing of the datasets in the forked datasource within the target project. Forking an Agent Navigate to the Agents menu within the project containing the agent you wish to fork. Locate the specific agent you want to fork. Open the agent and click the Fork agent icon. Forking Wizard - Agent Options: Select Project: Choose the target project where you want to fork the agent. Select Versions to Fork: You can choose to fork all versions of the agent or select specific versions. Note: It is always highly recommended to select and fork the 'latest' version of the agent, otherwise you might have validation errors, preventing successful fork, or latest version will be cloned from one of the versions. Select LLM Model: For each version you are forking, you can select the desired LLM Model. You can manually change the selected model to your preferred choice before completing the import. Provide Mandatory Parameters: Fill in all mandatory fields and parameters, which are highlighted with an asterisk * . This typically includes various authentication parameters for the agent's toolkits. Select Tools to Fork: Choose which tools you want to fork along with the agent. Configure Tool Parameters: You can review and reconfigure the available options and parameters for each tool being forked. You can either use the default values from the toolkit or customize them as needed. Provide Toolkit Authentication: For any toolkits requiring authentication, you will need to manually provide the necessary credentials (API Keys, usernames, tokens, passwords). Click the Fork button in the Forking Wizard . A copy of the agent will now be created in the selected target project. You will be forwarded to that agent created in the target project. Important Note: When forking an agent, the authentication details for any configured toolkits are not copied to the new project. You will need to re-enter the authentication credentials (API Keys, usernames, tokens, passwords) for any toolkits while forking the agent. Forking Master Agents with Connected Entities ELITEA's forking feature extends its convenience to complex AI workflows by allowing you to fork a 'master' agent along with all its directly connected entities. When you fork a 'master' agent that has other agents, prompts, or datasources configured as toolkits, these nested entities will also be automatically forked to the target project. This capability significantly simplifies the process of transferring complex AI workflows between projects. Instead of forking each individual component separately, you can fork the main agent, and ELITEA will ensure that all the necessary supporting entities are also copied to the new project. Benefits of Forking Master Agents with Connected Entities: Simplified Transfer of Complex Workflows: Move entire AI workflows, including agents and their dependencies, in a single operation. Preservation of Relationships: Maintain the connections and configurations between the 'master' agent and its toolkits in the forked version. Time Efficiency: Avoid the manual effort of locating and forking each connected entity individually. How it Works: When you initiate the forking process for a 'master' agent, ELITEA identifies all the prompts, datasources, and child agents that are configured as toolkits for that 'master' agent. During the forking operation, copies of these connected entities are also created in the target project, ensuring that the forked 'master' agent has access to the necessary resources to function correctly. Important Considerations: As with individual entity forking, the actual datasets within datasources will need to be reindexed in the target project after forking the 'master' agent and its connected entities. As with individual entity forking, the authentication details for any configured toolkits and datasets are not copied to the new project. You will need to re-enter the authentication credentials (API Keys, usernames, tokens, passwords) for any toolkits and datasets while forking the 'master' agent. The forked connected entities will have the same names as their originals. If entities with the same names already exist in the target project, you may encounter naming conflicts. This feature makes it much easier to replicate and share complex AI workflows across different projects within your ELITEA environment. Best Practices and Use Cases Project Reorganization: Use forking to move prompts, datasources, or agents from a temporary or experimental project to a more permanent or production-ready project within the same environment. Team Collaboration: Fork entities into a shared project where multiple team members can access and utilize them. Experimentation and Development: Fork a production prompt or agent into a development project to test new ideas or modifications without risking changes to the original entity. Creating Project-Specific Copies: Fork a general-purpose prompt, agent or datasource into a specific project and then customize it further to meet the unique needs of that project. Streamlining Workflow: Instead of exporting and importing, use forking for quick transfers within the same ELITEA environment, especially when dealing with multiple entities. When to Use Forking vs Export/Import Forking: Use forking when you need to transfer entities between projects within the same ELITEA environment . It's a faster and more integrated process for internal transfers. Export/Import: Use Export and Import when you need to: Transfer entities between different ELITEA environments . Create backups of your entities. Create duplicates of entities within the same project . Share entities with users who may not have access to the same ELITEA environment. By understanding and utilizing the Forking feature effectively, you can significantly streamline your workflow within ELITEA, improve collaboration within your environment, and efficiently manage your AI assets across different projects.","title":"Forking Guide"},{"location":"feature-guides/core-features/forking/#forking-guide-transferring-entities-between-projects-in-elitea","text":"","title":"Forking Guide: Transferring Entities Between Projects in ELITEA"},{"location":"feature-guides/core-features/forking/#introduction","text":"This user guide provides a comprehensive overview of the Forking feature within ELITEA. Forking offers a streamlined method for transferring your valuable entities \u2013 Prompts , Datasources , and Agents \u2013 between different projects within the same ELITEA environment. The ability to fork entities provides a convenient and efficient way to manage your ELITEA assets. You can leverage this feature in various scenarios, including: Moving Entities Between Projects: Easily transfer prompts, datasources, and agents from one project to another within your current ELITEA environment. This is useful for reorganizing your work, sharing resources between teams, or consolidating entities into a central project. Duplicating Entities for Experimentation: Create a copy of an existing entity in a different project to experiment with modifications or new configurations without affecting the original entity. Sharing Resources Within an Environment: Make your carefully crafted prompts, configured datasources, and intelligent agents available to other projects within the same ELITEA instance. This guide will detail the process of forking each entity type, along with best practices and practical use cases to help you effectively utilize this feature.","title":"Introduction"},{"location":"feature-guides/core-features/forking/#forking-feature-a-general-overview","text":"The Forking feature in ELITEA provides a direct way to copy an existing entity (Prompt, Datasource, or Agent) from its current project to another project within the same ELITEA environment. Think of it as creating a branch or a copy of your entity in a new location. The forking process is conceptually similar to exporting and importing, but it is more direct and integrated within the ELITEA interface, eliminating the need to download and upload files. Important Considerations: Same Environment Only: Forking is limited to transferring entities between projects within the same ELITEA environment. To move entities between different ELITEA environments (e.g., from an ELITEA Alita LAB environment to a new Nexus environment ), you should use the Export and Import features. Exclusion of Sensitive Data: For security reasons, the authentication information (such as API Keys, usernames, tokens, and passwords) are NOT being forked automatically. You will need to re-enter this information when forking the entity. No Collection Forking: Currently, forking of Collections is not supported. Preventing Duplicates: You cannot fork the same entity to the same project twice. ELITEA checks the uniqueness of the entity's 'object id' to prevent the creation of duplicates within a single project. If you need to create a duplicate of an entity within the same project, you can use the Export and Import features.","title":"Forking Feature: A General Overview"},{"location":"feature-guides/core-features/forking/#how-to-fork-entities","text":"The process for forking Agents, Prompts, and Datasources is similar. Log in to ELITEA : Access the ELITEA platform using your credentials. Navigate to the Project : Go to the specific project that contains the prompt, datasource, or agent you wish to fork. Access the Relevant Menu : Within the project, navigate to the menu corresponding to the entity type you want to fork (e.g., Prompts , Datasources , or Agents ). Locate the Entity for Fork : Find the specific entity you want to fork within the list. ELITEA offers two view options, and the fork process varies slightly depending on the view you are using: a. Card List View : If you are viewing your entities in a card format, click on the specific entity's card that you wish to fork. This will open the entity's details. Once open, locate and click the Fork [entity type] icon (e.g., Fork prompt , Fork datasource , or Fork agent ). b. Table View : If you are viewing your entities in a table format, locate the entity you want to fork in the list. In the Actions column, which is usually the last column in the table, click on the ellipsis icon ( ... ) next to the entity. A dropdown menu will appear. Select the Fork option from this menu. A Forking wizard will appear. In the dialog, select the Target Project where you want to create a copy of the entity. Click the Fork button. A copy of the entity will now be created in the selected target project. You will be forwarded to that entity created in the target project.","title":"How to Fork Entities"},{"location":"feature-guides/core-features/forking/#forking-a-prompt","text":"Navigate to the Prompts menu within the project containing the prompt you wish to for. Locate the specific prompt you want to fork. Open the prompt and click the Fork prompt icon. Forking Wizard - Prompt Options: Select Project: Choose the target project where you want to fork the prompt. You can select your Private workspace or any other project where you have the necessary permissions. Select Versions to Fork: You can choose to fork all versions of the prompt or select specific versions. Note: It is always highly recommended to select and fork the 'latest' version of the prompt, otherwise you might have validation errors, preventing successful fork, or latest version will be cloned from one of the versions Select LLM Model: For each version you are forking, you can select the desired LLM Model. You can manually change the selected model to your preferred choice before completing the fork. Click the Fork button in the Forking Wizard . A copy of the prompt will now be created in the selected target project. You will be forwarded to that prompt created in the target project.","title":"Forking a Prompt"},{"location":"feature-guides/core-features/forking/#forking-a-datasource","text":"Navigate to the Datasources menu within the project containing the datasource you wish to fork. Locate the specific datasource you want to fork. Open the datasource and click the Fork datasource icon. Forking Wizard - Datasource Options: Select Project: Choose the target project where you want to fork the datasource. Select Embedding Model: Choose the desired Embedding Model for the datasource. You can manually change the selected model to your preferred choice. Configure Models for Chat, Search, and Deduplicate: Select the desired LLM models for the Chat, Search, and Deduplicate functionalities of the datasource. Provide Mandatory Parameters: Fill in all mandatory fields and parameters, which are highlighted with an asterisk * . This typically includes the Storage type and various authentication parameters for the datasets. Select Datasets to Fork: Choose which datasets you want to fork along with the datasource. Provide Dataset Authentication: For any datasets requiring authentication, you will need to manually provide the necessary credentials (API Keys, usernames, tokens, passwords). Click the Fork button in the Forking Wizard . A copy of the datasource will now be created in the selected target project. You will be forwarded to that datasource created in the target project. Reindexing Datasets: After successfully forking the datasource, you must initiate the reindexing of the forked datasets. This step is crucial as the actual vector databases are not forked. Important Note: When forking a datasource, the actual datasets and authentication details are not copied to the new project: Reconfigure Dataset Connections: You will need to re-enter the storage details and connection parameters, including authentication credentials (API Keys, usernames, tokens, passwords) while forking. Reindex Datasets: You will need to initiate the reindexing of the datasets in the forked datasource within the target project.","title":"Forking a Datasource"},{"location":"feature-guides/core-features/forking/#forking-an-agent","text":"Navigate to the Agents menu within the project containing the agent you wish to fork. Locate the specific agent you want to fork. Open the agent and click the Fork agent icon. Forking Wizard - Agent Options: Select Project: Choose the target project where you want to fork the agent. Select Versions to Fork: You can choose to fork all versions of the agent or select specific versions. Note: It is always highly recommended to select and fork the 'latest' version of the agent, otherwise you might have validation errors, preventing successful fork, or latest version will be cloned from one of the versions. Select LLM Model: For each version you are forking, you can select the desired LLM Model. You can manually change the selected model to your preferred choice before completing the import. Provide Mandatory Parameters: Fill in all mandatory fields and parameters, which are highlighted with an asterisk * . This typically includes various authentication parameters for the agent's toolkits. Select Tools to Fork: Choose which tools you want to fork along with the agent. Configure Tool Parameters: You can review and reconfigure the available options and parameters for each tool being forked. You can either use the default values from the toolkit or customize them as needed. Provide Toolkit Authentication: For any toolkits requiring authentication, you will need to manually provide the necessary credentials (API Keys, usernames, tokens, passwords). Click the Fork button in the Forking Wizard . A copy of the agent will now be created in the selected target project. You will be forwarded to that agent created in the target project. Important Note: When forking an agent, the authentication details for any configured toolkits are not copied to the new project. You will need to re-enter the authentication credentials (API Keys, usernames, tokens, passwords) for any toolkits while forking the agent.","title":"Forking an Agent"},{"location":"feature-guides/core-features/forking/#forking-master-agents-with-connected-entities","text":"ELITEA's forking feature extends its convenience to complex AI workflows by allowing you to fork a 'master' agent along with all its directly connected entities. When you fork a 'master' agent that has other agents, prompts, or datasources configured as toolkits, these nested entities will also be automatically forked to the target project. This capability significantly simplifies the process of transferring complex AI workflows between projects. Instead of forking each individual component separately, you can fork the main agent, and ELITEA will ensure that all the necessary supporting entities are also copied to the new project. Benefits of Forking Master Agents with Connected Entities: Simplified Transfer of Complex Workflows: Move entire AI workflows, including agents and their dependencies, in a single operation. Preservation of Relationships: Maintain the connections and configurations between the 'master' agent and its toolkits in the forked version. Time Efficiency: Avoid the manual effort of locating and forking each connected entity individually. How it Works: When you initiate the forking process for a 'master' agent, ELITEA identifies all the prompts, datasources, and child agents that are configured as toolkits for that 'master' agent. During the forking operation, copies of these connected entities are also created in the target project, ensuring that the forked 'master' agent has access to the necessary resources to function correctly. Important Considerations: As with individual entity forking, the actual datasets within datasources will need to be reindexed in the target project after forking the 'master' agent and its connected entities. As with individual entity forking, the authentication details for any configured toolkits and datasets are not copied to the new project. You will need to re-enter the authentication credentials (API Keys, usernames, tokens, passwords) for any toolkits and datasets while forking the 'master' agent. The forked connected entities will have the same names as their originals. If entities with the same names already exist in the target project, you may encounter naming conflicts. This feature makes it much easier to replicate and share complex AI workflows across different projects within your ELITEA environment.","title":"Forking Master Agents with Connected Entities"},{"location":"feature-guides/core-features/forking/#best-practices-and-use-cases","text":"Project Reorganization: Use forking to move prompts, datasources, or agents from a temporary or experimental project to a more permanent or production-ready project within the same environment. Team Collaboration: Fork entities into a shared project where multiple team members can access and utilize them. Experimentation and Development: Fork a production prompt or agent into a development project to test new ideas or modifications without risking changes to the original entity. Creating Project-Specific Copies: Fork a general-purpose prompt, agent or datasource into a specific project and then customize it further to meet the unique needs of that project. Streamlining Workflow: Instead of exporting and importing, use forking for quick transfers within the same ELITEA environment, especially when dealing with multiple entities.","title":"Best Practices and Use Cases"},{"location":"feature-guides/core-features/forking/#when-to-use-forking-vs-exportimport","text":"Forking: Use forking when you need to transfer entities between projects within the same ELITEA environment . It's a faster and more integrated process for internal transfers. Export/Import: Use Export and Import when you need to: Transfer entities between different ELITEA environments . Create backups of your entities. Create duplicates of entities within the same project . Share entities with users who may not have access to the same ELITEA environment. By understanding and utilizing the Forking feature effectively, you can significantly streamline your workflow within ELITEA, improve collaboration within your environment, and efficiently manage your AI assets across different projects.","title":"When to Use Forking vs Export/Import"},{"location":"feature-guides/core-features/integrations/","text":"Integrations and Configurations Guide Introduction This user guide provides a comprehensive overview of the Integrations feature in ELITEA and how to leverage these integrations through Configurations within Agent toolkits. These powerful functionalities enable seamless connections with external platforms, streamlining workflows and enhancing collaboration across different tools. The ability to integrate with external services and manage their configurations within ELITEA offers significant benefits, including: Enhanced Workflow Efficiency: Connect ELITEA with your existing tools like Jira, Confluence, GitHub, and TestRail to automate tasks, share information, and reduce manual data entry. Centralized Management: Manage connections to various external services from a single location within ELITEA, simplifying administration and improving visibility. Customized Authentication: Configure authentication settings for external tools at different levels (personal or project-specific) to meet various security and access requirements. Flexibility and Reusability: Create reusable integration configurations that can be easily applied to multiple Agent toolkits, saving time and effort. This guide will detail the process of setting up Integrations and utilizing Configurations within Agent toolkits, along with best practices and practical use cases to help you effectively leverage these features. Important Note: In ELITEA, your work is organized within three distinct types of spaces: Private Workspace: This is your personal area within ELITEA. You have exclusive access to all the content you create and manage here. Think of it as your individual sandbox where you can experiment and build your AI solutions. This includes your personal Chats, Agents, Prompts, Datasources, Collections and Artifacts. Team Project: These are collaborative spaces where multiple users are added as team members. Within a Team project, all members have access to the project's content, fostering collaboration and shared development. This shared content includes Chats, Agents, Prompts, Datasources, Collections and Artifacts that belong to that specific project. Public Project: This space allows you to engage with the wider ELITEA community and explore content shared by other users. This shared content includes Chats, Agents, Prompts, Datasources, and Collections. Understanding the distinction between your Private Workspace , where you have exclusive access to your content, and Team Projects , which are collaborative spaces where team members share access to project resources, is crucial for effectively managing Integrations and Configurations within ELITEA. Integration Feature: Connecting ELITEA with External Platforms The Integrations menu in ELITEA serves as a central hub for establishing connections with external platforms. By configuring integrations, you make these external services available for use within your Agent toolkits. Key Aspects of the Integration Feature: Centralized Connection Management: The Integrations menu provides a single point of control for managing connections to various external services. Supported Platforms: ELITEA currently supports integrations with Jira , Confluence , GitHub , and TestRail , with plans to add more services in future releases. Reusable Configurations: Once an integration is configured, it can be reused across multiple Agent toolkits within the same project or your Private workspace. Private and Project Level Integrations: You can create integrations within your Private workspace for personal use or within Team projects for shared access among project members. Secure Authentication: ELITEA offers various secure authentication methods for connecting to external platforms, including API Keys, Tokens, Passwords, and Private Keys, with the option to store sensitive credentials securely using Secrets . Accessing the Integrations Menu: Log in to ELITEA. Navigate to either your Private workspace or the specific Team project where you want to configure the integration. Click on the Your Avatar icon located at the top right corner of the page to open the Settings sidebar menu. Click the Integrations to navigate to that section. Setting up an Integration: In the Integrations menu, click the + icon to create a new integration. A pop-up window will appear, prompting you to Select Integration Type . Choose the service you want to integrate with (e.g., Confluence, GitHub, Jira, TestRail). You will be presented with a configuration form specific to the selected integration type. Follow the detailed steps below for each service. Configure the Intergation parameters. Click the Save button to finalize the integration setup. After saving, the newly created integration will be added to the Integrations table, making it available for selection and reuse in the Configurations section of your Agent toolkits. You can manage your saved integrations directly from the Integrations table. In the Actions column, click on the ellipsis icon ( ... ) next to a specific integration, you will reveal options to Edit the integration details, Set as Default to make it the default one for that Integration type, or Delete the integration if it's no longer needed. Confluence Integration Setup To enable connection with your Confluence instance: Initiate New Integration: Click the + icon in the Integrations menu and select Confluence . Enter Integration Details: Name: Provide a descriptive name for this integration (e.g., \"Confluence - KB Name\"). URL: Enter the base URL of your Confluence instance (e.g., https://kb.epam.com/ ). Authentication Options: Choose your preferred authentication method: API Key: Select API Key . Enter your Confluence API key in the Password field or select a pre-configured Secret from the dropdown. Enter the associated Username for the API key. Token: Select Token . Enter your Confluence API token in the Password field or select a pre-configured Secret from the dropdown. Username: Select Username . Enter your Confluence Username . Enter your Confluence Password or select a pre-configured Secret from the dropdown. Hosting Option: Select the appropriate hosting type: Cloud: For Confluence instances hosted on Atlassian's cloud. Server: For self-hosted or enterprise Confluence instances. Important Note: For connecting to Epam's Confluence, select Server . Set as Default: Optionally, check this box to make this integration the default Confluence connection for the Private workspace or Team project. Save the Integration: Click the Save button. GitHub Integration Setup To connect with your GitHub repositories: Initiate New Integration: Click the + icon in the Integrations menu and select GitHub . Enter Integration Details: Name: Provide a descriptive name for this integration (e.g., \"GitHub - Repo Name\"). Authentication Options: Choose your preferred authentication method: Private Key: Select Private Key . Enter the App ID for your GitHub App. Enter the Private Key in the Password field or select a pre-configured Secret . Token: Select Token . Enter your GitHub Personal Access Token in the Password field or select a pre-configured Secret . Password: Select Password . Enter your GitHub Username . Enter your GitHub account Password in the Password field or select a pre-configured Secret . Anonymous: Select Anonymous if no authentication is required for the specific GitHub repository you intend to access (typically for public repositories). Set as Default: Optionally, check this box to make this integration the default GitHub connection for the Private workspace or Team project. Save the Integration: Click the Save button. Jira Integration Setup To enable connection with your Jira instance: Initiate New Integration: Click the + icon in the Integrations menu and select Jira . Enter Integration Details: Name: Provide a descriptive name for this integration (e.g., \"Jira - Project Name\"). URL: Enter the base URL of your Jira instance (e.g., https://jiraeu.epam.com/ ). Authentication Options: Choose your preferred authentication method: API Key: Select API Key . Enter your Jira API key in the Password field or select a pre-configured Secret . Enter the associated Username for the API key. Token: Select Token . Enter your Jira API token in the Password field or select a pre-configured Secret . Username: Select Username . Enter your Jira Username . Enter your Jira Password or select a pre-configured Secret . Hosting Option: Select the appropriate hosting type: Cloud: For Jira instances hosted on Atlassian's cloud. Server: For self-hosted or enterprise Jira instances. Important Note: For connecting to Epam's Jira, select Server . Set as Default: Optionally, check this box to make this integration the default Jira connection for the Private workspace or Team project. Save the Integration: Click the Save button. TestRail Integration Setup To connect with your TestRail instance: Initiate New Integration: Click the + icon in the Integrations menu and select TestRail . Enter Integration Details: Name: Provide a descriptive name for this integration (e.g., \"TestRail - Project Name\"). URL: Enter the base URL of your TestRail instance (e.g., https://testrail.epam.com/ ). Email: Enter the email address associated with your TestRail account. Authentication Options: Choose your preferred authentication method: Password: Enter your TestRail account Password in the Password field or select a pre-configured Secret . Set as Default: Optionally, check this box to make this integration the default TestRail connection for the Private workspace or Team project. Save the Integration: Click the Save button. Important Considerations for Integrations When setting up integrations in ELITEA, it's important to understand the following constraints and best practices: Uniqueness per Integration Type: Jira, Confluence, and TestRail: Within your Private workspace or a Team project, you can create multiple integrations for Jira, Confluence, and TestRail. The uniqueness of these integrations is determined by the URL of the respective service. This means you can connect to different Jira instances, Confluence spaces, or TestRail accounts by creating separate integrations for each unique URL. GitHub: In contrast to Jira, Confluence, and TestRail, you can create only one GitHub integration within your Private workspace or a Team project. This single integration will serve as the connection point for all your GitHub interactions within that space. Authentication Verification: Always double-check the authentication details you provide for each integration. Incorrect credentials will prevent ELITEA from successfully connecting to the external service. Ensure that the API keys, tokens, passwords, or private keys you enter are accurate and have the necessary permissions to access the desired resources on the external platform. Verifying the authentication setup is crucial for ensuring your integrations (and the configurations that use them) function correctly. Configurations: Applying Integrations to Agent Toolkits Configurations provide the mechanism to utilize the integrations you've set up within your Agent toolkits. When configuring a toolkit for Jira, Confluence, GitHub, or TestRail within an Agent, you have the option to select a pre-configured integration , eliminating the need to enter authentication details directly into the toolkit settings. Configuration Options: When configuring a toolkit, you will typically find a dropdown menu or a selection field related to \"Configuration\" or \"Integration.\" This section offers three primary options: Create manual configuration: This option allows you to enter all the necessary connection details (URL, authentication credentials) directly within the toolkit settings. This is useful for one-off connections or when you don't want to create a reusable integration. Create private configuration: Selecting this option will create a new integration configuration specifically for this toolkit. The entered details will be used for this toolkit and will also be saved as a reusable integration in your Private workspace's Integrations page. This allows you to reuse this configuration in other toolkits within your Private workspace or Team projects. Create project configuration: Similar to the private configuration, this option creates a new integration configuration for the toolkit. The details will be used for this toolkit and will also be saved as a reusable integration in the current Team project's Integrations page, making it available for other agents and toolkits within that project . Select existing integration: This option allows you to choose from the list of integrations that have already been configured in your Private workspace or the current Team project's Integrations page. Selecting an existing integration automatically populates the toolkit's connection details, simplifying the setup process. Create manual configuration Click the + Agent button located at the top right corner or open already created Agent. Click the + icon or open already created toolkit under TOOLS section. Select the desired tool (Confluence, Jira, GitHub, TestRail) from the dropdown list. The New tool configuration section is opened. Select the Manual configuration under the Configuration option. Depending on the selected toolkit fill all required fields and options . Click the Save button to apply changes. Create private configuration Click the + Agent button located at the top right corner or open already created Agent. Click the + icon or open already created toolkit under TOOLS section. Select the desired tool (Confluence, Jira, GitHub, TestRail) from the dropdown list. The New tool configuration section is opened. Select the Create private configuration under the Configuration option. Provide the Configuration Name . Depending on the selected toolkit fill all required fields and options . Click the Save configuration button to save the changes and add this configuration as reusable integration in your Private workspace's Integrations page. Create project configuration Click the + Agent button located at the top right corner or open already created Agent. Click the + icon or open already created toolkit under TOOLS section. Select the desired tool (Confluence, Jira, GitHub, TestRail) from the dropdown list. The New tool configuration section is opened. Select the Create project configuration under the Configuration option. Provide the Configuration Name . Depending on the selected toolkit fill all required fields and options . Click the Save configuration button to save the changes and add this configuration as reusable integration in your Team project's Integrations page. Configurations: Selecting existing Integrations Once you have configured integrations in your Private workspace or within a Team project, these integrations become available for selection when configuring toolkits in your Agents. This allows you to easily reuse established connections to external platforms. When adding or editing a Jira, Confluence, GitHub, or TestRail toolkit in an Agent, you will find a Configuration dropdown list. This list displays all the available integrations of the corresponding type that you can use for that specific toolkit. Identifying Integration Scope: To help you distinguish between integrations configured in your Private workspace and those configured within the current Team project, ELITEA uses distinct icons: Private Integration : Integrations configured in your Private workspace are indicated by a person icon (\ud83d\udc64) at the beginning of the integration URL or name in the dropdown list. Project Integration : Integrations configured within the current Team project are indicated by a folder icon (\ud83d\udcc1) at the beginning of the integration URL or name. Integration Naming Convention: The naming convention for integrations in the dropdown list also helps you identify the specific connection: Jira , Confluence , and TestRail Integrations: These integrations are listed using their configured URL. This ensures you can easily differentiate between connections to different instances of these tools (e.g., different Jira servers or Confluence spaces). GitHub Integrations: Since only one GitHub integration is allowed per workspace or project, these integrations are simply listed as GitHub . Toolkit-Specific Integration Filtering : The Configuration dropdown list is context-aware. When configuring a specific type of toolkit (e.g., a Jira toolkit), only integrations of that specific type (Jira integrations) will be displayed for selection. This prevents you from accidentally selecting an integration intended for a different tool. By understanding these visual cues and naming conventions, you can easily select the appropriate pre-configured integration for your Agent toolkit, simplifying the setup process and ensuring consistent authentication. Best Practices and Use Cases Here are some examples of how to effectively utilize Integrations and Configurations in your ELITEA workflows: Use Case 1: Individual Jira Credentials for User Story Management Scenario: You are building an agent workflow to create and publish user stories in Jira. You want each Business Analyst (BA) using the agent to authenticate with their own Jira credentials to ensure traceability of who created which user story. Solution: Instruct each BA to configure their personal Jira integration in their Private workspace's Integrations page. In the project where the agent is being configured, when setting up the Jira toolkit for publishing user stories, select already created Private configuration option. This will allow each BA running the agent to use their own private Jira integration, using their personal credentials for authentication. Use Case 2: Service Account for GitHub Code Access Scenario: You are creating an agent workflow to read code from a GitHub repository to generate automation test cases. You have a dedicated service account for accessing the GitHub repository and want to use these credentials consistently for this purpose. Solution: The team manager or a designated member configures a GitHub integration in the Team project Integrations page using the service account's credentials. When configuring the GitHub toolkit in the agent for reading code, select already created Project configuration option and choose the integration configured with the service account. Use Case 3: Mixed Authentication for Confluence and TestRail Workflow Scenario: You are building an agent workflow to read information from Confluence pages and then publish manual test cases in TestRail. You want to use a service account for accessing Confluence but require each Quality Assurance (QA) engineer to use their own TestRail credentials for publishing test cases. Solution: The team manager configures a Confluence integration in the Team project Integrations page using the service account's credentials. Instruct each QA engineer to configure their personal TestRail integration in their Private workspace's Integrations page. When configuring the agent: For the Confluence toolkit, use already created Project configuration and choose the service account integration. For the TestRail toolkit, use already created Private configuration option, allowing each QA to use their own TestRail integration. By strategically using Integrations and Configurations , you can create flexible and secure agent workflows that cater to various authentication needs and enhance collaboration within your ELITEA environment.","title":"Integrations Guide"},{"location":"feature-guides/core-features/integrations/#integrations-and-configurations-guide","text":"","title":"Integrations and Configurations Guide"},{"location":"feature-guides/core-features/integrations/#introduction","text":"This user guide provides a comprehensive overview of the Integrations feature in ELITEA and how to leverage these integrations through Configurations within Agent toolkits. These powerful functionalities enable seamless connections with external platforms, streamlining workflows and enhancing collaboration across different tools. The ability to integrate with external services and manage their configurations within ELITEA offers significant benefits, including: Enhanced Workflow Efficiency: Connect ELITEA with your existing tools like Jira, Confluence, GitHub, and TestRail to automate tasks, share information, and reduce manual data entry. Centralized Management: Manage connections to various external services from a single location within ELITEA, simplifying administration and improving visibility. Customized Authentication: Configure authentication settings for external tools at different levels (personal or project-specific) to meet various security and access requirements. Flexibility and Reusability: Create reusable integration configurations that can be easily applied to multiple Agent toolkits, saving time and effort. This guide will detail the process of setting up Integrations and utilizing Configurations within Agent toolkits, along with best practices and practical use cases to help you effectively leverage these features. Important Note: In ELITEA, your work is organized within three distinct types of spaces: Private Workspace: This is your personal area within ELITEA. You have exclusive access to all the content you create and manage here. Think of it as your individual sandbox where you can experiment and build your AI solutions. This includes your personal Chats, Agents, Prompts, Datasources, Collections and Artifacts. Team Project: These are collaborative spaces where multiple users are added as team members. Within a Team project, all members have access to the project's content, fostering collaboration and shared development. This shared content includes Chats, Agents, Prompts, Datasources, Collections and Artifacts that belong to that specific project. Public Project: This space allows you to engage with the wider ELITEA community and explore content shared by other users. This shared content includes Chats, Agents, Prompts, Datasources, and Collections. Understanding the distinction between your Private Workspace , where you have exclusive access to your content, and Team Projects , which are collaborative spaces where team members share access to project resources, is crucial for effectively managing Integrations and Configurations within ELITEA.","title":"Introduction"},{"location":"feature-guides/core-features/integrations/#integration-feature-connecting-elitea-with-external-platforms","text":"The Integrations menu in ELITEA serves as a central hub for establishing connections with external platforms. By configuring integrations, you make these external services available for use within your Agent toolkits. Key Aspects of the Integration Feature: Centralized Connection Management: The Integrations menu provides a single point of control for managing connections to various external services. Supported Platforms: ELITEA currently supports integrations with Jira , Confluence , GitHub , and TestRail , with plans to add more services in future releases. Reusable Configurations: Once an integration is configured, it can be reused across multiple Agent toolkits within the same project or your Private workspace. Private and Project Level Integrations: You can create integrations within your Private workspace for personal use or within Team projects for shared access among project members. Secure Authentication: ELITEA offers various secure authentication methods for connecting to external platforms, including API Keys, Tokens, Passwords, and Private Keys, with the option to store sensitive credentials securely using Secrets . Accessing the Integrations Menu: Log in to ELITEA. Navigate to either your Private workspace or the specific Team project where you want to configure the integration. Click on the Your Avatar icon located at the top right corner of the page to open the Settings sidebar menu. Click the Integrations to navigate to that section. Setting up an Integration: In the Integrations menu, click the + icon to create a new integration. A pop-up window will appear, prompting you to Select Integration Type . Choose the service you want to integrate with (e.g., Confluence, GitHub, Jira, TestRail). You will be presented with a configuration form specific to the selected integration type. Follow the detailed steps below for each service. Configure the Intergation parameters. Click the Save button to finalize the integration setup. After saving, the newly created integration will be added to the Integrations table, making it available for selection and reuse in the Configurations section of your Agent toolkits. You can manage your saved integrations directly from the Integrations table. In the Actions column, click on the ellipsis icon ( ... ) next to a specific integration, you will reveal options to Edit the integration details, Set as Default to make it the default one for that Integration type, or Delete the integration if it's no longer needed.","title":"Integration Feature: Connecting ELITEA with External Platforms"},{"location":"feature-guides/core-features/integrations/#confluence-integration-setup","text":"To enable connection with your Confluence instance: Initiate New Integration: Click the + icon in the Integrations menu and select Confluence . Enter Integration Details: Name: Provide a descriptive name for this integration (e.g., \"Confluence - KB Name\"). URL: Enter the base URL of your Confluence instance (e.g., https://kb.epam.com/ ). Authentication Options: Choose your preferred authentication method: API Key: Select API Key . Enter your Confluence API key in the Password field or select a pre-configured Secret from the dropdown. Enter the associated Username for the API key. Token: Select Token . Enter your Confluence API token in the Password field or select a pre-configured Secret from the dropdown. Username: Select Username . Enter your Confluence Username . Enter your Confluence Password or select a pre-configured Secret from the dropdown. Hosting Option: Select the appropriate hosting type: Cloud: For Confluence instances hosted on Atlassian's cloud. Server: For self-hosted or enterprise Confluence instances. Important Note: For connecting to Epam's Confluence, select Server . Set as Default: Optionally, check this box to make this integration the default Confluence connection for the Private workspace or Team project. Save the Integration: Click the Save button.","title":"Confluence Integration Setup"},{"location":"feature-guides/core-features/integrations/#github-integration-setup","text":"To connect with your GitHub repositories: Initiate New Integration: Click the + icon in the Integrations menu and select GitHub . Enter Integration Details: Name: Provide a descriptive name for this integration (e.g., \"GitHub - Repo Name\"). Authentication Options: Choose your preferred authentication method: Private Key: Select Private Key . Enter the App ID for your GitHub App. Enter the Private Key in the Password field or select a pre-configured Secret . Token: Select Token . Enter your GitHub Personal Access Token in the Password field or select a pre-configured Secret . Password: Select Password . Enter your GitHub Username . Enter your GitHub account Password in the Password field or select a pre-configured Secret . Anonymous: Select Anonymous if no authentication is required for the specific GitHub repository you intend to access (typically for public repositories). Set as Default: Optionally, check this box to make this integration the default GitHub connection for the Private workspace or Team project. Save the Integration: Click the Save button.","title":"GitHub Integration Setup"},{"location":"feature-guides/core-features/integrations/#jira-integration-setup","text":"To enable connection with your Jira instance: Initiate New Integration: Click the + icon in the Integrations menu and select Jira . Enter Integration Details: Name: Provide a descriptive name for this integration (e.g., \"Jira - Project Name\"). URL: Enter the base URL of your Jira instance (e.g., https://jiraeu.epam.com/ ). Authentication Options: Choose your preferred authentication method: API Key: Select API Key . Enter your Jira API key in the Password field or select a pre-configured Secret . Enter the associated Username for the API key. Token: Select Token . Enter your Jira API token in the Password field or select a pre-configured Secret . Username: Select Username . Enter your Jira Username . Enter your Jira Password or select a pre-configured Secret . Hosting Option: Select the appropriate hosting type: Cloud: For Jira instances hosted on Atlassian's cloud. Server: For self-hosted or enterprise Jira instances. Important Note: For connecting to Epam's Jira, select Server . Set as Default: Optionally, check this box to make this integration the default Jira connection for the Private workspace or Team project. Save the Integration: Click the Save button.","title":"Jira Integration Setup"},{"location":"feature-guides/core-features/integrations/#testrail-integration-setup","text":"To connect with your TestRail instance: Initiate New Integration: Click the + icon in the Integrations menu and select TestRail . Enter Integration Details: Name: Provide a descriptive name for this integration (e.g., \"TestRail - Project Name\"). URL: Enter the base URL of your TestRail instance (e.g., https://testrail.epam.com/ ). Email: Enter the email address associated with your TestRail account. Authentication Options: Choose your preferred authentication method: Password: Enter your TestRail account Password in the Password field or select a pre-configured Secret . Set as Default: Optionally, check this box to make this integration the default TestRail connection for the Private workspace or Team project. Save the Integration: Click the Save button.","title":"TestRail Integration Setup"},{"location":"feature-guides/core-features/integrations/#important-considerations-for-integrations","text":"When setting up integrations in ELITEA, it's important to understand the following constraints and best practices: Uniqueness per Integration Type: Jira, Confluence, and TestRail: Within your Private workspace or a Team project, you can create multiple integrations for Jira, Confluence, and TestRail. The uniqueness of these integrations is determined by the URL of the respective service. This means you can connect to different Jira instances, Confluence spaces, or TestRail accounts by creating separate integrations for each unique URL. GitHub: In contrast to Jira, Confluence, and TestRail, you can create only one GitHub integration within your Private workspace or a Team project. This single integration will serve as the connection point for all your GitHub interactions within that space. Authentication Verification: Always double-check the authentication details you provide for each integration. Incorrect credentials will prevent ELITEA from successfully connecting to the external service. Ensure that the API keys, tokens, passwords, or private keys you enter are accurate and have the necessary permissions to access the desired resources on the external platform. Verifying the authentication setup is crucial for ensuring your integrations (and the configurations that use them) function correctly.","title":"Important Considerations for Integrations"},{"location":"feature-guides/core-features/integrations/#configurations-applying-integrations-to-agent-toolkits","text":"Configurations provide the mechanism to utilize the integrations you've set up within your Agent toolkits. When configuring a toolkit for Jira, Confluence, GitHub, or TestRail within an Agent, you have the option to select a pre-configured integration , eliminating the need to enter authentication details directly into the toolkit settings. Configuration Options: When configuring a toolkit, you will typically find a dropdown menu or a selection field related to \"Configuration\" or \"Integration.\" This section offers three primary options: Create manual configuration: This option allows you to enter all the necessary connection details (URL, authentication credentials) directly within the toolkit settings. This is useful for one-off connections or when you don't want to create a reusable integration. Create private configuration: Selecting this option will create a new integration configuration specifically for this toolkit. The entered details will be used for this toolkit and will also be saved as a reusable integration in your Private workspace's Integrations page. This allows you to reuse this configuration in other toolkits within your Private workspace or Team projects. Create project configuration: Similar to the private configuration, this option creates a new integration configuration for the toolkit. The details will be used for this toolkit and will also be saved as a reusable integration in the current Team project's Integrations page, making it available for other agents and toolkits within that project . Select existing integration: This option allows you to choose from the list of integrations that have already been configured in your Private workspace or the current Team project's Integrations page. Selecting an existing integration automatically populates the toolkit's connection details, simplifying the setup process.","title":"Configurations: Applying Integrations to Agent Toolkits"},{"location":"feature-guides/core-features/integrations/#create-manual-configuration","text":"Click the + Agent button located at the top right corner or open already created Agent. Click the + icon or open already created toolkit under TOOLS section. Select the desired tool (Confluence, Jira, GitHub, TestRail) from the dropdown list. The New tool configuration section is opened. Select the Manual configuration under the Configuration option. Depending on the selected toolkit fill all required fields and options . Click the Save button to apply changes.","title":"Create manual configuration"},{"location":"feature-guides/core-features/integrations/#create-private-configuration","text":"Click the + Agent button located at the top right corner or open already created Agent. Click the + icon or open already created toolkit under TOOLS section. Select the desired tool (Confluence, Jira, GitHub, TestRail) from the dropdown list. The New tool configuration section is opened. Select the Create private configuration under the Configuration option. Provide the Configuration Name . Depending on the selected toolkit fill all required fields and options . Click the Save configuration button to save the changes and add this configuration as reusable integration in your Private workspace's Integrations page.","title":"Create private configuration"},{"location":"feature-guides/core-features/integrations/#create-project-configuration","text":"Click the + Agent button located at the top right corner or open already created Agent. Click the + icon or open already created toolkit under TOOLS section. Select the desired tool (Confluence, Jira, GitHub, TestRail) from the dropdown list. The New tool configuration section is opened. Select the Create project configuration under the Configuration option. Provide the Configuration Name . Depending on the selected toolkit fill all required fields and options . Click the Save configuration button to save the changes and add this configuration as reusable integration in your Team project's Integrations page.","title":"Create project configuration"},{"location":"feature-guides/core-features/integrations/#configurations-selecting-existing-integrations","text":"Once you have configured integrations in your Private workspace or within a Team project, these integrations become available for selection when configuring toolkits in your Agents. This allows you to easily reuse established connections to external platforms. When adding or editing a Jira, Confluence, GitHub, or TestRail toolkit in an Agent, you will find a Configuration dropdown list. This list displays all the available integrations of the corresponding type that you can use for that specific toolkit. Identifying Integration Scope: To help you distinguish between integrations configured in your Private workspace and those configured within the current Team project, ELITEA uses distinct icons: Private Integration : Integrations configured in your Private workspace are indicated by a person icon (\ud83d\udc64) at the beginning of the integration URL or name in the dropdown list. Project Integration : Integrations configured within the current Team project are indicated by a folder icon (\ud83d\udcc1) at the beginning of the integration URL or name. Integration Naming Convention: The naming convention for integrations in the dropdown list also helps you identify the specific connection: Jira , Confluence , and TestRail Integrations: These integrations are listed using their configured URL. This ensures you can easily differentiate between connections to different instances of these tools (e.g., different Jira servers or Confluence spaces). GitHub Integrations: Since only one GitHub integration is allowed per workspace or project, these integrations are simply listed as GitHub . Toolkit-Specific Integration Filtering : The Configuration dropdown list is context-aware. When configuring a specific type of toolkit (e.g., a Jira toolkit), only integrations of that specific type (Jira integrations) will be displayed for selection. This prevents you from accidentally selecting an integration intended for a different tool. By understanding these visual cues and naming conventions, you can easily select the appropriate pre-configured integration for your Agent toolkit, simplifying the setup process and ensuring consistent authentication.","title":"Configurations: Selecting existing Integrations"},{"location":"feature-guides/core-features/integrations/#best-practices-and-use-cases","text":"Here are some examples of how to effectively utilize Integrations and Configurations in your ELITEA workflows:","title":"Best Practices and Use Cases"},{"location":"feature-guides/core-features/integrations/#use-case-1-individual-jira-credentials-for-user-story-management","text":"Scenario: You are building an agent workflow to create and publish user stories in Jira. You want each Business Analyst (BA) using the agent to authenticate with their own Jira credentials to ensure traceability of who created which user story. Solution: Instruct each BA to configure their personal Jira integration in their Private workspace's Integrations page. In the project where the agent is being configured, when setting up the Jira toolkit for publishing user stories, select already created Private configuration option. This will allow each BA running the agent to use their own private Jira integration, using their personal credentials for authentication.","title":"Use Case 1: Individual Jira Credentials for User Story Management"},{"location":"feature-guides/core-features/integrations/#use-case-2-service-account-for-github-code-access","text":"Scenario: You are creating an agent workflow to read code from a GitHub repository to generate automation test cases. You have a dedicated service account for accessing the GitHub repository and want to use these credentials consistently for this purpose. Solution: The team manager or a designated member configures a GitHub integration in the Team project Integrations page using the service account's credentials. When configuring the GitHub toolkit in the agent for reading code, select already created Project configuration option and choose the integration configured with the service account.","title":"Use Case 2: Service Account for GitHub Code Access"},{"location":"feature-guides/core-features/integrations/#use-case-3-mixed-authentication-for-confluence-and-testrail-workflow","text":"Scenario: You are building an agent workflow to read information from Confluence pages and then publish manual test cases in TestRail. You want to use a service account for accessing Confluence but require each Quality Assurance (QA) engineer to use their own TestRail credentials for publishing test cases. Solution: The team manager configures a Confluence integration in the Team project Integrations page using the service account's credentials. Instruct each QA engineer to configure their personal TestRail integration in their Private workspace's Integrations page. When configuring the agent: For the Confluence toolkit, use already created Project configuration and choose the service account integration. For the TestRail toolkit, use already created Private configuration option, allowing each QA to use their own TestRail integration. By strategically using Integrations and Configurations , you can create flexible and secure agent workflows that cater to various authentication needs and enhance collaboration within your ELITEA environment.","title":"Use Case 3: Mixed Authentication for Confluence and TestRail Workflow"},{"location":"feature-guides/core-features/monitoring/","text":"ELITEA Monitoring User Guide: Understanding Application Usage and Performance Introduction This user guide provides a comprehensive overview of the Monitoring feature in ELITEA. This powerful tool is designed to offer deep insights into the application's usage and performance, empowering administrators and users to make informed decisions for optimization and improvement. Whether you're looking to understand user engagement, assess the effectiveness of your entities (prompts, datasources, agents and conversations), or identify areas for enhancement, the Monitoring feature provides the data and visualizations you need. Purpose of the Monitoring Feature: Gain Insights into Application Usage: Understand how users are interacting with ELITEA, including the frequency of use, active user trends, and popular features. Evaluate Each Entity Performance: Assess the effectiveness of your prompts, datasources, and agents by tracking metrics like user engagement and acceptance rate of AI generated output . Identify Areas for Optimization: Pinpoint areas where user engagement can be improved and understand how effectively AI generated outputs are being utilized. Make Data-Driven Decisions: Utilize concrete data and visualizations to guide your strategies for improving ELITEA's adoption and effectiveness. How to Use This Guide: This guide is structured to provide a detailed understanding of each aspect of the Monitoring feature. You will find explanations of key metrics, how they are calculated, and how to interpret the various charts and data presented. Whether you are a Chapter Manager, Project Admin, or a user interested in understanding ELITEA usage, this guide will equip you with the knowledge to effectively utilize ELITEA's monitoring capabilities. Overview of Monitoring Feature The ELITEA Monitoring feature is a powerful analytics tool designed to track and visualize key aspects of application usage and the effectiveness of AI-driven workflows. It allows users with administrative roles to gain valuable insights into how ELITEA is being adopted and utilized within their projects and portfolios. Key Monitoring Capabilities (Currently in Scope): User Engagement: Measures how actively users with the \" Monitor \" role are interacting with ELITEA projects. This helps understand the adoption and active usage levels within your teams. Acceptance Rate of AI Generated Output: Tracks how often users accept and utilize the outputs generated by ELITEA's prompts, datasources and agents. This metric provides insights into the perceived usefulness and quality of the AI-driven assistance provided by ELITEA. Important Note: ELITEA's Monitoring feature exclusively tracks activities performed by users who have been assigned the \"Monitor\" role within ELITEA projects. This ensures that the metrics reflect the engagement and usage patterns of designated users who are intended to utilize and benefit from ELITEA's capabilities. It's important to note that Monitoring is a cross-project capability . This means that regardless of which project is currently selected in the Project dropdown menu at the top of the screen, the Monitoring screen will provide data aggregated across all projects that you have Admin access to. This allows for portfolio-level analysis and a holistic view of ELITEA usage across your organization. Future Enhancements: ELITEA's Monitoring feature is continuously evolving. Future updates will expand the scope of monitoring capabilities to include metrics that measure: Relevancy of User Input: Assess how well user inputs align with the intended context and purpose of ELITEA's functionalities. Relevancy of Output Generated by ELITEA: Evaluate the quality and relevance of the outputs generated by ELITEA in relation to user inputs and needs. These future metrics will provide even deeper insights into the effectiveness and efficiency of ELITEA, allowing for more fine-tuned optimization and improvement. Here's the enhanced section for the ELITEA Monitoring User Guide, detailing Project Types, Grouping, and User Role Assignment for Monitoring: Project Scope and User Roles in Monitoring ELITEA Monitoring provides flexible options to analyze data at different levels, from individual projects to aggregated group (portfolio) views. Understanding the different project types and user roles is crucial for effectively utilizing the Monitoring feature. Project Types in ELITEA Monitoring ELITEA Monitoring allows you to review data across various project scopes, catering to different analytical needs: All projects: This option provides a comprehensive, aggregated view of monitoring data across all projects available within your ELITEA deployed environment. This is useful for high-level, organization-wide analysis. Public Project: ELITEA includes a default Public project , accessible to all users. Monitoring data for the Public project can be reviewed separately to understand usage patterns within this shared space. Private Workspace: Each user has a personal Private workspace. You always have access to your own Private workspace and can review its monitoring data in isolation. Team Projects: These are projects created for specific teams or purposes. Access to Team projects and their monitoring data is controlled by user roles and permissions. Groups (Portfolios): ELITEA allows you to group multiple projects together into user-defined Groups (often referred to as Portfolios). This enables you to aggregate monitoring data across a collection of related projects for portfolio-level reporting and analysis. Access and Permissions: Your access to monitoring data for different project types depends on your role and permissions within ELITEA: Project and Group Access Based on Roles: Within the Monitoring feature, the projects and groups you can select and view data for are determined by your Admin role and project/group memberships. Private Workspace and Public Project Access: All users will always have access to monitoring data for the Public project and their own Private workspace. Grouping Projects for Portfolio-Level Monitoring To facilitate portfolio-level reporting and analysis, ELITEA allows you to group multiple projects together. Here's how to create and utilize Project Groups for monitoring: Creating a Project Group: Select a Team Project: From the Projects dropdown list at the top of the ELITEA interface, select a Team project that you want to include in a group. Navigate to Project Settings: Go to Settings -> Projects page . Edit Groups: Locate the Groups field (displayed as \"Groups:\") and click the Pencil icon next to it to edit the project's group membership. Create or Select a Group: Create New Group: To create a new group, type the desired group name in the input field. Select Existing Group: To add the project to an existing group, start typing the name of the group and select it from the dropdown list of existing groups that appears. Save Group Assignment: Click the \"Save\" button (or a checkmark icon) to add the selected project to the specified group. Repeat for Other Projects: To add more projects to the same group, select another Team project from the Projects dropdown list and repeat steps 2-5, ensuring you select the same group name in step 4. Access Group Monitoring Data: Navigate to the Monitoring page. Select Project Group in Filters: Click the Projects dropdown in the Filtering Panel. Scroll down the list \u2013 you will now see your newly created Project Group listed at the bottom, along with the individual projects that are members of that group. View Portfolio-Level Metrics: Click on the name of your created Project Group in the Projects dropdown. The Monitoring page will now display aggregated metrics and charts for all projects that are members of that group, providing a Portfolio-level view. Navigating Project Groups and \"All projects\" in Monitoring: When you select a Project Group (or \"All projects\" ) in the Projects dropdown on the Monitoring page, you will notice a visual representation of the projects included in that scope. Project Rectangles: Below the \"Projects\" dropdown, you will see a series of selectable rectangles, each representing a project that is part of the selected Group (or all projects if \"All projects\" is selected). Drilling Down into Individual Projects: These rectangles are interactive. By clicking on a specific project rectangle , you can \"drill down\" into the monitoring data for that individual project. The Monitoring page will then update to display metrics and charts specifically for the project you clicked on, allowing for more granular project-level analysis. Assigning the \"Monitor\" Role to Users in Team Projects By default, users are automatically assigned the \"Monitor\" role only within their Private workspace and the Public project . To enable monitoring for users within Team projects , you need to explicitly assign them the \"Monitor\" role within those projects. Only users with the Admin role in a project have the permission to change roles for other users in that project. Assigning the \"Monitor\" Role: Select the Team Project: From the Projects dropdown at the top of the ELITEA interface, select the Team project where you want to assign the \"Monitor\" role to a user. Navigate to Project Settings: Go to Settings -> Projects page . Locate Teammates Table: Scroll down the \"Projects\" page to find the \"Teammates\" table. This table lists all users who are members of the selected Team project and their assigned roles. Edit User Role: Find the row corresponding to the user to whom you want to assign the \"Monitor\" role. Click the Pencil icon in the \"Role\" column for that user to edit their role. Select \"Monitor\" Role: In the role dropdown menu that appears, select \"Monitor\" as the new role for the user. Apply Changes: Click the Checkmark icon (or \"Save\" button) to apply the role change and save the updated user role. After assigning the \"Monitor\" role to users in your Team projects, their activities within those projects will be included in the ELITEA Monitoring data, allowing you to track their engagement and the effectiveness of ELITEA within your teams. Accessing Monitoring Within ELITEA To access the Monitoring screen in ELITEA, follow these steps: Open Settings Menu: Click on your user avatar located in the top right corner of the ELITEA interface. This will open the settings menu. Select Monitoring: In the Settings menu, click on the \"Monitoring\" option. Monitoring Landing Page: After selecting \"Monitoring,\" you will be redirected to the Monitoring Landing Page . This page is the central dashboard where you can filter, view, and analyze various monitoring metrics. Key Components of the Monitoring Landing Page: The Monitoring Landing Page is designed to be intuitive and informative, providing a clear overview of ELITEA usage and performance. It is structured into three main panels, each serving a distinct purpose: 1. Filtering Panel: Tailoring Your Data View The Filtering Panel , located prominently at the top of the Monitoring Landing Page, is your control center for customizing the data displayed throughout the dashboard. It allows you to precisely define the scope of your analysis by applying various filters. By using these filters, you can focus on specific projects, timeframes, Use Cases, or even individual users to gain targeted insights. Here's a breakdown of the filtering options available: Projects: This dropdown menu allows you to select the specific projects or pre-configured Portfolio groupings you want to include in your analysis. Single Project Selection: Choose a specific project from the list to view monitoring data relevant only to that project. Group Selection: Scroll to the bottom of the dropdown to select a user-defined grouping. This aggregates data across all projects within that Group, providing a high-level overview. All Projects: By default, or by selecting an \"All Projects\" option (if available), you can view data aggregated across all projects you have Admin access to. Time Period (From & To Dates): These date fields enable you to define a custom reporting period. \"From\" Date: Select the starting date for your analysis. \"To\" Date: Select the ending date for your analysis. The Monitoring feature will then calculate metrics and display charts based on data within this specified date range. Type: This dropdown filter allows you to narrow down the metrics to specific types of ELITEA entities. You can choose to focus on: Prompts: Analyze metrics related specifically to Prompt usage and performance. Datasources: Focus on metrics related to Datasource access and relevance. Agents: View metrics related to Agent executions and effectiveness. Conversations: Analyze metrics related to user conversations within ELITEA. This allows you to understand overall conversation trends, user engagement at the conversation level, and acceptance rates within conversations. Prompts, Datasources, Agents, Conversations (Combined): This option (often the default) aggregates metrics across all three entity types, providing a broader overview. Name: This dropdown filter becomes active when you select a specific \"Type\" (Prompts, Datasources, or Agents). It allows you to further refine your analysis to a specific entity within the selected type. \"All Items\": (Default) When \"All Items\" is selected, the metrics will be calculated for all entities of the chosen \"Type\". Specific Entity Selection: Choose a specific Prompt name, Datasource name, Agent name or Conversation name from the list to view metrics for that individual entity only. Users: This dropdown allows you to filter the data to show activity related to specific users. \"All Users\": (Default) Metrics are calculated based on the activity of all users with the \" Monitor \" role within the selected projects and timeframe. Specific User Selection: Choose a specific user from the list to view metrics related only to that user's activity. Aggregation: This dropdown menu allows you to control how the data is grouped and displayed in charts. Choosing the right aggregation level is crucial for visualizing data at the appropriate granularity for your analysis. Available aggregation options include: Hour: Data is grouped and displayed on an hourly basis. This provides the most granular view, allowing you to identify peak usage times within a day, track hourly fluctuations, and potentially pinpoint immediate issues or usage spikes. Day: Data is grouped and displayed on a daily basis. This is a common and versatile aggregation level, useful for understanding daily usage patterns, tracking daily active users, and monitoring daily token consumption. Week: Data is aggregated and displayed on a weekly basis. This provides a broader view, smoothing out daily fluctuations and highlighting weekly trends in adoption, engagement, and performance. Weekly aggregation is often suitable for regular weekly reporting and tracking week-over-week changes. Two Weeks: Data is aggregated and displayed over two-week periods. This aggregation level can be particularly useful for teams or projects that operate in two-week sprints. It allows you to align your monitoring reports with sprint cycles and assess performance and usage across a complete sprint. Three Weeks: Data is aggregated and displayed over three-week periods. Similar to the \"Two Weeks\" option, this aggregation is beneficial for teams or projects following three-week sprint cycles. It provides a sprint-level view of metrics, enabling performance evaluation within the context of a three-week iteration. Month: Data is aggregated and displayed on a monthly basis. This provides the broadest overview, smoothing out weekly variations and highlighting long-term trends in adoption, usage, and performance over calendar months. Monthly aggregation is useful for high-level reporting, executive summaries, and identifying long-term patterns. Refresh Button: After you have selected your desired filters in the Filtering Panel, click the \"Refresh\" button to apply these filters. Clicking \" Refresh \" triggers the Monitoring feature to recalculate all metrics and update the charts based on your chosen criteria. Reset Filters Button: Click the \" Reset Filters \" button to clear all currently applied filters and revert the Monitoring Landing Page back to its default view, displaying data for all projects and the default timeframe. Note on Filter Persistence: ELITEA Monitoring remembers your filter selections during your active session for a seamless analysis experience. Filters are Auto-Saved: When you click Refresh your filter settings are saved for your current session. Persistence Across Session: Your filters remain active even if you navigate to other ELITEA pages or refresh the Monitoring page. Resetting Filters to Default: Filters are reset to default (\"All Projects,\" \"Default Time Period,\" etc.) only when: You click the \" Reset Filters \" button. You log out of ELITEA. This ensures you maintain your analysis context without re-applying filters repeatedly during your active session. 2. Key Metrics Summary Panel: At-a-Glance Performance Indicators The Key Metrics Summary Panel , positioned below the Filtering Panel , provides a concise and easily digestible overview of the most important performance indicators for ELITEA. This panel displays key metrics as numerical values in individual boxes, allowing you to quickly grasp the overall state of application usage and effectiveness based on your applied filters. It's important to understand how filters affect the metrics displayed in this panel: Project Filter Dependency: The metrics Users, Prompts, Agents, and Conversations are static counts that are only influenced by the \"Projects\" filter. Selecting different projects or groups in the \" Projects \" dropdown will change these numbers to reflect the totals within those selected projects. However, these static counts are not affected by the \"Time Period,\" \"Type,\" \"Name,\" or \"Users\" filters. They always represent the total number of users, prompts, agents, and conversations ever created within the selected project(s). Dynamically Filtered Metrics: In contrast, the metrics Tokens in, Tokens out, Engagement, and Acceptance Rate are dynamic and respond to all filters applied in the Filtering Panel, including \"Projects,\" \"Time Period,\" \"Type,\" \"Name,\" and \"Users.\" These metrics are recalculated and updated based on the specific filter criteria you set, providing contextually relevant performance indicators for your chosen scope. The metrics included in this panel are: Users: Displays the total number of unique users who have ever interacted with ELITEA within the selected project(s). (Static, Project filter dependent) Tokens in: Shows the total number of tokens generated by LLMs and sent back to ELITEA as responses within the filtered scope. This reflects the output token generation for the applied filters. (Dynamic, All filters dependent) Tokens out: Displays the total number of tokens sent to LLMs by ELITEA within the filtered scope. This represents the input token consumption for the applied filters. (Dynamic, All filters dependent) Engagement: Presents the Engagement Rate as a percentage, indicating the proportion of active users with the \"Monitor\" role within the filtered scope and time period . (Dynamic, All filters dependent) Acceptance Rate: Shows the Acceptance Rate as a percentage, reflecting the proportion of conversations where users accepted the AI-generated output within the filtered scope and time period . (Dynamic, All filters dependent) Prompts: Displays the total number of prompts created within the selected project(s). (Static, Project filter dependent) Agents: Displays the total number of agents created within the selected project(s). (Static, Project filter dependent) Conversations: Displays the total number of conversations initiated within the selected project(s). (Static, Project filter dependent) Understanding which metrics are static and which are dynamic based on the filters is crucial for correctly interpreting the data presented in the Key Metrics Summary Panel and drawing accurate conclusions about ELITEA usage and performance. 3. Visual Metrics Panel: Detailed Charts and Trend Analysis The Visual Metrics Panel , located below the Key Metrics Summary Panel , provides a comprehensive suite of charts and visualizations for in-depth analysis of ELITEA usage, performance, and user sentiment. This panel is organized into several sections, each focusing on a specific aspect of the monitoring data: Adoption and Usage: This section contains charts that visualize user adoption and overall application usage trends over time. Active Users Chart: A bar chart visualizing the number of unique active users for each time interval (e.g., day, week, month) within your selected timeframe. This chart helps you understand user adoption trends and identify periods of high or low activity. It often distinguishes between \"active\" and \"inactive\" users within each interval. Token Usage Chart: A line chart displaying the trend of token consumption over time. It typically shows two lines: Tokens in: Representing the number of tokens generated by the LLMs (output tokens). Tokens out: Representing the number of tokens sent to the LLMs (input tokens). This chart helps you monitor token usage patterns, identify potential cost optimization opportunities, and understand the computational demand on the LLM system over time. Acceptance Rate: This section features the Acceptance Rate Chart , a bar chart visualizing the number of interactions where users accepted the output versus those where they did not, for the selected period. Sentiments: This section provides insights into user and LLM sentiment through pie charts: Human Input Chart: A pie chart showing the distribution of sentiment (Positive, Negative, Neutral) in user inputs. LLM Output Chart: A pie chart showing the distribution of sentiment (Positive, Negative, Neutral) in LLM-generated outputs. Accuracy: This section presents charts related to the accuracy and quality of ELITEA interactions: Relevance Chart: A line chart displaying the average relevance scores of user inputs (vs. context) and LLM outputs (vs. user inputs) over time. Reliability Chart: A line chart showing the average reliability score of LLM responses over time. Instruction Quality vs Usage Matrix: A 2x2 matrix visualizing the relationship between the quality score and usage frequency of prompts (or other relevant entities). Topics: This section includes the Topics Chart , a clustered column chart showing the distribution of prompts, datasources, and agents across different identified topics. Topics Summary: This section features the Topics Summary Chart , a clustered column chart showing the distribution of user queries across different identified topics. These charts, collectively presented in the Visual Metrics Panel, provide a rich and diverse set of visualizations for analyzing ELITEA usage patterns, user sentiment, AI artifact performance, and overall application effectiveness over time. By effectively utilizing the Filtering Panel and interpreting the information presented in the Key Metrics Summary Panel and Visual Metrics Panel , you can gain a comprehensive understanding of ELITEA usage and performance, enabling data-driven decisions for optimization and continuous improvement. Metrics Overview The Monitoring feature in ELITEA presents a variety of metrics and charts to help you understand different aspects of application usage and performance. This section provides a detailed breakdown of each currently available metric, explaining its purpose, how it is calculated, the formula used, and practical examples to illustrate its interpretation and utilization. Understanding these metrics is key to effectively monitoring ELITEA's adoption, user engagement, and the effectiveness of your AI-powered workflows. In-Scope Metrics Currently, ELITEA Monitoring focuses on two key metrics that provide valuable insights into user interaction and workflow success: Engagement Rate and Acceptance Rate . These metrics are designed to be actionable, helping you identify areas for improvement and measure the impact of your optimization efforts. Engagement Rate: Measuring User Activity Description: The Engagement Rate metric is a vital indicator of user adoption and active participation within ELITEA. It quantifies the percentage of users with the designated \" Monitor \" role who are actively interacting with ELITEA projects during a specific time period. A higher Engagement Rate suggests broader adoption and more consistent utilization of ELITEA within your team. Formula: Unpacking the Calculation Engagement Rate = (Number of Active Users with \u201cMonitor\u201d role) / (Total Number of Users with \u201cMonitor\u201d role) * 100% Let's break down the components of this formula: Numerator: Number of Active Users with \u201cMonitor\u201d role: This represents the count of unique individuals who have been assigned the \"Monitor\" role in ELITEA and have demonstrated active engagement during the chosen time frame. \"Active engagement\" is defined by specific actions (see \"Definition of 'Active User'\" below). Denominator: Total Number of Users with \u201cMonitor\u201d role: This is the total count of all users who have been granted the \"Monitor\" role within the selected Project or Portfolio. This represents the total potential user base for ELITEA monitoring. Multiplication by 100%: The result of the division is multiplied by 100 to express the Engagement Rate as a percentage, making it easier to interpret and compare. Calculation Period: The Engagement Rate is calculated for the specific time period defined by the \"From\" and \"To\" dates that you select in the Filtering Panel. This allows you to analyze engagement over different durations, such as weekly, monthly, or custom date ranges. Key Notes: Calculated per Project or Group: Engagement Rate is not a global metric. It is calculated and displayed separately for each Project or Group that you select in the \"Projects\" filter. This allows you to compare engagement levels across different teams or areas of your organization. Definition of \"Active User\": To be counted as an \"active user\" for the Engagement Rate metric, a user with the \" Monitor \" role must have performed at least one of the following actions within the selected timeframe: Engaged in a Conversation (New or Existing) and Interacted with an ELITEA Entity: This action encompasses both initiating new chat sessions and actively participating in existing ones, demonstrating ongoing engagement with ELITEA's core functionalities. To be considered \"active\" through conversation engagement, the user must have: Created a new conversation within the Chat interface, OR interacted with an existing conversation. This means either starting a fresh chat or continuing an ongoing dialogue in a previously created chat. Interacted within that conversation (whether new or existing) with at least one of the following ELITEA entities: an LLM model directly, a Prompt, a Datasource, or an Agent. Simply viewing a conversation or having it open without actively sending messages to or receiving responses from an ELITEA entity does not qualify as \"active\" usage. Directly Executed an ELITEA Entity: This action signifies a user directly invoking and utilizing ELITEA's core functionalities outside of a standard chat conversation flow. To be considered \"active\" through this action, the user must have: Executed (run or triggered) at least one of the following ELITEA entities: a Prompt, a Datasource, or an Agent. This includes direct executions initiated through any part of the ELITEA interface, not solely within chat conversations. How to Utilize Engagement Rate for Actionable Insights: The User Engagement Rate is not just a number; it's a powerful diagnostic tool to understand ELITEA adoption and guide improvement efforts. Identify Low Engagement as a Trigger for Action: A consistently low Engagement Rate (e.g., consistently below 50%, or below your expected target) should serve as a trigger for investigation and action. It suggests that a significant portion of users with the \" Monitor \" role are not actively using ELITEA, indicating a potential gap between the intended and actual utilization of the platform. Diagnose Potential Causes of Low Engagement: A low Engagement Rate prompts you to investigate why users are not engaging. Consider these potential reasons: Insufficient User Training and Onboarding: Users may be unaware of ELITEA's capabilities, unsure how to use it effectively, or lack the necessary skills to leverage its Use Cases. Resolution: Implement or enhance user training programs. Provide hands-on workshops, create easily accessible user guides and tutorials, offer personalized onboarding support, and establish channels for users to ask questions and receive guidance. Lack of Use Case Relevance to User Needs: The currently available Use Cases within ELITEA might not be directly relevant or valuable to the daily tasks and workflows of the intended users. If users don't find the Use Cases helpful for their actual work, they are less likely to engage. Resolution: Actively solicit user feedback on the relevance and usefulness of existing Use Cases. Conduct user interviews, surveys, or feedback sessions to understand their specific needs and pain points. Based on this feedback, fine-tune existing Use Cases to better align with user workflows, or prioritize the development of new Use Cases that address unmet needs and provide more tangible value to users' daily activities. Recommendations for Effective Engagement Rate Monitoring: Establish a Regular Review Cadence: Make reviewing the Engagement Rate a recurring activity. Weekly reviews are highly recommended to track trends and identify any sudden drops or consistently low engagement levels. Set Weekly Reporting Timeframes: For consistent weekly tracking, always use the \"From\" and \"To\" date filters to define the reporting period as the past week (e.g., Monday to Sunday of the previous week) . This ensures that you capture a complete week's worth of usage data, accounting for variations in weekday vs. weekend activity and potential offshore team usage patterns. Example Scenario: Let's consider \"Project Alpha\" and analyze its Engagement Rate for the past week (Monday to Sunday): Data: Total users with \" Monitor \" role in \"Project Alpha\": 50 Number of users in \"Project Alpha\" who were \"active\" (created chats or used workflows) during the past week: 20 Engagement Rate Calculation: (20 Active Users / 50 Total Users) * 100% = 40% Interpretation: An Engagement Rate of 40% for \"Project Alpha\" suggests that a significant majority (60%) of users with the \"Monitor\" role are not actively engaging with ELITEA within this project. This low rate warrants further investigation. You should explore potential reasons for this low engagement, such as lack of training, irrelevant Use Cases, or technical barriers, and implement appropriate resolutions to improve user adoption and utilization. Acceptance Rate: Gauging Use Case and Entity Effectiveness Description: The Acceptance Rate metric provides crucial insights into the perceived value and successful utilization of ELITEA's AI-powered capabilities, extending beyond just Use Cases to encompass the effectiveness of individual Prompts, Datasources, and Agents. It quantifies the percentage of times users take a defined \"acceptance action\" after interacting with ELITEA, indicating they found the generated output or the outcome of the execution useful and successfully leveraged ELITEA to achieve their intended goal. A higher Acceptance Rate signifies that ELITEA's functionalities are effectively meeting user needs and providing valuable assistance across various interaction types. Formula: Understanding the Broader Acceptance Calculation Acceptance Rate = (Accepted Interactions) / (All Interactions) * 100% Let's understand the components of this formula in this broader context: Numerator: Accepted Interactions: This represents the count of interactions where a user has performed a specific \"acceptance action.\" Crucially, \"interactions\" now encompass not only conversations but also direct executions of Prompts, Datasources, and Agents. An interaction is deemed \"Accepted\" when the user performs a relevant \" acceptance action \" signaling successful utilization of ELITEA's output or functionality. Denominator: All Interactions: This is the total count of all user interactions within the selected scope (Use Case, Project, timeframe, or entity type). \"Interactions\" now include all attempts to utilize ELITEA, whether through conversations or direct executions of Prompts, Datasources, and Agents. Calculation Period: The Acceptance Rate is calculated based on the \"From\" and \"To\" dates selected in the Filtering Panel, allowing you to analyze acceptance over different timeframes and across various types of interactions. Key Notes: Expanding the Definition of \"Accepted Interactions\" Broader Scope of Acceptance Actions: The definition of \"Accepted Interactions\" is now expanded to encompass a wider range of user actions that indicate successful utilization of ELITEA, regardless of whether the interaction occurs within a conversation or through direct entity execution. \"Acceptance actions\" now include: Keyword Acceptance within Agent Conversations (Explicit Approval): As before, for Agents designed with explicit approval steps, typing a pre-defined \"acceptance keyword\" (e.g., \"approved,\" \"publish\") within a conversation is considered acceptance. Content Copying Actions: Indicating user utilization of generated text or data: Manual Text Selection and Copy: Selecting and copying generated text directly from the ELITEA interface. \"Copy to Clipboard\" Button Usage: Clicking a \"Copy to Clipboard\" button associated with generated output. \"Copy to Messages\" Button Usage (Prompts): Clicking a \"Copy to Messages\" button specifically available for Prompt executions, indicating the user is incorporating the prompt's output into a conversation. Table Export/Download Actions (Prompts): For Prompts that generate tabular data, utilizing export or download options signifies acceptance: \"Download as xlsx\" : Downloading generated tables in Excel format. \"Copy as html\" : Copying table data in HTML format. \"Copy as markdown\" : Copying table data in Markdown format. Agent Goal Completion Actions (External Service Interaction): For Agents designed to interact with external services, successful goal completion is considered acceptance: File Creation in GitHub: Agents designed to create files in GitHub repositories. Issue Creation in Jira: Agents designed to create issues in Jira. Page Creation in Confluence: Agents designed to create pages in Confluence. Any other Agent-specific action that signifies successful completion of its intended task in an external system. Datasource Specific Actions: Actions indicating utilization of data retrieved from Datasources: Downloading Deduplication Results as Excel File: Downloading the output of deduplication processes from Datasources in Excel format. Copying Search Results: Copying search results obtained from Datasource queries. Contextual Application: These \"acceptance actions\" are tracked and considered for Acceptance Rate calculations regardless of whether they occur: Within Chat Conversations: When users interact with Prompts, Datasources, or Agents through the ELITEA Chat interface. During Direct Entity Execution: When users directly execute Prompts, Datasources, or Agents outside of a chat conversation, through other parts of the ELITEA interface. How to Utilize Acceptance Rate for Broader Performance Improvement: The Acceptance Rate, now with its expanded definition, provides a comprehensive measure of user satisfaction and the effectiveness of ELITEA's AI capabilities across various interaction modes. Identify Areas of Friction and Success Across ELITEA: A low Acceptance Rate, whether for a specific Use Case, a particular Prompt, a Datasource, or an Agent, points to potential areas of friction, usability issues, or output quality problems that need attention. Conversely, high Acceptance Rates highlight successful functionalities and well-performing entities that are effectively meeting user needs. Diagnose Issues Based on Interaction Type: Analyze Acceptance Rates in conjunction with the \"Type\" and \"Name\" filters in the Monitoring Panel to pinpoint specific areas for improvement: Low Prompt Acceptance Rate: Focus on the Prompt itself. Review the prompt's instructions, context, input parameters, and output examples. Experiment with prompt engineering techniques to improve output relevance, clarity, and accuracy. Consider user feedback on specific prompts to identify areas for refinement. Low Agent Acceptance Rate: Analyze the Agent's workflow, the quality of prompts and tools it utilizes, and its overall logic. Debug potential issues in the agent's execution flow, error handling, or interaction with external services. Low Datasource Acceptance Rate: Examine the Datasource's configuration, data quality, and query effectiveness. Ensure the datasource is providing relevant and accurate information for the intended use cases. Investigate if query parameters are being correctly mapped and if the datasource is reliably accessible. Recommendations for Comprehensive Acceptance Rate Monitoring: Weekly Review Remains Crucial: Continue to prioritize weekly reviews of Acceptance Rate metrics to proactively identify and address performance issues across all aspects of ELITEA. Granular Analysis by Type and Name: Leverage the \"Type\" and \"Name\" filters extensively to analyze Acceptance Rates not only by Use Case but also by individual Prompts, Datasources, and Agents. This granular view is essential for pinpointing specific AI artifacts or functionalities that require optimization. Weekly Timeframe for Consistency: Maintain the practice of using a weekly timeframe (e.g., Monday to Sunday of the previous week) for consistent and comparable Acceptance Rate tracking across different entities and time periods. Example Scenario (Expanded Scope): Let's consider a scenario where you are analyzing the Acceptance Rate for a specific Prompt, \"User Story Creator Prompt,\" used within \"Project Alpha\" over the past week: Data: Total Executions of \"User Story Creator Prompt\" in \"Project Gamma\" last week (both within chats and direct executions): 150 Number of \"Accepted Interactions\" for \"User Story Creator Prompt\" (users copied output, downloaded table, etc.): 75 Acceptance Rate Calculation: (75 Accepted Interactions / 150 Total Interactions) * 100% = 50% Interpretation: An Acceptance Rate of 50% for the \"Code Summary Prompt\" suggests that this particular prompt is only meeting user needs in half of its executions. This warrants a focused investigation into the prompt's design, output quality, and user expectations. You should review the prompt's instructions, analyze user feedback related to code summarization tasks, and potentially refine the prompt to improve its accuracy, clarity, and usefulness, aiming to increase its Acceptance Rate and ensure it effectively serves its intended purpose within ELITEA. This enhanced \"Acceptance Rate\" section now provides a much broader and more practical understanding of how to utilize this metric to assess the effectiveness of ELITEA's AI capabilities across Use Cases, Prompts, Datasources, and Agents, whether used in conversations or directly executed. Let me know if you have any further refinements! Charts The Visual Metrics Panel in ELITEA Monitoring provides a rich set of charts and diagrams to help you visually analyze trends, patterns, and key performance indicators. This section provides a detailed explanation of each chart type, guiding you on how to interpret these visualizations to gain actionable insights into ELITEA usage and effectiveness. Adoption and Usage Charts: Tracking User Activity and Resource Consumption These charts provide a visual representation of user adoption and overall application usage trends over time, as well as the consumption of LLM tokens. Active Users Chart: Understanding User Adoption Trends Purpose: The Active Users Chart helps you visualize user adoption and engagement levels over time. It shows the number of unique active users for each time interval, allowing you to identify trends in user activity and pinpoint periods of high or low engagement. Chart Type: Stacked Bar Chart Data Displayed: X-axis (Horizontal): Represents the Time Interval , based on the \"Aggregation\" level you select in the Filtering Panel (e.g., Day, Week, Month). Each bar on the chart corresponds to a specific time interval. Y-axis (Vertical): Represents the Number of Users . Stacked Bars: Each bar is divided into two stacked segments, representing: Active Users (Teal/Green segment): The number of active users during that time interval. Inactive Users (Light Gray segment): The number of inactive users (users with \"Monitor\" role who did not perform any \"active\" actions) during that time interval. Interpretation: Trend Analysis: Observe the overall trend of the teal/green \"active users\" bars over time. An upward trend indicates increasing user adoption and engagement, while a downward trend may signal declining interest or usability issues. Identify Peak and Low Activity Periods: Visually identify time intervals (days, weeks, etc.) with the highest and lowest bars for \"active users.\" This can help you understand when ELITEA is most and least utilized. Active vs. Inactive User Ratio: Compare the relative sizes of the teal/green \"active users\" segment and the light gray \"inactive users\" segment within each bar. A larger teal/green segment indicates a higher proportion of active users for that period, signifying stronger engagement. Example: If the \"Active Users Chart\" shows consistently increasing teal/green bars over the past few weeks, it indicates positive user adoption and growing engagement with ELITEA. Conversely, if you see a sudden drop in the height of the teal/green bars for a recent week, it might warrant investigation into potential issues affecting user engagement during that period. Token Usage Chart: Monitoring LLM Resource Consumption Purpose: The Token Usage Chart is essential for monitoring the consumption of LLM resources within ELITEA. It visualizes the trend of tokens sent to LLMs (Tokens Out - input tokens) and tokens received from LLMs (Tokens In - output tokens) over time, helping you understand the computational demand and potential costs associated with ELITEA usage. Chart Type: Line Chart Data Displayed: X-axis (Horizontal): Represents the Time Interval , based on the \"Aggregation\" level you select in the Filtering Panel (e.g., Day, Week, Month). Each point on the lines corresponds to a specific time interval. Y-axis (Vertical): Represents the Number of Tokens , typically measured in thousands (e.g., 50k, 100k, 150k). Lines: The chart displays two distinct lines, each representing a type of token usage: Tokens In (Teal/Cyan Line): Represents the number of tokens generated by LLMs and sent back to ELITEA (output tokens). Tokens Out (Magenta/Purple Line): Represents the number of tokens sent to the LLMs by ELITEA (input tokens). Interpretation: Token Usage Trends: Observe the overall trends of both the \"Tokens In\" (teal/cyan) and \"Tokens Out\" (magenta/purple) lines over time. Upward trends indicate increasing LLM resource consumption, while downward trends suggest decreasing usage or more efficient workflows. Input vs. Output Token Ratio: Compare the relative positions and trends of the two lines. Significant differences in the volume of input vs. output tokens might indicate specific usage patterns or potential areas for optimization. For example, consistently high \"Tokens Out\" with relatively lower \"Tokens In\" might suggest users are sending complex or lengthy queries. Identify Token Spikes: Look for sudden spikes or peaks in either the \"Tokens In\" or \"Tokens Out\" lines. These spikes can highlight periods of unusually high LLM usage, which might warrant further investigation to understand the cause (e.g., a specific event, a new Use Case being heavily utilized). Cost Monitoring (Indirect): While the chart doesn't directly display costs, tracking token usage trends is crucial for cost management, as LLM usage is often billed based on token consumption. Monitoring this chart helps you anticipate potential cost fluctuations and optimize workflows to minimize unnecessary token usage. Example: If the \"Token Usage Chart\" shows a sharp increase in the \"Tokens Out\" (magenta/purple) line during a particular week, it indicates a surge in input tokens sent to LLMs. This could be due to increased user activity, more complex queries being submitted, or a change in Use Case usage patterns. Further investigation, potentially combined with other monitoring data, can help pinpoint the cause of this token usage spike. Acceptance Rate Chart: Measuring User Satisfaction with AI Outputs Purpose: The Acceptance Rate Chart visually represents the overall user satisfaction with the outputs generated by ELITEA. It shows the proportion of user interactions where users took \"acceptance actions\" (indicating satisfaction) versus those where they did not. This chart provides a direct measure of how well ELITEA is meeting user needs and delivering valuable results. Chart Type: Stacked Bar Chart Data Displayed: X-axis (Horizontal): Represents the Time Interval , based on the \"Aggregation\" level you select in the Filtering Panel (e.g., Day, Week, Month). Each bar corresponds to a specific time interval. Y-axis (Vertical): Represents the Number of Interactions . Stacked Bars: Each bar is divided into two stacked segments, representing: Accepted Interactions (Teal/Green segment): The number of user interactions during that time interval that were classified as \"Accepted\" based on user actions (copying output, downloading, explicit approval, etc.). Not Accepted Interactions (Light Gray segment): The number of user interactions during that time interval where users did not perform any \"acceptance actions.\" Interpretation: Overall Acceptance Trend: Observe the overall trend of the teal/green \"Accepted Interactions\" bars over time. An upward trend indicates increasing user satisfaction and more effective Use Cases, Prompts, Datasources, or Agents. A downward trend may signal declining user satisfaction or issues with output quality or relevance. Identify Periods of High and Low Acceptance: Visually identify time intervals with the highest and lowest bars for \"Accepted Interactions.\" This can help correlate acceptance rates with specific events, changes in Use Cases, or other factors. Accepted vs. Not Accepted Ratio: Compare the relative sizes of the teal/green \"Accepted Interactions\" segment and the light gray \"Not Accepted Interactions\" segment within each bar. A larger teal/green segment indicates a higher Acceptance Rate for that period, signifying greater user satisfaction and perceived value. Example: If the \"Acceptance Rate Chart\" shows consistently tall teal/green bars, dominating the light gray \"Not Accepted\" segments, it indicates a high overall Acceptance Rate and suggests that ELITEA is effectively meeting user needs and generating valuable outputs. Conversely, if you observe a significant increase in the light gray \"Not Accepted\" segments, particularly for a specific Use Case or time period, it warrants investigation into potential issues affecting user satisfaction and output quality. Sentiments Charts: Understanding User and AI Tone These pie charts provide a quick visual overview of the emotional tone expressed in user inputs and generated LLM outputs, helping you assess the overall user experience and the sentiment conveyed by the AI. Human Input Chart: Analyzing User Sentiment Purpose: The Human Input Chart visualizes the distribution of sentiment expressed in user inputs to ELITEA. By analyzing the sentiment of user queries and instructions, you can gain insights into user attitudes, potential frustrations, and areas where users might be expressing negative sentiment that needs to be addressed. Chart Type: Pie Chart Data Displayed: Pie Chart Slices: The pie chart is divided into three slices, each representing a sentiment category: Positive (Green slice): Represents the percentage of user inputs classified as having a positive sentiment (e.g., expressing satisfaction, appreciation, optimism). Negative (Orange slice): Represents the percentage of user inputs classified as having a negative sentiment (e.g., expressing frustration, dissatisfaction, criticism). Neutral (Light Blue slice): Represents the percentage of user inputs classified as having a neutral sentiment (e.g., factual questions, objective statements, requests without emotional tone). Interpretation: Overall Sentiment Balance: Examine the relative sizes of the pie chart slices to understand the overall sentiment balance in user inputs. A larger green \"Positive\" slice is generally desirable, indicating a positive user experience. Identify Negative Sentiment Trends: Pay attention to the size of the orange \"Negative\" slice. A consistently large or increasing \"Negative\" slice might signal user frustration, usability issues, or problems with output quality that are causing negative sentiment. Neutral Sentiment as Baseline: The light blue \"Neutral\" slice represents a baseline level of objective or unemotional communication. While a high \"Neutral\" percentage is not necessarily negative, it's important to consider the context. In some cases, a shift from \"Neutral\" to \"Positive\" might be a desirable outcome of improvements to ELITEA. Example: If the \"Human Input Chart\" shows a large green \"Positive\" slice and small orange \"Negative\" and light blue \"Neutral\" slices, it indicates that users are generally expressing positive sentiment in their interactions with ELITEA, suggesting a positive user experience. Conversely, a larger orange \"Negative\" slice might prompt further investigation into potential usability issues or areas of user dissatisfaction. LLM Output Chart: Assessing AI Tone and Positivity Purpose: The LLM Output Chart visualizes the distribution of sentiment expressed in the outputs generated by ELITEA's Large Language Models (LLMs). Analyzing the sentiment of LLM responses is crucial for ensuring that the AI is communicating in a helpful, positive, and appropriate tone, contributing to a positive user experience and avoiding unintended negative or unhelpful communication styles. Chart Type: Pie Chart Data Displayed: Pie Chart Slices: Similar to the \" Human Input Chart \" this pie chart is also divided into three slices, each representing a sentiment category for LLM outputs: Positive (Green slice): Represents the percentage of LLM outputs classified as having a positive sentiment (e.g., helpful, encouraging, supportive, optimistic). Negative (Orange slice): Represents the percentage of LLM outputs classified as having a negative sentiment (e.g., unhelpful, discouraging, critical, pessimistic). Neutral (Light Blue slice): Represents the percentage of LLM outputs classified as having a neutral sentiment (e.g., factual responses, objective information, task-oriented outputs without emotional tone). Interpretation: Desired Positive AI Tone: Aim for a large green \"Positive\" slice in the \"LLM Output Chart.\" This indicates that ELITEA's AI is generally communicating in a positive and helpful tone, contributing to a positive user experience. Minimize Negative LLM Sentiment: The orange \"Negative\" slice should ideally be minimal. A significant or increasing \"Negative\" slice in LLM outputs is a cause for concern. It might indicate issues with prompt design, agent logic, or underlying LLM behavior that are causing the AI to generate unhelpful, critical, or negatively toned responses. Contextual Neutrality: The light blue \"Neutral\" slice represents a baseline of objective and task-focused AI communication. While neutrality is often appropriate for factual responses, consider whether a higher proportion of \"Positive\" sentiment in LLM outputs could further enhance user engagement and satisfaction, depending on the specific Use Case and context. Example: If the \"LLM Output Chart\" shows a dominant green \"Positive\" slice, with minimal orange \"Negative\" and a moderate light blue \"Neutral\" slice, it suggests that ELITEA's AI is generally communicating in a helpful and positive manner. However, if you observe a noticeable increase in the orange \"Negative\" slice, it's crucial to investigate the prompts, agents, or configurations that are leading to these negatively toned outputs and take corrective actions to ensure the AI communicates in a more positive and constructive way. Accuracy Charts: Assessing Relevance and Reliability These charts provide quantitative measures of the accuracy, relevance, and reliability of ELITEA's AI-powered interactions, helping you evaluate the quality and trustworthiness of the generated outputs and data retrievals. Relevance Chart: Measuring Input and Output Alignment Purpose: The Relevance Chart helps you assess the relevance of user inputs to the intended context and the relevance of LLM outputs to the user inputs they are responding to. By tracking relevance scores over time, you can monitor the quality of interactions and identify potential issues with input clarity or output alignment. Chart Type: Line Chart Data Displayed: X-axis (Horizontal): Represents the Time Interval , based on the \"Aggregation\" level you select in the Filtering Panel (e.g., Day, Week, Month). Each point on the lines corresponds to a specific time interval. Y-axis (Vertical): Represents the Relevance Score , typically on a scale from 0 to 5 or 0 to 10, where higher scores indicate greater relevance. Lines: The chart displays two distinct lines, each representing a type of relevance score: Input vs. Context (Teal/Cyan Line): Represents the average relevance score of user inputs compared to the intended context of the interaction (e.g., the topic of the Use Case, the purpose of the prompt). Higher scores indicate that user inputs are generally well-aligned with the expected context. Output vs. Input (Magenta/Purple Line): Represents the average relevance score of LLM outputs compared to the user inputs they are responding to. Higher scores indicate that LLM outputs are generally relevant and responsive to user queries and instructions. Interpretation: Relevance Score Trends: Observe the trends of both the \"Input vs. Context\" (teal/cyan) and \"Output vs. Input\" (magenta/purple) lines over time. Ideally, you want to see consistently high relevance scores for both, indicating that user inputs are clear and focused, and LLM outputs are relevant and on-topic. Identify Relevance Dips: Look for dips or downward trends in either relevance line. A drop in \"Input vs. Context\" relevance might suggest users are providing less focused or less relevant inputs, potentially due to confusion or usability issues. A drop in \"Output vs. Input\" relevance might indicate problems with prompt design, agent logic, or LLM performance, leading to less relevant or off-topic outputs. Compare Input and Output Relevance: Compare the relative levels of the two relevance lines. Ideally, you want both lines to be consistently high and relatively close to each other, indicating a good flow of relevant information between users and the AI system. Significant divergence between the lines might warrant further investigation. Example: If the \"Relevance Chart\" shows both the \"Input vs. Context\" and \"Output vs. Input\" lines consistently above a score of 4 (on a 0-5 scale), it suggests a high degree of relevance in ELITEA interactions. Users are generally providing relevant inputs, and the AI is generating relevant and responsive outputs. However, if you notice a dip in the \"Output vs. Input\" line below a certain threshold, it might indicate a need to review and refine the prompts or agents responsible for generating those less relevant outputs. Reliability Chart: Assessing LLM Response Consistency Purpose: The Reliability Chart focuses specifically on the reliability of LLM responses, measuring the consistency and predictability of the AI's output quality over time. A high Reliability score indicates that the LLM is generating consistently dependable and trustworthy responses. Chart Type: Line Chart Data Displayed: X-axis (Horizontal): Represents the Time Interval , based on the \"Aggregation\" level you select in the Filtering Panel (e.g., Day, Week, Month). Each point on the line corresponds to a specific time interval. Y-axis (Vertical): Represents the Reliability Score , typically on a scale from 0 to 10 or a percentage scale, where higher scores indicate greater reliability. Reliability Score Line (Teal/Cyan Line): A single line representing the average reliability score of LLM responses for each time interval. Interpretation: Reliability Trend: Observe the trend of the teal/cyan \"Reliability Score\" line over time. A consistently high and stable line is desirable, indicating that the LLM is providing dependable and consistent responses. Identify Reliability Drops: Look for dips or downward trends in the Reliability Score line. A drop in reliability might signal issues with the LLM model itself, changes in the input data quality, or problems with the prompts or agents that are relying on the LLM. Benchmark against Target Reliability: Establish a target reliability score for your ELITEA implementation. Use the Reliability Chart to monitor whether the average reliability score is consistently meeting or exceeding your target. Example: If the \"Reliability Chart\" shows the \"Reliability Score\" line consistently above 8 (on a 0-10 scale), it suggests that ELITEA's LLM responses are generally highly reliable and consistent. However, if you observe a sudden drop in the Reliability Score below your target threshold, it might indicate a need to investigate potential issues affecting LLM performance or consistency, such as model updates, changes in API configurations, or underlying data quality problems. Instruction Quality vs. Usage Matrix: Optimizing AI Artifacts Purpose: The Instruction Quality vs. Usage Matrix is a powerful 2x2 matrix visualization designed to help you optimize your ELITEA Prompts (and potentially Agents or Datasources in future iterations). It plots the relationship between the \"Quality Score\" of your Prompts and their \"Usage\" frequency, allowing you to identify high-performing, underutilized, or low-quality prompts for targeted improvement efforts. Chart Type: 2x2 Matrix (Scatter Plot within Quadrants) Data Displayed: X-axis (Horizontal): Represents Usage (#Calls) , indicating the number of times each Prompt has been executed or called within the selected timeframe. Y-axis (Vertical): Represents Quality Score , reflecting a composite score that combines metrics like Relevance and Reliability to assess the overall quality and effectiveness of each Prompt's instructions. Quadrants: The matrix is divided into four quadrants, each representing a combination of Instruction Quality and Usage levels: Low Quality, Low Usage (Bottom-Left Quadrant): Contains Prompts with both low Quality Scores and low Usage frequency. These are typically prompts that are underperforming and not being actively utilized. High Quality, Low Usage (Top-Left Quadrant): Contains Prompts with high Quality Scores but low Usage frequency. These are potentially valuable prompts that are not being leveraged to their full potential. High Quality, High Usage (Top-Right Quadrant): Contains Prompts with both high Quality Scores and high Usage frequency. These are your top-performing and most valuable prompts, effectively meeting user needs and being actively utilized. Low Quality, High Usage (Bottom-Right Quadrant): Contains Prompts with low Quality Scores but surprisingly high Usage frequency. These are prompts that are being used frequently despite their lower quality, potentially indicating a critical need for improvement or that users are using them despite their limitations due to lack of better alternatives. Data Points: Each data point on the matrix represents a Prompt . The position of the data point within the matrix is determined by its \"Quality Score\" (Y-axis) and \"#Calls\" (X-axis). Hovering over a data point typically reveals the name of the Prompt it represents. Interpretation: Identify High-Value Prompts (Top-Right Quadrant): Focus on the Prompts located in the \"High Quality, High Usage\" (top-right) quadrant. These are your most valuable assets. Analyze these prompts to understand what makes them successful (e.g., clear instructions, relevant context, effective prompt engineering techniques). Leverage these insights to improve other prompts. Optimize Underutilized High-Quality Prompts (Top-Left Quadrant): Prompts in the \"High Quality, Low Usage\" (top-left) quadrant represent untapped potential. Investigate why these high-quality prompts are not being used more frequently. Potential reasons include: * Lack of User Awareness: Users may not know about these valuable prompts. Promote these prompts through training, documentation, or in-app discovery features. * Discoverability Issues: Make sure these prompts are easily discoverable and accessible within the ELITEA interface. * Limited Use Cases: Explore if the use cases for these prompts can be expanded or better communicated to users. Improve or Retire Low-Quality Prompts (Bottom-Left Quadrant): Prompts in the \"Low Quality, Low Usage\" (bottom-left) quadrant are likely underperforming and not providing value. Consider these options: * Improve and Refine: Analyze these prompts to identify specific weaknesses in their instructions, context, or logic. Invest time in prompt engineering to improve their quality and relevance. * Retire or Deprecate: If improvement efforts are not successful, or if these prompts are no longer relevant, consider retiring or deprecating them to avoid user confusion and focus on higher-value assets. Address Low-Quality, High-Usage Prompts (Bottom-Right Quadrant - Critical Attention Needed): Prompts in the \"Low Quality, High Usage\" (bottom-right) quadrant are a critical area for attention. These prompts are being used frequently despite their low quality, which is a potential problem. This situation might indicate: * Critical Need: Users may be using these low-quality prompts because they address a critical need for which no better alternatives exist within ELITEA. * User Frustration: Users might be experiencing frustration and reduced productivity due to the low quality of these frequently used prompts. * Prioritize Improvement: Prioritize immediate improvement efforts for prompts in this quadrant. Focus on significantly enhancing their quality and relevance to better meet the needs of users who are relying on them heavily. Example: By examining the \"Instruction Quality vs. Usage Matrix,\" you might identify that your \"Code Documentation Prompt\" is located in the \"High Quality, High Usage\" quadrant, indicating it's a valuable and well-utilized asset. On the other hand, you might find a \"Competitor Analysis Prompt\" in the \"Low Quality, High Usage\" quadrant, signaling a critical need to improve this prompt to better serve the users who are frequently relying on it, despite its current shortcomings. Topics Chart: Understanding Content Distribution Purpose: The Topics Chart provides a visual representation of how your ELITEA Prompts, Datasources, and Agents are distributed across different identified topics or categories. This chart helps you understand the content focus of your AI artifacts and identify areas where you have strong content coverage and areas where you might need to expand your topic coverage. Chart Type: Clustered Column Chart Data Displayed: X-axis (Horizontal): Represents Topics identified within ELITEA (e.g., \"User Stories,\" \"Code Documentation,\" \"Competitive Analysis,\" \"Confluence Pages\"). Each cluster of columns corresponds to a specific topic. Y-axis (Vertical): Represents the Number of Items (# Items) , indicating the count of ELITEA entities associated with each topic. Clustered Columns: For each topic on the X-axis, you will see a cluster of columns, with each column representing a different type of ELITEA entity: Prompts (Teal/Cyan Column): The number of Prompts categorized under that topic. Datasources (Light Blue Column): The number of Datasources categorized under that topic. Agents (Magenta/Purple Column): The number of Agents categorized under that topic. Interpretation: Topic Coverage Distribution: Examine the overall distribution of columns across different topics. This chart provides a visual overview of which topics are well-represented by your ELITEA content (Prompts, Datasources, Agents) and which topics have less coverage. Identify Content Gaps: Look for topics on the X-axis that have very short or missing columns, indicating a lack of Prompts, Datasources, or Agents related to those topics. These \"gaps\" represent potential areas where you need to create new AI artifacts to expand ELITEA's content coverage and address user needs in those areas. Content Focus Areas: Identify topics with tall columns across all entity types (Prompts, Datasources, Agents). These \"focus areas\" represent topics where you have a strong and well-developed set of AI resources within ELITEA. Example: If the \"Prompt Topics Chart\" shows tall columns for \"User Stories\" and \"Code Documentation\" but very short or no columns for \"Competitive Analysis,\" it indicates that your ELITEA implementation has strong content coverage for user story creation and code documentation tasks, but lacks resources for competitive analysis. This might prompt you to prioritize the creation of new Prompts, Datasources, or Agents focused on competitive analysis to address this content gap and expand ELITEA's capabilities in that area. Topics Summary Chart: Understanding User Query Focus Purpose: The Topics Summary Chart provides insights into the topics that users are most frequently querying and interacting with within ELITEA. By analyzing the distribution of user queries across different topics, you can understand user interests, identify popular areas of focus, and ensure that your ELITEA content and functionalities are aligned with user demand. Chart Type: Clustered Column Chart (Single Cluster per Topic) Data Displayed: X-axis (Horizontal): Represents Topics identified within ELITEA (consistent with the \"Prompt Topics Chart\" - e.g., \"User Stories,\" \"Code Documentation,\" \"Competitive Analysis,\" \"Confluence Pages\"). Each column corresponds to a specific topic. Y-axis (Vertical): Represents the Number of Items (# Items) , indicating the count of user queries associated with each topic. Columns: For each topic on the X-axis, you will see a single column representing: User Queries (Teal/Cyan Column): The number of user queries (or interactions) that have been categorized as belonging to that specific topic. Interpretation: User Interest Distribution: Examine the relative heights of the columns across different topics. This chart visually represents the distribution of user interest across various topics within ELITEA. Taller columns indicate topics that users are querying more frequently, signifying higher user interest and demand. Identify Popular Topics: Pinpoint topics with the tallest columns. These are the most popular areas of user interest within ELITEA. Ensure that you have robust and high-quality content (Prompts, Datasources, Agents) available to effectively address user queries and needs in these popular topic areas. Identify Under-Queried Topics: Look for topics with short or very short columns. These are topics that users are querying less frequently. This might indicate: * Lack of User Awareness: Users might not be aware that ELITEA has capabilities related to these topics. Consider promoting these functionalities through training or in-app communication. * Limited User Need: There might be genuinely less user demand for information or assistance related to these topics. * Relevance Issues: The existing content related to these topics might not be sufficiently relevant or useful to users, leading to lower query frequency. Example: If the \"Topics Summary Chart\" shows a very tall column for \"User Stories\" and significantly shorter columns for other topics like \"Code Documentation\" or \"Competitive Analysis,\" it indicates that user interest and demand within ELITEA are heavily focused on user story-related tasks and information. This insight might prompt you to prioritize further development and optimization of Use Cases, Prompts, and Agents related to user stories to cater to this high user demand. You might also consider investigating why other topics are less frequently queried and explore strategies to increase user awareness or improve content relevance in those areas. By utilizing these detailed chart explanations and understanding how to interpret the visualizations provided by ELITEA Monitoring, you can gain valuable insights into application usage, user behavior, AI artifact performance, and content effectiveness, enabling data-driven decisions to continuously improve and optimize your ELITEA implementation. Use Cases and Reporting: Practical Scenarios for ELITEA Monitoring The Monitoring feature is not just about viewing charts and metrics; it's about gaining actionable insights to improve ELITEA's value and user experience. This section outlines several practical use case scenarios, demonstrating how you can leverage the Monitoring data to answer key questions, identify areas for optimization, and generate insightful reports. Scenario 1: Tracking Overall ELITEA Adoption and Engagement (Portfolio Level) Goal: As a Portfolio Manager, you want to track the overall adoption and engagement of ELITEA across your entire portfolio of projects on a weekly basis. You need to report on user activity and identify any portfolio-wide trends. How to Use Monitoring: Access Monitoring Landing Page: Navigate to the Monitoring page in ELITEA. Set Project Filter to Portfolio: In the Filtering Panel, select your desired Portfolio grouping from the Projects dropdown menu. Set Time Period to \"Last Week\": Use the From and To Date filters to set the time range to cover the past week (e.g., Monday to Sunday of the previous week). Set Aggregation to \"Week\": Ensure the Aggregation dropdown is set to \"Week\" for weekly reporting. Apply Filters: Click the \"Refresh\" button. Review Key Metrics Summary Panel: Focus on the Engagement Rate metric in the Key Metrics Summary Panel. This will give you the overall Engagement Rate for your entire Portfolio for the past week. Note down this percentage for your report. Analyze Adoption and Usage Charts Panel: Examine the Active Users Chart and Token Usage Chart in the Adoption and Usage Charts Panel. Active Users Chart: Observe the trend of \"Active Users\" over the past weeks (or months, if you expand the timeframe). Is user adoption increasing, decreasing, or stable? Note down any significant trends. Token Usage Chart: Analyze the \"Tokens In\" and \"Tokens Out\" lines. Is token consumption increasing, decreasing, or fluctuating? Correlate token usage trends with user activity trends. Generate Report: Compile your findings into a weekly Portfolio Adoption Report. Include: Portfolio Name and Reporting Week (Date Range). Overall Engagement Rate for the Portfolio (from Key Metrics Summary Panel). Summary of Active User trends (from Active Users Chart - e.g., \"Active users increased by 15% this week\"). Summary of Token Usage trends (from Token Usage Chart - e.g., \"Token consumption remained stable compared to last week\"). Key Insights and Potential Actions: Based on your analysis, include a brief summary of key insights and any recommended actions (e.g., \"Engagement Rate is healthy, continue current adoption strategies,\" or \"Engagement Rate declined slightly, investigate potential causes and consider targeted training\"). Scenario 2: Identifying Underperforming AI entities (Use Case Level Analysis) Goal: As a Project Admin, you want to identify AI entities within your project that have low user acceptance rates. You suspect that some entities might not be as effective or user-friendly as others and need to pinpoint those for improvement. How to Use Monitoring: Access Monitoring Landing Page: Navigate to the Monitoring page in ELITEA. Select Your Project: In the Filtering Panel, select your specific project from the Projects dropdown menu. Set Time Period to \"Last Month\": Use the From and To Date filters to set the time range to cover the past month to get a representative sample of Use Case usage. Set Aggregation to \"Week\": Set the Aggregation to \"Week\" to analyze weekly trends in Acceptance Rate. Filter by \"Type\" and \"Name\": Leave the \"Type\" filter set to \"Prompts, Datasources, Agents, Conversations\" (or \"All Items\"). Leave the \"Name\" filter set to \"All Items\" initially to get an overview of all Use Cases. Apply Filters: Click the \"Refresh\" button. Review Key Metrics Summary Panel: Examine the Acceptance Rate metric in the Key Metrics Summary Panel. This provides the overall Acceptance Rate for all Use Cases within your project. Note this baseline value. Analyze Acceptance Rate Chart: Focus on the Acceptance Rate Chart in the Visual Metrics Panel. Observe the overall Acceptance Rate trend over the past month. Granular Use Case Analysis: Now, use the \"Type\" and \"Name\" filters to analyze Acceptance Rates for individual Use Cases: Select \"Type\" to \"Conversations\": This will filter the data to focus on conversation-based Use Cases. Use \"Name\" dropdown to select individual Use Case Names one by one: For each Use Case Name, click \"Refresh\" and observe the Acceptance Rate metric in the Key Metrics Summary Panel and the Acceptance Rate Chart . Note down the Acceptance Rate for each Use Case. Identify Low Acceptance Use Cases: Compare the Acceptance Rates of different Use Cases. Identify Use Cases with significantly lower Acceptance Rates compared to the average or your desired benchmark (e.g., Use Cases with Acceptance Rates below 60%). Investigate Low Acceptance Use Cases: For the Use Cases with low Acceptance Rates, investigate potential causes: Review User Feedback: Gather user feedback specifically on these underperforming Use Cases. Analyze Use Case Workflow: Examine the design and complexity of the Use Case workflow. Is it intuitive and user-friendly? Evaluate Output Quality: Assess the quality and relevance of the AI-generated outputs for these Use Cases. Take Action to Improve: Based on your investigation, take targeted actions to improve the low-acceptance Use Cases: Enhance User Training: Provide more specific training and guidance for these Use Cases. Refine Use Case Design: Simplify the workflow, improve prompts, or adjust agent logic to enhance output quality and user experience. Scenario 3: Monitoring Prompt Performance and Optimizing for Quality Goal: As a Prompt Engineer, you want to monitor the performance of specific Prompts within your project, identify underperforming prompts, and optimize them for better relevance and reliability. How to Use Monitoring: Access Monitoring Landing Page: Navigate to the Monitoring page in ELITEA. Select Your Project: In the Filtering Panel, select your specific project from the Projects dropdown menu. Set Time Period to \"Last 3 Months\": Use a longer timeframe (e.g., \"Last 3 Months\") to get a broader performance overview. Set Aggregation to \"Month\": Set Aggregation to \"Month\" for monthly trend analysis. Set \"Type\" to \"Prompts\": In the \"Type\" dropdown, specifically select \"Prompts\" to focus your analysis on prompts. Leave \"Name\" as \"All Items\" initially: Start with an overview of all prompts. Apply Filters: Click the \"Refresh\" button. Analyze Instruction Quality vs. Usage Matrix: Focus on the Instruction Quality vs. Usage Matrix in the Accuracy Charts Panel. Identify Low-Quality, High-Usage Prompts: Look for prompts in the Bottom-Right Quadrant (Low Quality, High Usage). These are critical prompts that need immediate attention and improvement. Note down the names of these prompts. Identify High-Quality, Low-Usage Prompts: Look for prompts in the Top-Left Quadrant (High Quality, Low Usage). These are prompts with untapped potential. Note down their names for potential promotion and wider utilization. Granular Prompt Analysis: For the prompts you identified in step 8 (especially low-quality, high-usage ones), perform a more detailed analysis: Use \"Name\" Filter: Select the name of a specific prompt from the \"Name\" dropdown and click \"Refresh.\" Review Key Metrics Summary Panel: Examine the Acceptance Rate , Relevance , and Reliability metrics in the Key Metrics Summary Panel for this specific prompt. Analyze Performance Charts: Focus on the Relevance Chart and Reliability Chart in the Accuracy Charts Panel, and the Acceptance Rate Chart . Observe the trends of these metrics over the past months. Optimize Prompts: Based on your analysis, take action to optimize underperforming prompts: Prompt Engineering: Refine the prompt instructions, context, input parameters, and examples to improve output quality and relevance. User Feedback: Gather user feedback specifically on these prompts to understand their pain points and areas for improvement. A/B Testing (If Applicable): If possible, create variations of the prompt and A/B test them to see which version performs better based on monitoring metrics. Promote High-Quality, Low-Usage Prompts: For prompts in the \"High Quality, Low Usage\" quadrant, promote their use through documentation, training, or in-app suggestions to increase their visibility and utilization. These are just a few examples of how you can utilize the ELITEA Monitoring feature for practical analysis and reporting. By strategically applying filters, understanding the metrics and charts, and focusing on specific use cases and entities, you can unlock valuable insights to continuously improve ELITEA's effectiveness and user experience.","title":"Monitoring Guide"},{"location":"feature-guides/core-features/monitoring/#elitea-monitoring-user-guide-understanding-application-usage-and-performance","text":"","title":"ELITEA Monitoring User Guide: Understanding Application Usage and Performance"},{"location":"feature-guides/core-features/monitoring/#introduction","text":"This user guide provides a comprehensive overview of the Monitoring feature in ELITEA. This powerful tool is designed to offer deep insights into the application's usage and performance, empowering administrators and users to make informed decisions for optimization and improvement. Whether you're looking to understand user engagement, assess the effectiveness of your entities (prompts, datasources, agents and conversations), or identify areas for enhancement, the Monitoring feature provides the data and visualizations you need. Purpose of the Monitoring Feature: Gain Insights into Application Usage: Understand how users are interacting with ELITEA, including the frequency of use, active user trends, and popular features. Evaluate Each Entity Performance: Assess the effectiveness of your prompts, datasources, and agents by tracking metrics like user engagement and acceptance rate of AI generated output . Identify Areas for Optimization: Pinpoint areas where user engagement can be improved and understand how effectively AI generated outputs are being utilized. Make Data-Driven Decisions: Utilize concrete data and visualizations to guide your strategies for improving ELITEA's adoption and effectiveness. How to Use This Guide: This guide is structured to provide a detailed understanding of each aspect of the Monitoring feature. You will find explanations of key metrics, how they are calculated, and how to interpret the various charts and data presented. Whether you are a Chapter Manager, Project Admin, or a user interested in understanding ELITEA usage, this guide will equip you with the knowledge to effectively utilize ELITEA's monitoring capabilities.","title":"Introduction"},{"location":"feature-guides/core-features/monitoring/#overview-of-monitoring-feature","text":"The ELITEA Monitoring feature is a powerful analytics tool designed to track and visualize key aspects of application usage and the effectiveness of AI-driven workflows. It allows users with administrative roles to gain valuable insights into how ELITEA is being adopted and utilized within their projects and portfolios. Key Monitoring Capabilities (Currently in Scope): User Engagement: Measures how actively users with the \" Monitor \" role are interacting with ELITEA projects. This helps understand the adoption and active usage levels within your teams. Acceptance Rate of AI Generated Output: Tracks how often users accept and utilize the outputs generated by ELITEA's prompts, datasources and agents. This metric provides insights into the perceived usefulness and quality of the AI-driven assistance provided by ELITEA. Important Note: ELITEA's Monitoring feature exclusively tracks activities performed by users who have been assigned the \"Monitor\" role within ELITEA projects. This ensures that the metrics reflect the engagement and usage patterns of designated users who are intended to utilize and benefit from ELITEA's capabilities. It's important to note that Monitoring is a cross-project capability . This means that regardless of which project is currently selected in the Project dropdown menu at the top of the screen, the Monitoring screen will provide data aggregated across all projects that you have Admin access to. This allows for portfolio-level analysis and a holistic view of ELITEA usage across your organization. Future Enhancements: ELITEA's Monitoring feature is continuously evolving. Future updates will expand the scope of monitoring capabilities to include metrics that measure: Relevancy of User Input: Assess how well user inputs align with the intended context and purpose of ELITEA's functionalities. Relevancy of Output Generated by ELITEA: Evaluate the quality and relevance of the outputs generated by ELITEA in relation to user inputs and needs. These future metrics will provide even deeper insights into the effectiveness and efficiency of ELITEA, allowing for more fine-tuned optimization and improvement. Here's the enhanced section for the ELITEA Monitoring User Guide, detailing Project Types, Grouping, and User Role Assignment for Monitoring:","title":"Overview of Monitoring Feature"},{"location":"feature-guides/core-features/monitoring/#project-scope-and-user-roles-in-monitoring","text":"ELITEA Monitoring provides flexible options to analyze data at different levels, from individual projects to aggregated group (portfolio) views. Understanding the different project types and user roles is crucial for effectively utilizing the Monitoring feature.","title":"Project Scope and User Roles in Monitoring"},{"location":"feature-guides/core-features/monitoring/#project-types-in-elitea-monitoring","text":"ELITEA Monitoring allows you to review data across various project scopes, catering to different analytical needs: All projects: This option provides a comprehensive, aggregated view of monitoring data across all projects available within your ELITEA deployed environment. This is useful for high-level, organization-wide analysis. Public Project: ELITEA includes a default Public project , accessible to all users. Monitoring data for the Public project can be reviewed separately to understand usage patterns within this shared space. Private Workspace: Each user has a personal Private workspace. You always have access to your own Private workspace and can review its monitoring data in isolation. Team Projects: These are projects created for specific teams or purposes. Access to Team projects and their monitoring data is controlled by user roles and permissions. Groups (Portfolios): ELITEA allows you to group multiple projects together into user-defined Groups (often referred to as Portfolios). This enables you to aggregate monitoring data across a collection of related projects for portfolio-level reporting and analysis. Access and Permissions: Your access to monitoring data for different project types depends on your role and permissions within ELITEA: Project and Group Access Based on Roles: Within the Monitoring feature, the projects and groups you can select and view data for are determined by your Admin role and project/group memberships. Private Workspace and Public Project Access: All users will always have access to monitoring data for the Public project and their own Private workspace.","title":"Project Types in ELITEA Monitoring"},{"location":"feature-guides/core-features/monitoring/#grouping-projects-for-portfolio-level-monitoring","text":"To facilitate portfolio-level reporting and analysis, ELITEA allows you to group multiple projects together. Here's how to create and utilize Project Groups for monitoring: Creating a Project Group: Select a Team Project: From the Projects dropdown list at the top of the ELITEA interface, select a Team project that you want to include in a group. Navigate to Project Settings: Go to Settings -> Projects page . Edit Groups: Locate the Groups field (displayed as \"Groups:\") and click the Pencil icon next to it to edit the project's group membership. Create or Select a Group: Create New Group: To create a new group, type the desired group name in the input field. Select Existing Group: To add the project to an existing group, start typing the name of the group and select it from the dropdown list of existing groups that appears. Save Group Assignment: Click the \"Save\" button (or a checkmark icon) to add the selected project to the specified group. Repeat for Other Projects: To add more projects to the same group, select another Team project from the Projects dropdown list and repeat steps 2-5, ensuring you select the same group name in step 4. Access Group Monitoring Data: Navigate to the Monitoring page. Select Project Group in Filters: Click the Projects dropdown in the Filtering Panel. Scroll down the list \u2013 you will now see your newly created Project Group listed at the bottom, along with the individual projects that are members of that group. View Portfolio-Level Metrics: Click on the name of your created Project Group in the Projects dropdown. The Monitoring page will now display aggregated metrics and charts for all projects that are members of that group, providing a Portfolio-level view. Navigating Project Groups and \"All projects\" in Monitoring: When you select a Project Group (or \"All projects\" ) in the Projects dropdown on the Monitoring page, you will notice a visual representation of the projects included in that scope. Project Rectangles: Below the \"Projects\" dropdown, you will see a series of selectable rectangles, each representing a project that is part of the selected Group (or all projects if \"All projects\" is selected). Drilling Down into Individual Projects: These rectangles are interactive. By clicking on a specific project rectangle , you can \"drill down\" into the monitoring data for that individual project. The Monitoring page will then update to display metrics and charts specifically for the project you clicked on, allowing for more granular project-level analysis.","title":"Grouping Projects for Portfolio-Level Monitoring"},{"location":"feature-guides/core-features/monitoring/#assigning-the-monitor-role-to-users-in-team-projects","text":"By default, users are automatically assigned the \"Monitor\" role only within their Private workspace and the Public project . To enable monitoring for users within Team projects , you need to explicitly assign them the \"Monitor\" role within those projects. Only users with the Admin role in a project have the permission to change roles for other users in that project. Assigning the \"Monitor\" Role: Select the Team Project: From the Projects dropdown at the top of the ELITEA interface, select the Team project where you want to assign the \"Monitor\" role to a user. Navigate to Project Settings: Go to Settings -> Projects page . Locate Teammates Table: Scroll down the \"Projects\" page to find the \"Teammates\" table. This table lists all users who are members of the selected Team project and their assigned roles. Edit User Role: Find the row corresponding to the user to whom you want to assign the \"Monitor\" role. Click the Pencil icon in the \"Role\" column for that user to edit their role. Select \"Monitor\" Role: In the role dropdown menu that appears, select \"Monitor\" as the new role for the user. Apply Changes: Click the Checkmark icon (or \"Save\" button) to apply the role change and save the updated user role. After assigning the \"Monitor\" role to users in your Team projects, their activities within those projects will be included in the ELITEA Monitoring data, allowing you to track their engagement and the effectiveness of ELITEA within your teams.","title":"Assigning the \"Monitor\" Role to Users in Team Projects"},{"location":"feature-guides/core-features/monitoring/#accessing-monitoring-within-elitea","text":"To access the Monitoring screen in ELITEA, follow these steps: Open Settings Menu: Click on your user avatar located in the top right corner of the ELITEA interface. This will open the settings menu. Select Monitoring: In the Settings menu, click on the \"Monitoring\" option. Monitoring Landing Page: After selecting \"Monitoring,\" you will be redirected to the Monitoring Landing Page . This page is the central dashboard where you can filter, view, and analyze various monitoring metrics. Key Components of the Monitoring Landing Page: The Monitoring Landing Page is designed to be intuitive and informative, providing a clear overview of ELITEA usage and performance. It is structured into three main panels, each serving a distinct purpose: 1. Filtering Panel: Tailoring Your Data View The Filtering Panel , located prominently at the top of the Monitoring Landing Page, is your control center for customizing the data displayed throughout the dashboard. It allows you to precisely define the scope of your analysis by applying various filters. By using these filters, you can focus on specific projects, timeframes, Use Cases, or even individual users to gain targeted insights. Here's a breakdown of the filtering options available: Projects: This dropdown menu allows you to select the specific projects or pre-configured Portfolio groupings you want to include in your analysis. Single Project Selection: Choose a specific project from the list to view monitoring data relevant only to that project. Group Selection: Scroll to the bottom of the dropdown to select a user-defined grouping. This aggregates data across all projects within that Group, providing a high-level overview. All Projects: By default, or by selecting an \"All Projects\" option (if available), you can view data aggregated across all projects you have Admin access to. Time Period (From & To Dates): These date fields enable you to define a custom reporting period. \"From\" Date: Select the starting date for your analysis. \"To\" Date: Select the ending date for your analysis. The Monitoring feature will then calculate metrics and display charts based on data within this specified date range. Type: This dropdown filter allows you to narrow down the metrics to specific types of ELITEA entities. You can choose to focus on: Prompts: Analyze metrics related specifically to Prompt usage and performance. Datasources: Focus on metrics related to Datasource access and relevance. Agents: View metrics related to Agent executions and effectiveness. Conversations: Analyze metrics related to user conversations within ELITEA. This allows you to understand overall conversation trends, user engagement at the conversation level, and acceptance rates within conversations. Prompts, Datasources, Agents, Conversations (Combined): This option (often the default) aggregates metrics across all three entity types, providing a broader overview. Name: This dropdown filter becomes active when you select a specific \"Type\" (Prompts, Datasources, or Agents). It allows you to further refine your analysis to a specific entity within the selected type. \"All Items\": (Default) When \"All Items\" is selected, the metrics will be calculated for all entities of the chosen \"Type\". Specific Entity Selection: Choose a specific Prompt name, Datasource name, Agent name or Conversation name from the list to view metrics for that individual entity only. Users: This dropdown allows you to filter the data to show activity related to specific users. \"All Users\": (Default) Metrics are calculated based on the activity of all users with the \" Monitor \" role within the selected projects and timeframe. Specific User Selection: Choose a specific user from the list to view metrics related only to that user's activity. Aggregation: This dropdown menu allows you to control how the data is grouped and displayed in charts. Choosing the right aggregation level is crucial for visualizing data at the appropriate granularity for your analysis. Available aggregation options include: Hour: Data is grouped and displayed on an hourly basis. This provides the most granular view, allowing you to identify peak usage times within a day, track hourly fluctuations, and potentially pinpoint immediate issues or usage spikes. Day: Data is grouped and displayed on a daily basis. This is a common and versatile aggregation level, useful for understanding daily usage patterns, tracking daily active users, and monitoring daily token consumption. Week: Data is aggregated and displayed on a weekly basis. This provides a broader view, smoothing out daily fluctuations and highlighting weekly trends in adoption, engagement, and performance. Weekly aggregation is often suitable for regular weekly reporting and tracking week-over-week changes. Two Weeks: Data is aggregated and displayed over two-week periods. This aggregation level can be particularly useful for teams or projects that operate in two-week sprints. It allows you to align your monitoring reports with sprint cycles and assess performance and usage across a complete sprint. Three Weeks: Data is aggregated and displayed over three-week periods. Similar to the \"Two Weeks\" option, this aggregation is beneficial for teams or projects following three-week sprint cycles. It provides a sprint-level view of metrics, enabling performance evaluation within the context of a three-week iteration. Month: Data is aggregated and displayed on a monthly basis. This provides the broadest overview, smoothing out weekly variations and highlighting long-term trends in adoption, usage, and performance over calendar months. Monthly aggregation is useful for high-level reporting, executive summaries, and identifying long-term patterns. Refresh Button: After you have selected your desired filters in the Filtering Panel, click the \"Refresh\" button to apply these filters. Clicking \" Refresh \" triggers the Monitoring feature to recalculate all metrics and update the charts based on your chosen criteria. Reset Filters Button: Click the \" Reset Filters \" button to clear all currently applied filters and revert the Monitoring Landing Page back to its default view, displaying data for all projects and the default timeframe. Note on Filter Persistence: ELITEA Monitoring remembers your filter selections during your active session for a seamless analysis experience. Filters are Auto-Saved: When you click Refresh your filter settings are saved for your current session. Persistence Across Session: Your filters remain active even if you navigate to other ELITEA pages or refresh the Monitoring page. Resetting Filters to Default: Filters are reset to default (\"All Projects,\" \"Default Time Period,\" etc.) only when: You click the \" Reset Filters \" button. You log out of ELITEA. This ensures you maintain your analysis context without re-applying filters repeatedly during your active session. 2. Key Metrics Summary Panel: At-a-Glance Performance Indicators The Key Metrics Summary Panel , positioned below the Filtering Panel , provides a concise and easily digestible overview of the most important performance indicators for ELITEA. This panel displays key metrics as numerical values in individual boxes, allowing you to quickly grasp the overall state of application usage and effectiveness based on your applied filters. It's important to understand how filters affect the metrics displayed in this panel: Project Filter Dependency: The metrics Users, Prompts, Agents, and Conversations are static counts that are only influenced by the \"Projects\" filter. Selecting different projects or groups in the \" Projects \" dropdown will change these numbers to reflect the totals within those selected projects. However, these static counts are not affected by the \"Time Period,\" \"Type,\" \"Name,\" or \"Users\" filters. They always represent the total number of users, prompts, agents, and conversations ever created within the selected project(s). Dynamically Filtered Metrics: In contrast, the metrics Tokens in, Tokens out, Engagement, and Acceptance Rate are dynamic and respond to all filters applied in the Filtering Panel, including \"Projects,\" \"Time Period,\" \"Type,\" \"Name,\" and \"Users.\" These metrics are recalculated and updated based on the specific filter criteria you set, providing contextually relevant performance indicators for your chosen scope. The metrics included in this panel are: Users: Displays the total number of unique users who have ever interacted with ELITEA within the selected project(s). (Static, Project filter dependent) Tokens in: Shows the total number of tokens generated by LLMs and sent back to ELITEA as responses within the filtered scope. This reflects the output token generation for the applied filters. (Dynamic, All filters dependent) Tokens out: Displays the total number of tokens sent to LLMs by ELITEA within the filtered scope. This represents the input token consumption for the applied filters. (Dynamic, All filters dependent) Engagement: Presents the Engagement Rate as a percentage, indicating the proportion of active users with the \"Monitor\" role within the filtered scope and time period . (Dynamic, All filters dependent) Acceptance Rate: Shows the Acceptance Rate as a percentage, reflecting the proportion of conversations where users accepted the AI-generated output within the filtered scope and time period . (Dynamic, All filters dependent) Prompts: Displays the total number of prompts created within the selected project(s). (Static, Project filter dependent) Agents: Displays the total number of agents created within the selected project(s). (Static, Project filter dependent) Conversations: Displays the total number of conversations initiated within the selected project(s). (Static, Project filter dependent) Understanding which metrics are static and which are dynamic based on the filters is crucial for correctly interpreting the data presented in the Key Metrics Summary Panel and drawing accurate conclusions about ELITEA usage and performance. 3. Visual Metrics Panel: Detailed Charts and Trend Analysis The Visual Metrics Panel , located below the Key Metrics Summary Panel , provides a comprehensive suite of charts and visualizations for in-depth analysis of ELITEA usage, performance, and user sentiment. This panel is organized into several sections, each focusing on a specific aspect of the monitoring data: Adoption and Usage: This section contains charts that visualize user adoption and overall application usage trends over time. Active Users Chart: A bar chart visualizing the number of unique active users for each time interval (e.g., day, week, month) within your selected timeframe. This chart helps you understand user adoption trends and identify periods of high or low activity. It often distinguishes between \"active\" and \"inactive\" users within each interval. Token Usage Chart: A line chart displaying the trend of token consumption over time. It typically shows two lines: Tokens in: Representing the number of tokens generated by the LLMs (output tokens). Tokens out: Representing the number of tokens sent to the LLMs (input tokens). This chart helps you monitor token usage patterns, identify potential cost optimization opportunities, and understand the computational demand on the LLM system over time. Acceptance Rate: This section features the Acceptance Rate Chart , a bar chart visualizing the number of interactions where users accepted the output versus those where they did not, for the selected period. Sentiments: This section provides insights into user and LLM sentiment through pie charts: Human Input Chart: A pie chart showing the distribution of sentiment (Positive, Negative, Neutral) in user inputs. LLM Output Chart: A pie chart showing the distribution of sentiment (Positive, Negative, Neutral) in LLM-generated outputs. Accuracy: This section presents charts related to the accuracy and quality of ELITEA interactions: Relevance Chart: A line chart displaying the average relevance scores of user inputs (vs. context) and LLM outputs (vs. user inputs) over time. Reliability Chart: A line chart showing the average reliability score of LLM responses over time. Instruction Quality vs Usage Matrix: A 2x2 matrix visualizing the relationship between the quality score and usage frequency of prompts (or other relevant entities). Topics: This section includes the Topics Chart , a clustered column chart showing the distribution of prompts, datasources, and agents across different identified topics. Topics Summary: This section features the Topics Summary Chart , a clustered column chart showing the distribution of user queries across different identified topics. These charts, collectively presented in the Visual Metrics Panel, provide a rich and diverse set of visualizations for analyzing ELITEA usage patterns, user sentiment, AI artifact performance, and overall application effectiveness over time. By effectively utilizing the Filtering Panel and interpreting the information presented in the Key Metrics Summary Panel and Visual Metrics Panel , you can gain a comprehensive understanding of ELITEA usage and performance, enabling data-driven decisions for optimization and continuous improvement.","title":"Accessing Monitoring Within ELITEA"},{"location":"feature-guides/core-features/monitoring/#metrics","text":"","title":"Metrics"},{"location":"feature-guides/core-features/monitoring/#overview","text":"The Monitoring feature in ELITEA presents a variety of metrics and charts to help you understand different aspects of application usage and performance. This section provides a detailed breakdown of each currently available metric, explaining its purpose, how it is calculated, the formula used, and practical examples to illustrate its interpretation and utilization. Understanding these metrics is key to effectively monitoring ELITEA's adoption, user engagement, and the effectiveness of your AI-powered workflows.","title":"Overview"},{"location":"feature-guides/core-features/monitoring/#in-scope-metrics","text":"Currently, ELITEA Monitoring focuses on two key metrics that provide valuable insights into user interaction and workflow success: Engagement Rate and Acceptance Rate . These metrics are designed to be actionable, helping you identify areas for improvement and measure the impact of your optimization efforts.","title":"In-Scope Metrics"},{"location":"feature-guides/core-features/monitoring/#engagement-rate-measuring-user-activity","text":"Description: The Engagement Rate metric is a vital indicator of user adoption and active participation within ELITEA. It quantifies the percentage of users with the designated \" Monitor \" role who are actively interacting with ELITEA projects during a specific time period. A higher Engagement Rate suggests broader adoption and more consistent utilization of ELITEA within your team. Formula: Unpacking the Calculation Engagement Rate = (Number of Active Users with \u201cMonitor\u201d role) / (Total Number of Users with \u201cMonitor\u201d role) * 100% Let's break down the components of this formula: Numerator: Number of Active Users with \u201cMonitor\u201d role: This represents the count of unique individuals who have been assigned the \"Monitor\" role in ELITEA and have demonstrated active engagement during the chosen time frame. \"Active engagement\" is defined by specific actions (see \"Definition of 'Active User'\" below). Denominator: Total Number of Users with \u201cMonitor\u201d role: This is the total count of all users who have been granted the \"Monitor\" role within the selected Project or Portfolio. This represents the total potential user base for ELITEA monitoring. Multiplication by 100%: The result of the division is multiplied by 100 to express the Engagement Rate as a percentage, making it easier to interpret and compare. Calculation Period: The Engagement Rate is calculated for the specific time period defined by the \"From\" and \"To\" dates that you select in the Filtering Panel. This allows you to analyze engagement over different durations, such as weekly, monthly, or custom date ranges. Key Notes: Calculated per Project or Group: Engagement Rate is not a global metric. It is calculated and displayed separately for each Project or Group that you select in the \"Projects\" filter. This allows you to compare engagement levels across different teams or areas of your organization. Definition of \"Active User\": To be counted as an \"active user\" for the Engagement Rate metric, a user with the \" Monitor \" role must have performed at least one of the following actions within the selected timeframe: Engaged in a Conversation (New or Existing) and Interacted with an ELITEA Entity: This action encompasses both initiating new chat sessions and actively participating in existing ones, demonstrating ongoing engagement with ELITEA's core functionalities. To be considered \"active\" through conversation engagement, the user must have: Created a new conversation within the Chat interface, OR interacted with an existing conversation. This means either starting a fresh chat or continuing an ongoing dialogue in a previously created chat. Interacted within that conversation (whether new or existing) with at least one of the following ELITEA entities: an LLM model directly, a Prompt, a Datasource, or an Agent. Simply viewing a conversation or having it open without actively sending messages to or receiving responses from an ELITEA entity does not qualify as \"active\" usage. Directly Executed an ELITEA Entity: This action signifies a user directly invoking and utilizing ELITEA's core functionalities outside of a standard chat conversation flow. To be considered \"active\" through this action, the user must have: Executed (run or triggered) at least one of the following ELITEA entities: a Prompt, a Datasource, or an Agent. This includes direct executions initiated through any part of the ELITEA interface, not solely within chat conversations. How to Utilize Engagement Rate for Actionable Insights: The User Engagement Rate is not just a number; it's a powerful diagnostic tool to understand ELITEA adoption and guide improvement efforts. Identify Low Engagement as a Trigger for Action: A consistently low Engagement Rate (e.g., consistently below 50%, or below your expected target) should serve as a trigger for investigation and action. It suggests that a significant portion of users with the \" Monitor \" role are not actively using ELITEA, indicating a potential gap between the intended and actual utilization of the platform. Diagnose Potential Causes of Low Engagement: A low Engagement Rate prompts you to investigate why users are not engaging. Consider these potential reasons: Insufficient User Training and Onboarding: Users may be unaware of ELITEA's capabilities, unsure how to use it effectively, or lack the necessary skills to leverage its Use Cases. Resolution: Implement or enhance user training programs. Provide hands-on workshops, create easily accessible user guides and tutorials, offer personalized onboarding support, and establish channels for users to ask questions and receive guidance. Lack of Use Case Relevance to User Needs: The currently available Use Cases within ELITEA might not be directly relevant or valuable to the daily tasks and workflows of the intended users. If users don't find the Use Cases helpful for their actual work, they are less likely to engage. Resolution: Actively solicit user feedback on the relevance and usefulness of existing Use Cases. Conduct user interviews, surveys, or feedback sessions to understand their specific needs and pain points. Based on this feedback, fine-tune existing Use Cases to better align with user workflows, or prioritize the development of new Use Cases that address unmet needs and provide more tangible value to users' daily activities. Recommendations for Effective Engagement Rate Monitoring: Establish a Regular Review Cadence: Make reviewing the Engagement Rate a recurring activity. Weekly reviews are highly recommended to track trends and identify any sudden drops or consistently low engagement levels. Set Weekly Reporting Timeframes: For consistent weekly tracking, always use the \"From\" and \"To\" date filters to define the reporting period as the past week (e.g., Monday to Sunday of the previous week) . This ensures that you capture a complete week's worth of usage data, accounting for variations in weekday vs. weekend activity and potential offshore team usage patterns. Example Scenario: Let's consider \"Project Alpha\" and analyze its Engagement Rate for the past week (Monday to Sunday): Data: Total users with \" Monitor \" role in \"Project Alpha\": 50 Number of users in \"Project Alpha\" who were \"active\" (created chats or used workflows) during the past week: 20 Engagement Rate Calculation: (20 Active Users / 50 Total Users) * 100% = 40% Interpretation: An Engagement Rate of 40% for \"Project Alpha\" suggests that a significant majority (60%) of users with the \"Monitor\" role are not actively engaging with ELITEA within this project. This low rate warrants further investigation. You should explore potential reasons for this low engagement, such as lack of training, irrelevant Use Cases, or technical barriers, and implement appropriate resolutions to improve user adoption and utilization.","title":"Engagement Rate: Measuring User Activity"},{"location":"feature-guides/core-features/monitoring/#acceptance-rate-gauging-use-case-and-entity-effectiveness","text":"Description: The Acceptance Rate metric provides crucial insights into the perceived value and successful utilization of ELITEA's AI-powered capabilities, extending beyond just Use Cases to encompass the effectiveness of individual Prompts, Datasources, and Agents. It quantifies the percentage of times users take a defined \"acceptance action\" after interacting with ELITEA, indicating they found the generated output or the outcome of the execution useful and successfully leveraged ELITEA to achieve their intended goal. A higher Acceptance Rate signifies that ELITEA's functionalities are effectively meeting user needs and providing valuable assistance across various interaction types. Formula: Understanding the Broader Acceptance Calculation Acceptance Rate = (Accepted Interactions) / (All Interactions) * 100% Let's understand the components of this formula in this broader context: Numerator: Accepted Interactions: This represents the count of interactions where a user has performed a specific \"acceptance action.\" Crucially, \"interactions\" now encompass not only conversations but also direct executions of Prompts, Datasources, and Agents. An interaction is deemed \"Accepted\" when the user performs a relevant \" acceptance action \" signaling successful utilization of ELITEA's output or functionality. Denominator: All Interactions: This is the total count of all user interactions within the selected scope (Use Case, Project, timeframe, or entity type). \"Interactions\" now include all attempts to utilize ELITEA, whether through conversations or direct executions of Prompts, Datasources, and Agents. Calculation Period: The Acceptance Rate is calculated based on the \"From\" and \"To\" dates selected in the Filtering Panel, allowing you to analyze acceptance over different timeframes and across various types of interactions. Key Notes: Expanding the Definition of \"Accepted Interactions\" Broader Scope of Acceptance Actions: The definition of \"Accepted Interactions\" is now expanded to encompass a wider range of user actions that indicate successful utilization of ELITEA, regardless of whether the interaction occurs within a conversation or through direct entity execution. \"Acceptance actions\" now include: Keyword Acceptance within Agent Conversations (Explicit Approval): As before, for Agents designed with explicit approval steps, typing a pre-defined \"acceptance keyword\" (e.g., \"approved,\" \"publish\") within a conversation is considered acceptance. Content Copying Actions: Indicating user utilization of generated text or data: Manual Text Selection and Copy: Selecting and copying generated text directly from the ELITEA interface. \"Copy to Clipboard\" Button Usage: Clicking a \"Copy to Clipboard\" button associated with generated output. \"Copy to Messages\" Button Usage (Prompts): Clicking a \"Copy to Messages\" button specifically available for Prompt executions, indicating the user is incorporating the prompt's output into a conversation. Table Export/Download Actions (Prompts): For Prompts that generate tabular data, utilizing export or download options signifies acceptance: \"Download as xlsx\" : Downloading generated tables in Excel format. \"Copy as html\" : Copying table data in HTML format. \"Copy as markdown\" : Copying table data in Markdown format. Agent Goal Completion Actions (External Service Interaction): For Agents designed to interact with external services, successful goal completion is considered acceptance: File Creation in GitHub: Agents designed to create files in GitHub repositories. Issue Creation in Jira: Agents designed to create issues in Jira. Page Creation in Confluence: Agents designed to create pages in Confluence. Any other Agent-specific action that signifies successful completion of its intended task in an external system. Datasource Specific Actions: Actions indicating utilization of data retrieved from Datasources: Downloading Deduplication Results as Excel File: Downloading the output of deduplication processes from Datasources in Excel format. Copying Search Results: Copying search results obtained from Datasource queries. Contextual Application: These \"acceptance actions\" are tracked and considered for Acceptance Rate calculations regardless of whether they occur: Within Chat Conversations: When users interact with Prompts, Datasources, or Agents through the ELITEA Chat interface. During Direct Entity Execution: When users directly execute Prompts, Datasources, or Agents outside of a chat conversation, through other parts of the ELITEA interface. How to Utilize Acceptance Rate for Broader Performance Improvement: The Acceptance Rate, now with its expanded definition, provides a comprehensive measure of user satisfaction and the effectiveness of ELITEA's AI capabilities across various interaction modes. Identify Areas of Friction and Success Across ELITEA: A low Acceptance Rate, whether for a specific Use Case, a particular Prompt, a Datasource, or an Agent, points to potential areas of friction, usability issues, or output quality problems that need attention. Conversely, high Acceptance Rates highlight successful functionalities and well-performing entities that are effectively meeting user needs. Diagnose Issues Based on Interaction Type: Analyze Acceptance Rates in conjunction with the \"Type\" and \"Name\" filters in the Monitoring Panel to pinpoint specific areas for improvement: Low Prompt Acceptance Rate: Focus on the Prompt itself. Review the prompt's instructions, context, input parameters, and output examples. Experiment with prompt engineering techniques to improve output relevance, clarity, and accuracy. Consider user feedback on specific prompts to identify areas for refinement. Low Agent Acceptance Rate: Analyze the Agent's workflow, the quality of prompts and tools it utilizes, and its overall logic. Debug potential issues in the agent's execution flow, error handling, or interaction with external services. Low Datasource Acceptance Rate: Examine the Datasource's configuration, data quality, and query effectiveness. Ensure the datasource is providing relevant and accurate information for the intended use cases. Investigate if query parameters are being correctly mapped and if the datasource is reliably accessible. Recommendations for Comprehensive Acceptance Rate Monitoring: Weekly Review Remains Crucial: Continue to prioritize weekly reviews of Acceptance Rate metrics to proactively identify and address performance issues across all aspects of ELITEA. Granular Analysis by Type and Name: Leverage the \"Type\" and \"Name\" filters extensively to analyze Acceptance Rates not only by Use Case but also by individual Prompts, Datasources, and Agents. This granular view is essential for pinpointing specific AI artifacts or functionalities that require optimization. Weekly Timeframe for Consistency: Maintain the practice of using a weekly timeframe (e.g., Monday to Sunday of the previous week) for consistent and comparable Acceptance Rate tracking across different entities and time periods. Example Scenario (Expanded Scope): Let's consider a scenario where you are analyzing the Acceptance Rate for a specific Prompt, \"User Story Creator Prompt,\" used within \"Project Alpha\" over the past week: Data: Total Executions of \"User Story Creator Prompt\" in \"Project Gamma\" last week (both within chats and direct executions): 150 Number of \"Accepted Interactions\" for \"User Story Creator Prompt\" (users copied output, downloaded table, etc.): 75 Acceptance Rate Calculation: (75 Accepted Interactions / 150 Total Interactions) * 100% = 50% Interpretation: An Acceptance Rate of 50% for the \"Code Summary Prompt\" suggests that this particular prompt is only meeting user needs in half of its executions. This warrants a focused investigation into the prompt's design, output quality, and user expectations. You should review the prompt's instructions, analyze user feedback related to code summarization tasks, and potentially refine the prompt to improve its accuracy, clarity, and usefulness, aiming to increase its Acceptance Rate and ensure it effectively serves its intended purpose within ELITEA. This enhanced \"Acceptance Rate\" section now provides a much broader and more practical understanding of how to utilize this metric to assess the effectiveness of ELITEA's AI capabilities across Use Cases, Prompts, Datasources, and Agents, whether used in conversations or directly executed. Let me know if you have any further refinements!","title":"Acceptance Rate: Gauging Use Case and Entity Effectiveness"},{"location":"feature-guides/core-features/monitoring/#charts","text":"The Visual Metrics Panel in ELITEA Monitoring provides a rich set of charts and diagrams to help you visually analyze trends, patterns, and key performance indicators. This section provides a detailed explanation of each chart type, guiding you on how to interpret these visualizations to gain actionable insights into ELITEA usage and effectiveness.","title":"Charts"},{"location":"feature-guides/core-features/monitoring/#adoption-and-usage-charts-tracking-user-activity-and-resource-consumption","text":"These charts provide a visual representation of user adoption and overall application usage trends over time, as well as the consumption of LLM tokens.","title":"Adoption and Usage Charts: Tracking User Activity and Resource Consumption"},{"location":"feature-guides/core-features/monitoring/#active-users-chart-understanding-user-adoption-trends","text":"Purpose: The Active Users Chart helps you visualize user adoption and engagement levels over time. It shows the number of unique active users for each time interval, allowing you to identify trends in user activity and pinpoint periods of high or low engagement. Chart Type: Stacked Bar Chart Data Displayed: X-axis (Horizontal): Represents the Time Interval , based on the \"Aggregation\" level you select in the Filtering Panel (e.g., Day, Week, Month). Each bar on the chart corresponds to a specific time interval. Y-axis (Vertical): Represents the Number of Users . Stacked Bars: Each bar is divided into two stacked segments, representing: Active Users (Teal/Green segment): The number of active users during that time interval. Inactive Users (Light Gray segment): The number of inactive users (users with \"Monitor\" role who did not perform any \"active\" actions) during that time interval. Interpretation: Trend Analysis: Observe the overall trend of the teal/green \"active users\" bars over time. An upward trend indicates increasing user adoption and engagement, while a downward trend may signal declining interest or usability issues. Identify Peak and Low Activity Periods: Visually identify time intervals (days, weeks, etc.) with the highest and lowest bars for \"active users.\" This can help you understand when ELITEA is most and least utilized. Active vs. Inactive User Ratio: Compare the relative sizes of the teal/green \"active users\" segment and the light gray \"inactive users\" segment within each bar. A larger teal/green segment indicates a higher proportion of active users for that period, signifying stronger engagement. Example: If the \"Active Users Chart\" shows consistently increasing teal/green bars over the past few weeks, it indicates positive user adoption and growing engagement with ELITEA. Conversely, if you see a sudden drop in the height of the teal/green bars for a recent week, it might warrant investigation into potential issues affecting user engagement during that period.","title":"Active Users Chart: Understanding User Adoption Trends"},{"location":"feature-guides/core-features/monitoring/#token-usage-chart-monitoring-llm-resource-consumption","text":"Purpose: The Token Usage Chart is essential for monitoring the consumption of LLM resources within ELITEA. It visualizes the trend of tokens sent to LLMs (Tokens Out - input tokens) and tokens received from LLMs (Tokens In - output tokens) over time, helping you understand the computational demand and potential costs associated with ELITEA usage. Chart Type: Line Chart Data Displayed: X-axis (Horizontal): Represents the Time Interval , based on the \"Aggregation\" level you select in the Filtering Panel (e.g., Day, Week, Month). Each point on the lines corresponds to a specific time interval. Y-axis (Vertical): Represents the Number of Tokens , typically measured in thousands (e.g., 50k, 100k, 150k). Lines: The chart displays two distinct lines, each representing a type of token usage: Tokens In (Teal/Cyan Line): Represents the number of tokens generated by LLMs and sent back to ELITEA (output tokens). Tokens Out (Magenta/Purple Line): Represents the number of tokens sent to the LLMs by ELITEA (input tokens). Interpretation: Token Usage Trends: Observe the overall trends of both the \"Tokens In\" (teal/cyan) and \"Tokens Out\" (magenta/purple) lines over time. Upward trends indicate increasing LLM resource consumption, while downward trends suggest decreasing usage or more efficient workflows. Input vs. Output Token Ratio: Compare the relative positions and trends of the two lines. Significant differences in the volume of input vs. output tokens might indicate specific usage patterns or potential areas for optimization. For example, consistently high \"Tokens Out\" with relatively lower \"Tokens In\" might suggest users are sending complex or lengthy queries. Identify Token Spikes: Look for sudden spikes or peaks in either the \"Tokens In\" or \"Tokens Out\" lines. These spikes can highlight periods of unusually high LLM usage, which might warrant further investigation to understand the cause (e.g., a specific event, a new Use Case being heavily utilized). Cost Monitoring (Indirect): While the chart doesn't directly display costs, tracking token usage trends is crucial for cost management, as LLM usage is often billed based on token consumption. Monitoring this chart helps you anticipate potential cost fluctuations and optimize workflows to minimize unnecessary token usage. Example: If the \"Token Usage Chart\" shows a sharp increase in the \"Tokens Out\" (magenta/purple) line during a particular week, it indicates a surge in input tokens sent to LLMs. This could be due to increased user activity, more complex queries being submitted, or a change in Use Case usage patterns. Further investigation, potentially combined with other monitoring data, can help pinpoint the cause of this token usage spike.","title":"Token Usage Chart: Monitoring LLM Resource Consumption"},{"location":"feature-guides/core-features/monitoring/#acceptance-rate-chart-measuring-user-satisfaction-with-ai-outputs","text":"Purpose: The Acceptance Rate Chart visually represents the overall user satisfaction with the outputs generated by ELITEA. It shows the proportion of user interactions where users took \"acceptance actions\" (indicating satisfaction) versus those where they did not. This chart provides a direct measure of how well ELITEA is meeting user needs and delivering valuable results. Chart Type: Stacked Bar Chart Data Displayed: X-axis (Horizontal): Represents the Time Interval , based on the \"Aggregation\" level you select in the Filtering Panel (e.g., Day, Week, Month). Each bar corresponds to a specific time interval. Y-axis (Vertical): Represents the Number of Interactions . Stacked Bars: Each bar is divided into two stacked segments, representing: Accepted Interactions (Teal/Green segment): The number of user interactions during that time interval that were classified as \"Accepted\" based on user actions (copying output, downloading, explicit approval, etc.). Not Accepted Interactions (Light Gray segment): The number of user interactions during that time interval where users did not perform any \"acceptance actions.\" Interpretation: Overall Acceptance Trend: Observe the overall trend of the teal/green \"Accepted Interactions\" bars over time. An upward trend indicates increasing user satisfaction and more effective Use Cases, Prompts, Datasources, or Agents. A downward trend may signal declining user satisfaction or issues with output quality or relevance. Identify Periods of High and Low Acceptance: Visually identify time intervals with the highest and lowest bars for \"Accepted Interactions.\" This can help correlate acceptance rates with specific events, changes in Use Cases, or other factors. Accepted vs. Not Accepted Ratio: Compare the relative sizes of the teal/green \"Accepted Interactions\" segment and the light gray \"Not Accepted Interactions\" segment within each bar. A larger teal/green segment indicates a higher Acceptance Rate for that period, signifying greater user satisfaction and perceived value. Example: If the \"Acceptance Rate Chart\" shows consistently tall teal/green bars, dominating the light gray \"Not Accepted\" segments, it indicates a high overall Acceptance Rate and suggests that ELITEA is effectively meeting user needs and generating valuable outputs. Conversely, if you observe a significant increase in the light gray \"Not Accepted\" segments, particularly for a specific Use Case or time period, it warrants investigation into potential issues affecting user satisfaction and output quality.","title":"Acceptance Rate Chart: Measuring User Satisfaction with AI Outputs"},{"location":"feature-guides/core-features/monitoring/#sentiments-charts-understanding-user-and-ai-tone","text":"These pie charts provide a quick visual overview of the emotional tone expressed in user inputs and generated LLM outputs, helping you assess the overall user experience and the sentiment conveyed by the AI.","title":"Sentiments Charts: Understanding User and AI Tone"},{"location":"feature-guides/core-features/monitoring/#human-input-chart-analyzing-user-sentiment","text":"Purpose: The Human Input Chart visualizes the distribution of sentiment expressed in user inputs to ELITEA. By analyzing the sentiment of user queries and instructions, you can gain insights into user attitudes, potential frustrations, and areas where users might be expressing negative sentiment that needs to be addressed. Chart Type: Pie Chart Data Displayed: Pie Chart Slices: The pie chart is divided into three slices, each representing a sentiment category: Positive (Green slice): Represents the percentage of user inputs classified as having a positive sentiment (e.g., expressing satisfaction, appreciation, optimism). Negative (Orange slice): Represents the percentage of user inputs classified as having a negative sentiment (e.g., expressing frustration, dissatisfaction, criticism). Neutral (Light Blue slice): Represents the percentage of user inputs classified as having a neutral sentiment (e.g., factual questions, objective statements, requests without emotional tone). Interpretation: Overall Sentiment Balance: Examine the relative sizes of the pie chart slices to understand the overall sentiment balance in user inputs. A larger green \"Positive\" slice is generally desirable, indicating a positive user experience. Identify Negative Sentiment Trends: Pay attention to the size of the orange \"Negative\" slice. A consistently large or increasing \"Negative\" slice might signal user frustration, usability issues, or problems with output quality that are causing negative sentiment. Neutral Sentiment as Baseline: The light blue \"Neutral\" slice represents a baseline level of objective or unemotional communication. While a high \"Neutral\" percentage is not necessarily negative, it's important to consider the context. In some cases, a shift from \"Neutral\" to \"Positive\" might be a desirable outcome of improvements to ELITEA. Example: If the \"Human Input Chart\" shows a large green \"Positive\" slice and small orange \"Negative\" and light blue \"Neutral\" slices, it indicates that users are generally expressing positive sentiment in their interactions with ELITEA, suggesting a positive user experience. Conversely, a larger orange \"Negative\" slice might prompt further investigation into potential usability issues or areas of user dissatisfaction.","title":"Human Input Chart: Analyzing User Sentiment"},{"location":"feature-guides/core-features/monitoring/#llm-output-chart-assessing-ai-tone-and-positivity","text":"Purpose: The LLM Output Chart visualizes the distribution of sentiment expressed in the outputs generated by ELITEA's Large Language Models (LLMs). Analyzing the sentiment of LLM responses is crucial for ensuring that the AI is communicating in a helpful, positive, and appropriate tone, contributing to a positive user experience and avoiding unintended negative or unhelpful communication styles. Chart Type: Pie Chart Data Displayed: Pie Chart Slices: Similar to the \" Human Input Chart \" this pie chart is also divided into three slices, each representing a sentiment category for LLM outputs: Positive (Green slice): Represents the percentage of LLM outputs classified as having a positive sentiment (e.g., helpful, encouraging, supportive, optimistic). Negative (Orange slice): Represents the percentage of LLM outputs classified as having a negative sentiment (e.g., unhelpful, discouraging, critical, pessimistic). Neutral (Light Blue slice): Represents the percentage of LLM outputs classified as having a neutral sentiment (e.g., factual responses, objective information, task-oriented outputs without emotional tone). Interpretation: Desired Positive AI Tone: Aim for a large green \"Positive\" slice in the \"LLM Output Chart.\" This indicates that ELITEA's AI is generally communicating in a positive and helpful tone, contributing to a positive user experience. Minimize Negative LLM Sentiment: The orange \"Negative\" slice should ideally be minimal. A significant or increasing \"Negative\" slice in LLM outputs is a cause for concern. It might indicate issues with prompt design, agent logic, or underlying LLM behavior that are causing the AI to generate unhelpful, critical, or negatively toned responses. Contextual Neutrality: The light blue \"Neutral\" slice represents a baseline of objective and task-focused AI communication. While neutrality is often appropriate for factual responses, consider whether a higher proportion of \"Positive\" sentiment in LLM outputs could further enhance user engagement and satisfaction, depending on the specific Use Case and context. Example: If the \"LLM Output Chart\" shows a dominant green \"Positive\" slice, with minimal orange \"Negative\" and a moderate light blue \"Neutral\" slice, it suggests that ELITEA's AI is generally communicating in a helpful and positive manner. However, if you observe a noticeable increase in the orange \"Negative\" slice, it's crucial to investigate the prompts, agents, or configurations that are leading to these negatively toned outputs and take corrective actions to ensure the AI communicates in a more positive and constructive way.","title":"LLM Output Chart: Assessing AI Tone and Positivity"},{"location":"feature-guides/core-features/monitoring/#accuracy-charts-assessing-relevance-and-reliability","text":"These charts provide quantitative measures of the accuracy, relevance, and reliability of ELITEA's AI-powered interactions, helping you evaluate the quality and trustworthiness of the generated outputs and data retrievals.","title":"Accuracy Charts: Assessing Relevance and Reliability"},{"location":"feature-guides/core-features/monitoring/#relevance-chart-measuring-input-and-output-alignment","text":"Purpose: The Relevance Chart helps you assess the relevance of user inputs to the intended context and the relevance of LLM outputs to the user inputs they are responding to. By tracking relevance scores over time, you can monitor the quality of interactions and identify potential issues with input clarity or output alignment. Chart Type: Line Chart Data Displayed: X-axis (Horizontal): Represents the Time Interval , based on the \"Aggregation\" level you select in the Filtering Panel (e.g., Day, Week, Month). Each point on the lines corresponds to a specific time interval. Y-axis (Vertical): Represents the Relevance Score , typically on a scale from 0 to 5 or 0 to 10, where higher scores indicate greater relevance. Lines: The chart displays two distinct lines, each representing a type of relevance score: Input vs. Context (Teal/Cyan Line): Represents the average relevance score of user inputs compared to the intended context of the interaction (e.g., the topic of the Use Case, the purpose of the prompt). Higher scores indicate that user inputs are generally well-aligned with the expected context. Output vs. Input (Magenta/Purple Line): Represents the average relevance score of LLM outputs compared to the user inputs they are responding to. Higher scores indicate that LLM outputs are generally relevant and responsive to user queries and instructions. Interpretation: Relevance Score Trends: Observe the trends of both the \"Input vs. Context\" (teal/cyan) and \"Output vs. Input\" (magenta/purple) lines over time. Ideally, you want to see consistently high relevance scores for both, indicating that user inputs are clear and focused, and LLM outputs are relevant and on-topic. Identify Relevance Dips: Look for dips or downward trends in either relevance line. A drop in \"Input vs. Context\" relevance might suggest users are providing less focused or less relevant inputs, potentially due to confusion or usability issues. A drop in \"Output vs. Input\" relevance might indicate problems with prompt design, agent logic, or LLM performance, leading to less relevant or off-topic outputs. Compare Input and Output Relevance: Compare the relative levels of the two relevance lines. Ideally, you want both lines to be consistently high and relatively close to each other, indicating a good flow of relevant information between users and the AI system. Significant divergence between the lines might warrant further investigation. Example: If the \"Relevance Chart\" shows both the \"Input vs. Context\" and \"Output vs. Input\" lines consistently above a score of 4 (on a 0-5 scale), it suggests a high degree of relevance in ELITEA interactions. Users are generally providing relevant inputs, and the AI is generating relevant and responsive outputs. However, if you notice a dip in the \"Output vs. Input\" line below a certain threshold, it might indicate a need to review and refine the prompts or agents responsible for generating those less relevant outputs.","title":"Relevance Chart: Measuring Input and Output Alignment"},{"location":"feature-guides/core-features/monitoring/#reliability-chart-assessing-llm-response-consistency","text":"Purpose: The Reliability Chart focuses specifically on the reliability of LLM responses, measuring the consistency and predictability of the AI's output quality over time. A high Reliability score indicates that the LLM is generating consistently dependable and trustworthy responses. Chart Type: Line Chart Data Displayed: X-axis (Horizontal): Represents the Time Interval , based on the \"Aggregation\" level you select in the Filtering Panel (e.g., Day, Week, Month). Each point on the line corresponds to a specific time interval. Y-axis (Vertical): Represents the Reliability Score , typically on a scale from 0 to 10 or a percentage scale, where higher scores indicate greater reliability. Reliability Score Line (Teal/Cyan Line): A single line representing the average reliability score of LLM responses for each time interval. Interpretation: Reliability Trend: Observe the trend of the teal/cyan \"Reliability Score\" line over time. A consistently high and stable line is desirable, indicating that the LLM is providing dependable and consistent responses. Identify Reliability Drops: Look for dips or downward trends in the Reliability Score line. A drop in reliability might signal issues with the LLM model itself, changes in the input data quality, or problems with the prompts or agents that are relying on the LLM. Benchmark against Target Reliability: Establish a target reliability score for your ELITEA implementation. Use the Reliability Chart to monitor whether the average reliability score is consistently meeting or exceeding your target. Example: If the \"Reliability Chart\" shows the \"Reliability Score\" line consistently above 8 (on a 0-10 scale), it suggests that ELITEA's LLM responses are generally highly reliable and consistent. However, if you observe a sudden drop in the Reliability Score below your target threshold, it might indicate a need to investigate potential issues affecting LLM performance or consistency, such as model updates, changes in API configurations, or underlying data quality problems.","title":"Reliability Chart: Assessing LLM Response Consistency"},{"location":"feature-guides/core-features/monitoring/#instruction-quality-vs-usage-matrix-optimizing-ai-artifacts","text":"Purpose: The Instruction Quality vs. Usage Matrix is a powerful 2x2 matrix visualization designed to help you optimize your ELITEA Prompts (and potentially Agents or Datasources in future iterations). It plots the relationship between the \"Quality Score\" of your Prompts and their \"Usage\" frequency, allowing you to identify high-performing, underutilized, or low-quality prompts for targeted improvement efforts. Chart Type: 2x2 Matrix (Scatter Plot within Quadrants) Data Displayed: X-axis (Horizontal): Represents Usage (#Calls) , indicating the number of times each Prompt has been executed or called within the selected timeframe. Y-axis (Vertical): Represents Quality Score , reflecting a composite score that combines metrics like Relevance and Reliability to assess the overall quality and effectiveness of each Prompt's instructions. Quadrants: The matrix is divided into four quadrants, each representing a combination of Instruction Quality and Usage levels: Low Quality, Low Usage (Bottom-Left Quadrant): Contains Prompts with both low Quality Scores and low Usage frequency. These are typically prompts that are underperforming and not being actively utilized. High Quality, Low Usage (Top-Left Quadrant): Contains Prompts with high Quality Scores but low Usage frequency. These are potentially valuable prompts that are not being leveraged to their full potential. High Quality, High Usage (Top-Right Quadrant): Contains Prompts with both high Quality Scores and high Usage frequency. These are your top-performing and most valuable prompts, effectively meeting user needs and being actively utilized. Low Quality, High Usage (Bottom-Right Quadrant): Contains Prompts with low Quality Scores but surprisingly high Usage frequency. These are prompts that are being used frequently despite their lower quality, potentially indicating a critical need for improvement or that users are using them despite their limitations due to lack of better alternatives. Data Points: Each data point on the matrix represents a Prompt . The position of the data point within the matrix is determined by its \"Quality Score\" (Y-axis) and \"#Calls\" (X-axis). Hovering over a data point typically reveals the name of the Prompt it represents. Interpretation: Identify High-Value Prompts (Top-Right Quadrant): Focus on the Prompts located in the \"High Quality, High Usage\" (top-right) quadrant. These are your most valuable assets. Analyze these prompts to understand what makes them successful (e.g., clear instructions, relevant context, effective prompt engineering techniques). Leverage these insights to improve other prompts. Optimize Underutilized High-Quality Prompts (Top-Left Quadrant): Prompts in the \"High Quality, Low Usage\" (top-left) quadrant represent untapped potential. Investigate why these high-quality prompts are not being used more frequently. Potential reasons include: * Lack of User Awareness: Users may not know about these valuable prompts. Promote these prompts through training, documentation, or in-app discovery features. * Discoverability Issues: Make sure these prompts are easily discoverable and accessible within the ELITEA interface. * Limited Use Cases: Explore if the use cases for these prompts can be expanded or better communicated to users. Improve or Retire Low-Quality Prompts (Bottom-Left Quadrant): Prompts in the \"Low Quality, Low Usage\" (bottom-left) quadrant are likely underperforming and not providing value. Consider these options: * Improve and Refine: Analyze these prompts to identify specific weaknesses in their instructions, context, or logic. Invest time in prompt engineering to improve their quality and relevance. * Retire or Deprecate: If improvement efforts are not successful, or if these prompts are no longer relevant, consider retiring or deprecating them to avoid user confusion and focus on higher-value assets. Address Low-Quality, High-Usage Prompts (Bottom-Right Quadrant - Critical Attention Needed): Prompts in the \"Low Quality, High Usage\" (bottom-right) quadrant are a critical area for attention. These prompts are being used frequently despite their low quality, which is a potential problem. This situation might indicate: * Critical Need: Users may be using these low-quality prompts because they address a critical need for which no better alternatives exist within ELITEA. * User Frustration: Users might be experiencing frustration and reduced productivity due to the low quality of these frequently used prompts. * Prioritize Improvement: Prioritize immediate improvement efforts for prompts in this quadrant. Focus on significantly enhancing their quality and relevance to better meet the needs of users who are relying on them heavily. Example: By examining the \"Instruction Quality vs. Usage Matrix,\" you might identify that your \"Code Documentation Prompt\" is located in the \"High Quality, High Usage\" quadrant, indicating it's a valuable and well-utilized asset. On the other hand, you might find a \"Competitor Analysis Prompt\" in the \"Low Quality, High Usage\" quadrant, signaling a critical need to improve this prompt to better serve the users who are frequently relying on it, despite its current shortcomings.","title":"Instruction Quality vs. Usage Matrix: Optimizing AI Artifacts"},{"location":"feature-guides/core-features/monitoring/#topics-chart-understanding-content-distribution","text":"Purpose: The Topics Chart provides a visual representation of how your ELITEA Prompts, Datasources, and Agents are distributed across different identified topics or categories. This chart helps you understand the content focus of your AI artifacts and identify areas where you have strong content coverage and areas where you might need to expand your topic coverage. Chart Type: Clustered Column Chart Data Displayed: X-axis (Horizontal): Represents Topics identified within ELITEA (e.g., \"User Stories,\" \"Code Documentation,\" \"Competitive Analysis,\" \"Confluence Pages\"). Each cluster of columns corresponds to a specific topic. Y-axis (Vertical): Represents the Number of Items (# Items) , indicating the count of ELITEA entities associated with each topic. Clustered Columns: For each topic on the X-axis, you will see a cluster of columns, with each column representing a different type of ELITEA entity: Prompts (Teal/Cyan Column): The number of Prompts categorized under that topic. Datasources (Light Blue Column): The number of Datasources categorized under that topic. Agents (Magenta/Purple Column): The number of Agents categorized under that topic. Interpretation: Topic Coverage Distribution: Examine the overall distribution of columns across different topics. This chart provides a visual overview of which topics are well-represented by your ELITEA content (Prompts, Datasources, Agents) and which topics have less coverage. Identify Content Gaps: Look for topics on the X-axis that have very short or missing columns, indicating a lack of Prompts, Datasources, or Agents related to those topics. These \"gaps\" represent potential areas where you need to create new AI artifacts to expand ELITEA's content coverage and address user needs in those areas. Content Focus Areas: Identify topics with tall columns across all entity types (Prompts, Datasources, Agents). These \"focus areas\" represent topics where you have a strong and well-developed set of AI resources within ELITEA. Example: If the \"Prompt Topics Chart\" shows tall columns for \"User Stories\" and \"Code Documentation\" but very short or no columns for \"Competitive Analysis,\" it indicates that your ELITEA implementation has strong content coverage for user story creation and code documentation tasks, but lacks resources for competitive analysis. This might prompt you to prioritize the creation of new Prompts, Datasources, or Agents focused on competitive analysis to address this content gap and expand ELITEA's capabilities in that area.","title":"Topics Chart: Understanding Content Distribution"},{"location":"feature-guides/core-features/monitoring/#topics-summary-chart-understanding-user-query-focus","text":"Purpose: The Topics Summary Chart provides insights into the topics that users are most frequently querying and interacting with within ELITEA. By analyzing the distribution of user queries across different topics, you can understand user interests, identify popular areas of focus, and ensure that your ELITEA content and functionalities are aligned with user demand. Chart Type: Clustered Column Chart (Single Cluster per Topic) Data Displayed: X-axis (Horizontal): Represents Topics identified within ELITEA (consistent with the \"Prompt Topics Chart\" - e.g., \"User Stories,\" \"Code Documentation,\" \"Competitive Analysis,\" \"Confluence Pages\"). Each column corresponds to a specific topic. Y-axis (Vertical): Represents the Number of Items (# Items) , indicating the count of user queries associated with each topic. Columns: For each topic on the X-axis, you will see a single column representing: User Queries (Teal/Cyan Column): The number of user queries (or interactions) that have been categorized as belonging to that specific topic. Interpretation: User Interest Distribution: Examine the relative heights of the columns across different topics. This chart visually represents the distribution of user interest across various topics within ELITEA. Taller columns indicate topics that users are querying more frequently, signifying higher user interest and demand. Identify Popular Topics: Pinpoint topics with the tallest columns. These are the most popular areas of user interest within ELITEA. Ensure that you have robust and high-quality content (Prompts, Datasources, Agents) available to effectively address user queries and needs in these popular topic areas. Identify Under-Queried Topics: Look for topics with short or very short columns. These are topics that users are querying less frequently. This might indicate: * Lack of User Awareness: Users might not be aware that ELITEA has capabilities related to these topics. Consider promoting these functionalities through training or in-app communication. * Limited User Need: There might be genuinely less user demand for information or assistance related to these topics. * Relevance Issues: The existing content related to these topics might not be sufficiently relevant or useful to users, leading to lower query frequency. Example: If the \"Topics Summary Chart\" shows a very tall column for \"User Stories\" and significantly shorter columns for other topics like \"Code Documentation\" or \"Competitive Analysis,\" it indicates that user interest and demand within ELITEA are heavily focused on user story-related tasks and information. This insight might prompt you to prioritize further development and optimization of Use Cases, Prompts, and Agents related to user stories to cater to this high user demand. You might also consider investigating why other topics are less frequently queried and explore strategies to increase user awareness or improve content relevance in those areas. By utilizing these detailed chart explanations and understanding how to interpret the visualizations provided by ELITEA Monitoring, you can gain valuable insights into application usage, user behavior, AI artifact performance, and content effectiveness, enabling data-driven decisions to continuously improve and optimize your ELITEA implementation.","title":"Topics Summary Chart: Understanding User Query Focus"},{"location":"feature-guides/core-features/monitoring/#use-cases-and-reporting-practical-scenarios-for-elitea-monitoring","text":"The Monitoring feature is not just about viewing charts and metrics; it's about gaining actionable insights to improve ELITEA's value and user experience. This section outlines several practical use case scenarios, demonstrating how you can leverage the Monitoring data to answer key questions, identify areas for optimization, and generate insightful reports. Scenario 1: Tracking Overall ELITEA Adoption and Engagement (Portfolio Level) Goal: As a Portfolio Manager, you want to track the overall adoption and engagement of ELITEA across your entire portfolio of projects on a weekly basis. You need to report on user activity and identify any portfolio-wide trends. How to Use Monitoring: Access Monitoring Landing Page: Navigate to the Monitoring page in ELITEA. Set Project Filter to Portfolio: In the Filtering Panel, select your desired Portfolio grouping from the Projects dropdown menu. Set Time Period to \"Last Week\": Use the From and To Date filters to set the time range to cover the past week (e.g., Monday to Sunday of the previous week). Set Aggregation to \"Week\": Ensure the Aggregation dropdown is set to \"Week\" for weekly reporting. Apply Filters: Click the \"Refresh\" button. Review Key Metrics Summary Panel: Focus on the Engagement Rate metric in the Key Metrics Summary Panel. This will give you the overall Engagement Rate for your entire Portfolio for the past week. Note down this percentage for your report. Analyze Adoption and Usage Charts Panel: Examine the Active Users Chart and Token Usage Chart in the Adoption and Usage Charts Panel. Active Users Chart: Observe the trend of \"Active Users\" over the past weeks (or months, if you expand the timeframe). Is user adoption increasing, decreasing, or stable? Note down any significant trends. Token Usage Chart: Analyze the \"Tokens In\" and \"Tokens Out\" lines. Is token consumption increasing, decreasing, or fluctuating? Correlate token usage trends with user activity trends. Generate Report: Compile your findings into a weekly Portfolio Adoption Report. Include: Portfolio Name and Reporting Week (Date Range). Overall Engagement Rate for the Portfolio (from Key Metrics Summary Panel). Summary of Active User trends (from Active Users Chart - e.g., \"Active users increased by 15% this week\"). Summary of Token Usage trends (from Token Usage Chart - e.g., \"Token consumption remained stable compared to last week\"). Key Insights and Potential Actions: Based on your analysis, include a brief summary of key insights and any recommended actions (e.g., \"Engagement Rate is healthy, continue current adoption strategies,\" or \"Engagement Rate declined slightly, investigate potential causes and consider targeted training\"). Scenario 2: Identifying Underperforming AI entities (Use Case Level Analysis) Goal: As a Project Admin, you want to identify AI entities within your project that have low user acceptance rates. You suspect that some entities might not be as effective or user-friendly as others and need to pinpoint those for improvement. How to Use Monitoring: Access Monitoring Landing Page: Navigate to the Monitoring page in ELITEA. Select Your Project: In the Filtering Panel, select your specific project from the Projects dropdown menu. Set Time Period to \"Last Month\": Use the From and To Date filters to set the time range to cover the past month to get a representative sample of Use Case usage. Set Aggregation to \"Week\": Set the Aggregation to \"Week\" to analyze weekly trends in Acceptance Rate. Filter by \"Type\" and \"Name\": Leave the \"Type\" filter set to \"Prompts, Datasources, Agents, Conversations\" (or \"All Items\"). Leave the \"Name\" filter set to \"All Items\" initially to get an overview of all Use Cases. Apply Filters: Click the \"Refresh\" button. Review Key Metrics Summary Panel: Examine the Acceptance Rate metric in the Key Metrics Summary Panel. This provides the overall Acceptance Rate for all Use Cases within your project. Note this baseline value. Analyze Acceptance Rate Chart: Focus on the Acceptance Rate Chart in the Visual Metrics Panel. Observe the overall Acceptance Rate trend over the past month. Granular Use Case Analysis: Now, use the \"Type\" and \"Name\" filters to analyze Acceptance Rates for individual Use Cases: Select \"Type\" to \"Conversations\": This will filter the data to focus on conversation-based Use Cases. Use \"Name\" dropdown to select individual Use Case Names one by one: For each Use Case Name, click \"Refresh\" and observe the Acceptance Rate metric in the Key Metrics Summary Panel and the Acceptance Rate Chart . Note down the Acceptance Rate for each Use Case. Identify Low Acceptance Use Cases: Compare the Acceptance Rates of different Use Cases. Identify Use Cases with significantly lower Acceptance Rates compared to the average or your desired benchmark (e.g., Use Cases with Acceptance Rates below 60%). Investigate Low Acceptance Use Cases: For the Use Cases with low Acceptance Rates, investigate potential causes: Review User Feedback: Gather user feedback specifically on these underperforming Use Cases. Analyze Use Case Workflow: Examine the design and complexity of the Use Case workflow. Is it intuitive and user-friendly? Evaluate Output Quality: Assess the quality and relevance of the AI-generated outputs for these Use Cases. Take Action to Improve: Based on your investigation, take targeted actions to improve the low-acceptance Use Cases: Enhance User Training: Provide more specific training and guidance for these Use Cases. Refine Use Case Design: Simplify the workflow, improve prompts, or adjust agent logic to enhance output quality and user experience. Scenario 3: Monitoring Prompt Performance and Optimizing for Quality Goal: As a Prompt Engineer, you want to monitor the performance of specific Prompts within your project, identify underperforming prompts, and optimize them for better relevance and reliability. How to Use Monitoring: Access Monitoring Landing Page: Navigate to the Monitoring page in ELITEA. Select Your Project: In the Filtering Panel, select your specific project from the Projects dropdown menu. Set Time Period to \"Last 3 Months\": Use a longer timeframe (e.g., \"Last 3 Months\") to get a broader performance overview. Set Aggregation to \"Month\": Set Aggregation to \"Month\" for monthly trend analysis. Set \"Type\" to \"Prompts\": In the \"Type\" dropdown, specifically select \"Prompts\" to focus your analysis on prompts. Leave \"Name\" as \"All Items\" initially: Start with an overview of all prompts. Apply Filters: Click the \"Refresh\" button. Analyze Instruction Quality vs. Usage Matrix: Focus on the Instruction Quality vs. Usage Matrix in the Accuracy Charts Panel. Identify Low-Quality, High-Usage Prompts: Look for prompts in the Bottom-Right Quadrant (Low Quality, High Usage). These are critical prompts that need immediate attention and improvement. Note down the names of these prompts. Identify High-Quality, Low-Usage Prompts: Look for prompts in the Top-Left Quadrant (High Quality, Low Usage). These are prompts with untapped potential. Note down their names for potential promotion and wider utilization. Granular Prompt Analysis: For the prompts you identified in step 8 (especially low-quality, high-usage ones), perform a more detailed analysis: Use \"Name\" Filter: Select the name of a specific prompt from the \"Name\" dropdown and click \"Refresh.\" Review Key Metrics Summary Panel: Examine the Acceptance Rate , Relevance , and Reliability metrics in the Key Metrics Summary Panel for this specific prompt. Analyze Performance Charts: Focus on the Relevance Chart and Reliability Chart in the Accuracy Charts Panel, and the Acceptance Rate Chart . Observe the trends of these metrics over the past months. Optimize Prompts: Based on your analysis, take action to optimize underperforming prompts: Prompt Engineering: Refine the prompt instructions, context, input parameters, and examples to improve output quality and relevance. User Feedback: Gather user feedback specifically on these prompts to understand their pain points and areas for improvement. A/B Testing (If Applicable): If possible, create variations of the prompt and A/B test them to see which version performs better based on monitoring metrics. Promote High-Quality, Low-Usage Prompts: For prompts in the \"High Quality, Low Usage\" quadrant, promote their use through documentation, training, or in-app suggestions to increase their visibility and utilization. These are just a few examples of how you can utilize the ELITEA Monitoring feature for practical analysis and reporting. By strategically applying filters, understanding the metrics and charts, and focusing on specific use cases and entities, you can unlock valuable insights to continuously improve ELITEA's effectiveness and user experience.","title":"Use Cases and Reporting: Practical Scenarios for ELITEA Monitoring"},{"location":"feature-guides/core-features/prompt-magic-assistant/","text":"Prompt Magic Assistant: Your Guide to Effortless Prompt Creation The Prompt Magic Assistant is an innovative feature in ELITEA designed to streamline and enhance the prompt creation process. It provides an interactive workflow that guides you in articulating your needs with precision and creativity, helping you harness the full potential of AI to develop prompts that are clear, context-rich, and tailored to your specific project requirements. This guide will walk you through how to configure and use the Prompt Magic Assistant , providing examples and best practices to help you make the most of this powerful tool. Accessing the Prompt Magic Assistant The Prompt Magic Assistant is available when you are creating a new prompt. Once a prompt is created and saved, the assistant will no longer be available for that specific prompt. To access the Prompt Magic Assistant: Navigate to the Prompts menu within your desired project. Click the + Prompt button on the top right to begin creating a new prompt. This will take you to the Configuration tab. On the Configuration tab, look for the \"Wizard\" icon . This icon indicates the availability of the Prompt Magic Assistant . Click the \"Wizard\" icon to open the assistant. Configuring Your Prompt with the Magic Assistant The Prompt Magic Assistant simplifies the initial setup of your prompt by generating key elements based on your description of the task. Using the Prompt Magic Assistant: Describe Your Task: Once the Magic Assistant window is open, you will see a text input field. Clearly and concisely describe the task you want the prompt to accomplish. The more detailed your description, the better the assistant can understand your needs and generate relevant suggestions. Example: \"I want to generate manual test cases for covering positive, negative, and edge cases. The test cases must be in Gherkin syntax and keep in mind the possibility for easy automation later. The test cases must be generated for the provided acceptance criteria.\" Example: \"You are an experienced Business Analyst tasked with creating a user story. Your goal is to generate a user story that adheres to the INVEST principles and includes proper acceptance criteria. The user story should be user-centric, facilitating effective communication and prioritization between development teams and stakeholders.\" Generate Prompt Ideas: After entering your task description, click the Generate Prompt button. The Magic Assistant will analyze your input and generate suggestions for various prompt elements. What the Magic Assistant Generates Based on your task description, the Prompt Magic Assistant can automatically populate the following fields in the Configuration tab: Prompt Name: A suggested name for your prompt, reflecting the task you described. Prompt Description: A brief explanation of the prompt's purpose, derived from your input. Context: The core instructions and background information for the AI model. This is crucial for guiding the AI to generate the desired output. Messages (if needed): The assistant may suggest pre-defined System , Assistant , or User messages to structure the interaction flow, particularly for more complex tasks. Welcome Message: An optional message displayed to users when they interact with the prompt, providing additional context or instructions. Conversation Starter(s): Predefined text options that users can click to initiate a conversation or trigger a specific action when executing the prompt. Review and Modify The Prompt Magic Assistant provides a great starting point for your prompt creation. However, it's important to remember that you have full control over the generated content. After the Magic Assistant has generated the initial prompt elements: Review the Generated Content: Carefully examine the suggested Prompt Name , Description , Context , Messages , Welcome Message , and Conversation Starters . Modify as Needed: You can freely edit any of the generated fields to refine the prompt according to your specific requirements. This includes: Adjusting the wording for clarity. Adding more specific instructions to the Context . Modifying or adding new Messages . Customizing the Welcome Message for your users. Adding or editing Conversation Starters . Add Tags: Don't forget to add relevant Tags to categorize your prompt for easy searching and organization. Save Your Prompt: Once you are satisfied with the configuration, click the Save button to finalize the creation of your prompt. Examples of Using the Prompt Magic Assistant Example 1: Generating Test Cases Provided Task: \"I want to generate manual test cases for covering positive, negative, and edge cases for a login feature. The test cases should include steps, expected results, and test data. Consider scenarios for valid and invalid credentials.\" Possible Magic Assistant Output: Prompt Name: Generate Login Test Cases Prompt Description: Generates manual test cases for the login feature, covering positive, negative, and edge cases. Context: \"You are a test engineer tasked with generating manual test cases for a login feature. The test cases should include clear steps, expected results, and relevant test data. Consider scenarios for valid and invalid credentials, including edge cases like incorrect password formats and locked accounts.\" Conversation Starters: \"Generate test cases for the login feature.\" Example 2: Creating a User Story Provided Task: \"As a user, I want to be able to save my search preferences so that I don't have to re-enter them every time I visit the website.\" Possible Magic Assistant Output: Prompt Name: Create User Story for Saving Search Preferences Prompt Description: Generates a user story for the ability to save search preferences. Context: \"You are a product owner responsible for writing user stories. Generate a user story for the following need: 'As a user, I want to be able to save my search preferences so that I don't have to re-enter them every time I visit the website.' Ensure the user story follows the standard format and includes clear acceptance criteria.\" Conversation Starters: \"Generate acceptance criteria for this user story.\" Best Practices for Using the Prompt Magic Assistant Be Specific in Your Task Description: The more details you provide in your initial description, the more accurate and relevant the assistant's suggestions will be. Focus on the Desired Outcome: Clearly state what you want the prompt to achieve. Use Action Verbs: Start your task description with action verbs like \"generate,\" \"create,\" \"summarize,\" \"translate,\" etc. Review and Refine: Always review the generated content and make necessary adjustments to ensure it aligns perfectly with your needs. Don't Hesitate to Modify: The Magic Assistant is a starting point. Feel free to completely rewrite any of the generated fields if needed. Add Tags for Organization: Utilize tags to categorize your prompts, making them easier to find and manage in the future. By following these guidelines, you can effectively leverage the ELITEA Prompt Magic Assistant to significantly simplify and enhance your prompt creation workflow, leading to more effective and efficient AI interactions.","title":"Prompt Magic Assistant Guide"},{"location":"feature-guides/core-features/prompt-magic-assistant/#prompt-magic-assistant-your-guide-to-effortless-prompt-creation","text":"The Prompt Magic Assistant is an innovative feature in ELITEA designed to streamline and enhance the prompt creation process. It provides an interactive workflow that guides you in articulating your needs with precision and creativity, helping you harness the full potential of AI to develop prompts that are clear, context-rich, and tailored to your specific project requirements. This guide will walk you through how to configure and use the Prompt Magic Assistant , providing examples and best practices to help you make the most of this powerful tool.","title":"Prompt Magic Assistant: Your Guide to Effortless Prompt Creation"},{"location":"feature-guides/core-features/prompt-magic-assistant/#accessing-the-prompt-magic-assistant","text":"The Prompt Magic Assistant is available when you are creating a new prompt. Once a prompt is created and saved, the assistant will no longer be available for that specific prompt. To access the Prompt Magic Assistant: Navigate to the Prompts menu within your desired project. Click the + Prompt button on the top right to begin creating a new prompt. This will take you to the Configuration tab. On the Configuration tab, look for the \"Wizard\" icon . This icon indicates the availability of the Prompt Magic Assistant . Click the \"Wizard\" icon to open the assistant.","title":"Accessing the Prompt Magic Assistant"},{"location":"feature-guides/core-features/prompt-magic-assistant/#configuring-your-prompt-with-the-magic-assistant","text":"The Prompt Magic Assistant simplifies the initial setup of your prompt by generating key elements based on your description of the task. Using the Prompt Magic Assistant: Describe Your Task: Once the Magic Assistant window is open, you will see a text input field. Clearly and concisely describe the task you want the prompt to accomplish. The more detailed your description, the better the assistant can understand your needs and generate relevant suggestions. Example: \"I want to generate manual test cases for covering positive, negative, and edge cases. The test cases must be in Gherkin syntax and keep in mind the possibility for easy automation later. The test cases must be generated for the provided acceptance criteria.\" Example: \"You are an experienced Business Analyst tasked with creating a user story. Your goal is to generate a user story that adheres to the INVEST principles and includes proper acceptance criteria. The user story should be user-centric, facilitating effective communication and prioritization between development teams and stakeholders.\" Generate Prompt Ideas: After entering your task description, click the Generate Prompt button. The Magic Assistant will analyze your input and generate suggestions for various prompt elements.","title":"Configuring Your Prompt with the Magic Assistant"},{"location":"feature-guides/core-features/prompt-magic-assistant/#what-the-magic-assistant-generates","text":"Based on your task description, the Prompt Magic Assistant can automatically populate the following fields in the Configuration tab: Prompt Name: A suggested name for your prompt, reflecting the task you described. Prompt Description: A brief explanation of the prompt's purpose, derived from your input. Context: The core instructions and background information for the AI model. This is crucial for guiding the AI to generate the desired output. Messages (if needed): The assistant may suggest pre-defined System , Assistant , or User messages to structure the interaction flow, particularly for more complex tasks. Welcome Message: An optional message displayed to users when they interact with the prompt, providing additional context or instructions. Conversation Starter(s): Predefined text options that users can click to initiate a conversation or trigger a specific action when executing the prompt.","title":"What the Magic Assistant Generates"},{"location":"feature-guides/core-features/prompt-magic-assistant/#review-and-modify","text":"The Prompt Magic Assistant provides a great starting point for your prompt creation. However, it's important to remember that you have full control over the generated content. After the Magic Assistant has generated the initial prompt elements: Review the Generated Content: Carefully examine the suggested Prompt Name , Description , Context , Messages , Welcome Message , and Conversation Starters . Modify as Needed: You can freely edit any of the generated fields to refine the prompt according to your specific requirements. This includes: Adjusting the wording for clarity. Adding more specific instructions to the Context . Modifying or adding new Messages . Customizing the Welcome Message for your users. Adding or editing Conversation Starters . Add Tags: Don't forget to add relevant Tags to categorize your prompt for easy searching and organization. Save Your Prompt: Once you are satisfied with the configuration, click the Save button to finalize the creation of your prompt.","title":"Review and Modify"},{"location":"feature-guides/core-features/prompt-magic-assistant/#examples-of-using-the-prompt-magic-assistant","text":"Example 1: Generating Test Cases Provided Task: \"I want to generate manual test cases for covering positive, negative, and edge cases for a login feature. The test cases should include steps, expected results, and test data. Consider scenarios for valid and invalid credentials.\" Possible Magic Assistant Output: Prompt Name: Generate Login Test Cases Prompt Description: Generates manual test cases for the login feature, covering positive, negative, and edge cases. Context: \"You are a test engineer tasked with generating manual test cases for a login feature. The test cases should include clear steps, expected results, and relevant test data. Consider scenarios for valid and invalid credentials, including edge cases like incorrect password formats and locked accounts.\" Conversation Starters: \"Generate test cases for the login feature.\" Example 2: Creating a User Story Provided Task: \"As a user, I want to be able to save my search preferences so that I don't have to re-enter them every time I visit the website.\" Possible Magic Assistant Output: Prompt Name: Create User Story for Saving Search Preferences Prompt Description: Generates a user story for the ability to save search preferences. Context: \"You are a product owner responsible for writing user stories. Generate a user story for the following need: 'As a user, I want to be able to save my search preferences so that I don't have to re-enter them every time I visit the website.' Ensure the user story follows the standard format and includes clear acceptance criteria.\" Conversation Starters: \"Generate acceptance criteria for this user story.\"","title":"Examples of Using the Prompt Magic Assistant"},{"location":"feature-guides/core-features/prompt-magic-assistant/#best-practices-for-using-the-prompt-magic-assistant","text":"Be Specific in Your Task Description: The more details you provide in your initial description, the more accurate and relevant the assistant's suggestions will be. Focus on the Desired Outcome: Clearly state what you want the prompt to achieve. Use Action Verbs: Start your task description with action verbs like \"generate,\" \"create,\" \"summarize,\" \"translate,\" etc. Review and Refine: Always review the generated content and make necessary adjustments to ensure it aligns perfectly with your needs. Don't Hesitate to Modify: The Magic Assistant is a starting point. Feel free to completely rewrite any of the generated fields if needed. Add Tags for Organization: Utilize tags to categorize your prompts, making them easier to find and manage in the future. By following these guidelines, you can effectively leverage the ELITEA Prompt Magic Assistant to significantly simplify and enhance your prompt creation workflow, leading to more effective and efficient AI interactions.","title":"Best Practices for Using the Prompt Magic Assistant"},{"location":"feature-guides/core-features/public-project/","text":"Public Project Guide: Explore, Utilize, and Collaborate within the ELITEA Community Introduction Welcome to the Public Project Guide for ELITEA! This guide will introduce you to the Public Project , a unique and valuable space within ELITEA designed for community collaboration, knowledge sharing, and discovering best practices . Whether you are a new user looking for inspiration, an experienced user seeking to leverage community resources, or a contributor wanting to share your expertise, the Public Project offers a wealth of AI-powered assets and a collaborative environment to enhance your ELITEA experience. The Public Project: A Collaborative Hub The Public Project in ELITEA serves as a collaborative hub where users can: Discover Shared Resources: Access a curated collection of Prompts , Agents , and Datasources contributed and published by other ELITEA users within your organization or community. Utilize Community Expertise: Benefit from the collective knowledge, creativity, and best practices embodied in shared AI artifacts. Find Inspiration and Accelerate Innovation: Explore a diverse range of resources to spark new ideas, learn different approaches, and accelerate your own AI-powered projects and workflows. Contribute and Share Your Best Work: Publish your own high-quality Prompts and Collections to the Public Project, contributing back to the community and showcasing your expertise. The Purpose of the Public Project The Public Project is designed to foster a thriving and collaborative ELITEA community by: Promoting Knowledge Sharing: Providing a central repository for sharing valuable AI resources, reducing redundancy, and promoting the reuse of effective solutions. Encouraging Collaboration: Creating a space for users to learn from each other, build upon existing work, and collectively improve the quality and breadth of ELITEA resources. Accelerating Innovation: Facilitating the discovery of new techniques, approaches, and best practices, ultimately accelerating the development and adoption of AI-powered workflows within your organization. Democratizing Access to AI Expertise: Making high-quality AI artifacts accessible to a wider audience, regardless of their individual expertise level, empowering more users to leverage the power of AI. Roles Management and Permissions in Public Project It's important to understand the role and permission structure within the Public Project: Default Access for All Users: All ELITEA users have execution access to the Public Project by default. This means everyone can access, explore and execute the published resources. No Modification or Creation in Public Project: Users cannot directly create new Entities or modify existing Entities within the Public Project. The Public Project is intended to be a curated and read-only space for consuming shared resources. Creation and modification of Entities are primarily done within Private workspaces or Team projects and then published to the Public Project. Moderator Role for Publishing: Only designated Moderators have the permission to publish resources (Prompts, Agents and Collections) to the Public Project after a review process to ensure quality and relevance. \"Monitor\" Role is Applicable: The \"Monitor\" role, relevant for tracking usage metrics in Private and Team projects, is also applicable within the Public Project itself. Monitoring metrics are tracked at the project level, and the Public Project serves as a shared, read-only resource repository. Overview of Public Project The Public Project in ELITEA is readily accessible to all users by default and is structured into distinct menus, each dedicated to a specific type of shared resource. Accessing the Public Project The Public Project is readily accessible to all ELITEA users. You can switch to the Public project from your current project by clicking the Project switcher dropdown menu located at the top left of the ELITEA interface and selecting \"Public project\" from the list. Menus within the Public Project Once you are in the Public Project, you will find the following menus in the main sidebar, each dedicated to a specific type of shared resource: Chat Menu: Purpose: While the Public Project primarily focuses on shared resources, the Chat menu remains accessible. In the Public project's Chat, you can initiate conversations and add participants from the Public project, including published Agents , Prompts , Datasources , Models , and other Users . This allows you to test and utilize published resources in a conversational setting and explore how different community-shared resources can be combined and interacted with. Prompts Menu: Purpose: The Prompts menu within the Public project is a curated showcase of published and shared Prompts contributed by the ELITEA community. It is your primary destination for discovering and leveraging a wide range of prompts designed for various tasks and purposes, all shared by other ELITEA users. Tabs within Prompts Menu: The Prompts menu is organized into three distinct tabs to facilitate prompt discovery: Latest Tab: Displays the most recently published Prompts , showcasing the newest contributions from the community. This tab is ideal for staying up-to-date with the latest additions and fresh ideas being shared. My Likes Tab: Features a personalized list of Prompts that you have \"liked.\" This tab acts as your personal library of favorite Prompts, allowing you to easily revisit and reuse prompts that you have found particularly valuable or effective. Trending Tab: Showcases the most popular and highly-regarded Prompts within the community, ranked by the number of \"likes\" they have received. This tab is an excellent resource for discovering top-rated Prompts that are widely recognized and appreciated by other ELITEA users, indicating their potential value and effectiveness. Datasources Menu: Purpose: The Datasources menu within the Public project is a repository of published and shared Datasources contributed by the community. Explore and leverage these pre-configured datasources to access readily available data connections for your AI workflows and Prompts. Tabs within Datasources Menu: Similar to the Prompts menu, the Datasources menu is also organized into three tabs for easy browsing: Latest Tab: Displays the newest Datasources published to the Public project, showcasing recent data source contributions from the community. My Likes Tab: Features a personalized list of Datasources that you have \"liked.\" This allows you to quickly access your preferred and most useful datasources from the shared repository. Trending Tab: Showcases the most popular Datasources , ranked by \"likes,\" highlighting datasources that are highly valued and frequently used by the ELITEA community. Agents Menu: Purpose: The Agents menu within the Public project features a collection of published and shared Agents contributed by other users. Discover and utilize these pre-built agents to automate complex tasks and workflows, leveraging the collective intelligence of the ELITEA community. Tabs within Agents Menu: The Agents menu follows the same organizational structure with three tabs: Latest Tab: Displays the most recently published Agents , showcasing the latest agent contributions from the community. My Likes Tab: Features a personalized list of Agents that you have \"liked.\" This provides quick access to your preferred and most valuable agents from the shared pool. Trending Tab: Showcases the most popular Agents , ranked by \"likes,\" highlighting agents that are highly regarded and widely used by the ELITEA community, indicating their potential effectiveness and utility. Collections Menu: Purpose: The Collections menu in the Public project is a curated space of grouped Prompts and Entities shared and published within the community . Explore and discover thematically organized collections of resources that address specific use cases or topics, providing pre-packaged sets of tools for various AI-powered tasks. Tabs within Collections Menu: The Collections menu is organized into three tabs to facilitate discovery of curated resource sets: Latest Tab: Showcases the most recently published Collections , offering insight into the newest thematic groupings and curated resource sets being shared by the community. My Likes Tab: Features a personalized list of Collections that you have \"liked.\" This creates a personalized library of favored collections, allowing you to easily revisit and reuse valuable sets of resources. Trending Tab: Displays Collections that have gathered the most \"likes,\" serving as an excellent resource for finding highly-regarded and popular collections esteemed by the community. These trending collections often represent best-practice examples of how to organize and utilize ELITEA resources for common use cases. The Publication Process: Sharing Your Expertise The Public Project thrives on community contributions. If you have created valuable Prompts or Collections in your Private or Team projects, you are encouraged to share them with the wider ELITEA community by publishing them to the Public Project. Publishing Prompts to the Public Project To share your best Prompts with the community: Create and Refine Prompt in Private/Team Project: Develop and thoroughly test your Prompt in your Private Workspace or a Team Project . Ensure it is well-documented, high-quality, and provides valuable functionality. Initiate Publication: Open the Prompts menu in your Private project, locate the Prompt you want to share, and click the \"Publish\" icon associated with that Prompt. Version Naming: In the \"Publish version\" pop-up window, provide a descriptive Version Name for your Prompt (e.g., \"Version 1.0 - Initial Release,\" \"Version 1.1 - Improved Accuracy\"). Click \"Publish\" to submit the Prompt for moderation. Moderation Review: Your submitted Prompt will undergo a review process by ELITEA moderators. Moderators will assess the Prompt for quality, relevance, clarity, and adherence to community guidelines. Approval and Publication: If your Prompt meets the moderation criteria, it will be Approved and published to the Prompts menu within the Public Project , making it accessible to all ELITEA users. You will receive a notification regarding the outcome of the moderation process. Important Notes on Prompt Publication: Quality and Relevance: Only high-quality, well-documented, and relevant Prompts are typically approved for publication to maintain the value and integrity of the Public Project resource pool. Moderator Feedback: If your Prompt is Rejected during moderation, you will receive constructive feedback from the moderators, explaining the reasons for rejection and providing guidance on how to improve your Prompt for potential future submission. Version Control: When publishing, you are publishing a specific version of your Prompt. This allows you to continue developing and improving your Prompts in your Private or Team projects without affecting the published version in the Public Project. Publishing Collections to the Public Project To share curated sets of related Prompts (and potentially other Entities in the future) with the community: Create and Curate Collection in Private/Team Project: Create a well-organized and valuable Collection in your Private Workspace or a Team Project . Ensure it contains a set of thematically related and high-quality Entities (at least one published Prompt is required currently). Initiate Collection Publication: Open the Collections menu in your Private project, locate the Collection you want to share, and click the \"Publish collection\" icon within the Collection Detail View. Moderation Review: Your submitted Collection will undergo a review process by ELITEA moderators, similar to the Prompt publication process. Moderators will assess the Collection for relevance, organization, and overall value to the community. Approval and Publication: If your Collection meets the moderation criteria and contains at least one published Prompt, it will be Approved and published to the Collections menu within the Public Project , making it discoverable and accessible to all ELITEA users. You will be notified of the moderation outcome. Important Notes on Collection Publication: Minimum Requirement - Published Entity: A Collection must contain at least one already published Entity (currently, at least one published Prompt) to be eligible for publication. Separate Entity Publication: Publishing a Collection does not automatically publish the individual Entities contained within it. Ensure that all Prompts (and other Entities you intend to share publicly within the Collection) are published separately before publishing the Collection. Collection Duplication: Publishing a Collection creates a duplicate of your Collection in the Public Project. Changes made to your original Collection after publishing will not automatically update the published version. Focus on Prompts (Currently): Currently, Collection publishing primarily focuses on sharing groups of Prompts. While Collections can contain Datasources and Agents, the publishing mechanism is primarily designed for sharing Prompts within Collections. Usage of Published Entities: Leveraging Community Resources The primary purpose of the Public Project is to provide a readily accessible library of shared resources that you can leverage in your own ELITEA workflows. Here's how you can utilize published Prompts, Datasources, Agents, and Collections: Explore and Discover: Browse the Latest , My Likes , and Trending sections within the Prompts, Datasources, Agents, and Collections menus in the Public Project to discover valuable resources shared by the community. Execute Published Prompts and Agents: You can directly execute published Prompts and Agents from the Public Project to utilize their functionalities. Simply click on a Prompt or Agent card or name to open its detail view and access the \"Run\" tab to execute it. Inspiration and Learning: Examine the configurations and designs of published Prompts, Datasources, and Agents to learn new techniques, discover different approaches to problem-solving, and gain inspiration for your own creations. Add Published Prompts to Collections (Private Project): You can add valuable Prompts you discover in the Public Project to your own Collections within your Private Workspace or Team Projects . This allows you to curate personalized collections of useful resources for your specific needs and workflows. Export Published Prompts (for Backup or External Use): You can export published Prompts from the Public Project to create backups or utilize them in other compatible platforms (if supported by the export format). Important Limitations in Public Project: Read-Only Access: Remember that the Public Project is primarily a read-only resource library. You cannot directly modify or save changes to the original published versions of Prompts, Datasources, Agents, or Collections within the Public Project. No Direct Creation or Modification: You cannot create new Entities or Collections directly within the Public Project. Creation and modification are done in your Private Workspace or Team Projects, and then resources are published to the Public Project. Useful Links and Materials ELITEA Public Project Guide: [Link to Public Project Guide] (Replace with actual link) Collections Menu Guide: [Link to Collections Menu Guide] (Replace with actual link) Publishing Prompts and Collections Guide: [Link to Publishing Guide] (Replace with actual link) Export and Import Guide: Export and Import Guide This is the comprehensive User Guide for the Public Project in ELITEA. Please review it thoroughly and let me know if you have any further feedback! Public Project Guide: Explore and Collaborate The Public project in ELITEA serves as a collaborative hub where users can discover, utilize, and appreciate resources shared by the community. It's a space designed to foster knowledge sharing and accelerate innovation by making valuable prompts, agents, and datasources accessible to everyone within your organization. Key Features of the Public Project: Shared Resources: Access a curated collection of prompts, agents, and datasources contributed by other ELITEA users. Community Collaboration: Benefit from the collective expertise and creativity of your colleagues. Discover Best Practices: Explore highly-rated and trending resources to learn from successful implementations. Ready-to-Use Tools: Execute published resources directly to leverage their functionality. Inspiration and Learning: Discover new approaches and techniques by examining how others have built their resources. Accessing the Public Project: The Public project is readily accessible to all ELITEA users by default. You can switch to the Public project from your current project by clicking the Project switcher. Navigating the Public Project The Public project is organized into distinct menus, each dedicated to a specific type of shared resource: Chat : Access to conversations, allowing to add participants (Agents, Prompts, Datasources, Models and Users) from Public project. Prompts: Discover and interact with prompts shared by the community. Datasources: Explore and utilize published datasources. Agents: Find and execute agents created and shared by other users. Collections: Browse and explore curated collections of resources. Each of these menus (except Chat) shares a similar structure, making it easy to navigate and find what you're looking for. Exploring Shared Resources Within each resource menu (Prompts, Datasources, Agents, Collections), you'll find three sub-sections designed to help you discover and engage with the shared content: Latest: This section displays the most recently published resources, giving you a glimpse into the newest additions to the community's shared pool. My Likes: Here, you'll find a personalized list of the resources you've liked. This allows you to easily revisit your favorite and most valuable finds. Trending: This section showcases the most popular resources, ranked by the number of likes they've received. It's a great place to discover highly regarded and widely used resources within the community. Interacting with Published Resources The Public project encourages active participation and appreciation of shared resources. Here's how you can interact with the prompts, datasources, and agents you find: Showing Appreciation: Liking Resources If you find a published prompt, datasource, or agent particularly useful or well-crafted, you can show your appreciation by \"liking\" it. To Like: Click the Heart icon associated with the resource. The icon will typically change color or appearance to indicate that you've liked it. To Unlike: If you change your mind or no longer wish to like a resource, simply click the Heart icon again. Utilizing Published Resources The primary purpose of the Public project is to allow users to leverage the shared resources. You can directly execute published prompts and agents to utilize their functionality. Simply click on the resource's card or name to view its details and find the execution options. Important Note: While you can view and execute resources in the Public project, you cannot directly modify and save changes to the original published version. These resources are intended for execution and inspiration. Incorporating Public Resources into Your Workflow You can leverage valuable resources found in the Public project in several ways: Adding to Collections: Organize useful public prompts, datasources, or agents into your personal collections within your Private project for easy access and management. Exporting Resources: For backup or use in other platforms (if supported), you can export published prompts. Refer to the documentation for your Private project for detailed instructions on adding to collections and exporting resources. Sharing Your Expertise: Publishing Resources While you primarily interact with existing resources in the Public project, you can also contribute your own creations. If you've developed a valuable prompt, agent, or datasource in your Private project, you can submit it for publication to the Public project. The Publication Process: Create and Refine: Develop and thoroughly test your prompt, agent, or datasource in your Private project. Submit for Publication: Initiate the publication process for your resource. This typically involves clicking a \"Publish\" button within the resource's settings. Moderation Review: Resources submitted for publication are reviewed by designated moderators to ensure quality, relevance, and adherence to community guidelines. Approval and Publication: If approved, your resource will be published and become available to the wider ELITEA community in the Public project. Note: Only approved moderators have the ability to add resources to the Public project. Benefits of the Public Project Reduced Redundancy: Avoid recreating commonly used prompts, agents, or datasources by leveraging existing community contributions. Accelerated Development: Quickly find and utilize pre-built resources to speed up your workflows. Enhanced Learning: Discover new techniques and approaches by examining how others have designed their resources. Community Building: Contribute to a shared knowledge base and benefit from the collective expertise of your colleagues. The ELITEA Public project is a valuable place for fostering collaboration and maximizing the potential of AI within your organization. Explore, engage, and contribute to make the most of this shared resource pool.","title":"Public Project Guide"},{"location":"feature-guides/core-features/public-project/#public-project-guide-explore-utilize-and-collaborate-within-the-elitea-community","text":"","title":"Public Project Guide: Explore, Utilize, and Collaborate within the ELITEA Community"},{"location":"feature-guides/core-features/public-project/#introduction","text":"Welcome to the Public Project Guide for ELITEA! This guide will introduce you to the Public Project , a unique and valuable space within ELITEA designed for community collaboration, knowledge sharing, and discovering best practices . Whether you are a new user looking for inspiration, an experienced user seeking to leverage community resources, or a contributor wanting to share your expertise, the Public Project offers a wealth of AI-powered assets and a collaborative environment to enhance your ELITEA experience. The Public Project: A Collaborative Hub The Public Project in ELITEA serves as a collaborative hub where users can: Discover Shared Resources: Access a curated collection of Prompts , Agents , and Datasources contributed and published by other ELITEA users within your organization or community. Utilize Community Expertise: Benefit from the collective knowledge, creativity, and best practices embodied in shared AI artifacts. Find Inspiration and Accelerate Innovation: Explore a diverse range of resources to spark new ideas, learn different approaches, and accelerate your own AI-powered projects and workflows. Contribute and Share Your Best Work: Publish your own high-quality Prompts and Collections to the Public Project, contributing back to the community and showcasing your expertise.","title":"Introduction"},{"location":"feature-guides/core-features/public-project/#the-purpose-of-the-public-project","text":"The Public Project is designed to foster a thriving and collaborative ELITEA community by: Promoting Knowledge Sharing: Providing a central repository for sharing valuable AI resources, reducing redundancy, and promoting the reuse of effective solutions. Encouraging Collaboration: Creating a space for users to learn from each other, build upon existing work, and collectively improve the quality and breadth of ELITEA resources. Accelerating Innovation: Facilitating the discovery of new techniques, approaches, and best practices, ultimately accelerating the development and adoption of AI-powered workflows within your organization. Democratizing Access to AI Expertise: Making high-quality AI artifacts accessible to a wider audience, regardless of their individual expertise level, empowering more users to leverage the power of AI.","title":"The Purpose of the Public Project"},{"location":"feature-guides/core-features/public-project/#roles-management-and-permissions-in-public-project","text":"It's important to understand the role and permission structure within the Public Project: Default Access for All Users: All ELITEA users have execution access to the Public Project by default. This means everyone can access, explore and execute the published resources. No Modification or Creation in Public Project: Users cannot directly create new Entities or modify existing Entities within the Public Project. The Public Project is intended to be a curated and read-only space for consuming shared resources. Creation and modification of Entities are primarily done within Private workspaces or Team projects and then published to the Public Project. Moderator Role for Publishing: Only designated Moderators have the permission to publish resources (Prompts, Agents and Collections) to the Public Project after a review process to ensure quality and relevance. \"Monitor\" Role is Applicable: The \"Monitor\" role, relevant for tracking usage metrics in Private and Team projects, is also applicable within the Public Project itself. Monitoring metrics are tracked at the project level, and the Public Project serves as a shared, read-only resource repository.","title":"Roles Management and Permissions in Public Project"},{"location":"feature-guides/core-features/public-project/#overview-of-public-project","text":"The Public Project in ELITEA is readily accessible to all users by default and is structured into distinct menus, each dedicated to a specific type of shared resource.","title":"Overview of Public Project"},{"location":"feature-guides/core-features/public-project/#accessing-the-public-project","text":"The Public Project is readily accessible to all ELITEA users. You can switch to the Public project from your current project by clicking the Project switcher dropdown menu located at the top left of the ELITEA interface and selecting \"Public project\" from the list.","title":"Accessing the Public Project"},{"location":"feature-guides/core-features/public-project/#menus-within-the-public-project","text":"Once you are in the Public Project, you will find the following menus in the main sidebar, each dedicated to a specific type of shared resource: Chat Menu: Purpose: While the Public Project primarily focuses on shared resources, the Chat menu remains accessible. In the Public project's Chat, you can initiate conversations and add participants from the Public project, including published Agents , Prompts , Datasources , Models , and other Users . This allows you to test and utilize published resources in a conversational setting and explore how different community-shared resources can be combined and interacted with. Prompts Menu: Purpose: The Prompts menu within the Public project is a curated showcase of published and shared Prompts contributed by the ELITEA community. It is your primary destination for discovering and leveraging a wide range of prompts designed for various tasks and purposes, all shared by other ELITEA users. Tabs within Prompts Menu: The Prompts menu is organized into three distinct tabs to facilitate prompt discovery: Latest Tab: Displays the most recently published Prompts , showcasing the newest contributions from the community. This tab is ideal for staying up-to-date with the latest additions and fresh ideas being shared. My Likes Tab: Features a personalized list of Prompts that you have \"liked.\" This tab acts as your personal library of favorite Prompts, allowing you to easily revisit and reuse prompts that you have found particularly valuable or effective. Trending Tab: Showcases the most popular and highly-regarded Prompts within the community, ranked by the number of \"likes\" they have received. This tab is an excellent resource for discovering top-rated Prompts that are widely recognized and appreciated by other ELITEA users, indicating their potential value and effectiveness. Datasources Menu: Purpose: The Datasources menu within the Public project is a repository of published and shared Datasources contributed by the community. Explore and leverage these pre-configured datasources to access readily available data connections for your AI workflows and Prompts. Tabs within Datasources Menu: Similar to the Prompts menu, the Datasources menu is also organized into three tabs for easy browsing: Latest Tab: Displays the newest Datasources published to the Public project, showcasing recent data source contributions from the community. My Likes Tab: Features a personalized list of Datasources that you have \"liked.\" This allows you to quickly access your preferred and most useful datasources from the shared repository. Trending Tab: Showcases the most popular Datasources , ranked by \"likes,\" highlighting datasources that are highly valued and frequently used by the ELITEA community. Agents Menu: Purpose: The Agents menu within the Public project features a collection of published and shared Agents contributed by other users. Discover and utilize these pre-built agents to automate complex tasks and workflows, leveraging the collective intelligence of the ELITEA community. Tabs within Agents Menu: The Agents menu follows the same organizational structure with three tabs: Latest Tab: Displays the most recently published Agents , showcasing the latest agent contributions from the community. My Likes Tab: Features a personalized list of Agents that you have \"liked.\" This provides quick access to your preferred and most valuable agents from the shared pool. Trending Tab: Showcases the most popular Agents , ranked by \"likes,\" highlighting agents that are highly regarded and widely used by the ELITEA community, indicating their potential effectiveness and utility. Collections Menu: Purpose: The Collections menu in the Public project is a curated space of grouped Prompts and Entities shared and published within the community . Explore and discover thematically organized collections of resources that address specific use cases or topics, providing pre-packaged sets of tools for various AI-powered tasks. Tabs within Collections Menu: The Collections menu is organized into three tabs to facilitate discovery of curated resource sets: Latest Tab: Showcases the most recently published Collections , offering insight into the newest thematic groupings and curated resource sets being shared by the community. My Likes Tab: Features a personalized list of Collections that you have \"liked.\" This creates a personalized library of favored collections, allowing you to easily revisit and reuse valuable sets of resources. Trending Tab: Displays Collections that have gathered the most \"likes,\" serving as an excellent resource for finding highly-regarded and popular collections esteemed by the community. These trending collections often represent best-practice examples of how to organize and utilize ELITEA resources for common use cases.","title":"Menus within the Public Project"},{"location":"feature-guides/core-features/public-project/#the-publication-process-sharing-your-expertise","text":"The Public Project thrives on community contributions. If you have created valuable Prompts or Collections in your Private or Team projects, you are encouraged to share them with the wider ELITEA community by publishing them to the Public Project.","title":"The Publication Process: Sharing Your Expertise"},{"location":"feature-guides/core-features/public-project/#publishing-prompts-to-the-public-project","text":"To share your best Prompts with the community: Create and Refine Prompt in Private/Team Project: Develop and thoroughly test your Prompt in your Private Workspace or a Team Project . Ensure it is well-documented, high-quality, and provides valuable functionality. Initiate Publication: Open the Prompts menu in your Private project, locate the Prompt you want to share, and click the \"Publish\" icon associated with that Prompt. Version Naming: In the \"Publish version\" pop-up window, provide a descriptive Version Name for your Prompt (e.g., \"Version 1.0 - Initial Release,\" \"Version 1.1 - Improved Accuracy\"). Click \"Publish\" to submit the Prompt for moderation. Moderation Review: Your submitted Prompt will undergo a review process by ELITEA moderators. Moderators will assess the Prompt for quality, relevance, clarity, and adherence to community guidelines. Approval and Publication: If your Prompt meets the moderation criteria, it will be Approved and published to the Prompts menu within the Public Project , making it accessible to all ELITEA users. You will receive a notification regarding the outcome of the moderation process. Important Notes on Prompt Publication: Quality and Relevance: Only high-quality, well-documented, and relevant Prompts are typically approved for publication to maintain the value and integrity of the Public Project resource pool. Moderator Feedback: If your Prompt is Rejected during moderation, you will receive constructive feedback from the moderators, explaining the reasons for rejection and providing guidance on how to improve your Prompt for potential future submission. Version Control: When publishing, you are publishing a specific version of your Prompt. This allows you to continue developing and improving your Prompts in your Private or Team projects without affecting the published version in the Public Project.","title":"Publishing Prompts to the Public Project"},{"location":"feature-guides/core-features/public-project/#publishing-collections-to-the-public-project","text":"To share curated sets of related Prompts (and potentially other Entities in the future) with the community: Create and Curate Collection in Private/Team Project: Create a well-organized and valuable Collection in your Private Workspace or a Team Project . Ensure it contains a set of thematically related and high-quality Entities (at least one published Prompt is required currently). Initiate Collection Publication: Open the Collections menu in your Private project, locate the Collection you want to share, and click the \"Publish collection\" icon within the Collection Detail View. Moderation Review: Your submitted Collection will undergo a review process by ELITEA moderators, similar to the Prompt publication process. Moderators will assess the Collection for relevance, organization, and overall value to the community. Approval and Publication: If your Collection meets the moderation criteria and contains at least one published Prompt, it will be Approved and published to the Collections menu within the Public Project , making it discoverable and accessible to all ELITEA users. You will be notified of the moderation outcome. Important Notes on Collection Publication: Minimum Requirement - Published Entity: A Collection must contain at least one already published Entity (currently, at least one published Prompt) to be eligible for publication. Separate Entity Publication: Publishing a Collection does not automatically publish the individual Entities contained within it. Ensure that all Prompts (and other Entities you intend to share publicly within the Collection) are published separately before publishing the Collection. Collection Duplication: Publishing a Collection creates a duplicate of your Collection in the Public Project. Changes made to your original Collection after publishing will not automatically update the published version. Focus on Prompts (Currently): Currently, Collection publishing primarily focuses on sharing groups of Prompts. While Collections can contain Datasources and Agents, the publishing mechanism is primarily designed for sharing Prompts within Collections.","title":"Publishing Collections to the Public Project"},{"location":"feature-guides/core-features/public-project/#usage-of-published-entities-leveraging-community-resources","text":"The primary purpose of the Public Project is to provide a readily accessible library of shared resources that you can leverage in your own ELITEA workflows. Here's how you can utilize published Prompts, Datasources, Agents, and Collections: Explore and Discover: Browse the Latest , My Likes , and Trending sections within the Prompts, Datasources, Agents, and Collections menus in the Public Project to discover valuable resources shared by the community. Execute Published Prompts and Agents: You can directly execute published Prompts and Agents from the Public Project to utilize their functionalities. Simply click on a Prompt or Agent card or name to open its detail view and access the \"Run\" tab to execute it. Inspiration and Learning: Examine the configurations and designs of published Prompts, Datasources, and Agents to learn new techniques, discover different approaches to problem-solving, and gain inspiration for your own creations. Add Published Prompts to Collections (Private Project): You can add valuable Prompts you discover in the Public Project to your own Collections within your Private Workspace or Team Projects . This allows you to curate personalized collections of useful resources for your specific needs and workflows. Export Published Prompts (for Backup or External Use): You can export published Prompts from the Public Project to create backups or utilize them in other compatible platforms (if supported by the export format). Important Limitations in Public Project: Read-Only Access: Remember that the Public Project is primarily a read-only resource library. You cannot directly modify or save changes to the original published versions of Prompts, Datasources, Agents, or Collections within the Public Project. No Direct Creation or Modification: You cannot create new Entities or Collections directly within the Public Project. Creation and modification are done in your Private Workspace or Team Projects, and then resources are published to the Public Project.","title":"Usage of Published Entities: Leveraging Community Resources"},{"location":"feature-guides/core-features/public-project/#useful-links-and-materials","text":"ELITEA Public Project Guide: [Link to Public Project Guide] (Replace with actual link) Collections Menu Guide: [Link to Collections Menu Guide] (Replace with actual link) Publishing Prompts and Collections Guide: [Link to Publishing Guide] (Replace with actual link) Export and Import Guide: Export and Import Guide This is the comprehensive User Guide for the Public Project in ELITEA. Please review it thoroughly and let me know if you have any further feedback!","title":"Useful Links and Materials"},{"location":"feature-guides/core-features/public-project/#public-project-guide-explore-and-collaborate","text":"The Public project in ELITEA serves as a collaborative hub where users can discover, utilize, and appreciate resources shared by the community. It's a space designed to foster knowledge sharing and accelerate innovation by making valuable prompts, agents, and datasources accessible to everyone within your organization. Key Features of the Public Project: Shared Resources: Access a curated collection of prompts, agents, and datasources contributed by other ELITEA users. Community Collaboration: Benefit from the collective expertise and creativity of your colleagues. Discover Best Practices: Explore highly-rated and trending resources to learn from successful implementations. Ready-to-Use Tools: Execute published resources directly to leverage their functionality. Inspiration and Learning: Discover new approaches and techniques by examining how others have built their resources. Accessing the Public Project: The Public project is readily accessible to all ELITEA users by default. You can switch to the Public project from your current project by clicking the Project switcher.","title":"Public Project Guide: Explore and Collaborate"},{"location":"feature-guides/core-features/public-project/#navigating-the-public-project","text":"The Public project is organized into distinct menus, each dedicated to a specific type of shared resource: Chat : Access to conversations, allowing to add participants (Agents, Prompts, Datasources, Models and Users) from Public project. Prompts: Discover and interact with prompts shared by the community. Datasources: Explore and utilize published datasources. Agents: Find and execute agents created and shared by other users. Collections: Browse and explore curated collections of resources. Each of these menus (except Chat) shares a similar structure, making it easy to navigate and find what you're looking for.","title":"Navigating the Public Project"},{"location":"feature-guides/core-features/public-project/#exploring-shared-resources","text":"Within each resource menu (Prompts, Datasources, Agents, Collections), you'll find three sub-sections designed to help you discover and engage with the shared content: Latest: This section displays the most recently published resources, giving you a glimpse into the newest additions to the community's shared pool. My Likes: Here, you'll find a personalized list of the resources you've liked. This allows you to easily revisit your favorite and most valuable finds. Trending: This section showcases the most popular resources, ranked by the number of likes they've received. It's a great place to discover highly regarded and widely used resources within the community.","title":"Exploring Shared Resources"},{"location":"feature-guides/core-features/public-project/#interacting-with-published-resources","text":"The Public project encourages active participation and appreciation of shared resources. Here's how you can interact with the prompts, datasources, and agents you find:","title":"Interacting with Published Resources"},{"location":"feature-guides/core-features/public-project/#showing-appreciation-liking-resources","text":"If you find a published prompt, datasource, or agent particularly useful or well-crafted, you can show your appreciation by \"liking\" it. To Like: Click the Heart icon associated with the resource. The icon will typically change color or appearance to indicate that you've liked it. To Unlike: If you change your mind or no longer wish to like a resource, simply click the Heart icon again.","title":"Showing Appreciation: Liking Resources"},{"location":"feature-guides/core-features/public-project/#utilizing-published-resources","text":"The primary purpose of the Public project is to allow users to leverage the shared resources. You can directly execute published prompts and agents to utilize their functionality. Simply click on the resource's card or name to view its details and find the execution options. Important Note: While you can view and execute resources in the Public project, you cannot directly modify and save changes to the original published version. These resources are intended for execution and inspiration.","title":"Utilizing Published Resources"},{"location":"feature-guides/core-features/public-project/#incorporating-public-resources-into-your-workflow","text":"You can leverage valuable resources found in the Public project in several ways: Adding to Collections: Organize useful public prompts, datasources, or agents into your personal collections within your Private project for easy access and management. Exporting Resources: For backup or use in other platforms (if supported), you can export published prompts. Refer to the documentation for your Private project for detailed instructions on adding to collections and exporting resources.","title":"Incorporating Public Resources into Your Workflow"},{"location":"feature-guides/core-features/public-project/#sharing-your-expertise-publishing-resources","text":"While you primarily interact with existing resources in the Public project, you can also contribute your own creations. If you've developed a valuable prompt, agent, or datasource in your Private project, you can submit it for publication to the Public project. The Publication Process: Create and Refine: Develop and thoroughly test your prompt, agent, or datasource in your Private project. Submit for Publication: Initiate the publication process for your resource. This typically involves clicking a \"Publish\" button within the resource's settings. Moderation Review: Resources submitted for publication are reviewed by designated moderators to ensure quality, relevance, and adherence to community guidelines. Approval and Publication: If approved, your resource will be published and become available to the wider ELITEA community in the Public project. Note: Only approved moderators have the ability to add resources to the Public project.","title":"Sharing Your Expertise: Publishing Resources"},{"location":"feature-guides/core-features/public-project/#benefits-of-the-public-project","text":"Reduced Redundancy: Avoid recreating commonly used prompts, agents, or datasources by leveraging existing community contributions. Accelerated Development: Quickly find and utilize pre-built resources to speed up your workflows. Enhanced Learning: Discover new techniques and approaches by examining how others have designed their resources. Community Building: Contribute to a shared knowledge base and benefit from the collective expertise of your colleagues. The ELITEA Public project is a valuable place for fostering collaboration and maximizing the potential of AI within your organization. Explore, engage, and contribute to make the most of this shared resource pool.","title":"Benefits of the Public Project"},{"location":"home/introduction/","text":"Overview of ELITEA Platform Welcome to the ELITEA platform, an innovative web application that revolutionizes how you interact with Generative AI. ELITEA is not just a repository but a dynamic workspace designed to empower you to create, organize, and collaborate on prompts, datasources and agents like never before. Key Features: Prompt Management : Effortlessly create, modify, and manage prompts. Keep track of different versions to ensure you always have access to your best work. Datasources : Play a pivotal role in enhancing the functionalities of ELITEA by integrating user-specific or project-specific data. This not only broadens the LLM's context but also enriches it with tailored information, making your interactions more relevant and insightful. Agents : Customize and create virtual assistants within ELITEA to handle specific tasks or sets of tasks. These agents integrate prompts, datasources, and external toolkits into a cohesive mechanism, enabling actions such as online searches or creating Jira tickets based on decisions made by LLMs. Chat : Combine all ELITEA features in one place with ELITEA Chat, an ultimate feature that allows for dynamic interaction and optimal results. Engage in conversations that utilize natural language to interact with human users and seamlessly integrate feedback from various participants like language models, datasources, and agents. Extensions : Transform your coding workflow with Alita Code and Alita Code Chat the ultimate AI-powered IDE extensions. Integrated seamlessly with VS Code and IntelliJ, these extensions offers intelligent suggestions, automates routine tasks, and provides unmatched adaptability to elevate your coding experience. Collection Integration : Organize your prompts, datasources and agents into Collections for better workflow management or to concentrate on specific themes or projects. Execution with Precision : Tailor the execution of prompts using various models and parameters to meet your specific needs, ensuring a customized experience. Advanced Creation Tools : Craft complex prompts, datasources and agents with precision using tools like variables, system prompts, Assistant Messages, and advanced tools. Powerful Search : Employ a robust search functionality to easily locate prompts, datasources and agents by tags, names, or descriptions. Community Engagement : Engage with the community by creating, modifying, and publishing prompts, datasources and agents. Enhance collaboration through sharing and liking content. ELITEA is designed to be a versatile and powerful tool, enhancing how you interact with AI technologies and manage data-driven projects. Whether you're coding, creating content, or managing complex data sets, ELITEA provides the tools you need to succeed. Let's embark on this journey to unlock the full potential of your ideas. Our user guide will walk you through every feature, ensuring you maximize your ELITEA experience. Accessing ELITEA To access and navigate through ELITEA, follow these steps: Open Your Browser : Launch your preferred web browser. Enter URL : Type https://nexus.elitea.ai into the address bar and press Enter. Login : Use your EPAM account credentials to log in. Note : Registration is not required. Initial Navigation : Upon successful login, you will be directed to the Chat menu. Note : If this is your first time logging into ELITEA, please allow up to 5 minutes for the private project initialization to complete before you start creating prompts. Switch Projects : After the Private project is initialized, you can switch from the Public project to your Private project using the Project dropdown list, located at the top right next to your avatar. Explore ELITEA : Click on the ELITEA icon on the top left side to navigate among the available menus. Here, you can create and manage prompts, datasources, agents, and collections. By following these steps, you will be able to effectively utilize the features and functionalities offered by ELITEA.","title":"Introduction"},{"location":"home/introduction/#overview-of-elitea-platform","text":"Welcome to the ELITEA platform, an innovative web application that revolutionizes how you interact with Generative AI. ELITEA is not just a repository but a dynamic workspace designed to empower you to create, organize, and collaborate on prompts, datasources and agents like never before. Key Features: Prompt Management : Effortlessly create, modify, and manage prompts. Keep track of different versions to ensure you always have access to your best work. Datasources : Play a pivotal role in enhancing the functionalities of ELITEA by integrating user-specific or project-specific data. This not only broadens the LLM's context but also enriches it with tailored information, making your interactions more relevant and insightful. Agents : Customize and create virtual assistants within ELITEA to handle specific tasks or sets of tasks. These agents integrate prompts, datasources, and external toolkits into a cohesive mechanism, enabling actions such as online searches or creating Jira tickets based on decisions made by LLMs. Chat : Combine all ELITEA features in one place with ELITEA Chat, an ultimate feature that allows for dynamic interaction and optimal results. Engage in conversations that utilize natural language to interact with human users and seamlessly integrate feedback from various participants like language models, datasources, and agents. Extensions : Transform your coding workflow with Alita Code and Alita Code Chat the ultimate AI-powered IDE extensions. Integrated seamlessly with VS Code and IntelliJ, these extensions offers intelligent suggestions, automates routine tasks, and provides unmatched adaptability to elevate your coding experience. Collection Integration : Organize your prompts, datasources and agents into Collections for better workflow management or to concentrate on specific themes or projects. Execution with Precision : Tailor the execution of prompts using various models and parameters to meet your specific needs, ensuring a customized experience. Advanced Creation Tools : Craft complex prompts, datasources and agents with precision using tools like variables, system prompts, Assistant Messages, and advanced tools. Powerful Search : Employ a robust search functionality to easily locate prompts, datasources and agents by tags, names, or descriptions. Community Engagement : Engage with the community by creating, modifying, and publishing prompts, datasources and agents. Enhance collaboration through sharing and liking content. ELITEA is designed to be a versatile and powerful tool, enhancing how you interact with AI technologies and manage data-driven projects. Whether you're coding, creating content, or managing complex data sets, ELITEA provides the tools you need to succeed. Let's embark on this journey to unlock the full potential of your ideas. Our user guide will walk you through every feature, ensuring you maximize your ELITEA experience.","title":"Overview of ELITEA Platform"},{"location":"home/introduction/#accessing-elitea","text":"To access and navigate through ELITEA, follow these steps: Open Your Browser : Launch your preferred web browser. Enter URL : Type https://nexus.elitea.ai into the address bar and press Enter. Login : Use your EPAM account credentials to log in. Note : Registration is not required. Initial Navigation : Upon successful login, you will be directed to the Chat menu. Note : If this is your first time logging into ELITEA, please allow up to 5 minutes for the private project initialization to complete before you start creating prompts. Switch Projects : After the Private project is initialized, you can switch from the Public project to your Private project using the Project dropdown list, located at the top right next to your avatar. Explore ELITEA : Click on the ELITEA icon on the top left side to navigate among the available menus. Here, you can create and manage prompts, datasources, agents, and collections. By following these steps, you will be able to effectively utilize the features and functionalities offered by ELITEA.","title":"Accessing ELITEA"},{"location":"how-tos/alita-dial/","text":"Interoperability Guide: ELITEA and EPAM AI Dial Welcome to the user-friendly manual on using ELITEA and EPAM AI Dial seamlessly together. This guide walks you through the steps to export from one platform and import into another, ensuring a hassle-free interoperation between ELITEA and EPAM AI Dial. Export Prompts from ELITEA Exporting a prompt in ELITEA enables you to use it on different platforms including EPAM AI Dial. Here\u2019s how to do it: Exporting the Prompt for AI DIAL: Start the Export : Click on the Export prompt icon. Choose Format : Select the [DIAL] format format when prompted. This format is specially designed for compatibility with EPAM AI Dial. Download : After selecting the format, the file will be downloaded automatically to your device in JSON format. Import Prompts to EPAM AI Dial Once you have the JSON file from ELITEA, you can easily import it into AI Dial. Importing the Prompt into AI Dial: Begin Import : Click on the Import prompts icon within the AI Dial platform. Select File : Browse your device and select the JSON file you exported from ELITEA. Complete Import : The platform will automatically add the prompt to the Prompts section. Usage : You can now select and use the prompt within AI Dial. Export Prompts from EPAM AI Dial If you have developed or customized prompts in EPAM AI Dial, you can easily export them for use in ELITEA. Prompt Selection : Identify and select the prompt you wish to export. Export : Click the ... icon next to your selected prompt and choose the Export option. File Download : The prompt will be exported and downloaded in JSON format, ready for ELITEA. Import Prompts to ELITEA To use the prompts created or exported from EPAM AI Dial in ELITEA, follow these simple steps. Initiate Import : Select the Import option within ELITEA. Choose File : Browse and select the exported JSON prompt file. Complete Process : The prompt will be added under the Prompts page in ELITEA. Use Prompt : You can now access and utilize the imported prompt. Exporting and Importing Collections from ELITEA to EPAM AI Dial You can also export entire collections from ELITEA and import them into EPAM AI Dial for broader prompt management. Export Collection : In ELITEA, select the collection you wish to export and choose the Export Collection option. Select the [DIAL] format for optimal compatibility. Download Collection : The collection, encompassing multiple prompts, will be exported as a JSON file and automatically downloaded to your device. Import into AI Dial : Upon importing the collection file into EPAM AI Dial, please note that the included prompts will be added as separate items, not as a unified folder. This feature enhances workflow efficiency by allowing bulk transferring of prompts between the platforms, albeit without retaining the folder structure during import into AI Dial. Troubleshooting File Format : Ensure the prompt file is in JSON format. Other formats won\u2019t be processed. Template Compatibility : ELITEA supports Jinja template. Make sure the content and variables in your prompt adhere to this format, especially avoiding spaces in variable names. File Structure : If you encounter any unrecognized errors, open the exported JSON file in a text editor. Validate its structure and formatting against the Jinja template requirements, making any necessary adjustments. By following these detailed steps, you should be able to smoothly export and import prompts and collections between ELITEA and EPAM AI Dial, enhancing your productivity and efficiency in creating and managing prompts. Useful Links ELITEA - User Guide ELITEA - Release Notes Epam AI Dial - User Guide","title":"Interoperability Guide: ELITEA and EPAM AI Dial"},{"location":"how-tos/alita-dial/#interoperability-guide-elitea-and-epam-ai-dial","text":"Welcome to the user-friendly manual on using ELITEA and EPAM AI Dial seamlessly together. This guide walks you through the steps to export from one platform and import into another, ensuring a hassle-free interoperation between ELITEA and EPAM AI Dial.","title":"Interoperability Guide: ELITEA and EPAM AI Dial"},{"location":"how-tos/alita-dial/#export-prompts-from-elitea","text":"Exporting a prompt in ELITEA enables you to use it on different platforms including EPAM AI Dial. Here\u2019s how to do it:","title":"Export Prompts from ELITEA"},{"location":"how-tos/alita-dial/#exporting-the-prompt-for-ai-dial","text":"Start the Export : Click on the Export prompt icon. Choose Format : Select the [DIAL] format format when prompted. This format is specially designed for compatibility with EPAM AI Dial. Download : After selecting the format, the file will be downloaded automatically to your device in JSON format.","title":"Exporting the Prompt for AI DIAL:"},{"location":"how-tos/alita-dial/#import-prompts-to-epam-ai-dial","text":"Once you have the JSON file from ELITEA, you can easily import it into AI Dial.","title":"Import Prompts to EPAM AI Dial"},{"location":"how-tos/alita-dial/#importing-the-prompt-into-ai-dial","text":"Begin Import : Click on the Import prompts icon within the AI Dial platform. Select File : Browse your device and select the JSON file you exported from ELITEA. Complete Import : The platform will automatically add the prompt to the Prompts section. Usage : You can now select and use the prompt within AI Dial.","title":"Importing the Prompt into AI Dial:"},{"location":"how-tos/alita-dial/#export-prompts-from-epam-ai-dial","text":"If you have developed or customized prompts in EPAM AI Dial, you can easily export them for use in ELITEA. Prompt Selection : Identify and select the prompt you wish to export. Export : Click the ... icon next to your selected prompt and choose the Export option. File Download : The prompt will be exported and downloaded in JSON format, ready for ELITEA.","title":"Export Prompts from EPAM AI Dial"},{"location":"how-tos/alita-dial/#import-prompts-to-elitea","text":"To use the prompts created or exported from EPAM AI Dial in ELITEA, follow these simple steps. Initiate Import : Select the Import option within ELITEA. Choose File : Browse and select the exported JSON prompt file. Complete Process : The prompt will be added under the Prompts page in ELITEA. Use Prompt : You can now access and utilize the imported prompt.","title":"Import Prompts to ELITEA"},{"location":"how-tos/alita-dial/#exporting-and-importing-collections-from-elitea-to-epam-ai-dial","text":"You can also export entire collections from ELITEA and import them into EPAM AI Dial for broader prompt management. Export Collection : In ELITEA, select the collection you wish to export and choose the Export Collection option. Select the [DIAL] format for optimal compatibility. Download Collection : The collection, encompassing multiple prompts, will be exported as a JSON file and automatically downloaded to your device. Import into AI Dial : Upon importing the collection file into EPAM AI Dial, please note that the included prompts will be added as separate items, not as a unified folder. This feature enhances workflow efficiency by allowing bulk transferring of prompts between the platforms, albeit without retaining the folder structure during import into AI Dial.","title":"Exporting and Importing Collections from ELITEA to EPAM AI Dial"},{"location":"how-tos/alita-dial/#troubleshooting","text":"File Format : Ensure the prompt file is in JSON format. Other formats won\u2019t be processed. Template Compatibility : ELITEA supports Jinja template. Make sure the content and variables in your prompt adhere to this format, especially avoiding spaces in variable names. File Structure : If you encounter any unrecognized errors, open the exported JSON file in a text editor. Validate its structure and formatting against the Jinja template requirements, making any necessary adjustments. By following these detailed steps, you should be able to smoothly export and import prompts and collections between ELITEA and EPAM AI Dial, enhancing your productivity and efficiency in creating and managing prompts.","title":"Troubleshooting"},{"location":"how-tos/alita-dial/#useful-links","text":"ELITEA - User Guide ELITEA - Release Notes Epam AI Dial - User Guide","title":"Useful Links"},{"location":"how-tos/collections-and-organizing-entities/","text":"Collections and Organizing Entities in ELITEA Introduction This guide provides a comprehensive overview of Collections and Tags in ELITEA, powerful features designed to help you organize and manage your Entities effectively. In ELITEA, Entities refer to Prompts, Datasources, and Agents \u2013 the core building blocks of ELITEA and your AI-powered workflows. Whether you are working in your Private workspace, collaborating within a Team project, or contributing to the Public project, mastering these organizational tools is key to maximizing your efficiency and leveraging the full potential of ELITEA. This guide will walk you through the concepts, configuration, usage, and best practices for utilizing Tags and Collections . Understanding Project Scopes: Private Workspace: Your personal and private area within ELITEA to create and manage your Entities and Collections. Only you have access to your Private workspace. Team Projects: Collaborative spaces for teams to work together on projects, sharing and managing Entities and Collections. Access to Team projects is controlled by project roles and permissions. Public Project: A shared, community space within ELITEA where published Prompts and Collections are available for all users to discover and utilize. Importance of Organizing Entities in ELITEA As you build and utilize more Entities within ELITEA, effective organization becomes paramount. Without a robust organizational system, managing a growing number of entities can become challenging, leading to: Difficulty in Finding Entities: Spending excessive time searching for the right Prompt, Datasource, or Agent among a long, unorganized list. Reduced Efficiency: Slower workflows and decreased productivity due to the time wasted on searching and managing entities. Inconsistent Naming and Duplication: Lack of a clear organizational structure can lead to inconsistent naming conventions and accidental duplication of entities, creating clutter and confusion. Hindered Collaboration: Sharing and collaborating on entities becomes difficult when they are not properly categorized and grouped, hindering team efficiency and knowledge sharing. Tags and Collections in ELITEA directly address these challenges by providing intuitive and flexible ways to categorize, group, and manage your AI artifacts, ensuring you can quickly find, utilize, and share the resources you need, when you need them. Overview of Tags In ELITEA, Tags are your essential tool for categorizing and labeling individual Entities. Think of tags as keywords or labels that you attach to each Entity, allowing you to create a flexible and searchable organizational system. Tags are designed to: Categorize Entities: Assign Entities to relevant categories based on topic, function, project, team, or any other criteria that makes sense for your workflow. Improve Searchability: Make it easy to find specific Entities by filtering and searching based on assigned tags. Enable Flexible Grouping: Group Entities based on multiple criteria by assigning multiple tags to each item. Configuring Tags for Entities: Access Entity Configuration: Open the configuration settings for the Entity you want to tag. Locate \"Tags\" Input Box: Within the Configuration tab, find the Tags input box. Add Tags: Type a Tag Name: Begin typing the desired tag name. Select or Create: Select a suggested tag or create a new one by pressing Enter . Save Configuration: Click the Save button to save the Entity with the selected tags. Note on 'code' Tag: The tag named code is reserved for integration with the Alita Code extension. If you create and assign the tag code to Prompts, Agents, or Datasources within your ELITEA project, it enables a special synchronization feature. Functionality of the code Tag: Alita Code Extension Connection : When you set up the Alita Code extension and connect it to your ELITEA project, the extension will recognize and utilize Entities that are tagged with code. Synchronization and Usage in Code Editor : Entities tagged with code become accessible and usable directly within your IDE through the Alita Code extension. This allows you to seamlessly integrate your ELITEA-managed AI artifacts into your local coding workflows. Key Features of Tags: Multi-Dimensional Labeling: Assign multiple tags to each Entity for flexible categorization. Free-Form Text: Create custom tags relevant to your specific needs. Searchable and Filterable: Easily locate Entities using tag-based search and filtering. Visual Identification: Tags are displayed as labels for quick identification. Searching and Filtering Entities by Tags: Search by Tags: Use the Search bar in any Entity menu (Prompts, Datasources, Agents) and type a tag name to filter the list. Filter by Tags: Use the Tags\" section in entity menus to select tags and narrow down the displayed list. Overview of Collections Collections in ELITEA offer a higher level of organization, grouping related Entities into logical units. Collections are designed to: Group Related Entities: Organize Entities by theme, project, or use case. Enhance Discoverability: Improve the discoverability of related sets of Entities. Facilitate Sharing and Export: Enable batch export and sharing of grouped Entities. Promote Thematic Organization: Create curated sets of resources for specific topics or workflows. Configuration and Usage of Collections: Creating Collections: Navigate to Collections Menu: Access the Collections menu in your Private or Team project. Create New Collection: Click the \"+ Collection\" button. Define Collection Details: Name: Enter a descriptive Name for the collection. Description: Write a concise Description explaining the collection's purpose. Create Collection: Click Create to create the collection. Exploring Collections: Access Collections Menu: Navigate to the Collections menu. Open Collection: Click on a Collection Card or Name to view its contents. View Entities: Explore the list of Prompts, Datasources, and Agents within the collection. Interact with Entities: Within a collection, you can: View and Open Entities Modify Collection Details Filter Collection by Tags Publish Collection Delete Collection Export Collection Filtering Entities within a Collection by Tabs and Tags: Within the Collection Detail View , you can filter Entities by Type using tabs and further refine the list using Tags : Filter by Type using Tabs: Use the All , Prompts , Datasources , and Agents tabs to view specific entity types within the collection. Filter by Tags: Use the \"Tags\" filter section to narrow down the displayed list to Entities with specific tags. Modifying a Collection: Open Collection Detail View: Navigate to the Collections menu and open the desired collection. Edit Collection Details: Click the \"Edit\" icon . Update Information: Modify the Name and/or Description . Saving Changes: Click the \"Save\" button. Here's the enhanced \"Publishing a Collection (Public Project)\" section with the added note clarifying the publishing requirements and behavior: Publishing a Collection (Public Project): Open Collection Detail View: Navigate to the Collections menu and open the detail view of the collection you want to publish. Review Collection Contents: Ensure that the collection is complete, relevant, and contains at least one published entity from that collection before publishing the collection itself. Publishing Collection: Click the \"Publish collection\" icon within the collection detail view. This will submit the collection for review by ELITEA moderators. Moderation and Approval: The collection will be reviewed to ensure it meets ELITEA's quality and relevance guidelines. Once approved by a moderator, the collection will be published and become available in the Public project's Collections menu for community use. Important Notes on Publishing Collections: Minimum Requirement - Published Entity: A Collection cannot be published unless it contains at least one already published Entity (Prompt, Datasource, or Agent). Ensure that your collection includes at least one published entity before attempting to publish the collection itself. Separate Entity Publication is Necessary: Publishing a Collection does not automatically publish the individual entities (Prompts, Datasources, Agents) contained within it. If you intend to include specific entities in your published Collection in the Public project, you must publish each of those entities separately in their respective menus (Prompts, Datasources, Agents) before publishing the Collection. Collection Duplication in Public Project: Publishing a Collection essentially creates a duplicate of your Collection in the Public project. This published copy will include all the already published entities that were part of your original Collection at the time of publishing. Changes made to the original Collection in your Private or Team project after publishing will not automatically be reflected in the published Collection in the Public project. Currently Supported Entity Type for Public Collections - Prompts: Currently, publishing Collections primarily focuses on sharing Prompts within the collection to the Public project. While Collections can contain Datasources and Agents, the publishing mechanism for Collections is primarily designed for sharing groups of Prompts within the community. Functionality for publishing Collections with Datasources and Agents will be expanded in future updates. Deleting a Collection: Open Collections Menu: Navigate to the Collections menu. Locate Collection: Find the collection you want to delete. Delete Collection: Click the Delete icon. Confirmation: Confirm the deletion when prompted. Exporting Collections: Open Collection Detail View: Navigate to the Collections menu and open the collection you want to export. Export Collection: Click the Export Collection icon. Download JSON File: A JSON file containing the collection data will be downloaded. Importing Collections: Import Collection: Click the Import button in the Collections menu. Select Collection File: In the \"Import Wizard,\" select the JSON file from your device. Configure Import Options: Choose the target project and select Entities to import. Start Import: Click the \"Import\" button. Locate Imported Entities: Find imported Entities in their respective menus (Prompts, Datasources, Agents). Important Note on Collection Entity Recreation: The Collection entity itself is not automatically recreated during import. For more information about importing collections and entities, please refer to the Export and Import Guide . How to Add an Entity to a Collection ELITEA offers a convenient way to add Prompts, Datasources, and Agents to your Collections, allowing you to build and curate your organized sets of entities efficiently. Adding Entities from within the Entity Menus (Prompts, Datasources, Agents) To add Entities to Collections from the Prompts, Datasources, or Agents menus as you are browsing or managing your individual entities. Navigate to Entity Menu: Go to the Prompts , Datasources , or Agents menu, depending on the type of entity you want to add to a Collection. Locate the Entity to Add: Find the specific Entity (Prompt, Datasource, or Agent) that you want to add to a Collection within the list. ELITEA offers two view options, and the process is similar in both: Card list view : If you are viewing your entities in a card format, locate the desired entity card. Table view : If you are viewing your entities in a table format, locate the entity you want to add in the list. To add entity to collection For the chosen Entity, locate and click the Bookmark icon. Card list view : On the top right corner of the Entity's card. Table view : In the Actions column, which is usually the last column in the table, click on the ellipsis icon ( ... ) next to the entity. A dropdown menu will appear. Hover over or click on the \"Add to collection\" option. Select Target Collection: After clicking the Bookmark icon, a pop-up window will appear, displaying a list of your existing Collections. Choose a Collection: Select the Collection to which you want to add the current Entity from the list. Entity Added to Collection: Once you select a Collection, the Entity will be automatically added to that Collection. Best Practices and Examples: Organizing Entities in ELITEA Effective organization with Tags and Collections is crucial for managing your AI assets in ELITEA. Here are some best practices and examples to guide you: Tagging Strategies: Tag by Topic or Subject Area: Examples: #UserStories , #CodeDocumentation , #CompetitiveAnalysis . Tag by Function or Purpose: Examples: #Drafting , #Summarization , #DataRetrieval . Tag by Project or Team: Examples: #ProjectAlpha , #TeamBeta , #MarketingDepartment . Tag by User Skill Level: Examples: #BeginnerFriendly , #AdvancedUsers . Maintain Consistency: Establish and document a consistent tagging system. Combine General and Specific Tags: Use a mix of tag granularity for effective categorization. Example Tagging Scenarios: Prompt: \"Draft User Story for Checkout Feature\" : Tags: #UserStories , #Jira , #Drafting , #BeginnerFriendly , #ProjectAlpha . Agent: \"Confluence Page Publisher\" : Tags: #Confluence , #Publishing , #Documentation , #TeamBeta . Datasource: \"Competitor Pricing Data - Web Scraper\" : Tags: #CompetitiveAnalysis , #DataRetrieval , #MarketingDepartment . Collection Strategies: Group by Use Case or Workflow: Example: \"User Story Management Toolkit.\" Group by Project or Client: Example: \"Project Alpha - AI Assets Collection.\" Group by Theme or Topic: Example: \"Code Documentation Prompts Collection.\" Create \"Starter Kits\" or Template Collections: Develop template collections for common tasks. Curate \"Best Practices\" Collections: Share collections showcasing best practices within your organization. Example Collection Scenarios: Collection: \"User Story Management Toolkit\" : Contains Prompts, Agents, and Datasources for user story management. Collection: \"Code Documentation Automation\" : Contains Prompts and Agents for code documentation. Collection: \"Marketing Content Generation - Social Media\" : Contains Prompts and Datasources for social media marketing content. Combining Tags and Collections for Optimal Organization: Collections for High-Level Grouping: Use Collections as thematic folders. Tags for Granular Filtering: Use Tags for detailed categorization within Collections. Example: \"Marketing Content Generation\" Collection with tags like #SocialMedia , #BlogPosts , #EmailMarketing . Useful Links and Materials To further expand your knowledge and skills in organizing Entities and utilizing Collections within ELITEA, here are some helpful resources: Collections Menu : Access the dedicated Collections Menu Guide for a comprehensive walkthrough of the Collections menu interface, features, and functionalities within ELITEA. ELITEA Public Project Guide : Explore the ELITEA Public Project to discover and utilize community-shared Prompts and Collections. Learn more about the purpose and guidelines of the Public project. Publishing Prompts and Collections Guide : Consult this guide for step-by-step instructions and best practices on publishing your Prompts and Collections to the ELITEA Public Project, making them available to the wider community. Export and Import Guide : Refer to the detailed Export and Import Guide for in-depth instructions on exporting and importing individual Entities and entire Collections within ELITEA.","title":"Collections and Organizing Entities in ELITEA"},{"location":"how-tos/collections-and-organizing-entities/#collections-and-organizing-entities-in-elitea","text":"","title":"Collections and Organizing Entities in ELITEA"},{"location":"how-tos/collections-and-organizing-entities/#introduction","text":"This guide provides a comprehensive overview of Collections and Tags in ELITEA, powerful features designed to help you organize and manage your Entities effectively. In ELITEA, Entities refer to Prompts, Datasources, and Agents \u2013 the core building blocks of ELITEA and your AI-powered workflows. Whether you are working in your Private workspace, collaborating within a Team project, or contributing to the Public project, mastering these organizational tools is key to maximizing your efficiency and leveraging the full potential of ELITEA. This guide will walk you through the concepts, configuration, usage, and best practices for utilizing Tags and Collections . Understanding Project Scopes: Private Workspace: Your personal and private area within ELITEA to create and manage your Entities and Collections. Only you have access to your Private workspace. Team Projects: Collaborative spaces for teams to work together on projects, sharing and managing Entities and Collections. Access to Team projects is controlled by project roles and permissions. Public Project: A shared, community space within ELITEA where published Prompts and Collections are available for all users to discover and utilize.","title":"Introduction"},{"location":"how-tos/collections-and-organizing-entities/#importance-of-organizing-entities-in-elitea","text":"As you build and utilize more Entities within ELITEA, effective organization becomes paramount. Without a robust organizational system, managing a growing number of entities can become challenging, leading to: Difficulty in Finding Entities: Spending excessive time searching for the right Prompt, Datasource, or Agent among a long, unorganized list. Reduced Efficiency: Slower workflows and decreased productivity due to the time wasted on searching and managing entities. Inconsistent Naming and Duplication: Lack of a clear organizational structure can lead to inconsistent naming conventions and accidental duplication of entities, creating clutter and confusion. Hindered Collaboration: Sharing and collaborating on entities becomes difficult when they are not properly categorized and grouped, hindering team efficiency and knowledge sharing. Tags and Collections in ELITEA directly address these challenges by providing intuitive and flexible ways to categorize, group, and manage your AI artifacts, ensuring you can quickly find, utilize, and share the resources you need, when you need them.","title":"Importance of Organizing Entities in ELITEA"},{"location":"how-tos/collections-and-organizing-entities/#overview-of-tags","text":"In ELITEA, Tags are your essential tool for categorizing and labeling individual Entities. Think of tags as keywords or labels that you attach to each Entity, allowing you to create a flexible and searchable organizational system. Tags are designed to: Categorize Entities: Assign Entities to relevant categories based on topic, function, project, team, or any other criteria that makes sense for your workflow. Improve Searchability: Make it easy to find specific Entities by filtering and searching based on assigned tags. Enable Flexible Grouping: Group Entities based on multiple criteria by assigning multiple tags to each item. Configuring Tags for Entities: Access Entity Configuration: Open the configuration settings for the Entity you want to tag. Locate \"Tags\" Input Box: Within the Configuration tab, find the Tags input box. Add Tags: Type a Tag Name: Begin typing the desired tag name. Select or Create: Select a suggested tag or create a new one by pressing Enter . Save Configuration: Click the Save button to save the Entity with the selected tags. Note on 'code' Tag: The tag named code is reserved for integration with the Alita Code extension. If you create and assign the tag code to Prompts, Agents, or Datasources within your ELITEA project, it enables a special synchronization feature. Functionality of the code Tag: Alita Code Extension Connection : When you set up the Alita Code extension and connect it to your ELITEA project, the extension will recognize and utilize Entities that are tagged with code. Synchronization and Usage in Code Editor : Entities tagged with code become accessible and usable directly within your IDE through the Alita Code extension. This allows you to seamlessly integrate your ELITEA-managed AI artifacts into your local coding workflows. Key Features of Tags: Multi-Dimensional Labeling: Assign multiple tags to each Entity for flexible categorization. Free-Form Text: Create custom tags relevant to your specific needs. Searchable and Filterable: Easily locate Entities using tag-based search and filtering. Visual Identification: Tags are displayed as labels for quick identification. Searching and Filtering Entities by Tags: Search by Tags: Use the Search bar in any Entity menu (Prompts, Datasources, Agents) and type a tag name to filter the list. Filter by Tags: Use the Tags\" section in entity menus to select tags and narrow down the displayed list.","title":"Overview of Tags"},{"location":"how-tos/collections-and-organizing-entities/#overview-of-collections","text":"Collections in ELITEA offer a higher level of organization, grouping related Entities into logical units. Collections are designed to: Group Related Entities: Organize Entities by theme, project, or use case. Enhance Discoverability: Improve the discoverability of related sets of Entities. Facilitate Sharing and Export: Enable batch export and sharing of grouped Entities. Promote Thematic Organization: Create curated sets of resources for specific topics or workflows. Configuration and Usage of Collections: Creating Collections: Navigate to Collections Menu: Access the Collections menu in your Private or Team project. Create New Collection: Click the \"+ Collection\" button. Define Collection Details: Name: Enter a descriptive Name for the collection. Description: Write a concise Description explaining the collection's purpose. Create Collection: Click Create to create the collection. Exploring Collections: Access Collections Menu: Navigate to the Collections menu. Open Collection: Click on a Collection Card or Name to view its contents. View Entities: Explore the list of Prompts, Datasources, and Agents within the collection. Interact with Entities: Within a collection, you can: View and Open Entities Modify Collection Details Filter Collection by Tags Publish Collection Delete Collection Export Collection Filtering Entities within a Collection by Tabs and Tags: Within the Collection Detail View , you can filter Entities by Type using tabs and further refine the list using Tags : Filter by Type using Tabs: Use the All , Prompts , Datasources , and Agents tabs to view specific entity types within the collection. Filter by Tags: Use the \"Tags\" filter section to narrow down the displayed list to Entities with specific tags. Modifying a Collection: Open Collection Detail View: Navigate to the Collections menu and open the desired collection. Edit Collection Details: Click the \"Edit\" icon . Update Information: Modify the Name and/or Description . Saving Changes: Click the \"Save\" button. Here's the enhanced \"Publishing a Collection (Public Project)\" section with the added note clarifying the publishing requirements and behavior: Publishing a Collection (Public Project): Open Collection Detail View: Navigate to the Collections menu and open the detail view of the collection you want to publish. Review Collection Contents: Ensure that the collection is complete, relevant, and contains at least one published entity from that collection before publishing the collection itself. Publishing Collection: Click the \"Publish collection\" icon within the collection detail view. This will submit the collection for review by ELITEA moderators. Moderation and Approval: The collection will be reviewed to ensure it meets ELITEA's quality and relevance guidelines. Once approved by a moderator, the collection will be published and become available in the Public project's Collections menu for community use. Important Notes on Publishing Collections: Minimum Requirement - Published Entity: A Collection cannot be published unless it contains at least one already published Entity (Prompt, Datasource, or Agent). Ensure that your collection includes at least one published entity before attempting to publish the collection itself. Separate Entity Publication is Necessary: Publishing a Collection does not automatically publish the individual entities (Prompts, Datasources, Agents) contained within it. If you intend to include specific entities in your published Collection in the Public project, you must publish each of those entities separately in their respective menus (Prompts, Datasources, Agents) before publishing the Collection. Collection Duplication in Public Project: Publishing a Collection essentially creates a duplicate of your Collection in the Public project. This published copy will include all the already published entities that were part of your original Collection at the time of publishing. Changes made to the original Collection in your Private or Team project after publishing will not automatically be reflected in the published Collection in the Public project. Currently Supported Entity Type for Public Collections - Prompts: Currently, publishing Collections primarily focuses on sharing Prompts within the collection to the Public project. While Collections can contain Datasources and Agents, the publishing mechanism for Collections is primarily designed for sharing groups of Prompts within the community. Functionality for publishing Collections with Datasources and Agents will be expanded in future updates. Deleting a Collection: Open Collections Menu: Navigate to the Collections menu. Locate Collection: Find the collection you want to delete. Delete Collection: Click the Delete icon. Confirmation: Confirm the deletion when prompted. Exporting Collections: Open Collection Detail View: Navigate to the Collections menu and open the collection you want to export. Export Collection: Click the Export Collection icon. Download JSON File: A JSON file containing the collection data will be downloaded. Importing Collections: Import Collection: Click the Import button in the Collections menu. Select Collection File: In the \"Import Wizard,\" select the JSON file from your device. Configure Import Options: Choose the target project and select Entities to import. Start Import: Click the \"Import\" button. Locate Imported Entities: Find imported Entities in their respective menus (Prompts, Datasources, Agents). Important Note on Collection Entity Recreation: The Collection entity itself is not automatically recreated during import. For more information about importing collections and entities, please refer to the Export and Import Guide .","title":"Overview of Collections"},{"location":"how-tos/collections-and-organizing-entities/#how-to-add-an-entity-to-a-collection","text":"ELITEA offers a convenient way to add Prompts, Datasources, and Agents to your Collections, allowing you to build and curate your organized sets of entities efficiently. Adding Entities from within the Entity Menus (Prompts, Datasources, Agents) To add Entities to Collections from the Prompts, Datasources, or Agents menus as you are browsing or managing your individual entities. Navigate to Entity Menu: Go to the Prompts , Datasources , or Agents menu, depending on the type of entity you want to add to a Collection. Locate the Entity to Add: Find the specific Entity (Prompt, Datasource, or Agent) that you want to add to a Collection within the list. ELITEA offers two view options, and the process is similar in both: Card list view : If you are viewing your entities in a card format, locate the desired entity card. Table view : If you are viewing your entities in a table format, locate the entity you want to add in the list. To add entity to collection For the chosen Entity, locate and click the Bookmark icon. Card list view : On the top right corner of the Entity's card. Table view : In the Actions column, which is usually the last column in the table, click on the ellipsis icon ( ... ) next to the entity. A dropdown menu will appear. Hover over or click on the \"Add to collection\" option. Select Target Collection: After clicking the Bookmark icon, a pop-up window will appear, displaying a list of your existing Collections. Choose a Collection: Select the Collection to which you want to add the current Entity from the list. Entity Added to Collection: Once you select a Collection, the Entity will be automatically added to that Collection.","title":"How to Add an Entity to a Collection"},{"location":"how-tos/collections-and-organizing-entities/#best-practices-and-examples-organizing-entities-in-elitea","text":"Effective organization with Tags and Collections is crucial for managing your AI assets in ELITEA. Here are some best practices and examples to guide you: Tagging Strategies: Tag by Topic or Subject Area: Examples: #UserStories , #CodeDocumentation , #CompetitiveAnalysis . Tag by Function or Purpose: Examples: #Drafting , #Summarization , #DataRetrieval . Tag by Project or Team: Examples: #ProjectAlpha , #TeamBeta , #MarketingDepartment . Tag by User Skill Level: Examples: #BeginnerFriendly , #AdvancedUsers . Maintain Consistency: Establish and document a consistent tagging system. Combine General and Specific Tags: Use a mix of tag granularity for effective categorization. Example Tagging Scenarios: Prompt: \"Draft User Story for Checkout Feature\" : Tags: #UserStories , #Jira , #Drafting , #BeginnerFriendly , #ProjectAlpha . Agent: \"Confluence Page Publisher\" : Tags: #Confluence , #Publishing , #Documentation , #TeamBeta . Datasource: \"Competitor Pricing Data - Web Scraper\" : Tags: #CompetitiveAnalysis , #DataRetrieval , #MarketingDepartment . Collection Strategies: Group by Use Case or Workflow: Example: \"User Story Management Toolkit.\" Group by Project or Client: Example: \"Project Alpha - AI Assets Collection.\" Group by Theme or Topic: Example: \"Code Documentation Prompts Collection.\" Create \"Starter Kits\" or Template Collections: Develop template collections for common tasks. Curate \"Best Practices\" Collections: Share collections showcasing best practices within your organization. Example Collection Scenarios: Collection: \"User Story Management Toolkit\" : Contains Prompts, Agents, and Datasources for user story management. Collection: \"Code Documentation Automation\" : Contains Prompts and Agents for code documentation. Collection: \"Marketing Content Generation - Social Media\" : Contains Prompts and Datasources for social media marketing content. Combining Tags and Collections for Optimal Organization: Collections for High-Level Grouping: Use Collections as thematic folders. Tags for Granular Filtering: Use Tags for detailed categorization within Collections. Example: \"Marketing Content Generation\" Collection with tags like #SocialMedia , #BlogPosts , #EmailMarketing .","title":"Best Practices and Examples: Organizing Entities in ELITEA"},{"location":"how-tos/collections-and-organizing-entities/#useful-links-and-materials","text":"To further expand your knowledge and skills in organizing Entities and utilizing Collections within ELITEA, here are some helpful resources: Collections Menu : Access the dedicated Collections Menu Guide for a comprehensive walkthrough of the Collections menu interface, features, and functionalities within ELITEA. ELITEA Public Project Guide : Explore the ELITEA Public Project to discover and utilize community-shared Prompts and Collections. Learn more about the purpose and guidelines of the Public project. Publishing Prompts and Collections Guide : Consult this guide for step-by-step instructions and best practices on publishing your Prompts and Collections to the ELITEA Public Project, making them available to the wider community. Export and Import Guide : Refer to the detailed Export and Import Guide for in-depth instructions on exporting and importing individual Entities and entire Collections within ELITEA.","title":"Useful Links and Materials"},{"location":"how-tos/creating-prompts/","text":"How to Create and Publish Useful Prompts for Testing and QA Activities Introduction Welcome to our comprehensive guide designed to empower our Testing and Quality Assurance (QA) community in the crafting and sharing of valuable prompts, specifically tailored for an array of testing activities. In today's rapidly evolving software development landscape, the adoption of Generative AI Tools has become increasingly instrumental in augmenting our testing efforts. These cutting-edge tools offer unparalleled capabilities in automating and innovating processes ranging from generating test cases and creating detailed test plans to formulating comprehensive test strategies and writing automation scripts. Additionally, they play a critical role in generating realistic and diverse test data, facilitating a more thorough and effective testing process. The intention behind this activity is twofold: to streamline the process of prompt generation that leverages Gen AI Tools, ensuring that these prompts become potent tools in identifying and resolving defects, bolstering product quality, and refining our testing strategies. Moreover, it seeks to evolve our QA community to actively contribute to and share their expertise through valuable prompts. By participating in enriching our Prompt Library, you not only aid in creating a substantial repository of resources but also contribute to a culture of knowledge sharing and collective growth within our community. We encourage you to share prompts across various domains, including but not limited to, generating test cases, creating comprehensive test plans and strategies, developing automation scripts, and generating test data. This endeavor will not only help elevate the efficiency and effectiveness of our testing processes but also foster innovation and creativity within our QA practices. In leveraging Gen AI tools, it is imperative to always review the generated outputs meticulously to ensure they not only meet our stringent quality standards but also strictly adhere to Epam\u2019s security guidelines and policies. Our collective commitment to maintaining the highest level of security and protecting sensitive information is paramount and non-negotiable. Your contribution to this initiative will play a pivotal role in enhancing our testing capabilities, driving quality improvements, and maintaining our competitive edge in delivering superior software solutions. Let us embark on this journey together, fostering a vibrant and collaborative QA community that thrives on innovation, excellence, and shared success. Accessing ELITEA HUB To access and navigate through ELITEA HUB, follow these steps: Open Your Browser : Launch your preferred web browser. Enter URL : Type https://alita.lab.epam.com into the address bar and press Enter. Login : Use your EPAM account credentials to log in. Note : Registration is not required. Initial Navigation : Upon successful login, you will be directed to the Chat menu. Note : If this is your first time logging into ELITEA, please allow up to 5 minutes for the private project initialization to complete before you start creating prompts. Switch Projects : After the Private project is initialized, you can switch from the Public project to your Private project using the Project dropdown list, located at the top right next to your avatar. Explore ELITEA : Click on the ELITEA icon on the top left side to navigate among the available menus. Here, you can create and manage prompts, datasources, agents, and collections. By following these steps, you will be able to effectively utilize the features and functionalities offered by ELITEA HUB. Note : You need to enable Epam VPN to access ELITEA. Prompts Prompts are essentially instructions or scenarios designed to generate outcomes to assist QA activities. The effectiveness of the prompts directly correlates with the efficiency and accuracy of our testing efforts. To ensure that every prompt we create serves its purpose effectively, it\u2019s crucial to adhere to several foundational principles. These guidelines not only help in crafting prompts that are valuable and practical but also ensure that they align with our overarching goals of security, versatility, and clarity in our QA processes. With this context in mind, let\u2019s delve into the core principles that should guide the creation of effective prompts: Creating Effective Prompts Relevance : Directly tie your prompt to testing and QA activities to ensure relevance. Clarity : Utilize clear, concise language for better comprehension. Specificity : Clearly mention the testing phase, type, and specific focus area of the prompt. Scalability : Aim for prompts that can be broadly applied across various projects. Security : Avoid including any customer data or sensitive information. How to Create a Prompt Creating a prompt involves capturing essential details that guide the testing process effectively. Here is how you can create a prompt that adds value: Initiate Prompt Creation : Click the + Prompt button located at the top right of your screen to start crafting your prompt. Provide Prompt Details : Name : Assign a descriptive name that clearly reflects the aim of the prompt. Description : Summarize the purpose of the prompt, detailing what it intends to achieve. Note : The Name and Description fields are crucial for others to understand the prompt\u2019s purpose and are not editable after saving. Tag(s) : A descriptive Tag(s) for grouping the prompts. Context : Well crafted prompt corresponding to well-acceppted Frameworks for creating prompts (e.g. CREATE, CRISPE, Elavis Saravia, etc.). In case the prompt's context contains Variables - then a descriptive variable name. In case the prompt has System or Assistant messages - then those messages must be informative. Select the Model : Choose the appropriate model (e.g., gpt-3.5-turbo, gpt-4-0125-preview, etc.) for which the prompt has been tailored and tested. Configure Advanced Settings : Tune the output of your prompt by adjusting configurations such as Temperature, Top P, Top K, and Maximum length, ensuring the prompt's output aligns with expectations. Test Your Prompt : Execute the prompt and review the results to confirm everything functions as intended. Finalize : Click Save to keep your draft or proceed to the next step to share your work with the community. Providing Name, Description and Context of the prompt: Setup Variables: Configuring Advanced Settings: Prompt Requirements for Consistency and Quality When crafting your prompt, ensure it includes the following elements for clarity and effectiveness: Descriptive Name : Clearly indicates the focus of the prompt. Conciseness : Aim for a name that is brief yet descriptive, ideally under 30 characters. Relevance : Ensure the name directly reflects the content or purpose of the prompt. Brief Description : Eloquently explains the prompt\u2019s goal. Specificity : Include specific details about what the prompt is intended to achieve. Brevity : Keep the description concise, aiming for one to two sentences. Descriptive Tags : Facilitates prompt categorization and searchability. Relevance : Choose tags that are directly related to the prompt\u2019s content and purpose. Diversity : Use a mix of broad and specific tags to enhance discoverability. Framework Adherence : Ensures the prompt aligns with accepted Prompt creation frameworks (e.g., CREATE, CRISPE, Elavis Saravia, etc.). Consistency : Stick to one framework per prompt to maintain clarity and structure. Documentation : Reference the framework used in the prompt description for clarity. Variable Clarity : In scenarios with variables, use descriptive names. Descriptiveness : Use names that clearly indicate what the variable represents. Standardization : Follow a consistent naming convention for variables across prompts. Informative System Messages : If your prompt uses system or assistant messages, they must be clear and helpful. Clarity : Ensure messages are straightforward and free of jargon. Guidance : Messages should guide the user on how to interact with the prompt effectively. Expected Outcomes : Define what successful application of the prompt looks like. Measurable Criteria : Specify clear, measurable criteria for what constitutes a successful outcome. Examples : Provide examples of successful outcomes to illustrate expectations. Submitting Your Prompt for Publishing To make your prompt available to the wider QA community, follow the steps below for publication: Publishing Initiation : With your prompt crafted and saved, click the Publish button to start the submission process. Version Naming : Provide an informative version name (e.g., Gen-1.0) in the pop-up window. This name should reflect the content or purpose of the prompt, aiding in version control and future modifications. Length : Keep the version name concise, not exceeding 48 characters. This ensures readability and compatibility across various systems. Characters : Avoid using special characters such as spaces (\" \"), underscores (\"_\"), and others that might cause parsing or recognition issues in certain environments. Clarity : Choose names that clearly and succinctly describe the version's purpose or the changes it introduces, facilitating easier tracking and management of different versions. Review Submission : Click Publish to submit your prompt for the moderation review process. This step is crucial to ensure the quality and relevance of prompts available to the QA community. Publishing the prompt: Review Process by Moderators and Outcome of Prompt Submission Moderator Review Process After a prompt is submitted for publication, it enters a critical assessment phase led by our designated moderators. Our moderators are QA professionals with a broad understanding of what constitutes a high-quality, effective prompt. The review process aims to ensure that each prompt meets our standards for relevance, clarity, security, and overall utility. The moderators follow a structured evaluation protocol: Initial Assessment : Moderators perform an initial check to ensure that the prompt submission is complete and adheres to the submission format. Content Review : The content of the prompt is closely examined for its relevance to QA activities, clarity of instructions, adherence to accepted frameworks, and the security of information. Practical Evaluation : Moderators assess the prompt\u2019s practical application, reviewing variables, system messages for clarity, and the feasibility of expected outcomes. Compliance Check : There's a final compliance check against our community guidelines and security policies to ensure no sensitive information is shared. Possible Outcomes of the Review After the review process, a prompt can be categorized into one of the following statuses: Approved : If the prompt meets all specified criteria, it is accepted and added to the Public project under the Prompts section, making it accessible to the community. Rejected : If the prompt does not meet the necessary standards, it is not approved for publication. Constructive feedback is provided to the creator, enabling them to make the required adjustments and submit a revised version for future consideration. Statuses of Prompts Prompts undergo several statuses through the review phase: All : An overview of all submissions regardless of their review stage. Draft : Saved yet unsubmitted prompts. Published : Moderation-approved prompts, now accessible in the Public project. On Moderation : Prompts currently under review. Approval : This status indicates that the prompt is awaiting the author's approval before a new version can be published. Note : This feature is currently under development and is not available at the moment. Rejected : Prompts evaluated and declined for publication. To check the status of your submitted prompts, navigate to \" Prompts \" page on the platform, and select the status you wish to view from the dropdown menu. Engagement with Prompts: Liking and Trending Once a prompt is published, it becomes an essential resource for the QA community. You are encouraged to engage with these prompts through our \" Like \" functionality. Prompts that receive a significant number of likes can appear in the \" Trending \" page of the Prompt Library, highlighting their popularity and usefulness. The \" Trending \" page serves as a quick reference for discovering highly valued prompts within the community. To like a prompt, simply click on the heart icon associated with the prompt in the Prompt Library. Your engagement helps in identifying the most impactful prompts, enriching our QA processes and driving a culture of continuous improvement and collaboration. By understanding and participating in the review process, you are contributing to a shared knowledge base that benefits the entire QA community. Your efforts and interactions, including submitting, refining, and liking prompts, play a crucial role in enhancing our collective testing efficacy. Collections Following the creation and publishing of individual prompts, the next step is the organization and further dissemination of these prompts through Collections. Collections serve as a means to group prompts by theme, project, testing phase, or any other meaningful categorization that enhances accessibility and usefulness for the QA community. This section will guide you through creating collections, adding prompts to them, publishing these collections, and how your peers can interact with them through likes. The Purpose and Usefulness of Collections Collections are immensely valuable for several reasons: Thematic Organization : They allow for the grouping of prompts by specific themes or projects, making it easy for users to find a set of related prompts. Efficiency : By organizing prompts into collections, we save time for our QA engineers by providing consolidated resources that can be easily accessed and applied. Sharing Best Practices : Collections can be shared across teams, promoting best practices and unified testing approaches across different projects. Creating Collection Click the + Collection button located at the top right corner. You will be prompted to fill in the Name and Description fields. Remember, these fields are essential as they give the first impression and understanding of what your collection is about. Adding Prompts to Your Collection To add prompts to your collection, follow these steps: Once you've created a collection, you can start adding relevant prompts. Navigate to the prompt you wish to add and select an option to Add to Collection. Select the Collection you wish to add your prompt to from the pop-up window. You can add multiple prompts to a collection as long as they share the thematic relevance or purpose you've defined for your collection. Publishing Your Collection Publishing your collection makes it available to the entire QA network, allowing others to benefit from the curated set of prompts you've organized: After adding the desired prompts to your collection, open the collection and review the content to ensure completeness and relevance. Click the Publish icon to submit your collection for review. This process is similar to publishing individual prompts, where your collection will be reviewed for adherence to our guidelines and overall quality. Once approved, your collection will be published and accessible from the Collection menu, ready to be used by the community. Note : A Collection must contain public prompts before publication. Engagement with Collections: Liking and Trending Just as with individual prompts, users are encouraged to engage with collections through likes. This interaction is crucial for several reasons: Recognition : Liking a collection serves as a form of recognition and appreciation for the contributor's effort in curating valuable resources. Visibility : Collections with a high number of likes gain visibility and are more likely to appear in the \"Trending\" page, ensuring that the most useful collections are easily accessible to the community. Feedback Mechanism : Likes serve as a feedback mechanism, helping contributors understand the impact and usefulness of their collections, guiding future efforts in prompt and collection creation. By actively creating, contributing to, and engaging with collections, QA engineers enhance the shared knowledge base and support the continuous improvement of testing practices within the community. Collections not only facilitate access to valuable testing resources but also foster a collaborative environment where knowledge and best practices are freely exchanged. Contribution Why Share Your Prompts? Sharing your prompts not only contributes to the collective knowledge of our QA community but also highlights your expertise and creativity. By contributing, you\u2019re directly impacting the efficiency and efficacy of our testing processes, encouraging a culture of innovation and continuous improvement. Rewards and Recognition To acknowledge the value of your contributions, we have an Appreciation Program in place. Leading contributors will be recognized by the Management Team. Your innovation could lead the way in defining our testing standards - an opportunity to shine and be recognized among your peers. By following these enhanced guidelines and utilizing the provided resources, you're well on your way to creating impactful prompts that can significantly improve our QA practices. Let's work together to build a richer, more effective Prompt Library for everyone in our network. Useful Resources ELITEA ELITEA - User Guide ELITEA - Release Notes Prompt Engineering Prompt Engineering Foundations EngX AI-Supported Quality Assurance Engineering Guide to Effective Prompting Introduction to Prompt Engineering","title":"How to Create and Publish Useful Prompts for Testing and QA Activities"},{"location":"how-tos/creating-prompts/#how-to-create-and-publish-useful-prompts-for-testing-and-qa-activities","text":"","title":"How to Create and Publish Useful Prompts for Testing and QA Activities"},{"location":"how-tos/creating-prompts/#introduction","text":"Welcome to our comprehensive guide designed to empower our Testing and Quality Assurance (QA) community in the crafting and sharing of valuable prompts, specifically tailored for an array of testing activities. In today's rapidly evolving software development landscape, the adoption of Generative AI Tools has become increasingly instrumental in augmenting our testing efforts. These cutting-edge tools offer unparalleled capabilities in automating and innovating processes ranging from generating test cases and creating detailed test plans to formulating comprehensive test strategies and writing automation scripts. Additionally, they play a critical role in generating realistic and diverse test data, facilitating a more thorough and effective testing process. The intention behind this activity is twofold: to streamline the process of prompt generation that leverages Gen AI Tools, ensuring that these prompts become potent tools in identifying and resolving defects, bolstering product quality, and refining our testing strategies. Moreover, it seeks to evolve our QA community to actively contribute to and share their expertise through valuable prompts. By participating in enriching our Prompt Library, you not only aid in creating a substantial repository of resources but also contribute to a culture of knowledge sharing and collective growth within our community. We encourage you to share prompts across various domains, including but not limited to, generating test cases, creating comprehensive test plans and strategies, developing automation scripts, and generating test data. This endeavor will not only help elevate the efficiency and effectiveness of our testing processes but also foster innovation and creativity within our QA practices. In leveraging Gen AI tools, it is imperative to always review the generated outputs meticulously to ensure they not only meet our stringent quality standards but also strictly adhere to Epam\u2019s security guidelines and policies. Our collective commitment to maintaining the highest level of security and protecting sensitive information is paramount and non-negotiable. Your contribution to this initiative will play a pivotal role in enhancing our testing capabilities, driving quality improvements, and maintaining our competitive edge in delivering superior software solutions. Let us embark on this journey together, fostering a vibrant and collaborative QA community that thrives on innovation, excellence, and shared success.","title":"Introduction"},{"location":"how-tos/creating-prompts/#accessing-elitea-hub","text":"To access and navigate through ELITEA HUB, follow these steps: Open Your Browser : Launch your preferred web browser. Enter URL : Type https://alita.lab.epam.com into the address bar and press Enter. Login : Use your EPAM account credentials to log in. Note : Registration is not required. Initial Navigation : Upon successful login, you will be directed to the Chat menu. Note : If this is your first time logging into ELITEA, please allow up to 5 minutes for the private project initialization to complete before you start creating prompts. Switch Projects : After the Private project is initialized, you can switch from the Public project to your Private project using the Project dropdown list, located at the top right next to your avatar. Explore ELITEA : Click on the ELITEA icon on the top left side to navigate among the available menus. Here, you can create and manage prompts, datasources, agents, and collections. By following these steps, you will be able to effectively utilize the features and functionalities offered by ELITEA HUB. Note : You need to enable Epam VPN to access ELITEA.","title":"Accessing ELITEA HUB"},{"location":"how-tos/creating-prompts/#prompts","text":"Prompts are essentially instructions or scenarios designed to generate outcomes to assist QA activities. The effectiveness of the prompts directly correlates with the efficiency and accuracy of our testing efforts. To ensure that every prompt we create serves its purpose effectively, it\u2019s crucial to adhere to several foundational principles. These guidelines not only help in crafting prompts that are valuable and practical but also ensure that they align with our overarching goals of security, versatility, and clarity in our QA processes. With this context in mind, let\u2019s delve into the core principles that should guide the creation of effective prompts: Creating Effective Prompts Relevance : Directly tie your prompt to testing and QA activities to ensure relevance. Clarity : Utilize clear, concise language for better comprehension. Specificity : Clearly mention the testing phase, type, and specific focus area of the prompt. Scalability : Aim for prompts that can be broadly applied across various projects. Security : Avoid including any customer data or sensitive information.","title":"Prompts"},{"location":"how-tos/creating-prompts/#how-to-create-a-prompt","text":"Creating a prompt involves capturing essential details that guide the testing process effectively. Here is how you can create a prompt that adds value: Initiate Prompt Creation : Click the + Prompt button located at the top right of your screen to start crafting your prompt. Provide Prompt Details : Name : Assign a descriptive name that clearly reflects the aim of the prompt. Description : Summarize the purpose of the prompt, detailing what it intends to achieve. Note : The Name and Description fields are crucial for others to understand the prompt\u2019s purpose and are not editable after saving. Tag(s) : A descriptive Tag(s) for grouping the prompts. Context : Well crafted prompt corresponding to well-acceppted Frameworks for creating prompts (e.g. CREATE, CRISPE, Elavis Saravia, etc.). In case the prompt's context contains Variables - then a descriptive variable name. In case the prompt has System or Assistant messages - then those messages must be informative. Select the Model : Choose the appropriate model (e.g., gpt-3.5-turbo, gpt-4-0125-preview, etc.) for which the prompt has been tailored and tested. Configure Advanced Settings : Tune the output of your prompt by adjusting configurations such as Temperature, Top P, Top K, and Maximum length, ensuring the prompt's output aligns with expectations. Test Your Prompt : Execute the prompt and review the results to confirm everything functions as intended. Finalize : Click Save to keep your draft or proceed to the next step to share your work with the community. Providing Name, Description and Context of the prompt: Setup Variables: Configuring Advanced Settings:","title":"How to Create a Prompt"},{"location":"how-tos/creating-prompts/#prompt-requirements-for-consistency-and-quality","text":"When crafting your prompt, ensure it includes the following elements for clarity and effectiveness: Descriptive Name : Clearly indicates the focus of the prompt. Conciseness : Aim for a name that is brief yet descriptive, ideally under 30 characters. Relevance : Ensure the name directly reflects the content or purpose of the prompt. Brief Description : Eloquently explains the prompt\u2019s goal. Specificity : Include specific details about what the prompt is intended to achieve. Brevity : Keep the description concise, aiming for one to two sentences. Descriptive Tags : Facilitates prompt categorization and searchability. Relevance : Choose tags that are directly related to the prompt\u2019s content and purpose. Diversity : Use a mix of broad and specific tags to enhance discoverability. Framework Adherence : Ensures the prompt aligns with accepted Prompt creation frameworks (e.g., CREATE, CRISPE, Elavis Saravia, etc.). Consistency : Stick to one framework per prompt to maintain clarity and structure. Documentation : Reference the framework used in the prompt description for clarity. Variable Clarity : In scenarios with variables, use descriptive names. Descriptiveness : Use names that clearly indicate what the variable represents. Standardization : Follow a consistent naming convention for variables across prompts. Informative System Messages : If your prompt uses system or assistant messages, they must be clear and helpful. Clarity : Ensure messages are straightforward and free of jargon. Guidance : Messages should guide the user on how to interact with the prompt effectively. Expected Outcomes : Define what successful application of the prompt looks like. Measurable Criteria : Specify clear, measurable criteria for what constitutes a successful outcome. Examples : Provide examples of successful outcomes to illustrate expectations.","title":"Prompt Requirements for Consistency and Quality"},{"location":"how-tos/creating-prompts/#submitting-your-prompt-for-publishing","text":"To make your prompt available to the wider QA community, follow the steps below for publication: Publishing Initiation : With your prompt crafted and saved, click the Publish button to start the submission process. Version Naming : Provide an informative version name (e.g., Gen-1.0) in the pop-up window. This name should reflect the content or purpose of the prompt, aiding in version control and future modifications. Length : Keep the version name concise, not exceeding 48 characters. This ensures readability and compatibility across various systems. Characters : Avoid using special characters such as spaces (\" \"), underscores (\"_\"), and others that might cause parsing or recognition issues in certain environments. Clarity : Choose names that clearly and succinctly describe the version's purpose or the changes it introduces, facilitating easier tracking and management of different versions. Review Submission : Click Publish to submit your prompt for the moderation review process. This step is crucial to ensure the quality and relevance of prompts available to the QA community. Publishing the prompt:","title":"Submitting Your Prompt for Publishing"},{"location":"how-tos/creating-prompts/#review-process-by-moderators-and-outcome-of-prompt-submission","text":"","title":"Review Process by Moderators and Outcome of Prompt Submission"},{"location":"how-tos/creating-prompts/#moderator-review-process","text":"After a prompt is submitted for publication, it enters a critical assessment phase led by our designated moderators. Our moderators are QA professionals with a broad understanding of what constitutes a high-quality, effective prompt. The review process aims to ensure that each prompt meets our standards for relevance, clarity, security, and overall utility. The moderators follow a structured evaluation protocol: Initial Assessment : Moderators perform an initial check to ensure that the prompt submission is complete and adheres to the submission format. Content Review : The content of the prompt is closely examined for its relevance to QA activities, clarity of instructions, adherence to accepted frameworks, and the security of information. Practical Evaluation : Moderators assess the prompt\u2019s practical application, reviewing variables, system messages for clarity, and the feasibility of expected outcomes. Compliance Check : There's a final compliance check against our community guidelines and security policies to ensure no sensitive information is shared.","title":"Moderator Review Process"},{"location":"how-tos/creating-prompts/#possible-outcomes-of-the-review","text":"After the review process, a prompt can be categorized into one of the following statuses: Approved : If the prompt meets all specified criteria, it is accepted and added to the Public project under the Prompts section, making it accessible to the community. Rejected : If the prompt does not meet the necessary standards, it is not approved for publication. Constructive feedback is provided to the creator, enabling them to make the required adjustments and submit a revised version for future consideration. Statuses of Prompts Prompts undergo several statuses through the review phase: All : An overview of all submissions regardless of their review stage. Draft : Saved yet unsubmitted prompts. Published : Moderation-approved prompts, now accessible in the Public project. On Moderation : Prompts currently under review. Approval : This status indicates that the prompt is awaiting the author's approval before a new version can be published. Note : This feature is currently under development and is not available at the moment. Rejected : Prompts evaluated and declined for publication. To check the status of your submitted prompts, navigate to \" Prompts \" page on the platform, and select the status you wish to view from the dropdown menu.","title":"Possible Outcomes of the Review"},{"location":"how-tos/creating-prompts/#engagement-with-prompts-liking-and-trending","text":"Once a prompt is published, it becomes an essential resource for the QA community. You are encouraged to engage with these prompts through our \" Like \" functionality. Prompts that receive a significant number of likes can appear in the \" Trending \" page of the Prompt Library, highlighting their popularity and usefulness. The \" Trending \" page serves as a quick reference for discovering highly valued prompts within the community. To like a prompt, simply click on the heart icon associated with the prompt in the Prompt Library. Your engagement helps in identifying the most impactful prompts, enriching our QA processes and driving a culture of continuous improvement and collaboration. By understanding and participating in the review process, you are contributing to a shared knowledge base that benefits the entire QA community. Your efforts and interactions, including submitting, refining, and liking prompts, play a crucial role in enhancing our collective testing efficacy.","title":"Engagement with Prompts: Liking and Trending"},{"location":"how-tos/creating-prompts/#collections","text":"Following the creation and publishing of individual prompts, the next step is the organization and further dissemination of these prompts through Collections. Collections serve as a means to group prompts by theme, project, testing phase, or any other meaningful categorization that enhances accessibility and usefulness for the QA community. This section will guide you through creating collections, adding prompts to them, publishing these collections, and how your peers can interact with them through likes. The Purpose and Usefulness of Collections Collections are immensely valuable for several reasons: Thematic Organization : They allow for the grouping of prompts by specific themes or projects, making it easy for users to find a set of related prompts. Efficiency : By organizing prompts into collections, we save time for our QA engineers by providing consolidated resources that can be easily accessed and applied. Sharing Best Practices : Collections can be shared across teams, promoting best practices and unified testing approaches across different projects.","title":"Collections"},{"location":"how-tos/creating-prompts/#creating-collection","text":"Click the + Collection button located at the top right corner. You will be prompted to fill in the Name and Description fields. Remember, these fields are essential as they give the first impression and understanding of what your collection is about.","title":"Creating Collection"},{"location":"how-tos/creating-prompts/#adding-prompts-to-your-collection","text":"To add prompts to your collection, follow these steps: Once you've created a collection, you can start adding relevant prompts. Navigate to the prompt you wish to add and select an option to Add to Collection. Select the Collection you wish to add your prompt to from the pop-up window. You can add multiple prompts to a collection as long as they share the thematic relevance or purpose you've defined for your collection.","title":"Adding Prompts to Your Collection"},{"location":"how-tos/creating-prompts/#publishing-your-collection","text":"Publishing your collection makes it available to the entire QA network, allowing others to benefit from the curated set of prompts you've organized: After adding the desired prompts to your collection, open the collection and review the content to ensure completeness and relevance. Click the Publish icon to submit your collection for review. This process is similar to publishing individual prompts, where your collection will be reviewed for adherence to our guidelines and overall quality. Once approved, your collection will be published and accessible from the Collection menu, ready to be used by the community. Note : A Collection must contain public prompts before publication.","title":"Publishing Your Collection"},{"location":"how-tos/creating-prompts/#engagement-with-collections-liking-and-trending","text":"Just as with individual prompts, users are encouraged to engage with collections through likes. This interaction is crucial for several reasons: Recognition : Liking a collection serves as a form of recognition and appreciation for the contributor's effort in curating valuable resources. Visibility : Collections with a high number of likes gain visibility and are more likely to appear in the \"Trending\" page, ensuring that the most useful collections are easily accessible to the community. Feedback Mechanism : Likes serve as a feedback mechanism, helping contributors understand the impact and usefulness of their collections, guiding future efforts in prompt and collection creation. By actively creating, contributing to, and engaging with collections, QA engineers enhance the shared knowledge base and support the continuous improvement of testing practices within the community. Collections not only facilitate access to valuable testing resources but also foster a collaborative environment where knowledge and best practices are freely exchanged.","title":"Engagement with Collections: Liking and Trending"},{"location":"how-tos/creating-prompts/#contribution","text":"","title":"Contribution"},{"location":"how-tos/creating-prompts/#why-share-your-prompts","text":"Sharing your prompts not only contributes to the collective knowledge of our QA community but also highlights your expertise and creativity. By contributing, you\u2019re directly impacting the efficiency and efficacy of our testing processes, encouraging a culture of innovation and continuous improvement.","title":"Why Share Your Prompts?"},{"location":"how-tos/creating-prompts/#rewards-and-recognition","text":"To acknowledge the value of your contributions, we have an Appreciation Program in place. Leading contributors will be recognized by the Management Team. Your innovation could lead the way in defining our testing standards - an opportunity to shine and be recognized among your peers. By following these enhanced guidelines and utilizing the provided resources, you're well on your way to creating impactful prompts that can significantly improve our QA practices. Let's work together to build a richer, more effective Prompt Library for everyone in our network.","title":"Rewards and Recognition"},{"location":"how-tos/creating-prompts/#useful-resources","text":"","title":"Useful Resources"},{"location":"how-tos/creating-prompts/#elitea","text":"ELITEA - User Guide ELITEA - Release Notes","title":"ELITEA"},{"location":"how-tos/creating-prompts/#prompt-engineering","text":"Prompt Engineering Foundations EngX AI-Supported Quality Assurance Engineering Guide to Effective Prompting Introduction to Prompt Engineering","title":"Prompt Engineering"},{"location":"how-tos/faqs/","text":"Frequently Asked Questions Hello there! \ud83d\udc4b We're thrilled you're here. Whether you're an experienced user or just starting your journey with ELITEA, questions might pop up, and that's perfectly okay! Our Frequently Asked Questions section is a treasure trove of information designed to help you navigate and make the most out of ELITEA. What You'll Find Here In this dedicated space, we aim to address a wide array of inquiries, covering everything from basic operations to more advanced functionalities . Our FAQs are carefully curated to ensure clarity, relevance, and usefulness. Here's a sneak peek of what to expect: Getting Started : Step-by-step guides and tips for new users. Features & Functions : Deep dives into what ELITEA can do and how to use its features to your advantage. Troubleshooting : Solutions and workarounds for common issues. Best Practices : Advice on how to efficiently use ELITEA for optimal results. How to Use This Section Browse or Search : Feel free to scroll through the questions or use the search function to find specific topics. Interactive Examples : Where applicable, we've included interactive examples to illustrate solutions. Feedback Loop : Got a question not covered here? Let us know! Your inquiries help us improve and expand our FAQ section. Why an FAQ Section? We believe in empowering our users with knowledge. An informed user can better leverage ELITEA's capabilities, leading to a more satisfying experience. Plus, this self-service resource aims to provide immediate answers, saving you time and getting you back on track quickly. Let's Dive In! Ready to explore? Great! Your next step towards mastering ELITEA begins here. Navigate through the questions, uncover new insights, and elevate your ELITEA experience. Remember, we're here to support your journey, every step of the way. Happy Exploring! \ud83c\udf1f FAQs How Can I Integrate Confluence as a Source Type in ELITEA? Answer Integrating Confluence with ELITEA allows you to seamlessly connect and utilize your Confluence data within ELITEA. To set up this connection accurately, please follow the comprehensive steps outlined below: Dataset Name : Assign a descriptive name to your dataset for easy identification. Source Selection : In the 'Source Type' dropdown, choose 'Confluence' to set it as your data source. Confluence URL : Enter the URL of your Confluence space's homepage. This acts as the entry point for ELITEA to access your Confluence content. Authentication : Supply the API Key or Token required for authenticating your access to the Confluence data. This ensures secure connection and data transfer. Username : Input your Confluence username. This is necessary for authentication purposes and to ensure proper permissions are applied. Hosting Option : Specify your hosting preference Server or Cloud . This information helps ELITEA connect to the correct Confluence environment. Data Filtering : Choose how you wish to filter the data. You can select by Space Key , Page IDs , or Labels . This step is crucial for refining the data ELITEA accesses, ensuring only relevant content is included in your dataset. Save : After configuring all settings, click Save to finalize the dataset creation. For more information : please check Datasources - Confluence setup . Example Let's walk through a practical scenario to better understand how to implement these steps: Dataset Name : Functional Testing Armenia - Documentation Source Type : Confluence URL : https://kb.epam.com Token : [your token] Username : [your username] Hosting Option : Server Filtering Option : Labels Labels : ft_armenia This example demonstrates a hypothetical setup for illustrative purposes only. Ensure you replace the placeholder information with your actual data during configuration.","title":"FAQs"},{"location":"how-tos/faqs/#frequently-asked-questions","text":"Hello there! \ud83d\udc4b We're thrilled you're here. Whether you're an experienced user or just starting your journey with ELITEA, questions might pop up, and that's perfectly okay! Our Frequently Asked Questions section is a treasure trove of information designed to help you navigate and make the most out of ELITEA.","title":"Frequently Asked Questions"},{"location":"how-tos/faqs/#what-youll-find-here","text":"In this dedicated space, we aim to address a wide array of inquiries, covering everything from basic operations to more advanced functionalities . Our FAQs are carefully curated to ensure clarity, relevance, and usefulness. Here's a sneak peek of what to expect: Getting Started : Step-by-step guides and tips for new users. Features & Functions : Deep dives into what ELITEA can do and how to use its features to your advantage. Troubleshooting : Solutions and workarounds for common issues. Best Practices : Advice on how to efficiently use ELITEA for optimal results.","title":"What You'll Find Here"},{"location":"how-tos/faqs/#how-to-use-this-section","text":"Browse or Search : Feel free to scroll through the questions or use the search function to find specific topics. Interactive Examples : Where applicable, we've included interactive examples to illustrate solutions. Feedback Loop : Got a question not covered here? Let us know! Your inquiries help us improve and expand our FAQ section.","title":"How to Use This Section"},{"location":"how-tos/faqs/#why-an-faq-section","text":"We believe in empowering our users with knowledge. An informed user can better leverage ELITEA's capabilities, leading to a more satisfying experience. Plus, this self-service resource aims to provide immediate answers, saving you time and getting you back on track quickly.","title":"Why an FAQ Section?"},{"location":"how-tos/faqs/#lets-dive-in","text":"Ready to explore? Great! Your next step towards mastering ELITEA begins here. Navigate through the questions, uncover new insights, and elevate your ELITEA experience. Remember, we're here to support your journey, every step of the way. Happy Exploring! \ud83c\udf1f","title":"Let's Dive In!"},{"location":"how-tos/faqs/#faqs","text":"","title":"FAQs"},{"location":"how-tos/faqs/#how-can-i-integrate-confluence-as-a-source-type-in-elitea","text":"","title":"How Can I Integrate Confluence as a Source Type in ELITEA?"},{"location":"how-tos/faqs/#answer","text":"Integrating Confluence with ELITEA allows you to seamlessly connect and utilize your Confluence data within ELITEA. To set up this connection accurately, please follow the comprehensive steps outlined below: Dataset Name : Assign a descriptive name to your dataset for easy identification. Source Selection : In the 'Source Type' dropdown, choose 'Confluence' to set it as your data source. Confluence URL : Enter the URL of your Confluence space's homepage. This acts as the entry point for ELITEA to access your Confluence content. Authentication : Supply the API Key or Token required for authenticating your access to the Confluence data. This ensures secure connection and data transfer. Username : Input your Confluence username. This is necessary for authentication purposes and to ensure proper permissions are applied. Hosting Option : Specify your hosting preference Server or Cloud . This information helps ELITEA connect to the correct Confluence environment. Data Filtering : Choose how you wish to filter the data. You can select by Space Key , Page IDs , or Labels . This step is crucial for refining the data ELITEA accesses, ensuring only relevant content is included in your dataset. Save : After configuring all settings, click Save to finalize the dataset creation. For more information : please check Datasources - Confluence setup .","title":"Answer"},{"location":"how-tos/faqs/#example","text":"Let's walk through a practical scenario to better understand how to implement these steps: Dataset Name : Functional Testing Armenia - Documentation Source Type : Confluence URL : https://kb.epam.com Token : [your token] Username : [your username] Hosting Option : Server Filtering Option : Labels Labels : ft_armenia This example demonstrates a hypothetical setup for illustrative purposes only. Ensure you replace the placeholder information with your actual data during configuration.","title":"Example"},{"location":"how-tos/agents-toolkits/ado_repos_toolkit/","text":"ELITEA Toolkit Guide: Azure Repos (ADO Repos) Integration Introduction Purpose of this Guide This guide is your definitive resource for integrating and effectively utilizing the Azure Repos (ADO Repos) toolkit within ELITEA. It provides a detailed, step-by-step walkthrough, from setting up your Azure DevOps Personal Access Token to configuring the toolkit in ELITEA and seamlessly incorporating it into your Agents. By following this guide, you will unlock the power of automated code management, streamlined Azure DevOps workflows, and enhanced team collaboration, all directly within the ELITEA platform. This integration empowers you to leverage AI-driven automation to optimize your software development lifecycle within the Azure DevOps ecosystem, harnessing the combined strengths of ELITEA and Azure Repos. Brief Overview of Azure Repos (ADO Repos) Azure Repos, a core service within Azure DevOps, is a robust and scalable cloud-hosted platform for version control and collaborative code management. It provides development teams with the essential tools to manage their codebase efficiently and collaborate effectively throughout the software development lifecycle. Azure Repos offers a comprehensive set of features, including: Versatile Version Control: Supports both Git, the industry-standard distributed version control system, and Team Foundation Version Control (TFVC), a centralized version control system, providing flexibility to accommodate diverse team preferences and project requirements. Enhanced Collaborative Development: Facilitates seamless team-based software development with powerful collaboration features such as Pull Requests for code review, Branch Policies to enforce code quality and workflow standards, and Code Search for efficient code discovery and navigation. Seamless Azure DevOps Integration: Integrates seamlessly with the broader Azure DevOps ecosystem, including Azure Pipelines for Continuous Integration and Continuous Delivery (CI/CD), Azure Boards for agile work item tracking and project management, and Azure Test Plans for comprehensive testing, creating a unified DevOps platform. Scalability and Reliability: Built on the Azure cloud infrastructure, Azure Repos provides a highly scalable and reliable platform for managing code repositories of any size, from small projects to large enterprise-scale applications, ensuring code availability and data integrity. Advanced Security and Compliance: Offers robust security features, including granular access control, branch permissions, and audit logging, along with compliance certifications, ensuring the security and compliance of your codebase and development processes. Integrating Azure Repos with ELITEA brings these powerful version control and DevOps capabilities directly into your AI-driven workflows. Your ELITEA Agents can then intelligently interact with your Azure Repos repositories to automate code-related tasks, enhance Azure DevOps pipelines, improve team collaboration, and leverage AI to optimize your entire software development lifecycle within the Azure ecosystem. Toolkit's Account Setup and Configuration in Azure Repos Account Setup If you do not yet have an Azure DevOps account and organization, please follow these steps to create one: Visit Azure DevOps Website: Open your web browser and navigate to the Azure DevOps website: https://azure.devops.com/ . Start Free or Sign In: Click on the \"Start free\" button to create a new Azure DevOps organization, or click \"Sign in to Azure DevOps\" if you already have an organization and wish to sign in. Create an Organization (If Needed): If you are creating a new organization, click \"Create an Organization\" and follow the prompts to set up your new Azure DevOps organization. You will typically need to provide an organization name, choose a hosting region, and link it to an Azure account (if you have one). If you are signing into an existing organization, click \"Sign in to Azure DevOps\" and log in using your Microsoft account credentials. Enter Account Details: Provide the required details as prompted during the organization creation or sign-in process. This may include your email address, organization name, and region for hosting your Azure DevOps organization. Email Verification (If Prompted): Verify your email address if prompted by the Azure DevOps signup process. This usually involves clicking a confirmation link sent to your email inbox. Log In to Azure DevOps: Log in to the Azure DevOps dashboard using your newly created or existing Microsoft account credentials. Enable Basic Subscription (If Needed): Ensure that you have a Basic Azure DevOps subscription enabled for your account to access Azure Repos and related Azure DevOps services. For new organizations, the Basic subscription is typically enabled by default. For existing organizations, you may need to verify or enable it in the organization settings. Add Users and Assign Basic Subscription (If Needed): To grant access to other users within your organization, navigate to your organization settings: Go to https://dev.azure.com/{YourOrganizationName}/_settings/users (replace {YourOrganizationName} with your actual Azure DevOps organization name). Click \"Add users\" . Enter the user's email address or Microsoft account. Select \"Basic\" from the \"Access level\" dropdown to assign a Basic subscription to the user. Choose the relevant project(s) to grant the user access to. Click \"Add\" to add the user to your Azure DevOps organization. Add User to Project Member Group (If Needed): To ensure newly added users have the necessary permissions within a specific project: Navigate to \"Project settings\" for your desired project (located at the bottom left of the Azure DevOps interface). Select \"Groups\" under \"Security\" in the Project settings menu. Locate the \"Project Valid Users\" group (or a relevant group for your project's members) and click on the group name. Click on the \"Members\" tab within the group details. Click \"Add users or groups\" . Enter the email address or name of the user you want to add to the project member group and click \"Add\" . Verify Repo Access: After completing user setup, refresh the Azure DevOps page and ensure that the \"Repos\" feature is enabled and visible for your account within your Azure DevOps project. This confirms that you have successfully set up your Azure DevOps account and have access to Azure Repos. Note: If the \"Repos\" feature is not available, you may need to create a new project within your Azure DevOps organization or verify that Azure Repos is enabled for your organization and project. Token/API Key Generation: Creating a Personal Access Token in Azure DevOps For secure integration with ELITEA, it is essential to use an Azure DevOps Personal Access Token (PAT) . This method is significantly more secure than using your primary Azure DevOps account password directly and allows you to precisely control the permissions granted to ELITEA. Follow these steps to generate a Personal Access Token (PAT) in Azure DevOps: Log in to Azure DevOps: Access your Azure DevOps organization by navigating to https://dev.azure.com/ and logging in with your credentials. Access User Settings: Click on the User settings icon, typically located in the top right corner of the Azure DevOps interface, next to your profile picture. From the dropdown menu, select \"Personal access tokens\" . Generate New Token: On the \"Personal Access Tokens\" page, click the \"+ New Token\" button to create a new PAT. Configure Token Details: In the \"Create a new personal access token\" panel, configure the following settings: Name: In the \"Name\" field, enter a descriptive label for your token. For example, use \"ELITEA Integration Token\" or \"ELITEA Agent Access.\" This label will help you easily identify the purpose of this token in the future. Organization (Optional): Select the Azure DevOps organization for which this token will be valid. In most cases, you will select \"All accessible organizations\" to allow the token to access resources across your organizations. Expiration (Recommended): For enhanced security, it is highly recommended to set an Expiration date for your token. Choose a reasonable validity period that aligns with your security policies. Shorter expiration periods are generally more secure. Scopes - Grant Least Privilege (Crucial for Security): Carefully and deliberately select the scopes or permissions you grant to this token. It is paramount to grant only the absolute minimum necessary permissions required for your ELITEA Agent's intended interactions with Azure Repos. Overly permissive tokens pose a significant security risk. For typical ELITEA integration with Azure Repos, consider these minimal scopes: Minimal Scopes for Common Use Cases: Custom Defined: Select \"Custom defined\" to manually choose granular scopes. Code: Expand the \"Code\" section and select: Read & write: (Grants read and write access to code repositories. If possible, for enhanced security, consider using more granular code scopes instead of full \"Read & write\" if your agent only needs read access.) Read: (If your agent only needs to read repository content and not modify it, select \"Read\" instead of \"Read & write\" for even tighter security.) Work items: Expand the \"Work items\" section and select: Read: (If your agent needs to read work item details, select \"Read\") Write: (If your agent needs to create or update work items, select \"Write\". Only include this if your Agent needs to manage work items.) Additional Scopes for Specific Functionality (Grant only when needed): Build: (If your Agent needs to interact with Azure Pipelines builds) Release: (If your Agent needs to interact with Azure Pipelines releases) Test Management: (If your Agent needs to interact with Azure Test Plans) Important Security Best Practices: Principle of Least Privilege: Strictly adhere to the principle of least privilege. Grant only the absolute minimum set of scopes necessary for your ELITEA Agent to perform its specific, intended tasks. Avoid granting broad or unnecessary permissions. Avoid Full Access Scopes: Avoid granting full access scopes like \"Full access\" unless absolutely necessary and with a clear and thorough understanding of the significant security implications. Full access scopes provide extensive administrative privileges and should be avoided for integration purposes whenever possible. Regular Token Review and Rotation: Implement a process for regularly reviewing the Personal Access Tokens you have generated, their associated scopes, and their usage. Rotate tokens periodically (generate new tokens and revoke older ones) as a proactive security measure, especially for integrations that handle sensitive data or critical operations. Secure Storage: Store the generated Personal Access Token securely, preferably using ELITEA's built-in Secrets Management feature, rather than hardcoding it directly in Agent configurations or less secure storage locations. Create Token: Click the \"Create\" button at the bottom of the panel to generate your Personal Access Token. Securely Copy and Store the Token: Immediately copy the generated token that is displayed in the \"Success!\" pop-up window. This is the only time you will be able to view and copy the full token value. Store it securely using a robust password manager or, ideally, ELITEA's built-in Secrets feature for enhanced security within the ELITEA platform. You will require this token to configure the Azure Repos toolkit within ELITEA. System Integration with ELITEA Agent Creation/Configuration To integrate Azure Repos functionalities into your workflows, you will need to configure the Azure Repos toolkit within an ELITEA Agent. You can either create a new Agent specifically for Azure Repos interactions or modify an existing Agent to incorporate Azure Repos tools. Navigate to Agents Menu: In ELITEA, access the Agents menu from the main navigation panel. Create or Edit Agent: Create a New Agent: Click on the \"+ Agent\" button to initiate the creation of a new Agent. Follow the on-screen prompts to define essential Agent attributes such as Agent name, a descriptive Agent description, the desired Agent type, and initial instructions for the Agent. Edit an Existing Agent: Select the Agent you intend to integrate with Azure Repos from your list of Agents. Click on the Agent's name to open its configuration settings for editing. Access Tools Section: Within the Agent configuration interface, scroll down until you locate the \"Tools\" section. This section is where you will add and configure toolkits, including the Azure Repos toolkit. Toolkit Configuration This section provides detailed instructions on how to configure the Azure Repos toolkit within your ELITEA Agent. Add Toolkit: In the \"Tools\" section of the Agent configuration, click on the \"+\" icon . This action will display a dropdown list of available toolkits that can be integrated with your Agent. Select Azure Repos (ADO Repos) Toolkit: From the dropdown list of available toolkits, choose \"Azure Repos (ADO Repos)\" . Selecting \"Azure Repos (ADO Repos)\" will open the \"New Azure Repos (ADO Repo) tool\" configuration panel, where you will specify the settings for your Azure Repos integration. Configure Azure Repos (ADO Repos) Toolkit Settings: Carefully fill in the following configuration fields within the \"New Azure Repos (ADO Repo) tool\" section: Name: Enter a descriptive Name for this specific Azure Repos toolkit instance. Choose a name that is easily recognizable and helps you identify its purpose within your Agent's instructions. For example, you might use names like \"ProjectAzureRepos\", \"CodeRepositoryAccess\", or \"ADOReposIntegration\". Description: Provide a concise Description for the toolkit. This description should clarify the toolkit's purpose or the specific Azure Repos repository or project it is intended to access. For example, you could describe it as \"Toolkit for accessing and managing the main project code repository on Azure Repos\" or \"Integration for Azure Repos project 'MyProject'\". URL: Enter the base URL of your Azure DevOps organization. It is crucial to use the correct format , including your organization name: https://dev.azure.com/{YourOrganizationName} (Replace {YourOrganizationName} with your actual Azure DevOps organization name). Personal Access Token: In the \"Personal Access Token\" field, paste the Personal Access Token that you generated in Azure DevOps during the \"Software-Specific Setup\" section of this guide. Enhanced Security with Secrets (Recommended): For enhanced security, it is strongly recommended to use ELITEA's Secrets Management feature to store your Azure DevOps Personal Access Token securely. Instead of directly pasting the token into the \"Personal Access Token\" field, select the \"Secret\" option and choose the pre-configured secret containing your Azure DevOps token from the dropdown list. This prevents hardcoding sensitive credentials in your toolkit configuration. Organization Name: Enter your Azure DevOps Organization Name . This is the name you used when creating your Azure DevOps organization (e.g., AlitaTest in https://dev.azure.com/AlitaTest/ ). Project Name: Enter the Project Name within your Azure DevOps organization that contains the repository you want to access (e.g., MyProject ). Repository ID: This field requires the Repository ID , which is a unique identifier for your Azure Repos repository. To obtain the Repository ID, you need to run a curl command as described below: Steps to Obtain Repository ID: Open a Terminal or Command Prompt: Open your command-line interface on your local machine. Execute the curl Command: Run the following curl command, replacing {PAT} , {organization} , and {project} with your actual values: bash curl -u {PAT}: https://dev.azure.com/{organization}/{project}/_apis/git/repositories?api-version=7.1-preview.1 {PAT} : Replace this with your Personal Access Token that you generated in Azure DevOps. {organization} : Replace this with your Azure DevOps Organization Name (e.g., AlitaTest ). {project} : Replace this with your Azure DevOps Project Name (e.g., MyProject ). Example Command: bash curl -u your_personal_access_token: https://dev.azure.com/AlitaTest/MyProject/_apis/git/repositories?api-version=7.1-preview.1 Extract Repository ID from Output: After executing the curl command, you will receive a JSON response in your terminal. Look for the Repository ID within the JSON output. It will be a GUID (Globally Unique Identifier) string, typically found within the \"value\" array, for example: \"id\": \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\" . Copy and Paste Repository ID: Copy the Repository ID value from the JSON output and paste it into the \"Repository ID\" field in the ELITEA toolkit configuration. Enable Desired Tools: In the \"Tools\" section within the Azure Repos toolkit configuration panel, select the checkboxes next to the specific Azure Repos tools that you want to enable for your Agent. It is crucial to enable only the tools that your Agent will actually need to use to adhere to the principle of least privilege and minimize potential security risks. Available tools include: List branches - Allows the Agent to list branches in the repository. Set active branch - Enables the Agent to set a specific branch as active for subsequent operations. Create Branch - Enables the Agent to create new branches in the repository. Get pull request - Enables the Agent to retrieve details of a specific pull request. List pull request files - Allows the Agent to list files changed in a pull request. Comment Pull Request - Allows the Agent to add comments to pull requests. Create Pull Request - Enables the Agent to create new pull requests. List files - Allows the Agent to list files within the repository. Read File - Allows the Agent to read the content of files within the repository. Create File - Enables the Agent to create new files within the repository. Update File - Allows the Agent to update the content of existing files within the repository. Delete File - Allows the Agent to delete files from the repository. Get Work Items - Allows the Agent to retrieve lists of work items (issues). Complete Setup: After configuring all the necessary settings and enabling the desired tools, click the arrow icon (located at the top right of the toolkit configuration section) to finalize the Azure Repos toolkit setup and return to the main Agent configuration menu. Click Save in the Agent configuration to save all changes and activate the Azure Repos toolkit integration for your Agent. Tool Overview: Azure Repos (ADO Repos) Toolkit Functionalities Once the Azure Repos toolkit is successfully configured and added to your Agent, you can utilize the following tools within your Agent's instructions to enable intelligent interaction with your Azure DevOps repositories: List Branches: Tool Name: list_branches Functionality: Retrieves a list of all branches available in the specified Azure Repos repository. Purpose: Enables Agents to fetch branch lists for branch management tasks, reporting, or to provide users with branch options within ELITEA workflows. Set Active Branch: Tool Name: set_active_branch Functionality: Sets a specific branch as the active branch in the specified Azure Repos repository for subsequent operations. Purpose: Allows Agents to switch the active branch for file operations or pull request creation within your ELITEA Agent workflows, ensuring actions are performed in the correct branch context. List Files: Tool Name: list_files Functionality: Retrieves a list of files in the active branch of the specified Azure Repos repository. Purpose: Allows Agents to browse repository contents, provide users with file lists for navigation, or analyze file structures within ELITEA workflows. Get Pull Request: Tool Name: get_pull_request Functionality: Retrieves detailed information about a specific pull request from an Azure Repos repository. Purpose: Enable Agents to fetch PR details for code review assistance, providing context on specific pull requests, or incorporating PR information into ELITEA workflows. List Pull Request Files: Tool Name: list_pull_request_files Functionality: Retrieves a list of files changed in a specific pull request from an Azure Repos repository. Purpose: Allow Agents to provide summaries of files changed in a PR, facilitate code review by listing modified files, or analyze the scope of code changes within ELITEA. Create Branch: Tool Name: create_branch Functionality: Creates a new branch in the specified Azure Repos repository. Purpose: Automate the creation of new branches for feature development, bug fixes, or experimental code changes directly from ELITEA. Read File: Tool Name: read_file Functionality: Reads the content of a file from the specified Azure Repos repository. Purpose: Retrieve code snippets, configuration files, or documentation content from your repository to provide context or data to your ELITEA Agent or to users within ELITEA conversations. Create File: Tool Name: create_file Functionality: Creates a new file in the specified Azure Repos repository. Purpose: Automate the creation of new code files, documentation files, or configuration files within your repository directly from ELITEA workflows. Update File: Tool Name: update_file Functionality: Updates the content of a specific file in an Azure Repos repository. Purpose: Automate updating code files, documentation, or configuration files within your repository based on ELITEA workflow outputs or user requests. Delete File: Tool Name: delete_file Functionality: Deletes a specific file from an Azure Repos repository. Purpose: Automate file deletion tasks within your repository, such as removing obsolete files or cleaning up temporary files generated by ELITEA workflows. Comment Pull Request: Tool Name: comment_pull_request Functionality: Adds a comment to a specific pull request in an Azure Repos repository. Purpose: Automate adding comments to Azure Repos pull requests directly from ELITEA, facilitating communication, updates, and feedback within code review workflows. Create Pull Request: Tool Name: create_pull_request Functionality: Creates a new pull request in the specified Azure Repos repository. Purpose: Automate pull request creation for code contributions, feature branches, or bug fixes directly from ELITEA, streamlining the code review and merging process. Get Work Items: Tool Name: get_work_items Functionality: Retrieves a list of work items (issues) from the specified Azure DevOps project. Purpose: Allow Agents to fetch work item lists for task prioritization, reporting, or to provide users with issue summaries within ELITEA workflows. Instructions and Prompts for Using the Toolkit To effectively utilize the Azure Repos toolkit within your ELITEA Agents, you need to provide clear instructions within the Agent's \"Instructions\" field, telling the Agent how and when to use these tools. Instruction Creation for OpenAI Agents When creating instructions for the Azure Repos toolkit for OpenAI-based Agents, focus on clear, action-oriented language. Break down tasks into simple steps and explicitly state the parameters required for each tool. OpenAI Agents respond best to instructions that are: Direct and Imperative: Use action verbs and clear commands (e.g., \"Use the 'read_file' tool...\", \"Create a branch named...\"). Parameter-Focused: Clearly list each parameter and how the Agent should determine its value. Context-Aware: Provide enough context so the Agent understands the overall goal and when to use specific tools within a workflow. When instructing your Agent to use a Azure Repos toolkit, use this pattern: Use code with caution. Markdown Identify the goal: [State the objective, e.g., \"To read the content of a file\"]. Tool Selection: Use the \"[tool_name]\" tool. Parameter Specification: Provide the following parameters: Parameter Name 1: Parameter Name 2: ... Expected Outcome: [Optionally, describe what should happen after the tool is used]. Example Agent Instructions for Azure Repos Toolkit Tools (OpenAI Agent Friendly): Agent Instructions for Updating a File: 1. Goal: To update the content of the 'config.json' file in the 'settings' branch. 2. Tool: Use the \"update_file\" tool. 3. Parameters: - Repository Name: \"your-azure-devops-organization/your-repository-name\" - File Path: \"config.json\" - Branch Name: \"settings\" - New Content: \"Provide the new JSON configuration content here. For example: {\\\"setting\\\": \\\"new_value\\\"}\" 4. Outcome: The 'config.json' file in the 'settings' branch will be updated with the new content. Agent Instructions for Creating a New Branch: 1. Goal: To create a new feature branch for user authentication. 2. Tool: Use the \"create_branch\" tool. 3. Parameters: - Repository Name: \"your-azure-devops-organization/your-repository-name\" - New Branch Name: \"feature-user-auth\" - Base Branch: \"main\" 4. Outcome: A new branch named 'feature-user-auth' will be created based on the 'main' branch. Agent Instructions for Listing Branches in a Repository: 1. Goal: To get a list of all branches in the repository to understand the current project structure. 2. Tool: Use the \"list_branches\" tool. 3. Parameters: - Repository Name: \"your-azure-devops-organization/your-repository-name\" 4. Outcome: The Agent will provide a list of all branches in the repository. Agent Instructions for Reading a File from a Repository: 1. Goal: To read the content of the 'README.md' file to understand the project's overview. 2. Tool: Use the \"read_file\" tool. 3. Parameters: - Repository Name: \"your-azure-devops-organization/your-repository-name\" - File Path: \"README.md\" - Branch Name: \"main\" 4. Outcome: The Agent will provide the content of the 'README.md' file from the 'main' branch. Conversation Starters Use these conversation starters to interact with your Azure Repos-integrated Agent. 1. For Testing and Troubleshooting Connection: These starters are designed to verify if the Azure Repos toolkit is correctly configured and connected to your Azure Repos repository. \"List branches in the repository.\" - This tests basic connectivity and read permissions. \"Read the file 'README.md' from the main branch.\" - This further tests read permissions and file access. \"Create a new branch named 'test-connection' based on main.\" - This tests write permissions (if enabled) and branch creation functionality. Remember to delete the test branch afterwards. \"List open pull requests.\" - Tests the ability to retrieve pull request data, verifying permissions for PR access. \"Get work items.\" - Tests the ability to retrieve work item data, verifying permissions for issue access. 2. For General Agent Usage Scenarios & Workflow Initiation: These conversation starters demonstrate how to initiate agent execution for common, practical Azure Repos-related tasks and workflows. They represent typical user requests and showcase the agent's ability to perform useful actions within Azure Repos. \"I need to update the documentation file 'user_guide.md' with details about the new API endpoints. Can you help me update it in Azure Repos?\" - This could trigger a workflow involving read_file to get the current documentation content, potentially some content modification steps, and then update_file to save the updated documentation back to the repository. \"Create a pull request to merge my 'feature-x' branch into 'develop' for code review and integration.\" - This directly initiates the create_pull_request tool to automate the pull request creation process. \"What are the currently open feature branches in the repository that need code review?\" - This would utilize the list_branches tool (potentially combined with pull request data) to provide a project status overview, specifically focusing on feature branches awaiting review. \"I need to add a new configuration file 'deploy.config' to the 'config' directory in the main branch with these settings: [provide configuration settings here]. Can you create this file for me?\" - This would use the create_file tool to automate the creation of a new configuration file with user-specified content in the designated repository location. \"Get me a list of all open work items assigned to me.\" - This would use the get_work_items tool to retrieve and summarize assigned work items for task management. Use Cases The Azure Repos toolkit unlocks a vast array of automation possibilities for your software development workflows within ELITEA. Here are compelling use cases, demonstrating how each tool can be effectively applied to streamline development processes and enhance productivity: Automated Feature Branching: Scenario: When a new feature is planned, the Agent can automatically create a dedicated feature branch in Azure Repos. Tools Used: create_branch Example Instruction: \"Use the 'create_branch' tool to create a new branch named 'feature-branch-name' based on the 'main' branch.\" Benefit: Streamlines branch management, ensures organized feature development. Contextual Code Retrieval for Support: Scenario: During a support conversation, an Agent can retrieve relevant code snippets from Azure Repos to provide context or examples to the user. Tools Used: read_file Example Instruction: \"Use the 'read_file' tool to read the content of the file 'src/components/UserComponent.js' from the 'main' branch and show it to the user.\" Benefit: Enhances support interactions with direct access to codebase information. Automated Documentation Updates: Scenario: When code changes are made, the Agent can automatically update related documentation files in the repository. Tools Used: read_file , update_file Example Instruction: \"Use the 'read_file' tool to get the current content of 'docs/api.md'. Update it with the new API changes and use 'update_file' to save the updated content back to 'docs/api.md' in the 'main' branch.\" Benefit: Keeps documentation synchronized with the latest codebase, reducing manual effort and errors. Pull Request Automation for Code Review: Scenario: After a developer completes a task, the Agent can automatically create a pull request for code review. Tools Used: create_pull_request Example Instruction: \"Use the 'create_pull_request' tool to create a pull request from branch 'feature-branch-name' to 'develop' branch with the title 'Feature Branch Review' and description 'Please review the changes for the new feature.'\" Benefit: Automates the pull request process, facilitating timely code reviews and improving code quality. Listing Branches for Project Overview: Scenario: A project manager wants a quick overview of all active branches in the repository. Tools Used: list_branches_in_repo Example Instruction: \"Use the 'list_branches_in_repo' tool to list all branches in the repository and present them to the user.\" Benefit: Provides easy access to branch information for project management and monitoring. Setting Active Branch for Focused Operations: Scenario: Before performing a series of file operations, ensure the Agent is working on the correct branch. Tools Used: set_active_branch Example Instruction: \"First, use 'set_active_branch' to set the active branch to 'develop'. Then, use 'read_file' to read 'config.json' from the active branch.\" Benefit: Ensures operations are performed in the intended branch context, reducing errors and improving workflow reliability. Automated Work Item Status Updates: Scenario: Automatically update the status of an Azure DevOps work item (issue) to \"Resolved\" when a linked code change (e.g., pull request merge) is completed in ELITEA, reflecting the issue resolution in the Azure Boards tracking system. Tools Used: set_issue_status Example Instruction: \"Use the 'set_issue_status' tool to update issue number [issue_number]. Set the issue status to 'Resolved'.\" Benefit: Automates work item lifecycle management, ensuring work item statuses are always synchronized with the actual development progress. Reduces manual status updates, improves issue tracking accuracy, and provides a clear audit trail of issue resolution. Retrieving Work Item Details for Context: Scenario: During a task discussion or troubleshooting session, provide users with quick access to detailed information about a specific Azure DevOps work item to understand the task context and status. Tools Used: get_issue Example Instruction: \"Use the 'get_issue' tool to get details for work item number [issue_number]. Summarize the work item title, description, and status for the user.\" Benefit: Provides users with quick, contextual access to detailed work item information directly within ELITEA, improving understanding, facilitating faster problem-solving, and enhancing communication around specific tasks. Automated Work Item Commenting for Updates: Scenario: Allow ELITEA Agents to automatically add comments to Azure DevOps work items to provide status updates, request information, or log actions taken within ELITEA workflows, keeping work item discussions current. Tools Used: add_comments Example Instruction: \"Use the 'add_comments' tool to add a comment to work item number [issue_number] with the text '[comment_text]'.\" Benefit: Streamlines communication within work item tracking, enabling automated updates and feedback directly within Azure DevOps work items. Keeps all stakeholders informed, reduces manual communication overhead, and centralizes work item-related discussions. Troubleshooting and Support Troubleshooting Common Issues Connection Errors: Problem: ELITEA Agent fails to connect to Azure Repos, resulting in errors during toolkit execution. Troubleshooting Steps: Verify Azure DevOps URL: Double-check that the Azure DevOps URL field in the toolkit configuration is correctly set to your Azure DevOps organization URL (e.g., https://dev.azure.com/YourOrganizationName ). Ensure it includes https://dev.azure.com/ and your organization name. Check Personal Access Token: Ensure that the Personal Access Token you provided is correct, has not expired, and is valid for your Azure DevOps account and project. Carefully re-enter or copy-paste the token to rule out typos. Verify Token Scopes: Review the scopes/permissions granted to your Azure DevOps Personal Access Token in Azure DevOps. Ensure it has the necessary scopes (e.g., vso.code_full , vso.work_full ) for the specific Azure Repos tools your Agent is trying to use. Insufficient scopes are a common cause of connection and permission errors. Network Connectivity: Confirm that both your ELITEA environment and the Azure DevOps instance are connected to the internet and that there are no network connectivity issues, firewalls, or proxies blocking the integration. Test network connectivity to dev.azure.com from your ELITEA environment if possible. Authorization Errors (Permission Denied/Unauthorized): Problem: Agent execution fails with \"Permission Denied\" or \"Unauthorized\" errors when trying to access or modify Azure Repos resources. Troubleshooting Steps: Re-verify Token Scopes: Double-check the scopes/permissions granted to your Azure DevOps Personal Access Token with extreme care. Ensure it grants sufficient access for the specific Azure Repos actions your Agent is trying to perform. For example, creating files or pull requests requires scopes that grant write access ( vso.code_full scope). Project and Repository Access Permissions: Confirm that the Azure DevOps account associated with the Personal Access Token has the necessary access permissions to the specified project and repository within Azure DevOps. Verify that the account is a member of the project and has the necessary roles and permissions (e.g., Contributor or Project Administrator role for write access). Check project settings in Azure DevOps to confirm access levels. Token Revocation or Expiration: Ensure that the Personal Access Token has not been accidentally revoked in Azure DevOps settings or that it has not reached its expiration date if you set one. Generate a new token as a test if unsure. Incorrect Repository or Branch Names: Problem: Agent tools fail to operate on the intended repository or branch, often resulting in \"Repository not found\" or \"Branch not found\" errors. Troubleshooting Steps: Double-Check Repository Name: Carefully and meticulously verify that you have entered the correct Azure Repos Repository name in the toolkit configuration within ELITEA. Pay close attention to capitalization, spelling, and the repository_name . Verify Branch Name Spelling and Case: Ensure that you are using the correct branch name (e.g., main , develop , feature-branch ) in your Agent's instructions when specifying branch-related parameters for Azure Repos tools. Branch names in Git are case-sensitive. Double-check the spelling and capitalization of branch names against your repository in Azure DevOps. Branch Existence: Confirm that the specified branch actually exists in your Azure Repos repository. It's possible the branch name is correct but the branch was deleted or renamed. Invalid Repository ID: Problem: Agent execution fails because of an invalid or incorrect Repository ID in the toolkit configuration. Troubleshooting Steps: Re-obtain Repository ID: Double-check that you have correctly obtained the Repository ID using the curl command as described in the \"Integration Steps\" section of this guide. Follow the steps precisely to ensure you retrieve the correct ID. Verify Repository ID Value: Carefully verify that you have pasted the correct Repository ID into the \"Repository ID\" field in the ELITEA toolkit configuration. Ensure there are no typos, missing characters, or extra spaces in the Repository ID field. Copy and paste the ID again to rule out transcription errors. FAQs Q: Can I use my regular Azure DevOps password directly for the ELITEA integration instead of a Personal Access Token? A: No, using an Azure DevOps Personal Access Token is mandatory and strongly recommended for security. Direct password authentication is not supported for ELITEA's Azure Repos toolkit integration. Personal Access Tokens provide a significantly more secure and controlled method for granting access to external applications like ELITEA, without exposing your primary account credentials. Q: What scopes/permissions are absolutely necessary and minimally sufficient for the Azure DevOps Personal Access Token to work with ELITEA? A: The minimum required scopes depend on the specific Azure Repos tools your ELITEA Agent will be using. For basic read-only access to repositories (e.g., using read_file , list_files ), the vso.code_read scope might suffice. However, for most common integration scenarios involving modifications (e.g., create_file , update_file , create_pull_request ), you will need the vso.code_full scope. For work item (issue) management, include vso.work_full scope. Always adhere to the principle of least privilege and grant only the scopes that are strictly necessary for your Agent's tasks. Refer to the Azure DevOps documentation for detailed scope descriptions. Q: What is the correct format for specifying the Azure DevOps Organization URL in the ELITEA toolkit configuration? A: The Azure DevOps Organization URL must be entered in the format https://dev.azure.com/{YourOrganizationName} . Replace {YourOrganizationName} with your actual Azure DevOps organization name. Ensure you include https://dev.azure.com/ and your organization name. Q: How do I find the Repository ID for my Azure Repos repository? A: You need to use the curl command provided in the \"Integration Steps\" section of this guide to retrieve the Repository ID from the Azure DevOps API. Follow the detailed steps in section 3.2 \"Integration Steps: Configuring the Azure Repos (ADO Repo) Toolkit in ELITEA\" to correctly obtain the Repository ID. Pay close attention to replacing the placeholders with your actual PAT, organization name, and project name in the curl command. Q: Why am I consistently getting \"Permission Denied\" errors, even though I think I have configured everything correctly and granted the right permissions? A: If you are still facing \"Permission Denied\" errors despite careful configuration, systematically re-examine the following: Token Scope Accuracy: Double and triple-check the scopes/permissions granted to your Azure DevOps Personal Access Token in your Azure DevOps user settings. Ensure that the token possesses the exact scopes required for each Azure Repos tool your Agent is attempting to use. Pay close attention to write vs. read permissions and ensure you have granted sufficient scopes. Project and Repository Access Verification: Explicitly verify that the Azure DevOps account associated with the Personal Access Token has the necessary access rights to the specific target project and repository within Azure DevOps itself. Confirm project membership, assigned roles, and repository permissions within the Azure DevOps project settings. Token Validity and Revocation: Double-check that the Personal Access Token is still valid, has not expired, and has not been accidentally revoked in your Azure DevOps settings. Generate a new token as a test if unsure. Typographical Errors: Carefully review all configuration fields in ELITEA, especially the Azure DevOps URL, Organization Name, Project Name, Repository ID, and the Personal Access Token itself for any hidden typographical errors or accidental whitespace. If, after meticulously checking all of these points, you still encounter \"Permission Denied\" errors, please reach out to ELITEA Support with detailed information for further assistance. Support and Contact Information If you encounter any issues, have questions, or require further assistance beyond what is covered in this guide regarding the Azure Repos integration or ELITEA Agents in general, please do not hesitate to contact our dedicated ELITEA Support Team. We are here to help you resolve any problems quickly and efficiently and ensure you have a smooth and productive experience with ELITEA. How to Reach ELITEA Support: Email: SupportAlita@epam.com Best Practices for Effective Support Requests: To help us understand and resolve your issue as quickly as possible, please ensure you provide the following information in your support email: ELITEA Environment: Clearly specify the ELITEA environment you are using (e.g., \"Nexus,\" \"Alita Lab,\" \"EYE\"). Project Details: Indicate the Project Name and whether you are working in your Private workspace or a Team project. Detailed Issue Description: Provide a clear, concise, and detailed description of the problem you are encountering. Explain what you were trying to do, what you expected to happen, and what actually occurred. Relevant Configuration Information: To help us diagnose the issue, please include relevant configuration details, such as: Agent Instructions (Screenshot or Text): If the issue is with an Agent, provide a screenshot or copy the text of your Agent's \"Instructions\" field. Toolkit Configurations (Screenshots): If the issue involves the Azure Repos toolkit or other toolkits, include screenshots of the toolkit configuration settings within your Agent. Error Messages (Full Error Text): If you are encountering an error message, please provide the complete error text . In the Chat window, expand the error details and copy the full error message. This detailed error information is crucial for diagnosis. Your Query/Prompt (Exact Text): If the issue is related to Agent execution, provide the exact query or prompt you used to trigger the issue. Before Contacting Support: We encourage you to first explore the resources available within this guide and the broader ELITEA documentation. You may find answers to common questions or solutions to known issues in the documentation. Useful Links To further enhance your understanding and skills in integrating Azure Repos (ADO Repos) with ELITEA, here are some helpful resources: Azure DevOps Website : Access the main Azure DevOps platform to create an account or sign in. Azure DevOps Organization URL Example : Example URL to understand the structure of Azure DevOps Organization URLs. ELITEA Secrets Management : Learn how to securely store your Azure DevOps Personal Access Token using ELITEA's Secrets management feature for enhanced security. ELITEA Agents Configuration : Find out more about creating and configuring Agents in ELITEA, where you integrate the Azure Repos toolkit to automate your workflows. ELITEA Support Email : Contact the ELITEA support team for direct assistance with Azure Repos integration or any other questions and issues you may encounter.","title":"ADO Repos Integration"},{"location":"how-tos/agents-toolkits/ado_repos_toolkit/#elitea-toolkit-guide-azure-repos-ado-repos-integration","text":"","title":"ELITEA Toolkit Guide: Azure Repos (ADO Repos) Integration"},{"location":"how-tos/agents-toolkits/ado_repos_toolkit/#introduction","text":"","title":"Introduction"},{"location":"how-tos/agents-toolkits/ado_repos_toolkit/#purpose-of-this-guide","text":"This guide is your definitive resource for integrating and effectively utilizing the Azure Repos (ADO Repos) toolkit within ELITEA. It provides a detailed, step-by-step walkthrough, from setting up your Azure DevOps Personal Access Token to configuring the toolkit in ELITEA and seamlessly incorporating it into your Agents. By following this guide, you will unlock the power of automated code management, streamlined Azure DevOps workflows, and enhanced team collaboration, all directly within the ELITEA platform. This integration empowers you to leverage AI-driven automation to optimize your software development lifecycle within the Azure DevOps ecosystem, harnessing the combined strengths of ELITEA and Azure Repos.","title":"Purpose of this Guide"},{"location":"how-tos/agents-toolkits/ado_repos_toolkit/#brief-overview-of-azure-repos-ado-repos","text":"Azure Repos, a core service within Azure DevOps, is a robust and scalable cloud-hosted platform for version control and collaborative code management. It provides development teams with the essential tools to manage their codebase efficiently and collaborate effectively throughout the software development lifecycle. Azure Repos offers a comprehensive set of features, including: Versatile Version Control: Supports both Git, the industry-standard distributed version control system, and Team Foundation Version Control (TFVC), a centralized version control system, providing flexibility to accommodate diverse team preferences and project requirements. Enhanced Collaborative Development: Facilitates seamless team-based software development with powerful collaboration features such as Pull Requests for code review, Branch Policies to enforce code quality and workflow standards, and Code Search for efficient code discovery and navigation. Seamless Azure DevOps Integration: Integrates seamlessly with the broader Azure DevOps ecosystem, including Azure Pipelines for Continuous Integration and Continuous Delivery (CI/CD), Azure Boards for agile work item tracking and project management, and Azure Test Plans for comprehensive testing, creating a unified DevOps platform. Scalability and Reliability: Built on the Azure cloud infrastructure, Azure Repos provides a highly scalable and reliable platform for managing code repositories of any size, from small projects to large enterprise-scale applications, ensuring code availability and data integrity. Advanced Security and Compliance: Offers robust security features, including granular access control, branch permissions, and audit logging, along with compliance certifications, ensuring the security and compliance of your codebase and development processes. Integrating Azure Repos with ELITEA brings these powerful version control and DevOps capabilities directly into your AI-driven workflows. Your ELITEA Agents can then intelligently interact with your Azure Repos repositories to automate code-related tasks, enhance Azure DevOps pipelines, improve team collaboration, and leverage AI to optimize your entire software development lifecycle within the Azure ecosystem.","title":"Brief Overview of Azure Repos (ADO Repos)"},{"location":"how-tos/agents-toolkits/ado_repos_toolkit/#toolkits-account-setup-and-configuration-in-azure-repos","text":"","title":"Toolkit's Account Setup and Configuration in Azure Repos"},{"location":"how-tos/agents-toolkits/ado_repos_toolkit/#account-setup","text":"If you do not yet have an Azure DevOps account and organization, please follow these steps to create one: Visit Azure DevOps Website: Open your web browser and navigate to the Azure DevOps website: https://azure.devops.com/ . Start Free or Sign In: Click on the \"Start free\" button to create a new Azure DevOps organization, or click \"Sign in to Azure DevOps\" if you already have an organization and wish to sign in. Create an Organization (If Needed): If you are creating a new organization, click \"Create an Organization\" and follow the prompts to set up your new Azure DevOps organization. You will typically need to provide an organization name, choose a hosting region, and link it to an Azure account (if you have one). If you are signing into an existing organization, click \"Sign in to Azure DevOps\" and log in using your Microsoft account credentials. Enter Account Details: Provide the required details as prompted during the organization creation or sign-in process. This may include your email address, organization name, and region for hosting your Azure DevOps organization. Email Verification (If Prompted): Verify your email address if prompted by the Azure DevOps signup process. This usually involves clicking a confirmation link sent to your email inbox. Log In to Azure DevOps: Log in to the Azure DevOps dashboard using your newly created or existing Microsoft account credentials. Enable Basic Subscription (If Needed): Ensure that you have a Basic Azure DevOps subscription enabled for your account to access Azure Repos and related Azure DevOps services. For new organizations, the Basic subscription is typically enabled by default. For existing organizations, you may need to verify or enable it in the organization settings. Add Users and Assign Basic Subscription (If Needed): To grant access to other users within your organization, navigate to your organization settings: Go to https://dev.azure.com/{YourOrganizationName}/_settings/users (replace {YourOrganizationName} with your actual Azure DevOps organization name). Click \"Add users\" . Enter the user's email address or Microsoft account. Select \"Basic\" from the \"Access level\" dropdown to assign a Basic subscription to the user. Choose the relevant project(s) to grant the user access to. Click \"Add\" to add the user to your Azure DevOps organization. Add User to Project Member Group (If Needed): To ensure newly added users have the necessary permissions within a specific project: Navigate to \"Project settings\" for your desired project (located at the bottom left of the Azure DevOps interface). Select \"Groups\" under \"Security\" in the Project settings menu. Locate the \"Project Valid Users\" group (or a relevant group for your project's members) and click on the group name. Click on the \"Members\" tab within the group details. Click \"Add users or groups\" . Enter the email address or name of the user you want to add to the project member group and click \"Add\" . Verify Repo Access: After completing user setup, refresh the Azure DevOps page and ensure that the \"Repos\" feature is enabled and visible for your account within your Azure DevOps project. This confirms that you have successfully set up your Azure DevOps account and have access to Azure Repos. Note: If the \"Repos\" feature is not available, you may need to create a new project within your Azure DevOps organization or verify that Azure Repos is enabled for your organization and project.","title":"Account Setup"},{"location":"how-tos/agents-toolkits/ado_repos_toolkit/#tokenapi-key-generation-creating-a-personal-access-token-in-azure-devops","text":"For secure integration with ELITEA, it is essential to use an Azure DevOps Personal Access Token (PAT) . This method is significantly more secure than using your primary Azure DevOps account password directly and allows you to precisely control the permissions granted to ELITEA. Follow these steps to generate a Personal Access Token (PAT) in Azure DevOps: Log in to Azure DevOps: Access your Azure DevOps organization by navigating to https://dev.azure.com/ and logging in with your credentials. Access User Settings: Click on the User settings icon, typically located in the top right corner of the Azure DevOps interface, next to your profile picture. From the dropdown menu, select \"Personal access tokens\" . Generate New Token: On the \"Personal Access Tokens\" page, click the \"+ New Token\" button to create a new PAT. Configure Token Details: In the \"Create a new personal access token\" panel, configure the following settings: Name: In the \"Name\" field, enter a descriptive label for your token. For example, use \"ELITEA Integration Token\" or \"ELITEA Agent Access.\" This label will help you easily identify the purpose of this token in the future. Organization (Optional): Select the Azure DevOps organization for which this token will be valid. In most cases, you will select \"All accessible organizations\" to allow the token to access resources across your organizations. Expiration (Recommended): For enhanced security, it is highly recommended to set an Expiration date for your token. Choose a reasonable validity period that aligns with your security policies. Shorter expiration periods are generally more secure. Scopes - Grant Least Privilege (Crucial for Security): Carefully and deliberately select the scopes or permissions you grant to this token. It is paramount to grant only the absolute minimum necessary permissions required for your ELITEA Agent's intended interactions with Azure Repos. Overly permissive tokens pose a significant security risk. For typical ELITEA integration with Azure Repos, consider these minimal scopes: Minimal Scopes for Common Use Cases: Custom Defined: Select \"Custom defined\" to manually choose granular scopes. Code: Expand the \"Code\" section and select: Read & write: (Grants read and write access to code repositories. If possible, for enhanced security, consider using more granular code scopes instead of full \"Read & write\" if your agent only needs read access.) Read: (If your agent only needs to read repository content and not modify it, select \"Read\" instead of \"Read & write\" for even tighter security.) Work items: Expand the \"Work items\" section and select: Read: (If your agent needs to read work item details, select \"Read\") Write: (If your agent needs to create or update work items, select \"Write\". Only include this if your Agent needs to manage work items.) Additional Scopes for Specific Functionality (Grant only when needed): Build: (If your Agent needs to interact with Azure Pipelines builds) Release: (If your Agent needs to interact with Azure Pipelines releases) Test Management: (If your Agent needs to interact with Azure Test Plans) Important Security Best Practices: Principle of Least Privilege: Strictly adhere to the principle of least privilege. Grant only the absolute minimum set of scopes necessary for your ELITEA Agent to perform its specific, intended tasks. Avoid granting broad or unnecessary permissions. Avoid Full Access Scopes: Avoid granting full access scopes like \"Full access\" unless absolutely necessary and with a clear and thorough understanding of the significant security implications. Full access scopes provide extensive administrative privileges and should be avoided for integration purposes whenever possible. Regular Token Review and Rotation: Implement a process for regularly reviewing the Personal Access Tokens you have generated, their associated scopes, and their usage. Rotate tokens periodically (generate new tokens and revoke older ones) as a proactive security measure, especially for integrations that handle sensitive data or critical operations. Secure Storage: Store the generated Personal Access Token securely, preferably using ELITEA's built-in Secrets Management feature, rather than hardcoding it directly in Agent configurations or less secure storage locations. Create Token: Click the \"Create\" button at the bottom of the panel to generate your Personal Access Token. Securely Copy and Store the Token: Immediately copy the generated token that is displayed in the \"Success!\" pop-up window. This is the only time you will be able to view and copy the full token value. Store it securely using a robust password manager or, ideally, ELITEA's built-in Secrets feature for enhanced security within the ELITEA platform. You will require this token to configure the Azure Repos toolkit within ELITEA.","title":"Token/API Key Generation: Creating a Personal Access Token in Azure DevOps"},{"location":"how-tos/agents-toolkits/ado_repos_toolkit/#system-integration-with-elitea","text":"","title":"System Integration with ELITEA"},{"location":"how-tos/agents-toolkits/ado_repos_toolkit/#agent-creationconfiguration","text":"To integrate Azure Repos functionalities into your workflows, you will need to configure the Azure Repos toolkit within an ELITEA Agent. You can either create a new Agent specifically for Azure Repos interactions or modify an existing Agent to incorporate Azure Repos tools. Navigate to Agents Menu: In ELITEA, access the Agents menu from the main navigation panel. Create or Edit Agent: Create a New Agent: Click on the \"+ Agent\" button to initiate the creation of a new Agent. Follow the on-screen prompts to define essential Agent attributes such as Agent name, a descriptive Agent description, the desired Agent type, and initial instructions for the Agent. Edit an Existing Agent: Select the Agent you intend to integrate with Azure Repos from your list of Agents. Click on the Agent's name to open its configuration settings for editing. Access Tools Section: Within the Agent configuration interface, scroll down until you locate the \"Tools\" section. This section is where you will add and configure toolkits, including the Azure Repos toolkit.","title":"Agent Creation/Configuration"},{"location":"how-tos/agents-toolkits/ado_repos_toolkit/#toolkit-configuration","text":"This section provides detailed instructions on how to configure the Azure Repos toolkit within your ELITEA Agent. Add Toolkit: In the \"Tools\" section of the Agent configuration, click on the \"+\" icon . This action will display a dropdown list of available toolkits that can be integrated with your Agent. Select Azure Repos (ADO Repos) Toolkit: From the dropdown list of available toolkits, choose \"Azure Repos (ADO Repos)\" . Selecting \"Azure Repos (ADO Repos)\" will open the \"New Azure Repos (ADO Repo) tool\" configuration panel, where you will specify the settings for your Azure Repos integration. Configure Azure Repos (ADO Repos) Toolkit Settings: Carefully fill in the following configuration fields within the \"New Azure Repos (ADO Repo) tool\" section: Name: Enter a descriptive Name for this specific Azure Repos toolkit instance. Choose a name that is easily recognizable and helps you identify its purpose within your Agent's instructions. For example, you might use names like \"ProjectAzureRepos\", \"CodeRepositoryAccess\", or \"ADOReposIntegration\". Description: Provide a concise Description for the toolkit. This description should clarify the toolkit's purpose or the specific Azure Repos repository or project it is intended to access. For example, you could describe it as \"Toolkit for accessing and managing the main project code repository on Azure Repos\" or \"Integration for Azure Repos project 'MyProject'\". URL: Enter the base URL of your Azure DevOps organization. It is crucial to use the correct format , including your organization name: https://dev.azure.com/{YourOrganizationName} (Replace {YourOrganizationName} with your actual Azure DevOps organization name). Personal Access Token: In the \"Personal Access Token\" field, paste the Personal Access Token that you generated in Azure DevOps during the \"Software-Specific Setup\" section of this guide. Enhanced Security with Secrets (Recommended): For enhanced security, it is strongly recommended to use ELITEA's Secrets Management feature to store your Azure DevOps Personal Access Token securely. Instead of directly pasting the token into the \"Personal Access Token\" field, select the \"Secret\" option and choose the pre-configured secret containing your Azure DevOps token from the dropdown list. This prevents hardcoding sensitive credentials in your toolkit configuration. Organization Name: Enter your Azure DevOps Organization Name . This is the name you used when creating your Azure DevOps organization (e.g., AlitaTest in https://dev.azure.com/AlitaTest/ ). Project Name: Enter the Project Name within your Azure DevOps organization that contains the repository you want to access (e.g., MyProject ). Repository ID: This field requires the Repository ID , which is a unique identifier for your Azure Repos repository. To obtain the Repository ID, you need to run a curl command as described below: Steps to Obtain Repository ID: Open a Terminal or Command Prompt: Open your command-line interface on your local machine. Execute the curl Command: Run the following curl command, replacing {PAT} , {organization} , and {project} with your actual values: bash curl -u {PAT}: https://dev.azure.com/{organization}/{project}/_apis/git/repositories?api-version=7.1-preview.1 {PAT} : Replace this with your Personal Access Token that you generated in Azure DevOps. {organization} : Replace this with your Azure DevOps Organization Name (e.g., AlitaTest ). {project} : Replace this with your Azure DevOps Project Name (e.g., MyProject ). Example Command: bash curl -u your_personal_access_token: https://dev.azure.com/AlitaTest/MyProject/_apis/git/repositories?api-version=7.1-preview.1 Extract Repository ID from Output: After executing the curl command, you will receive a JSON response in your terminal. Look for the Repository ID within the JSON output. It will be a GUID (Globally Unique Identifier) string, typically found within the \"value\" array, for example: \"id\": \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\" . Copy and Paste Repository ID: Copy the Repository ID value from the JSON output and paste it into the \"Repository ID\" field in the ELITEA toolkit configuration. Enable Desired Tools: In the \"Tools\" section within the Azure Repos toolkit configuration panel, select the checkboxes next to the specific Azure Repos tools that you want to enable for your Agent. It is crucial to enable only the tools that your Agent will actually need to use to adhere to the principle of least privilege and minimize potential security risks. Available tools include: List branches - Allows the Agent to list branches in the repository. Set active branch - Enables the Agent to set a specific branch as active for subsequent operations. Create Branch - Enables the Agent to create new branches in the repository. Get pull request - Enables the Agent to retrieve details of a specific pull request. List pull request files - Allows the Agent to list files changed in a pull request. Comment Pull Request - Allows the Agent to add comments to pull requests. Create Pull Request - Enables the Agent to create new pull requests. List files - Allows the Agent to list files within the repository. Read File - Allows the Agent to read the content of files within the repository. Create File - Enables the Agent to create new files within the repository. Update File - Allows the Agent to update the content of existing files within the repository. Delete File - Allows the Agent to delete files from the repository. Get Work Items - Allows the Agent to retrieve lists of work items (issues). Complete Setup: After configuring all the necessary settings and enabling the desired tools, click the arrow icon (located at the top right of the toolkit configuration section) to finalize the Azure Repos toolkit setup and return to the main Agent configuration menu. Click Save in the Agent configuration to save all changes and activate the Azure Repos toolkit integration for your Agent.","title":"Toolkit Configuration"},{"location":"how-tos/agents-toolkits/ado_repos_toolkit/#tool-overview-azure-repos-ado-repos-toolkit-functionalities","text":"Once the Azure Repos toolkit is successfully configured and added to your Agent, you can utilize the following tools within your Agent's instructions to enable intelligent interaction with your Azure DevOps repositories: List Branches: Tool Name: list_branches Functionality: Retrieves a list of all branches available in the specified Azure Repos repository. Purpose: Enables Agents to fetch branch lists for branch management tasks, reporting, or to provide users with branch options within ELITEA workflows. Set Active Branch: Tool Name: set_active_branch Functionality: Sets a specific branch as the active branch in the specified Azure Repos repository for subsequent operations. Purpose: Allows Agents to switch the active branch for file operations or pull request creation within your ELITEA Agent workflows, ensuring actions are performed in the correct branch context. List Files: Tool Name: list_files Functionality: Retrieves a list of files in the active branch of the specified Azure Repos repository. Purpose: Allows Agents to browse repository contents, provide users with file lists for navigation, or analyze file structures within ELITEA workflows. Get Pull Request: Tool Name: get_pull_request Functionality: Retrieves detailed information about a specific pull request from an Azure Repos repository. Purpose: Enable Agents to fetch PR details for code review assistance, providing context on specific pull requests, or incorporating PR information into ELITEA workflows. List Pull Request Files: Tool Name: list_pull_request_files Functionality: Retrieves a list of files changed in a specific pull request from an Azure Repos repository. Purpose: Allow Agents to provide summaries of files changed in a PR, facilitate code review by listing modified files, or analyze the scope of code changes within ELITEA. Create Branch: Tool Name: create_branch Functionality: Creates a new branch in the specified Azure Repos repository. Purpose: Automate the creation of new branches for feature development, bug fixes, or experimental code changes directly from ELITEA. Read File: Tool Name: read_file Functionality: Reads the content of a file from the specified Azure Repos repository. Purpose: Retrieve code snippets, configuration files, or documentation content from your repository to provide context or data to your ELITEA Agent or to users within ELITEA conversations. Create File: Tool Name: create_file Functionality: Creates a new file in the specified Azure Repos repository. Purpose: Automate the creation of new code files, documentation files, or configuration files within your repository directly from ELITEA workflows. Update File: Tool Name: update_file Functionality: Updates the content of a specific file in an Azure Repos repository. Purpose: Automate updating code files, documentation, or configuration files within your repository based on ELITEA workflow outputs or user requests. Delete File: Tool Name: delete_file Functionality: Deletes a specific file from an Azure Repos repository. Purpose: Automate file deletion tasks within your repository, such as removing obsolete files or cleaning up temporary files generated by ELITEA workflows. Comment Pull Request: Tool Name: comment_pull_request Functionality: Adds a comment to a specific pull request in an Azure Repos repository. Purpose: Automate adding comments to Azure Repos pull requests directly from ELITEA, facilitating communication, updates, and feedback within code review workflows. Create Pull Request: Tool Name: create_pull_request Functionality: Creates a new pull request in the specified Azure Repos repository. Purpose: Automate pull request creation for code contributions, feature branches, or bug fixes directly from ELITEA, streamlining the code review and merging process. Get Work Items: Tool Name: get_work_items Functionality: Retrieves a list of work items (issues) from the specified Azure DevOps project. Purpose: Allow Agents to fetch work item lists for task prioritization, reporting, or to provide users with issue summaries within ELITEA workflows.","title":"Tool Overview: Azure Repos (ADO Repos) Toolkit Functionalities"},{"location":"how-tos/agents-toolkits/ado_repos_toolkit/#instructions-and-prompts-for-using-the-toolkit","text":"To effectively utilize the Azure Repos toolkit within your ELITEA Agents, you need to provide clear instructions within the Agent's \"Instructions\" field, telling the Agent how and when to use these tools.","title":"Instructions and Prompts for Using the Toolkit"},{"location":"how-tos/agents-toolkits/ado_repos_toolkit/#instruction-creation-for-openai-agents","text":"When creating instructions for the Azure Repos toolkit for OpenAI-based Agents, focus on clear, action-oriented language. Break down tasks into simple steps and explicitly state the parameters required for each tool. OpenAI Agents respond best to instructions that are: Direct and Imperative: Use action verbs and clear commands (e.g., \"Use the 'read_file' tool...\", \"Create a branch named...\"). Parameter-Focused: Clearly list each parameter and how the Agent should determine its value. Context-Aware: Provide enough context so the Agent understands the overall goal and when to use specific tools within a workflow. When instructing your Agent to use a Azure Repos toolkit, use this pattern: Use code with caution. Markdown Identify the goal: [State the objective, e.g., \"To read the content of a file\"]. Tool Selection: Use the \"[tool_name]\" tool. Parameter Specification: Provide the following parameters: Parameter Name 1: Parameter Name 2: ... Expected Outcome: [Optionally, describe what should happen after the tool is used]. Example Agent Instructions for Azure Repos Toolkit Tools (OpenAI Agent Friendly): Agent Instructions for Updating a File: 1. Goal: To update the content of the 'config.json' file in the 'settings' branch. 2. Tool: Use the \"update_file\" tool. 3. Parameters: - Repository Name: \"your-azure-devops-organization/your-repository-name\" - File Path: \"config.json\" - Branch Name: \"settings\" - New Content: \"Provide the new JSON configuration content here. For example: {\\\"setting\\\": \\\"new_value\\\"}\" 4. Outcome: The 'config.json' file in the 'settings' branch will be updated with the new content. Agent Instructions for Creating a New Branch: 1. Goal: To create a new feature branch for user authentication. 2. Tool: Use the \"create_branch\" tool. 3. Parameters: - Repository Name: \"your-azure-devops-organization/your-repository-name\" - New Branch Name: \"feature-user-auth\" - Base Branch: \"main\" 4. Outcome: A new branch named 'feature-user-auth' will be created based on the 'main' branch. Agent Instructions for Listing Branches in a Repository: 1. Goal: To get a list of all branches in the repository to understand the current project structure. 2. Tool: Use the \"list_branches\" tool. 3. Parameters: - Repository Name: \"your-azure-devops-organization/your-repository-name\" 4. Outcome: The Agent will provide a list of all branches in the repository. Agent Instructions for Reading a File from a Repository: 1. Goal: To read the content of the 'README.md' file to understand the project's overview. 2. Tool: Use the \"read_file\" tool. 3. Parameters: - Repository Name: \"your-azure-devops-organization/your-repository-name\" - File Path: \"README.md\" - Branch Name: \"main\" 4. Outcome: The Agent will provide the content of the 'README.md' file from the 'main' branch.","title":"Instruction Creation for OpenAI Agents"},{"location":"how-tos/agents-toolkits/ado_repos_toolkit/#conversation-starters","text":"Use these conversation starters to interact with your Azure Repos-integrated Agent. 1. For Testing and Troubleshooting Connection: These starters are designed to verify if the Azure Repos toolkit is correctly configured and connected to your Azure Repos repository. \"List branches in the repository.\" - This tests basic connectivity and read permissions. \"Read the file 'README.md' from the main branch.\" - This further tests read permissions and file access. \"Create a new branch named 'test-connection' based on main.\" - This tests write permissions (if enabled) and branch creation functionality. Remember to delete the test branch afterwards. \"List open pull requests.\" - Tests the ability to retrieve pull request data, verifying permissions for PR access. \"Get work items.\" - Tests the ability to retrieve work item data, verifying permissions for issue access. 2. For General Agent Usage Scenarios & Workflow Initiation: These conversation starters demonstrate how to initiate agent execution for common, practical Azure Repos-related tasks and workflows. They represent typical user requests and showcase the agent's ability to perform useful actions within Azure Repos. \"I need to update the documentation file 'user_guide.md' with details about the new API endpoints. Can you help me update it in Azure Repos?\" - This could trigger a workflow involving read_file to get the current documentation content, potentially some content modification steps, and then update_file to save the updated documentation back to the repository. \"Create a pull request to merge my 'feature-x' branch into 'develop' for code review and integration.\" - This directly initiates the create_pull_request tool to automate the pull request creation process. \"What are the currently open feature branches in the repository that need code review?\" - This would utilize the list_branches tool (potentially combined with pull request data) to provide a project status overview, specifically focusing on feature branches awaiting review. \"I need to add a new configuration file 'deploy.config' to the 'config' directory in the main branch with these settings: [provide configuration settings here]. Can you create this file for me?\" - This would use the create_file tool to automate the creation of a new configuration file with user-specified content in the designated repository location. \"Get me a list of all open work items assigned to me.\" - This would use the get_work_items tool to retrieve and summarize assigned work items for task management.","title":"Conversation Starters"},{"location":"how-tos/agents-toolkits/ado_repos_toolkit/#use-cases","text":"The Azure Repos toolkit unlocks a vast array of automation possibilities for your software development workflows within ELITEA. Here are compelling use cases, demonstrating how each tool can be effectively applied to streamline development processes and enhance productivity: Automated Feature Branching: Scenario: When a new feature is planned, the Agent can automatically create a dedicated feature branch in Azure Repos. Tools Used: create_branch Example Instruction: \"Use the 'create_branch' tool to create a new branch named 'feature-branch-name' based on the 'main' branch.\" Benefit: Streamlines branch management, ensures organized feature development. Contextual Code Retrieval for Support: Scenario: During a support conversation, an Agent can retrieve relevant code snippets from Azure Repos to provide context or examples to the user. Tools Used: read_file Example Instruction: \"Use the 'read_file' tool to read the content of the file 'src/components/UserComponent.js' from the 'main' branch and show it to the user.\" Benefit: Enhances support interactions with direct access to codebase information. Automated Documentation Updates: Scenario: When code changes are made, the Agent can automatically update related documentation files in the repository. Tools Used: read_file , update_file Example Instruction: \"Use the 'read_file' tool to get the current content of 'docs/api.md'. Update it with the new API changes and use 'update_file' to save the updated content back to 'docs/api.md' in the 'main' branch.\" Benefit: Keeps documentation synchronized with the latest codebase, reducing manual effort and errors. Pull Request Automation for Code Review: Scenario: After a developer completes a task, the Agent can automatically create a pull request for code review. Tools Used: create_pull_request Example Instruction: \"Use the 'create_pull_request' tool to create a pull request from branch 'feature-branch-name' to 'develop' branch with the title 'Feature Branch Review' and description 'Please review the changes for the new feature.'\" Benefit: Automates the pull request process, facilitating timely code reviews and improving code quality. Listing Branches for Project Overview: Scenario: A project manager wants a quick overview of all active branches in the repository. Tools Used: list_branches_in_repo Example Instruction: \"Use the 'list_branches_in_repo' tool to list all branches in the repository and present them to the user.\" Benefit: Provides easy access to branch information for project management and monitoring. Setting Active Branch for Focused Operations: Scenario: Before performing a series of file operations, ensure the Agent is working on the correct branch. Tools Used: set_active_branch Example Instruction: \"First, use 'set_active_branch' to set the active branch to 'develop'. Then, use 'read_file' to read 'config.json' from the active branch.\" Benefit: Ensures operations are performed in the intended branch context, reducing errors and improving workflow reliability. Automated Work Item Status Updates: Scenario: Automatically update the status of an Azure DevOps work item (issue) to \"Resolved\" when a linked code change (e.g., pull request merge) is completed in ELITEA, reflecting the issue resolution in the Azure Boards tracking system. Tools Used: set_issue_status Example Instruction: \"Use the 'set_issue_status' tool to update issue number [issue_number]. Set the issue status to 'Resolved'.\" Benefit: Automates work item lifecycle management, ensuring work item statuses are always synchronized with the actual development progress. Reduces manual status updates, improves issue tracking accuracy, and provides a clear audit trail of issue resolution. Retrieving Work Item Details for Context: Scenario: During a task discussion or troubleshooting session, provide users with quick access to detailed information about a specific Azure DevOps work item to understand the task context and status. Tools Used: get_issue Example Instruction: \"Use the 'get_issue' tool to get details for work item number [issue_number]. Summarize the work item title, description, and status for the user.\" Benefit: Provides users with quick, contextual access to detailed work item information directly within ELITEA, improving understanding, facilitating faster problem-solving, and enhancing communication around specific tasks. Automated Work Item Commenting for Updates: Scenario: Allow ELITEA Agents to automatically add comments to Azure DevOps work items to provide status updates, request information, or log actions taken within ELITEA workflows, keeping work item discussions current. Tools Used: add_comments Example Instruction: \"Use the 'add_comments' tool to add a comment to work item number [issue_number] with the text '[comment_text]'.\" Benefit: Streamlines communication within work item tracking, enabling automated updates and feedback directly within Azure DevOps work items. Keeps all stakeholders informed, reduces manual communication overhead, and centralizes work item-related discussions.","title":"Use Cases"},{"location":"how-tos/agents-toolkits/ado_repos_toolkit/#troubleshooting-and-support","text":"","title":"Troubleshooting and Support"},{"location":"how-tos/agents-toolkits/ado_repos_toolkit/#troubleshooting-common-issues","text":"Connection Errors: Problem: ELITEA Agent fails to connect to Azure Repos, resulting in errors during toolkit execution. Troubleshooting Steps: Verify Azure DevOps URL: Double-check that the Azure DevOps URL field in the toolkit configuration is correctly set to your Azure DevOps organization URL (e.g., https://dev.azure.com/YourOrganizationName ). Ensure it includes https://dev.azure.com/ and your organization name. Check Personal Access Token: Ensure that the Personal Access Token you provided is correct, has not expired, and is valid for your Azure DevOps account and project. Carefully re-enter or copy-paste the token to rule out typos. Verify Token Scopes: Review the scopes/permissions granted to your Azure DevOps Personal Access Token in Azure DevOps. Ensure it has the necessary scopes (e.g., vso.code_full , vso.work_full ) for the specific Azure Repos tools your Agent is trying to use. Insufficient scopes are a common cause of connection and permission errors. Network Connectivity: Confirm that both your ELITEA environment and the Azure DevOps instance are connected to the internet and that there are no network connectivity issues, firewalls, or proxies blocking the integration. Test network connectivity to dev.azure.com from your ELITEA environment if possible. Authorization Errors (Permission Denied/Unauthorized): Problem: Agent execution fails with \"Permission Denied\" or \"Unauthorized\" errors when trying to access or modify Azure Repos resources. Troubleshooting Steps: Re-verify Token Scopes: Double-check the scopes/permissions granted to your Azure DevOps Personal Access Token with extreme care. Ensure it grants sufficient access for the specific Azure Repos actions your Agent is trying to perform. For example, creating files or pull requests requires scopes that grant write access ( vso.code_full scope). Project and Repository Access Permissions: Confirm that the Azure DevOps account associated with the Personal Access Token has the necessary access permissions to the specified project and repository within Azure DevOps. Verify that the account is a member of the project and has the necessary roles and permissions (e.g., Contributor or Project Administrator role for write access). Check project settings in Azure DevOps to confirm access levels. Token Revocation or Expiration: Ensure that the Personal Access Token has not been accidentally revoked in Azure DevOps settings or that it has not reached its expiration date if you set one. Generate a new token as a test if unsure. Incorrect Repository or Branch Names: Problem: Agent tools fail to operate on the intended repository or branch, often resulting in \"Repository not found\" or \"Branch not found\" errors. Troubleshooting Steps: Double-Check Repository Name: Carefully and meticulously verify that you have entered the correct Azure Repos Repository name in the toolkit configuration within ELITEA. Pay close attention to capitalization, spelling, and the repository_name . Verify Branch Name Spelling and Case: Ensure that you are using the correct branch name (e.g., main , develop , feature-branch ) in your Agent's instructions when specifying branch-related parameters for Azure Repos tools. Branch names in Git are case-sensitive. Double-check the spelling and capitalization of branch names against your repository in Azure DevOps. Branch Existence: Confirm that the specified branch actually exists in your Azure Repos repository. It's possible the branch name is correct but the branch was deleted or renamed. Invalid Repository ID: Problem: Agent execution fails because of an invalid or incorrect Repository ID in the toolkit configuration. Troubleshooting Steps: Re-obtain Repository ID: Double-check that you have correctly obtained the Repository ID using the curl command as described in the \"Integration Steps\" section of this guide. Follow the steps precisely to ensure you retrieve the correct ID. Verify Repository ID Value: Carefully verify that you have pasted the correct Repository ID into the \"Repository ID\" field in the ELITEA toolkit configuration. Ensure there are no typos, missing characters, or extra spaces in the Repository ID field. Copy and paste the ID again to rule out transcription errors.","title":"Troubleshooting Common Issues"},{"location":"how-tos/agents-toolkits/ado_repos_toolkit/#faqs","text":"Q: Can I use my regular Azure DevOps password directly for the ELITEA integration instead of a Personal Access Token? A: No, using an Azure DevOps Personal Access Token is mandatory and strongly recommended for security. Direct password authentication is not supported for ELITEA's Azure Repos toolkit integration. Personal Access Tokens provide a significantly more secure and controlled method for granting access to external applications like ELITEA, without exposing your primary account credentials. Q: What scopes/permissions are absolutely necessary and minimally sufficient for the Azure DevOps Personal Access Token to work with ELITEA? A: The minimum required scopes depend on the specific Azure Repos tools your ELITEA Agent will be using. For basic read-only access to repositories (e.g., using read_file , list_files ), the vso.code_read scope might suffice. However, for most common integration scenarios involving modifications (e.g., create_file , update_file , create_pull_request ), you will need the vso.code_full scope. For work item (issue) management, include vso.work_full scope. Always adhere to the principle of least privilege and grant only the scopes that are strictly necessary for your Agent's tasks. Refer to the Azure DevOps documentation for detailed scope descriptions. Q: What is the correct format for specifying the Azure DevOps Organization URL in the ELITEA toolkit configuration? A: The Azure DevOps Organization URL must be entered in the format https://dev.azure.com/{YourOrganizationName} . Replace {YourOrganizationName} with your actual Azure DevOps organization name. Ensure you include https://dev.azure.com/ and your organization name. Q: How do I find the Repository ID for my Azure Repos repository? A: You need to use the curl command provided in the \"Integration Steps\" section of this guide to retrieve the Repository ID from the Azure DevOps API. Follow the detailed steps in section 3.2 \"Integration Steps: Configuring the Azure Repos (ADO Repo) Toolkit in ELITEA\" to correctly obtain the Repository ID. Pay close attention to replacing the placeholders with your actual PAT, organization name, and project name in the curl command. Q: Why am I consistently getting \"Permission Denied\" errors, even though I think I have configured everything correctly and granted the right permissions? A: If you are still facing \"Permission Denied\" errors despite careful configuration, systematically re-examine the following: Token Scope Accuracy: Double and triple-check the scopes/permissions granted to your Azure DevOps Personal Access Token in your Azure DevOps user settings. Ensure that the token possesses the exact scopes required for each Azure Repos tool your Agent is attempting to use. Pay close attention to write vs. read permissions and ensure you have granted sufficient scopes. Project and Repository Access Verification: Explicitly verify that the Azure DevOps account associated with the Personal Access Token has the necessary access rights to the specific target project and repository within Azure DevOps itself. Confirm project membership, assigned roles, and repository permissions within the Azure DevOps project settings. Token Validity and Revocation: Double-check that the Personal Access Token is still valid, has not expired, and has not been accidentally revoked in your Azure DevOps settings. Generate a new token as a test if unsure. Typographical Errors: Carefully review all configuration fields in ELITEA, especially the Azure DevOps URL, Organization Name, Project Name, Repository ID, and the Personal Access Token itself for any hidden typographical errors or accidental whitespace. If, after meticulously checking all of these points, you still encounter \"Permission Denied\" errors, please reach out to ELITEA Support with detailed information for further assistance.","title":"FAQs"},{"location":"how-tos/agents-toolkits/ado_repos_toolkit/#support-and-contact-information","text":"If you encounter any issues, have questions, or require further assistance beyond what is covered in this guide regarding the Azure Repos integration or ELITEA Agents in general, please do not hesitate to contact our dedicated ELITEA Support Team. We are here to help you resolve any problems quickly and efficiently and ensure you have a smooth and productive experience with ELITEA. How to Reach ELITEA Support: Email: SupportAlita@epam.com Best Practices for Effective Support Requests: To help us understand and resolve your issue as quickly as possible, please ensure you provide the following information in your support email: ELITEA Environment: Clearly specify the ELITEA environment you are using (e.g., \"Nexus,\" \"Alita Lab,\" \"EYE\"). Project Details: Indicate the Project Name and whether you are working in your Private workspace or a Team project. Detailed Issue Description: Provide a clear, concise, and detailed description of the problem you are encountering. Explain what you were trying to do, what you expected to happen, and what actually occurred. Relevant Configuration Information: To help us diagnose the issue, please include relevant configuration details, such as: Agent Instructions (Screenshot or Text): If the issue is with an Agent, provide a screenshot or copy the text of your Agent's \"Instructions\" field. Toolkit Configurations (Screenshots): If the issue involves the Azure Repos toolkit or other toolkits, include screenshots of the toolkit configuration settings within your Agent. Error Messages (Full Error Text): If you are encountering an error message, please provide the complete error text . In the Chat window, expand the error details and copy the full error message. This detailed error information is crucial for diagnosis. Your Query/Prompt (Exact Text): If the issue is related to Agent execution, provide the exact query or prompt you used to trigger the issue. Before Contacting Support: We encourage you to first explore the resources available within this guide and the broader ELITEA documentation. You may find answers to common questions or solutions to known issues in the documentation.","title":"Support and Contact Information"},{"location":"how-tos/agents-toolkits/ado_repos_toolkit/#useful-links","text":"To further enhance your understanding and skills in integrating Azure Repos (ADO Repos) with ELITEA, here are some helpful resources: Azure DevOps Website : Access the main Azure DevOps platform to create an account or sign in. Azure DevOps Organization URL Example : Example URL to understand the structure of Azure DevOps Organization URLs. ELITEA Secrets Management : Learn how to securely store your Azure DevOps Personal Access Token using ELITEA's Secrets management feature for enhanced security. ELITEA Agents Configuration : Find out more about creating and configuring Agents in ELITEA, where you integrate the Azure Repos toolkit to automate your workflows. ELITEA Support Email : Contact the ELITEA support team for direct assistance with Azure Repos integration or any other questions and issues you may encounter.","title":"Useful Links"},{"location":"how-tos/agents-toolkits/ado_wiki_plan_board_toolkit/","text":"ELITEA Toolkit Guide: Azure DevOps Wiki, Boards, and Plans Integration Introduction Purpose of the Guide This guide is your comprehensive resource for integrating and utilizing the Azure DevOps (ADO) Wiki, Boards, and Plans toolkits within ELITEA. It provides detailed, step-by-step instructions, from setting up your Azure DevOps Personal Access Token to configuring these toolkits in ELITEA and seamlessly incorporating them into your Agents. By following this guide, you will unlock the power of automated knowledge management, streamlined project planning, and enhanced workflow automation within Azure DevOps, all directly from the ELITEA platform. This integration empowers you to leverage AI-driven automation to optimize your DevOps processes, enhance team collaboration, and improve overall project visibility within the Azure DevOps ecosystem. Brief Overview of Azure DevOps (ADO) Services for Wiki, Boards, and Plans ELITEA's integration with Azure DevOps focuses on empowering users to leverage key Azure DevOps services for enhanced project management, knowledge sharing, and workflow automation. This guide specifically covers integration with: Azure Wiki (ADO Wiki): A collaborative, team-based wiki service within Azure DevOps that allows teams to create, share, and manage project documentation, knowledge bases, release notes, meeting minutes, and other essential project information directly within Azure DevOps. Azure Wiki promotes knowledge sharing and collaboration by providing a central, version-controlled repository for project documentation. Azure Boards (ADO Boards): A powerful work tracking and project management service within Azure DevOps that enables teams to plan, organize, track, and manage project tasks, user stories, bugs, features, and epics. Azure Boards provides agile planning tools, customizable dashboards, and workflow automation capabilities to streamline project execution and improve team collaboration. Azure Test Plans (ADO Test Plans): A comprehensive test management solution within Azure DevOps that provides tools for planning, executing, and tracking software testing efforts. Azure Test Plans enables teams to define test plans, create test suites, author test cases, execute manual and automated tests, and track test results, ensuring software quality and release readiness. ELITEA's integration with ADO Wiki, Boards, and Plans allows you to bring these powerful Azure DevOps services directly into your AI-driven workflows, enabling agents to: Centralize Project Information Access: Retrieve and utilize up-to-date information directly from ADO Wiki pages, Boards work items, and Test Plans within ELITEA Agents, providing a unified view of project knowledge and status. Automate Key DevOps Tasks: Automate routine and time-consuming DevOps tasks such as creating and updating wiki pages, managing work items in Boards (creating, updating, searching), and interacting with Test Plans (creating test plans, suites, cases, retrieving test details), freeing up valuable team time for more strategic activities. Enhance Collaboration and Communication: Streamline team collaboration and communication by enabling agents to automatically update work item statuses, add comments to work items and pull requests, and generate reports based on data from Azure DevOps services, ensuring all stakeholders are informed and aligned. Improve Project Visibility and Reporting: Generate insightful reports and extract key metrics from Azure DevOps data using ELITEA Agents, providing data-driven visibility into project status, progress, testing efforts, and overall project health, enabling better decision-making and proactive project management. Toolkit's Account Setup and Configuration Account Creation and Access Account Setup If you do not yet have an Azure DevOps account and organization, please follow these steps to create one, ensuring you have access to Azure DevOps Wiki, Boards, and Plans services: Visit Azure DevOps Website: Open your web browser and navigate to the Azure DevOps website: https://azure.devops.com/ . Start Free or Sign In: Click on the \"Start free\" button to create a new Azure DevOps organization, or click \"Sign in to Azure DevOps\" if you already have an organization and wish to sign in. Create an Organization (If Needed): If you are creating a new organization, click \"Create an Organization\" and follow the prompts to set up your new Azure DevOps organization. You will typically need to provide an organization name, choose a hosting region, and link it to an Azure account (if you have one). If you are signing into an existing organization, click \"Sign in to Azure DevOps\" and log in using your Microsoft account credentials. Enter Account Details: Provide the required details as prompted during the organization creation or sign-in process. This may include your email address, organization name, and region for hosting your Azure DevOps organization. Email Verification (If Prompted): Verify your email address if prompted by the Azure DevOps signup process. This usually involves clicking a confirmation link sent to your email inbox. Log In to Azure DevOps: Log in to the Azure DevOps dashboard using your newly created or existing Microsoft account credentials. Enable Basic Subscription (Essential for Boards, Plans and Wiki): Ensure that you have a Basic Azure DevOps subscription enabled for your account. The Basic subscription is required to access Azure Boards, Azure Repos, Azure Pipelines, Azure Test Plans, and Azure Artifacts. For new organizations, the Basic subscription is typically enabled by default. For existing organizations, you may need to verify or enable it in the organization settings to ensure access to all required services. Add Users and Assign Basic Subscription (If Needed): To grant access to other users within your organization who will be using ELITEA integrations with Azure DevOps Wiki, Boards, and Plans, navigate to your organization settings: Go to https://dev.azure.com/{YourOrganizationName}/_settings/users (replace {YourOrganizationName} with your actual Azure DevOps organization name). Click \"Add users\" . Enter the user's email address or Microsoft account. Select \"Basic\" from the \"Access level\" dropdown to assign a Basic subscription to the user, granting them access to Boards, Plans and Wiki services. Choose the relevant project(s) to grant the user access to. Click \"Add\" to add the user to your Azure DevOps organization. Add User to Project Member Group (If Needed): To ensure newly added users have the necessary permissions within a specific project to access and utilize Wiki, Boards, and Plans: Navigate to \"Project settings\" for your desired project (located at the bottom left of the Azure DevOps interface). Select \"Groups\" under \"Security\" in the Project settings menu. Locate the \"Project Valid Users\" group (or a relevant group for your project's members) and click on the group name. Click on the \"Members\" tab within the group details. Click \"Add users or groups\" . Enter the email address or name of the user you want to add to the project member group and click \"Add\" . Verify Wiki, Boards and Plans Access: After completing user setup, refresh the Azure DevOps page and ensure that the \"Boards\" , \"Wiki\" and \"Test Plans\" features are now enabled and visible for your account within your Azure DevOps project. You should see \"Boards\", \"Repos\", \"Pipelines\", \"Test Plans\", and \"Wiki\" in the left-hand sidebar of your project. This confirms that you have successfully set up your Azure DevOps account and have access to Azure DevOps Services required for ELITEA integration. Note: If the \"Boards\", \"Wiki\", or \"Test Plans\" features are not available, you may need to create a new project within your Azure DevOps organization or verify that these services are enabled for your organization and project in the Azure DevOps organization settings under \"General\" -> \"Services\". Token/API Key Generation: Creating a Personal Access Token in Azure DevOps For secure integration with ELITEA, it is essential to use an Azure DevOps Personal Access Token (PAT) . This method is significantly more secure than using your primary Azure DevOps account password directly and allows you to precisely control the permissions granted to ELITEA for accessing Azure DevOps Wiki, Boards, and Plans services. Follow these steps to generate a Personal Access Token (PAT) in Azure DevOps: Log in to Azure DevOps: Access your Azure DevOps organization by navigating to https://dev.azure.com/ and logging in with your credentials. Access User Settings: Click on the User settings icon, typically located in the top right corner of the Azure DevOps interface, next to your profile picture. From the dropdown menu, select \"Personal access tokens\" . Generate New Token: On the \"Personal Access Tokens\" page, click the \"+ New Token\" button to create a new PAT. Configure Token Details: In the \"Create a new personal access token\" panel, configure the following settings: Name: In the \"Name\" field, enter a descriptive label for your token. For example, use \"ELITEA Wiki Boards Plans Token\" or \"ELITEA Agent Access for ADO Services.\" This label will help you easily identify the purpose of this token in the future. Organization (Optional): Select the Azure DevOps organization for which this token will be valid. In most cases, you will select \"All accessible organizations\" to allow the token to access resources across your organizations. Expiration (Recommended): For enhanced security, it is highly recommended to set an Expiration date for your token. Choose a reasonable validity period that aligns with your security policies. Shorter expiration periods are generally more secure. Scopes - Grant Least Privilege (Crucial for Security): Carefully and deliberately select the scopes or permissions you grant to this token. It is paramount to grant only the minimum necessary permissions required for your ELITEA Agent's intended interactions with Azure DevOps Wiki, Boards, and Plans. Overly permissive tokens pose a significant security risk. For typical ELITEA integration with ADO Wiki, Boards, and Plans, consider these minimal scopes, selecting \"Custom defined\" and then choosing granular scopes: Minimal Scopes for Common Use Cases: Work items: Expand the \"Work items\" section and select: Read: (If your Agent only needs to retrieve information from Azure Boards, select \"Read\") Write: (If your Agent needs to create, update, or manage work items in Azure Boards, select \"Write\". Only include this if your Agent needs to modify Boards content.) Wiki: Expand the \"Wiki\" section and select: Read & write: (Grants read and write access to Azure DevOps Wiki, allowing Agents to both retrieve and modify wiki content. If your Agent only needs to read Wiki content, you can select \"Read\" for tighter security.) Test Management: Expand the \"Test Management\" section and select: Read: (If your Agent only needs to retrieve information from Azure Test Plans, select \"Read\") Read & write: (If your Agent needs to create, update, or manage test plans, test suites, or test cases in Azure Test Plans, select \"Read & write\". Only include write access if your Agent needs to modify Test Plans content.) Important Scope Considerations: Granular Scopes: Whenever possible, opt for granular scopes (e.g., \"Work items - Read\", \"Wiki - Read\") over broader scopes (e.g., \"Work items - Full access\", \"Wiki - Read & write\") to adhere to the principle of least privilege. Tool-Specific Scopes: Select scopes based on the specific Azure DevOps toolkits you intend to use in ELITEA. If you are only using the ADO Wiki toolkit, you only need to grant Wiki scopes, and so on. Avoid granting scopes for toolkits you are not using. Important Security Best Practices: Principle of Least Privilege: Strictly adhere to the principle of least privilege. Grant only the absolute minimum set of scopes necessary for your ELITEA Agent to perform its specific, intended tasks with Azure DevOps Wiki, Boards, and Plans. Avoid granting broad or unnecessary permissions. Avoid Full Access Scopes: Avoid granting full access scopes like \"Full access\" unless absolutely necessary and with a clear and thorough understanding of the significant security implications. Full access scopes provide extensive administrative privileges and should be avoided for integration purposes whenever possible. Regular Token Review and Rotation: Implement a process for regularly reviewing the Personal Access Tokens you have generated, their associated scopes, and their usage. Rotate tokens periodically (generate new tokens and revoke older ones) as a proactive security measure, especially for integrations that handle sensitive data or critical operations within Azure DevOps. Secure Storage: Store the generated Personal Access Token securely, preferably using ELITEA's built-in Secrets Management feature, rather than hardcoding it directly in Agent configurations or less secure storage locations. Create Token: Click the \"Create\" button at the bottom of the panel to generate your Personal Access Token. Securely Copy and Store the Token: Immediately copy the generated token that is displayed in the \"Success!\" pop-up window. This is the only time you will be able to view and copy the full token value. Store it securely using a robust password manager or, ideally, ELITEA's built-in Secrets feature for enhanced security within the ELITEA platform. You will require this token to configure the Azure DevOps Wiki, Boards, and Plans toolkits within ELITEA. System Integration with ELITEA Overview and Usage of Azure DevOps (ADO) Toolkits Integration with ELITEA ELITEA's integration with Azure DevOps provides a suite of toolkits that allow your AI Agents to seamlessly interact with various Azure DevOps services, including Wiki, Boards, and Test Plans. This integration empowers your Agents to: Access Azure DevOps Data: Retrieve and utilize information from Azure DevOps Wiki pages, Boards work items, and Test Plans directly within ELITEA workflows. Automate DevOps Tasks: Automate tasks such as creating and updating wiki pages, managing work items in Boards, and interacting with Test Plans, streamlining your DevOps processes. Enhance Project Management: Integrate AI-powered automation into your project management workflows, improving efficiency and collaboration within Azure DevOps projects. Improve Reporting and Insights: Generate reports and extract insights from Azure DevOps data using ELITEA Agents, providing data-driven visibility into project status and progress. Integration Steps: Configuring Azure DevOps (ADO) Toolkits in ELITEA To integrate Azure DevOps Wiki, Boards, and Test Plans with ELITEA and enable your Agents to interact with these services, follow these configuration steps within ELITEA: Navigate to Agents Menu: In ELITEA, go to the Agents menu and either create a new Agent or edit an existing Agent that you want to integrate with Azure DevOps services. Access Toolkits Section: Within the Agent configuration, scroll down to the \"Tools\" section. Add Toolkit: Click the \"+\" icon under the \"TOOLS\" section to add a new toolkit. Select Azure DevOps Toolkit: From the dropdown list of available toolkits, choose the specific Azure DevOps toolkit you want to configure: \"Azure Wiki (ADO Wiki)\" (for Azure DevOps Wiki) \"Azure Boards (ADO Board)\" (for Azure DevOps Boards) \"Azure Test Plans (ADO Test Plan)\" (for Azure DevOps Test Plans) Configure Azure DevOps Toolkit Settings: Fill in the configuration fields for the selected Azure DevOps toolkit. The configuration steps are similar for all ADO toolkits: Name: Enter a descriptive Name for your Azure DevOps toolkit instance. This name will be used to reference the toolkit within your Agent's instructions (e.g., \"MyAzureWiki\", \"ProjectBoardAccess\", \"TestPlanManager\"). Description: Provide a brief Description of the toolkit's purpose or the specific Azure DevOps service it will access (e.g., \"Access to Project Alpha Wiki\", \"Work item management for Project Beta\"). ADO Organization URL: Enter your Azure DevOps organization URL. Ensure you use the correct format , including your organization name: https://dev.azure.com/{YourOrganizationName} (Replace {YourOrganizationName} with your actual Azure DevOps organization name). Project Name: Enter the Project Name within your Azure DevOps organization that contains the Wiki, Boards, or Test Plans you want to access (e.g., MyProject ). Personal Access Token: Paste the Personal Access Token you generated in Azure DevOps (during the \"Software-Specific Setup\" section of this guide) into the \"Personal Access Token\" field. Important Security Note: For enhanced security, consider using the \"Secret\" option instead and storing your Personal Access Token securely as a Secret within Secrets feature. Enable Desired Tools: In the \"Tools\" section within the Azure DevOps toolkit configuration, check the boxes next to the specific Azure DevOps tools you want to enable for your Agent. Select only the tools that your Agent will actually need to use to minimize unnecessary permissions and maintain security. The available tools vary depending on the specific Azure DevOps toolkit you are configuring (Wiki, Boards, or Test Plans). Refer to the \"Tool Overview\" section below for details on the tools available for each toolkit type. Complete Setup: Click the arrow icon (located at the top right of the toolkit configuration section) to complete the Azure DevOps toolkit setup and return to the main Agent configuration menu. 3.3 Tool Overview: Azure DevOps (ADO) Toolkit Functionalities Once the Azure DevOps toolkits are configured and added to your Agent, you can leverage the following tools within your Agent's instructions to interact with Azure DevOps services: ADO Wiki Tools: Get Wiki: Tool Name: get_wiki Functionality: Retrieves the list of all wikis available in the Azure DevOps Wiki for the specified project. Purpose: Enables Agents to list available wikis for navigation, reporting, or to provide users with a choice of wikis to interact with. Get Wiki Page by Path: Tool Name: get_wiki_page_by_path Functionality: Fetches a specific wiki page from Azure DevOps Wiki using its path within the wiki. Purpose: Retrieve content from specific wiki pages to provide context, answer user questions, or incorporate wiki content into ELITEA workflows. Get Wiki Page by ID: Tool Name: get_wiki_page_by_id Functionality: Fetches a specific wiki page from Azure DevOps Wiki using its unique page ID. Purpose: Retrieve content from specific wiki pages when you have the Page ID available, ensuring accurate retrieval of the intended wiki page. Delete Wiki Page by Path: Tool Name: delete_wiki_page_by_path Functionality: Deletes a specific wiki page from Azure DevOps Wiki using its path. Purpose: Automate wiki page cleanup tasks, removing obsolete or outdated documentation pages based on workflow triggers or user requests. Delete Wiki Page by ID: Tool Name: delete_wiki_page_by_id Functionality: Deletes a specific wiki page from Azure DevOps Wiki using its unique page ID. Purpose: Automate precise wiki page deletion when you have the Page ID, ensuring accurate removal of specific wiki pages. Modify Wiki Page: Tool Name: modify_wiki_page Functionality: Allows modifications to the content of an existing wiki page in Azure DevOps Wiki. Purpose: Automate wiki updates, allowing Agents to dynamically update documentation, add meeting notes, or modify wiki content based on workflow events or user interactions. ADO Board Tools: Search Work Item: Tool Name: search_work_item Functionality: Allows users to search for specific work items within Azure DevOps Boards based on various criteria such as keywords, status, and assigned user. Purpose: Enable Agents to search for work items based on user queries, keywords, or specific criteria, facilitating efficient work item retrieval and information access within ELITEA workflows. Get Work Item: Tool Name: get_work_item Functionality: Retrieves detailed information about a specific work item from Azure DevOps Boards, including its status, description, and associated tasks. Purpose: Allow Agents to fetch detailed work item information to provide context, summarize task status, or incorporate work item details into ELITEA conversations or reports. Create Work Item: Tool Name: create_work_item Functionality: Enables users to create new work items directly within Azure DevOps Boards, specifying details such as title, description, priority, and assigned user. Purpose: Automate work item creation based on ELITEA workflow triggers or user requests, streamlining task management and issue reporting processes. Update Work Item: Tool Name: update_work_item Functionality: Enables users to update fields of existing work items directly within Azure DevOps Boards, specifying fields and values. Purpose: Automate work item updates based on ELITEA workflow triggers or user requests, streamlining task management and issue resolution processes. Link Work Item: Tool Name: link_work_item Functionality: Enables users to create links between two existing work items in Azure DevOps Boards, specifying the target and source work items and link type. Purpose: Automate linking work items to represent relationships between tasks, user stories, bugs, or other work items, enhancing traceability and project management within ELITEA workflows. Get Relation Types: Tool Name: get_relation_types Functionality: Retrieves a list of available relation types for work items in Azure DevOps Boards. Purpose: Allows Agents to dynamically retrieve valid relation types for work items, enabling dynamic link creation and providing users with valid linking options within ELITEA workflows. ADO Test Plan Tools: Create Test Plan: Tool Name: create_test_plan Functionality: Allows users to create new test plans within Azure DevOps Test Plans. Use Case: Automate the creation of test plans for new features, releases, or testing cycles directly from ELITEA workflows. Delete Test Plan: Tool Name: delete_test_plan Functionality: Enables users to delete existing test plans from Azure DevOps Test Plans. Use Case: Automate the removal of obsolete or outdated test plans, keeping your test management environment clean and organized. Get Test Plan: Tool Name: get_test_plan Functionality: Retrieves detailed information about a specific test plan from Azure DevOps Test Plans. Use Case: Allow Agents to fetch test plan details for reporting, analysis, or to provide users with summaries of test plan status and progress within ELITEA. Create Test Suite: Tool Name: create_test_suite Functionality: Allows users to create new test suites within a specific test plan in Azure DevOps Test Plans. Use Case: Automate the creation of test suites to organize test cases logically within test plans, streamlining test planning and management. Delete Test Suite: Tool Name: delete_test_suite Functionality: Enables users to delete existing test suites from Azure DevOps Test Plans. Use Case: Automate the removal of obsolete test suites, keeping your test plans organized and focused on relevant test cases. Get Test Suite: Tool Name: get_test_suite Functionality: Retrieves detailed information about a specific test suite from Azure DevOps Test Plans. Use Case: Enable Agents to fetch test suite details for reporting, analysis, or to provide users with summaries of test suite contents and status within ELITEA. Add Test Case: Tool Name: add_test_case Functionality: Allows users to add new test cases to a specific test suite in Azure DevOps Test Plans. Use Case: Automate the creation of test cases based on requirements, user stories, or other triggers within ELITEA workflows, streamlining test case authoring. Get Test Case: Tool Name: get_test_case Functionality: Retrieves detailed information about a specific test case from Azure DevOps Test Plans. Use Case: Allow Agents to fetch test case details for test execution guidance, reporting, or to provide users with specific test case information within ELITEA. Get Test Cases: Tool Name: get_test_cases Functionality: Retrieves a list of test cases from Azure DevOps Test Plans, allowing for filtering and retrieval of test cases based on various criteria. Use Case: Enables Agents to fetch test case lists for test management, reporting, or to provide users with a selection of test cases within ELITEA workflows. 4. Instructions and Prompts for Using the Azure DevOps (ADO) Toolkits To effectively utilize the Azure DevOps toolkits within your ELITEA Agents, you need to provide clear instructions within the Agent's \"Instructions\" field, telling the Agent how and when to use these tools. General Instruction Structure: When instructing your Agent to use an Azure DevOps toolkit, you will typically follow this pattern: Use the \"[tool_name]\" tool to [describe the action you want to perform] in ADO [Wiki/Boards/Test Plans]. Provide the following parameters: - Parameter 1: <value or description of value> - Parameter 2: <value or description of value> - ... Example Agent Instructions for Azure DevOps (ADO) Toolkits Tools: Agent Instructions for Getting a Wiki Page by Path: Use the \"get_wiki_page_by_path\" tool to retrieve content from a specific wiki page in Azure DevOps Wiki. Provide the following parameters: - Organization Name: \"your-azure-devops-organization-name\" - Project Name: \"your-azure-devops-project-name\" - Wiki Path: \"/path/to/your/wiki/page\" - Wiki Name or ID: \"your-wiki-name-or-id\" Agent Instructions for Creating a Work Item in Azure Boards: Use the \"create_work_item\" tool to create a new User Story work item in Azure Boards. Provide the following parameters: - Organization Name: \"your-azure-devops-organization-name\" - Project Name: \"your-azure-devops-project-name\" - Title: \"Implement new user authentication flow\" - Work Item Type: \"User Story\" - Description: \"As a user, I want to be able to log in using my social media account...\" Agent Instructions for Creating a Test Plan in Azure Test Plans: Use the \"create_test_plan\" tool to create a new test plan in Azure Test Plans. Provide the following parameters: - Organization Name: \"your-azure-devops-organization-name\" - Project Name: \"your-azure-devops-project-name\" - Test Plan Name: \"Regression Tests - Release 1.5\" - Area Path: \"ProjectAlpha\\\\Release 1.5\" Important Considerations for Agent Instructions: Tool Name Accuracy: Ensure you use the correct Tool Name (e.g., \"get_wiki_page_by_path\" , \"create_work_item\" , \"create_test_plan\" ) as listed in the \"Tool Overview\" section. Typos or incorrect tool names will prevent the Agent from using the toolkit correctly. Parameter Clarity: Clearly specify the parameters required for each tool and provide instructions on where the Agent should obtain the values for these parameters (e.g., from user input, from previous steps in the workflow, or hardcoded values). Context and Examples: Provide sufficient context and examples within your Agent's \"Instructions\" to guide the LLM in understanding when and how to use the Azure DevOps toolkit tools effectively within your desired workflow. Azure DevOps Hierarchy: Be mindful of the Azure DevOps organization, project, and Wiki/Boards/Test Plans hierarchy when providing parameters like \"Organization Name,\" \"Project Name,\" \"Wiki Name or ID,\" etc. Ensure these parameters accurately reflect the location of the resource you are trying to access or modify. Best Practices and Use Cases for Azure DevOps (ADO) Integration Best Practices for Efficient Integration Test Integration Thoroughly: After setting up the Azure DevOps toolkits and incorporating them into your Agents, thoroughly test each tool you intend to use to ensure seamless connectivity, correct authentication, and accurate execution of Azure DevOps actions. Monitor Agent Performance and Usage: Regularly monitor the performance of Agents utilizing Azure DevOps toolkits. Track metrics such as task completion success rate, execution time, and error rates to identify any potential issues or areas for optimization in Agent instructions or toolkit configurations. Follow Security Best Practices: Use Personal Access Tokens: Always use Azure DevOps Personal Access Tokens instead of your main account password for integrations. Grant Least Privilege: Grant only the minimum necessary scopes/permissions to the Personal Access Token to limit potential security risks. Securely Store Credentials: Utilize ELITEA's Secrets Management feature to securely store and manage your Azure DevOps Personal Access Tokens instead of hardcoding them directly in Agent configurations. Provide Clear Instructions and Prompts: Craft clear and unambiguous instructions within your ELITEA Agents to guide them in using the Azure DevOps toolkits effectively. Use the prompt examples provided in this guide as a starting point and adapt them to your specific use cases. Start with Simple Use Cases: Begin by implementing Azure DevOps integration for simpler automation tasks, such as retrieving information or updating work item statuses, and gradually progress to more complex workflows as you gain experience and confidence with the toolkits. Use Cases The Azure DevOps toolkits open up a wide range of automation possibilities for project management, documentation, and testing workflows within ELITEA. Here are some compelling use cases categorized by toolkit type: ADO Wiki Toolkit Use Cases: Automated Retrieval of Release Notes for Support: Scenario: During a support interaction, an Agent can automatically retrieve the latest release notes from the project wiki to provide users with up-to-date information on new features and bug fixes. Tools Used: get_wiki_page_by_path Example Instruction: \"Use the 'get_wiki_page_by_path' tool to read the content of the wiki page at path '/Release Notes/Latest Release' and display it to the user.\" Benefit: Enhances support interactions by providing agents with immediate access to current release information, improving support efficiency and user satisfaction. Dynamic Content Creation for Project Dashboards: Scenario: Agents can dynamically generate content for project dashboards within ELITEA by retrieving data from various sources and formatting it into wiki pages for display. Tools Used: modify_wiki_page Example Instruction: \"Use the 'modify_wiki_page' tool to update the wiki page 'Project Dashboard' with the latest build status and test results summarized from other ELITEA workflows.\" Benefit: Enables dynamic and automated dashboard updates, ensuring project dashboards within ELITEA always display the most current information, improving project visibility and awareness. Automated Wiki Cleanup for Content Management: Scenario: Implement a workflow to automatically delete outdated meeting minutes or temporary documentation pages from the project wiki after a certain period to maintain wiki cleanliness. Tools Used: delete_wiki_page_by_path Example Instruction: \"Use the 'delete_wiki_page_by_path' tool to delete wiki pages in the '/Meeting Minutes/Archive' path that are older than 90 days.\" Benefit: Automates wiki maintenance tasks, ensuring the project wiki remains organized, relevant, and easy to navigate by automatically removing outdated content. ADO Board Tools Use Cases: Intelligent Work Item Search for Task Prioritization: Scenario: Developers can use ELITEA Agents to quickly search for work items assigned to them, filtered by priority or status, to efficiently prioritize their tasks for the day. Tools Used: search_work_item Example Instruction: \"Use the 'search_work_item' tool to find all 'Task' work items assigned to me that are currently in 'Active' state and sorted by 'Priority'.\" Benefit: Improves developer efficiency by providing a fast and intelligent way to find and prioritize their work items directly within ELITEA, streamlining daily task management. Contextual Work Item Details for Team Discussions: Scenario: During team meetings or project discussions within ELITEA, Agents can provide immediate access to detailed information about specific work items to provide context and facilitate informed decision-making. Tools Used: get_work_item Example Instruction: \"Use the 'get_work_item' tool to get details for work item with ID [work_item_id] and display the 'Title', 'Description', and 'Status' to the team.\" Benefit: Enhances team collaboration by providing immediate access to relevant work item details within ELITEA, improving context and facilitating more focused and productive discussions. Automated Bug Logging from ELITEA Workflows: Scenario: When automated tests within ELITEA workflows detect a bug, automatically create a new Bug work item in Azure Boards, pre-populated with error details and relevant context from the test execution. Tools Used: create_work_item Example Instruction: \"Use the 'create_work_item' tool to create a new 'Bug' work item with the title 'Automated Test Failure Detected' and description containing the error logs and test details from the failed workflow step.\" Benefit: Streamlines bug reporting and issue tracking by automating bug logging directly from ELITEA workflows, ensuring timely and consistent bug reporting and accelerating the bug triage process. Automated Work Item Updates Based on Workflow Progress: Scenario: As tasks progress through ELITEA workflows, automatically update the status of linked work items in Azure Boards to reflect the current progress and keep project status up-to-date. Tools Used: update_work_item Example Instruction: \"Use the 'update_work_item' tool to update work item with ID [work_item_id]. Set the 'Status' field to 'In Progress' when the workflow reaches the 'Development' stage.\" Benefit: Automates work item status management, ensuring work item statuses are always synchronized with the actual project progress. Reduces manual status updates and improves project tracking accuracy and real-time visibility. Automated Linking of Related Work Items: Scenario: When a new feature request work item is created in ELITEA, automatically link it to related User Story work items in Azure Boards to establish clear relationships and dependencies between features and user stories. Tools Used: link_work_item Example Instruction: \"Use the 'link_work_item' tool to link work item with ID [feature_work_item_id] to work item with ID [user_story_work_item_id] using the 'Relates to' link type.\" Benefit: Enhances work item traceability and project management by automating the creation of links between related work items, providing a clear view of dependencies and relationships between different aspects of the project. ADO Test Plan Tools Use Cases: Automated Test Plan Creation for Release Cycles: Scenario: At the start of each release cycle, automatically create a new test plan in Azure Test Plans, pre-populated with a predefined set of test suites and test cases, to streamline test planning for new releases. Tools Used: create_test_plan , create_test_suite , add_test_case Example Instruction: \"Use the 'create_test_plan' tool to create a new test plan named 'Regression Tests - Release [release_version]'. Then, use 'create_test_suite' and 'add_test_case' to populate the test plan with standard regression test suites and test cases.\" Benefit: Automates test planning and setup for each release cycle, saving significant time and effort in test planning and ensuring consistent test coverage for every release. Dynamic Test Suite Creation Based on Feature Scope: Scenario: When a new feature is developed, automatically create a dedicated test suite within the project's test plan in Azure Test Plans to organize test cases specific to that feature. Tools Used: create_test_suite Example Instruction: \"Use the 'create_test_suite' tool to create a new test suite named 'Feature [feature_name] Tests' within the test plan 'Regression Test Plan'.\" Benefit: Enables dynamic and organized test case management by automatically creating test suites tailored to specific features, improving test organization and focus. Automated Test Case Updates from Requirements Changes: Scenario: When requirements for a specific feature change, automatically update the corresponding test cases in Azure Test Plans to ensure test cases remain aligned with the latest requirements. Tools Used: get_test_case Example Instruction: \"Use the 'get_test_case' tool to retrieve the test case with ID [test_case_id]. Benefit: Automates test case maintenance, ensuring test cases are always up-to-date with the latest requirements, reducing manual effort in test case updates and improving test accuracy. Reporting on Test Plan Status and Progress: Scenario: Project managers can use ELITEA Agents to generate reports summarizing the status and progress of test execution within specific test plans, providing real-time visibility into testing efforts. Tools Used: get_test_plan , get_test_suite , get_test_case Example Instruction: \"Use the 'get_test_plan' tool to get details for test plan 'Regression Test Plan'. Summarize the overall test execution status and progress for each test suite within the plan and present a report to the project manager.\" Benefit: Provides project managers with automated and up-to-date reports on test plan status and progress directly within ELITEA, improving project visibility and enabling data-driven decision-making regarding release readiness. Troubleshooting and Support Troubleshooting Common Issues Connection Errors: Problem: ELITEA Agent fails to connect to Azure DevOps services (Wiki, Boards, Test Plans), resulting in errors during toolkit execution. Possible Solutions: Verify Azure DevOps URL: Double-check that you have entered the correct Azure DevOps organization URL in the toolkit configuration, including https://dev.azure.com/{YourOrganizationName} format. Check Personal Access Token: Ensure that the Personal Access Token you provided is correct, has not expired, and is valid for your Azure DevOps account and project. Verify Token Scopes: Review the scopes/permissions granted to your Personal Access Token. Ensure it has the necessary scopes (e.g., vso.work_full , vso.wiki_full , vso.test_full ) for the Azure DevOps tools your Agent is trying to use. Network Connectivity: Confirm that both your ELITEA environment and your Azure DevOps instance are connected to the internet and that there are no network connectivity issues blocking the integration. Permission Denied Errors: Problem: Agent execution fails with \"Permission Denied\" or \"Unauthorized\" errors when trying to access or modify Azure DevOps resources. Possible Solutions: Verify Token Scopes: Double-check the scopes/permissions granted to your Azure DevOps Personal Access Token. Ensure it has the necessary scopes for the specific Azure DevOps actions your Agent is trying to perform (e.g., vso.work_write scope for creating work items, vso.wiki_write for modifying wiki pages, vso.test_write for managing test plans). Project and User Permissions: Confirm that the Azure DevOps account associated with the Personal Access Token has the required access to the specified project and the specific Azure DevOps services (Wiki, Boards, Test Plans). Verify that the account is a member of the project and has the necessary roles or permissions within Azure DevOps project settings. Incorrect Organization or Project Names: Problem: Agent tools fail to operate on the intended Azure DevOps organization or project. Possible Solutions: Double-Check Organization Name: Carefully verify that you have entered the correct Azure DevOps Organization Name in the toolkit configuration, ensuring it matches your Azure DevOps organization URL (e.g., AlitaTest in https://dev.azure.com/AlitaTest/ ). Pay attention to capitalization and spelling. Verify Project Name: Ensure that you are using the correct Azure DevOps Project Name in the toolkit configuration. Project names are case-sensitive in Azure DevOps. FAQs Q: Can I use my regular Azure DevOps password for the ELITEA integration? A: No, it is strongly recommended to use an Azure DevOps Personal Access Token instead of your main account password for security reasons. Personal Access Tokens provide a more secure and controlled way to grant access to external applications like ELITEA. Q: What scopes/permissions should I grant to the Azure DevOps Personal Access Token? A: Grant only the minimum necessary scopes required for your ELITEA Agent's intended interactions with Azure DevOps services. For typical integration with ADO Wiki, Boards, and Test Plans, the vso.work_full , vso.wiki_full , and vso.test_full scopes are commonly needed. Avoid granting \"Full access\" or unnecessary permissions. Q: What is the correct format for the Azure DevOps Organization URL in the toolkit configuration? A: The Azure DevOps URL should be entered in the format https://dev.azure.com/{YourOrganizationName} . Replace {YourOrganizationName} with your actual Azure DevOps organization name. Q: Why is my Agent getting \"Permission Denied\" errors even though I think I have configured everything correctly? A: Double-check the scopes/permissions granted to your Azure DevOps Personal Access Token. Ensure that the token has the specific scopes required for the Azure DevOps tools your Agent is trying to use (e.g., vso.work_write scope for creating work items, vso.wiki_write for modifying wiki pages, vso.test_write for managing test plans). Also, verify that the Azure DevOps account associated with the token has the necessary access to the target project and the specific Azure DevOps services (Wiki, Boards, Test Plans). Support and Contact Information If you encounter any issues, have questions, or require further assistance beyond what is covered in this guide regarding the Azure DevOps integration or ELITEA Agents in general, please do not hesitate to contact our dedicated ELITEA Support Team. We are here to help you resolve any problems quickly and efficiently and ensure you have a smooth and productive experience with ELITEA. How to Reach ELITEA Support: Email: SupportAlita@epam.com Best Practices for Effective Support Requests: To help us understand and resolve your issue as quickly as possible, please ensure you provide the following information in your support email: ELITEA Environment: Clearly specify the ELITEA environment you are using (e.g., \"Nexus,\" \"Alita Lab,\" \"EYE\"). Project Details: Indicate the Project Name and whether you are working in your Private workspace or a Team project. Detailed Issue Description: Provide a clear, concise, and detailed description of the problem you are encountering. Explain what you were trying to do, what you expected to happen, and what actually occurred. Relevant Configuration Information: To help us diagnose the issue, please include relevant configuration details, such as: Agent Instructions (Screenshot or Text): If the issue is with an Agent, provide a screenshot or copy the text of your Agent's \"Instructions\" field. Toolkit Configurations (Screenshots): If the issue involves the Azure DevOps toolkits or other toolkits, include screenshots of the toolkit configuration settings within your Agent. Error Messages (Full Error Text): If you are encountering an error message, please provide the complete error text . In the Chat window, expand the error details and copy the full error message. This detailed error information is crucial for diagnosis. Your Query/Prompt (Exact Text): If the issue is related to Agent execution, provide the exact query or prompt you used to trigger the issue. Before Contacting Support: We encourage you to first explore the resources available within this guide and the broader ELITEA documentation. You may find answers to common questions or solutions to known issues in the documentation. Useful Links To further enhance your understanding and skills in integrating Azure DevOps with ELITEA, here are some helpful resources: Azure DevOps Website : Access the main Azure DevOps platform to create an account or log in. Azure DevOps Login Page : Directly access the login page for Azure DevOps. ELITEA Secrets Management : Learn how to securely store your Azure DevOps Personal Access Token using ELITEA's Secrets management feature for enhanced security. ELITEA Agents Configuration : Find out more about creating and configuring Agents in ELITEA, where you integrate the Azure DevOps toolkits to automate your workflows. ELITEA Toolkit Guide: Azure Repos (ADO Repo) Integration : Refer to the Azure Repos Integration Guide for detailed information on setting up Azure DevOps accounts, organizations, and Personal Access Tokens. ELITEA Support Email : Contact the ELITEA support team for direct assistance with Azure DevOps integration or any other questions and issues you may encounter.","title":"ADO Wiki, Boards, and Test Plans Integration"},{"location":"how-tos/agents-toolkits/ado_wiki_plan_board_toolkit/#elitea-toolkit-guide-azure-devops-wiki-boards-and-plans-integration","text":"","title":"ELITEA Toolkit Guide: Azure DevOps Wiki, Boards, and Plans Integration"},{"location":"how-tos/agents-toolkits/ado_wiki_plan_board_toolkit/#introduction","text":"","title":"Introduction"},{"location":"how-tos/agents-toolkits/ado_wiki_plan_board_toolkit/#purpose-of-the-guide","text":"This guide is your comprehensive resource for integrating and utilizing the Azure DevOps (ADO) Wiki, Boards, and Plans toolkits within ELITEA. It provides detailed, step-by-step instructions, from setting up your Azure DevOps Personal Access Token to configuring these toolkits in ELITEA and seamlessly incorporating them into your Agents. By following this guide, you will unlock the power of automated knowledge management, streamlined project planning, and enhanced workflow automation within Azure DevOps, all directly from the ELITEA platform. This integration empowers you to leverage AI-driven automation to optimize your DevOps processes, enhance team collaboration, and improve overall project visibility within the Azure DevOps ecosystem.","title":"Purpose of the Guide"},{"location":"how-tos/agents-toolkits/ado_wiki_plan_board_toolkit/#brief-overview-of-azure-devops-ado-services-for-wiki-boards-and-plans","text":"ELITEA's integration with Azure DevOps focuses on empowering users to leverage key Azure DevOps services for enhanced project management, knowledge sharing, and workflow automation. This guide specifically covers integration with: Azure Wiki (ADO Wiki): A collaborative, team-based wiki service within Azure DevOps that allows teams to create, share, and manage project documentation, knowledge bases, release notes, meeting minutes, and other essential project information directly within Azure DevOps. Azure Wiki promotes knowledge sharing and collaboration by providing a central, version-controlled repository for project documentation. Azure Boards (ADO Boards): A powerful work tracking and project management service within Azure DevOps that enables teams to plan, organize, track, and manage project tasks, user stories, bugs, features, and epics. Azure Boards provides agile planning tools, customizable dashboards, and workflow automation capabilities to streamline project execution and improve team collaboration. Azure Test Plans (ADO Test Plans): A comprehensive test management solution within Azure DevOps that provides tools for planning, executing, and tracking software testing efforts. Azure Test Plans enables teams to define test plans, create test suites, author test cases, execute manual and automated tests, and track test results, ensuring software quality and release readiness. ELITEA's integration with ADO Wiki, Boards, and Plans allows you to bring these powerful Azure DevOps services directly into your AI-driven workflows, enabling agents to: Centralize Project Information Access: Retrieve and utilize up-to-date information directly from ADO Wiki pages, Boards work items, and Test Plans within ELITEA Agents, providing a unified view of project knowledge and status. Automate Key DevOps Tasks: Automate routine and time-consuming DevOps tasks such as creating and updating wiki pages, managing work items in Boards (creating, updating, searching), and interacting with Test Plans (creating test plans, suites, cases, retrieving test details), freeing up valuable team time for more strategic activities. Enhance Collaboration and Communication: Streamline team collaboration and communication by enabling agents to automatically update work item statuses, add comments to work items and pull requests, and generate reports based on data from Azure DevOps services, ensuring all stakeholders are informed and aligned. Improve Project Visibility and Reporting: Generate insightful reports and extract key metrics from Azure DevOps data using ELITEA Agents, providing data-driven visibility into project status, progress, testing efforts, and overall project health, enabling better decision-making and proactive project management.","title":"Brief Overview of Azure DevOps (ADO) Services for Wiki, Boards, and Plans"},{"location":"how-tos/agents-toolkits/ado_wiki_plan_board_toolkit/#toolkits-account-setup-and-configuration","text":"","title":"Toolkit's Account Setup and Configuration"},{"location":"how-tos/agents-toolkits/ado_wiki_plan_board_toolkit/#account-creation-and-access","text":"","title":"Account Creation and Access"},{"location":"how-tos/agents-toolkits/ado_wiki_plan_board_toolkit/#account-setup","text":"If you do not yet have an Azure DevOps account and organization, please follow these steps to create one, ensuring you have access to Azure DevOps Wiki, Boards, and Plans services: Visit Azure DevOps Website: Open your web browser and navigate to the Azure DevOps website: https://azure.devops.com/ . Start Free or Sign In: Click on the \"Start free\" button to create a new Azure DevOps organization, or click \"Sign in to Azure DevOps\" if you already have an organization and wish to sign in. Create an Organization (If Needed): If you are creating a new organization, click \"Create an Organization\" and follow the prompts to set up your new Azure DevOps organization. You will typically need to provide an organization name, choose a hosting region, and link it to an Azure account (if you have one). If you are signing into an existing organization, click \"Sign in to Azure DevOps\" and log in using your Microsoft account credentials. Enter Account Details: Provide the required details as prompted during the organization creation or sign-in process. This may include your email address, organization name, and region for hosting your Azure DevOps organization. Email Verification (If Prompted): Verify your email address if prompted by the Azure DevOps signup process. This usually involves clicking a confirmation link sent to your email inbox. Log In to Azure DevOps: Log in to the Azure DevOps dashboard using your newly created or existing Microsoft account credentials. Enable Basic Subscription (Essential for Boards, Plans and Wiki): Ensure that you have a Basic Azure DevOps subscription enabled for your account. The Basic subscription is required to access Azure Boards, Azure Repos, Azure Pipelines, Azure Test Plans, and Azure Artifacts. For new organizations, the Basic subscription is typically enabled by default. For existing organizations, you may need to verify or enable it in the organization settings to ensure access to all required services. Add Users and Assign Basic Subscription (If Needed): To grant access to other users within your organization who will be using ELITEA integrations with Azure DevOps Wiki, Boards, and Plans, navigate to your organization settings: Go to https://dev.azure.com/{YourOrganizationName}/_settings/users (replace {YourOrganizationName} with your actual Azure DevOps organization name). Click \"Add users\" . Enter the user's email address or Microsoft account. Select \"Basic\" from the \"Access level\" dropdown to assign a Basic subscription to the user, granting them access to Boards, Plans and Wiki services. Choose the relevant project(s) to grant the user access to. Click \"Add\" to add the user to your Azure DevOps organization. Add User to Project Member Group (If Needed): To ensure newly added users have the necessary permissions within a specific project to access and utilize Wiki, Boards, and Plans: Navigate to \"Project settings\" for your desired project (located at the bottom left of the Azure DevOps interface). Select \"Groups\" under \"Security\" in the Project settings menu. Locate the \"Project Valid Users\" group (or a relevant group for your project's members) and click on the group name. Click on the \"Members\" tab within the group details. Click \"Add users or groups\" . Enter the email address or name of the user you want to add to the project member group and click \"Add\" . Verify Wiki, Boards and Plans Access: After completing user setup, refresh the Azure DevOps page and ensure that the \"Boards\" , \"Wiki\" and \"Test Plans\" features are now enabled and visible for your account within your Azure DevOps project. You should see \"Boards\", \"Repos\", \"Pipelines\", \"Test Plans\", and \"Wiki\" in the left-hand sidebar of your project. This confirms that you have successfully set up your Azure DevOps account and have access to Azure DevOps Services required for ELITEA integration. Note: If the \"Boards\", \"Wiki\", or \"Test Plans\" features are not available, you may need to create a new project within your Azure DevOps organization or verify that these services are enabled for your organization and project in the Azure DevOps organization settings under \"General\" -> \"Services\".","title":"Account Setup"},{"location":"how-tos/agents-toolkits/ado_wiki_plan_board_toolkit/#tokenapi-key-generation-creating-a-personal-access-token-in-azure-devops","text":"For secure integration with ELITEA, it is essential to use an Azure DevOps Personal Access Token (PAT) . This method is significantly more secure than using your primary Azure DevOps account password directly and allows you to precisely control the permissions granted to ELITEA for accessing Azure DevOps Wiki, Boards, and Plans services. Follow these steps to generate a Personal Access Token (PAT) in Azure DevOps: Log in to Azure DevOps: Access your Azure DevOps organization by navigating to https://dev.azure.com/ and logging in with your credentials. Access User Settings: Click on the User settings icon, typically located in the top right corner of the Azure DevOps interface, next to your profile picture. From the dropdown menu, select \"Personal access tokens\" . Generate New Token: On the \"Personal Access Tokens\" page, click the \"+ New Token\" button to create a new PAT. Configure Token Details: In the \"Create a new personal access token\" panel, configure the following settings: Name: In the \"Name\" field, enter a descriptive label for your token. For example, use \"ELITEA Wiki Boards Plans Token\" or \"ELITEA Agent Access for ADO Services.\" This label will help you easily identify the purpose of this token in the future. Organization (Optional): Select the Azure DevOps organization for which this token will be valid. In most cases, you will select \"All accessible organizations\" to allow the token to access resources across your organizations. Expiration (Recommended): For enhanced security, it is highly recommended to set an Expiration date for your token. Choose a reasonable validity period that aligns with your security policies. Shorter expiration periods are generally more secure. Scopes - Grant Least Privilege (Crucial for Security): Carefully and deliberately select the scopes or permissions you grant to this token. It is paramount to grant only the minimum necessary permissions required for your ELITEA Agent's intended interactions with Azure DevOps Wiki, Boards, and Plans. Overly permissive tokens pose a significant security risk. For typical ELITEA integration with ADO Wiki, Boards, and Plans, consider these minimal scopes, selecting \"Custom defined\" and then choosing granular scopes: Minimal Scopes for Common Use Cases: Work items: Expand the \"Work items\" section and select: Read: (If your Agent only needs to retrieve information from Azure Boards, select \"Read\") Write: (If your Agent needs to create, update, or manage work items in Azure Boards, select \"Write\". Only include this if your Agent needs to modify Boards content.) Wiki: Expand the \"Wiki\" section and select: Read & write: (Grants read and write access to Azure DevOps Wiki, allowing Agents to both retrieve and modify wiki content. If your Agent only needs to read Wiki content, you can select \"Read\" for tighter security.) Test Management: Expand the \"Test Management\" section and select: Read: (If your Agent only needs to retrieve information from Azure Test Plans, select \"Read\") Read & write: (If your Agent needs to create, update, or manage test plans, test suites, or test cases in Azure Test Plans, select \"Read & write\". Only include write access if your Agent needs to modify Test Plans content.) Important Scope Considerations: Granular Scopes: Whenever possible, opt for granular scopes (e.g., \"Work items - Read\", \"Wiki - Read\") over broader scopes (e.g., \"Work items - Full access\", \"Wiki - Read & write\") to adhere to the principle of least privilege. Tool-Specific Scopes: Select scopes based on the specific Azure DevOps toolkits you intend to use in ELITEA. If you are only using the ADO Wiki toolkit, you only need to grant Wiki scopes, and so on. Avoid granting scopes for toolkits you are not using. Important Security Best Practices: Principle of Least Privilege: Strictly adhere to the principle of least privilege. Grant only the absolute minimum set of scopes necessary for your ELITEA Agent to perform its specific, intended tasks with Azure DevOps Wiki, Boards, and Plans. Avoid granting broad or unnecessary permissions. Avoid Full Access Scopes: Avoid granting full access scopes like \"Full access\" unless absolutely necessary and with a clear and thorough understanding of the significant security implications. Full access scopes provide extensive administrative privileges and should be avoided for integration purposes whenever possible. Regular Token Review and Rotation: Implement a process for regularly reviewing the Personal Access Tokens you have generated, their associated scopes, and their usage. Rotate tokens periodically (generate new tokens and revoke older ones) as a proactive security measure, especially for integrations that handle sensitive data or critical operations within Azure DevOps. Secure Storage: Store the generated Personal Access Token securely, preferably using ELITEA's built-in Secrets Management feature, rather than hardcoding it directly in Agent configurations or less secure storage locations. Create Token: Click the \"Create\" button at the bottom of the panel to generate your Personal Access Token. Securely Copy and Store the Token: Immediately copy the generated token that is displayed in the \"Success!\" pop-up window. This is the only time you will be able to view and copy the full token value. Store it securely using a robust password manager or, ideally, ELITEA's built-in Secrets feature for enhanced security within the ELITEA platform. You will require this token to configure the Azure DevOps Wiki, Boards, and Plans toolkits within ELITEA.","title":"Token/API Key Generation: Creating a Personal Access Token in Azure DevOps"},{"location":"how-tos/agents-toolkits/ado_wiki_plan_board_toolkit/#system-integration-with-elitea","text":"","title":"System Integration with ELITEA"},{"location":"how-tos/agents-toolkits/ado_wiki_plan_board_toolkit/#overview-and-usage-of-azure-devops-ado-toolkits-integration-with-elitea","text":"ELITEA's integration with Azure DevOps provides a suite of toolkits that allow your AI Agents to seamlessly interact with various Azure DevOps services, including Wiki, Boards, and Test Plans. This integration empowers your Agents to: Access Azure DevOps Data: Retrieve and utilize information from Azure DevOps Wiki pages, Boards work items, and Test Plans directly within ELITEA workflows. Automate DevOps Tasks: Automate tasks such as creating and updating wiki pages, managing work items in Boards, and interacting with Test Plans, streamlining your DevOps processes. Enhance Project Management: Integrate AI-powered automation into your project management workflows, improving efficiency and collaboration within Azure DevOps projects. Improve Reporting and Insights: Generate reports and extract insights from Azure DevOps data using ELITEA Agents, providing data-driven visibility into project status and progress.","title":"Overview and Usage of Azure DevOps (ADO) Toolkits Integration with ELITEA"},{"location":"how-tos/agents-toolkits/ado_wiki_plan_board_toolkit/#integration-steps-configuring-azure-devops-ado-toolkits-in-elitea","text":"To integrate Azure DevOps Wiki, Boards, and Test Plans with ELITEA and enable your Agents to interact with these services, follow these configuration steps within ELITEA: Navigate to Agents Menu: In ELITEA, go to the Agents menu and either create a new Agent or edit an existing Agent that you want to integrate with Azure DevOps services. Access Toolkits Section: Within the Agent configuration, scroll down to the \"Tools\" section. Add Toolkit: Click the \"+\" icon under the \"TOOLS\" section to add a new toolkit. Select Azure DevOps Toolkit: From the dropdown list of available toolkits, choose the specific Azure DevOps toolkit you want to configure: \"Azure Wiki (ADO Wiki)\" (for Azure DevOps Wiki) \"Azure Boards (ADO Board)\" (for Azure DevOps Boards) \"Azure Test Plans (ADO Test Plan)\" (for Azure DevOps Test Plans) Configure Azure DevOps Toolkit Settings: Fill in the configuration fields for the selected Azure DevOps toolkit. The configuration steps are similar for all ADO toolkits: Name: Enter a descriptive Name for your Azure DevOps toolkit instance. This name will be used to reference the toolkit within your Agent's instructions (e.g., \"MyAzureWiki\", \"ProjectBoardAccess\", \"TestPlanManager\"). Description: Provide a brief Description of the toolkit's purpose or the specific Azure DevOps service it will access (e.g., \"Access to Project Alpha Wiki\", \"Work item management for Project Beta\"). ADO Organization URL: Enter your Azure DevOps organization URL. Ensure you use the correct format , including your organization name: https://dev.azure.com/{YourOrganizationName} (Replace {YourOrganizationName} with your actual Azure DevOps organization name). Project Name: Enter the Project Name within your Azure DevOps organization that contains the Wiki, Boards, or Test Plans you want to access (e.g., MyProject ). Personal Access Token: Paste the Personal Access Token you generated in Azure DevOps (during the \"Software-Specific Setup\" section of this guide) into the \"Personal Access Token\" field. Important Security Note: For enhanced security, consider using the \"Secret\" option instead and storing your Personal Access Token securely as a Secret within Secrets feature. Enable Desired Tools: In the \"Tools\" section within the Azure DevOps toolkit configuration, check the boxes next to the specific Azure DevOps tools you want to enable for your Agent. Select only the tools that your Agent will actually need to use to minimize unnecessary permissions and maintain security. The available tools vary depending on the specific Azure DevOps toolkit you are configuring (Wiki, Boards, or Test Plans). Refer to the \"Tool Overview\" section below for details on the tools available for each toolkit type. Complete Setup: Click the arrow icon (located at the top right of the toolkit configuration section) to complete the Azure DevOps toolkit setup and return to the main Agent configuration menu.","title":"Integration Steps: Configuring Azure DevOps (ADO) Toolkits in ELITEA"},{"location":"how-tos/agents-toolkits/ado_wiki_plan_board_toolkit/#33-tool-overview-azure-devops-ado-toolkit-functionalities","text":"Once the Azure DevOps toolkits are configured and added to your Agent, you can leverage the following tools within your Agent's instructions to interact with Azure DevOps services:","title":"3.3 Tool Overview: Azure DevOps (ADO) Toolkit Functionalities"},{"location":"how-tos/agents-toolkits/ado_wiki_plan_board_toolkit/#ado-wiki-tools","text":"Get Wiki: Tool Name: get_wiki Functionality: Retrieves the list of all wikis available in the Azure DevOps Wiki for the specified project. Purpose: Enables Agents to list available wikis for navigation, reporting, or to provide users with a choice of wikis to interact with. Get Wiki Page by Path: Tool Name: get_wiki_page_by_path Functionality: Fetches a specific wiki page from Azure DevOps Wiki using its path within the wiki. Purpose: Retrieve content from specific wiki pages to provide context, answer user questions, or incorporate wiki content into ELITEA workflows. Get Wiki Page by ID: Tool Name: get_wiki_page_by_id Functionality: Fetches a specific wiki page from Azure DevOps Wiki using its unique page ID. Purpose: Retrieve content from specific wiki pages when you have the Page ID available, ensuring accurate retrieval of the intended wiki page. Delete Wiki Page by Path: Tool Name: delete_wiki_page_by_path Functionality: Deletes a specific wiki page from Azure DevOps Wiki using its path. Purpose: Automate wiki page cleanup tasks, removing obsolete or outdated documentation pages based on workflow triggers or user requests. Delete Wiki Page by ID: Tool Name: delete_wiki_page_by_id Functionality: Deletes a specific wiki page from Azure DevOps Wiki using its unique page ID. Purpose: Automate precise wiki page deletion when you have the Page ID, ensuring accurate removal of specific wiki pages. Modify Wiki Page: Tool Name: modify_wiki_page Functionality: Allows modifications to the content of an existing wiki page in Azure DevOps Wiki. Purpose: Automate wiki updates, allowing Agents to dynamically update documentation, add meeting notes, or modify wiki content based on workflow events or user interactions.","title":"ADO Wiki Tools:"},{"location":"how-tos/agents-toolkits/ado_wiki_plan_board_toolkit/#ado-board-tools","text":"Search Work Item: Tool Name: search_work_item Functionality: Allows users to search for specific work items within Azure DevOps Boards based on various criteria such as keywords, status, and assigned user. Purpose: Enable Agents to search for work items based on user queries, keywords, or specific criteria, facilitating efficient work item retrieval and information access within ELITEA workflows. Get Work Item: Tool Name: get_work_item Functionality: Retrieves detailed information about a specific work item from Azure DevOps Boards, including its status, description, and associated tasks. Purpose: Allow Agents to fetch detailed work item information to provide context, summarize task status, or incorporate work item details into ELITEA conversations or reports. Create Work Item: Tool Name: create_work_item Functionality: Enables users to create new work items directly within Azure DevOps Boards, specifying details such as title, description, priority, and assigned user. Purpose: Automate work item creation based on ELITEA workflow triggers or user requests, streamlining task management and issue reporting processes. Update Work Item: Tool Name: update_work_item Functionality: Enables users to update fields of existing work items directly within Azure DevOps Boards, specifying fields and values. Purpose: Automate work item updates based on ELITEA workflow triggers or user requests, streamlining task management and issue resolution processes. Link Work Item: Tool Name: link_work_item Functionality: Enables users to create links between two existing work items in Azure DevOps Boards, specifying the target and source work items and link type. Purpose: Automate linking work items to represent relationships between tasks, user stories, bugs, or other work items, enhancing traceability and project management within ELITEA workflows. Get Relation Types: Tool Name: get_relation_types Functionality: Retrieves a list of available relation types for work items in Azure DevOps Boards. Purpose: Allows Agents to dynamically retrieve valid relation types for work items, enabling dynamic link creation and providing users with valid linking options within ELITEA workflows.","title":"ADO Board Tools:"},{"location":"how-tos/agents-toolkits/ado_wiki_plan_board_toolkit/#ado-test-plan-tools","text":"Create Test Plan: Tool Name: create_test_plan Functionality: Allows users to create new test plans within Azure DevOps Test Plans. Use Case: Automate the creation of test plans for new features, releases, or testing cycles directly from ELITEA workflows. Delete Test Plan: Tool Name: delete_test_plan Functionality: Enables users to delete existing test plans from Azure DevOps Test Plans. Use Case: Automate the removal of obsolete or outdated test plans, keeping your test management environment clean and organized. Get Test Plan: Tool Name: get_test_plan Functionality: Retrieves detailed information about a specific test plan from Azure DevOps Test Plans. Use Case: Allow Agents to fetch test plan details for reporting, analysis, or to provide users with summaries of test plan status and progress within ELITEA. Create Test Suite: Tool Name: create_test_suite Functionality: Allows users to create new test suites within a specific test plan in Azure DevOps Test Plans. Use Case: Automate the creation of test suites to organize test cases logically within test plans, streamlining test planning and management. Delete Test Suite: Tool Name: delete_test_suite Functionality: Enables users to delete existing test suites from Azure DevOps Test Plans. Use Case: Automate the removal of obsolete test suites, keeping your test plans organized and focused on relevant test cases. Get Test Suite: Tool Name: get_test_suite Functionality: Retrieves detailed information about a specific test suite from Azure DevOps Test Plans. Use Case: Enable Agents to fetch test suite details for reporting, analysis, or to provide users with summaries of test suite contents and status within ELITEA. Add Test Case: Tool Name: add_test_case Functionality: Allows users to add new test cases to a specific test suite in Azure DevOps Test Plans. Use Case: Automate the creation of test cases based on requirements, user stories, or other triggers within ELITEA workflows, streamlining test case authoring. Get Test Case: Tool Name: get_test_case Functionality: Retrieves detailed information about a specific test case from Azure DevOps Test Plans. Use Case: Allow Agents to fetch test case details for test execution guidance, reporting, or to provide users with specific test case information within ELITEA. Get Test Cases: Tool Name: get_test_cases Functionality: Retrieves a list of test cases from Azure DevOps Test Plans, allowing for filtering and retrieval of test cases based on various criteria. Use Case: Enables Agents to fetch test case lists for test management, reporting, or to provide users with a selection of test cases within ELITEA workflows.","title":"ADO Test Plan Tools:"},{"location":"how-tos/agents-toolkits/ado_wiki_plan_board_toolkit/#4-instructions-and-prompts-for-using-the-azure-devops-ado-toolkits","text":"To effectively utilize the Azure DevOps toolkits within your ELITEA Agents, you need to provide clear instructions within the Agent's \"Instructions\" field, telling the Agent how and when to use these tools. General Instruction Structure: When instructing your Agent to use an Azure DevOps toolkit, you will typically follow this pattern: Use the \"[tool_name]\" tool to [describe the action you want to perform] in ADO [Wiki/Boards/Test Plans]. Provide the following parameters: - Parameter 1: <value or description of value> - Parameter 2: <value or description of value> - ... Example Agent Instructions for Azure DevOps (ADO) Toolkits Tools: Agent Instructions for Getting a Wiki Page by Path: Use the \"get_wiki_page_by_path\" tool to retrieve content from a specific wiki page in Azure DevOps Wiki. Provide the following parameters: - Organization Name: \"your-azure-devops-organization-name\" - Project Name: \"your-azure-devops-project-name\" - Wiki Path: \"/path/to/your/wiki/page\" - Wiki Name or ID: \"your-wiki-name-or-id\" Agent Instructions for Creating a Work Item in Azure Boards: Use the \"create_work_item\" tool to create a new User Story work item in Azure Boards. Provide the following parameters: - Organization Name: \"your-azure-devops-organization-name\" - Project Name: \"your-azure-devops-project-name\" - Title: \"Implement new user authentication flow\" - Work Item Type: \"User Story\" - Description: \"As a user, I want to be able to log in using my social media account...\" Agent Instructions for Creating a Test Plan in Azure Test Plans: Use the \"create_test_plan\" tool to create a new test plan in Azure Test Plans. Provide the following parameters: - Organization Name: \"your-azure-devops-organization-name\" - Project Name: \"your-azure-devops-project-name\" - Test Plan Name: \"Regression Tests - Release 1.5\" - Area Path: \"ProjectAlpha\\\\Release 1.5\" Important Considerations for Agent Instructions: Tool Name Accuracy: Ensure you use the correct Tool Name (e.g., \"get_wiki_page_by_path\" , \"create_work_item\" , \"create_test_plan\" ) as listed in the \"Tool Overview\" section. Typos or incorrect tool names will prevent the Agent from using the toolkit correctly. Parameter Clarity: Clearly specify the parameters required for each tool and provide instructions on where the Agent should obtain the values for these parameters (e.g., from user input, from previous steps in the workflow, or hardcoded values). Context and Examples: Provide sufficient context and examples within your Agent's \"Instructions\" to guide the LLM in understanding when and how to use the Azure DevOps toolkit tools effectively within your desired workflow. Azure DevOps Hierarchy: Be mindful of the Azure DevOps organization, project, and Wiki/Boards/Test Plans hierarchy when providing parameters like \"Organization Name,\" \"Project Name,\" \"Wiki Name or ID,\" etc. Ensure these parameters accurately reflect the location of the resource you are trying to access or modify.","title":"4. Instructions and Prompts for Using the Azure DevOps (ADO) Toolkits"},{"location":"how-tos/agents-toolkits/ado_wiki_plan_board_toolkit/#best-practices-and-use-cases-for-azure-devops-ado-integration","text":"","title":"Best Practices and Use Cases for Azure DevOps (ADO) Integration"},{"location":"how-tos/agents-toolkits/ado_wiki_plan_board_toolkit/#best-practices-for-efficient-integration","text":"Test Integration Thoroughly: After setting up the Azure DevOps toolkits and incorporating them into your Agents, thoroughly test each tool you intend to use to ensure seamless connectivity, correct authentication, and accurate execution of Azure DevOps actions. Monitor Agent Performance and Usage: Regularly monitor the performance of Agents utilizing Azure DevOps toolkits. Track metrics such as task completion success rate, execution time, and error rates to identify any potential issues or areas for optimization in Agent instructions or toolkit configurations. Follow Security Best Practices: Use Personal Access Tokens: Always use Azure DevOps Personal Access Tokens instead of your main account password for integrations. Grant Least Privilege: Grant only the minimum necessary scopes/permissions to the Personal Access Token to limit potential security risks. Securely Store Credentials: Utilize ELITEA's Secrets Management feature to securely store and manage your Azure DevOps Personal Access Tokens instead of hardcoding them directly in Agent configurations. Provide Clear Instructions and Prompts: Craft clear and unambiguous instructions within your ELITEA Agents to guide them in using the Azure DevOps toolkits effectively. Use the prompt examples provided in this guide as a starting point and adapt them to your specific use cases. Start with Simple Use Cases: Begin by implementing Azure DevOps integration for simpler automation tasks, such as retrieving information or updating work item statuses, and gradually progress to more complex workflows as you gain experience and confidence with the toolkits.","title":"Best Practices for Efficient Integration"},{"location":"how-tos/agents-toolkits/ado_wiki_plan_board_toolkit/#use-cases","text":"The Azure DevOps toolkits open up a wide range of automation possibilities for project management, documentation, and testing workflows within ELITEA. Here are some compelling use cases categorized by toolkit type: ADO Wiki Toolkit Use Cases: Automated Retrieval of Release Notes for Support: Scenario: During a support interaction, an Agent can automatically retrieve the latest release notes from the project wiki to provide users with up-to-date information on new features and bug fixes. Tools Used: get_wiki_page_by_path Example Instruction: \"Use the 'get_wiki_page_by_path' tool to read the content of the wiki page at path '/Release Notes/Latest Release' and display it to the user.\" Benefit: Enhances support interactions by providing agents with immediate access to current release information, improving support efficiency and user satisfaction. Dynamic Content Creation for Project Dashboards: Scenario: Agents can dynamically generate content for project dashboards within ELITEA by retrieving data from various sources and formatting it into wiki pages for display. Tools Used: modify_wiki_page Example Instruction: \"Use the 'modify_wiki_page' tool to update the wiki page 'Project Dashboard' with the latest build status and test results summarized from other ELITEA workflows.\" Benefit: Enables dynamic and automated dashboard updates, ensuring project dashboards within ELITEA always display the most current information, improving project visibility and awareness. Automated Wiki Cleanup for Content Management: Scenario: Implement a workflow to automatically delete outdated meeting minutes or temporary documentation pages from the project wiki after a certain period to maintain wiki cleanliness. Tools Used: delete_wiki_page_by_path Example Instruction: \"Use the 'delete_wiki_page_by_path' tool to delete wiki pages in the '/Meeting Minutes/Archive' path that are older than 90 days.\" Benefit: Automates wiki maintenance tasks, ensuring the project wiki remains organized, relevant, and easy to navigate by automatically removing outdated content. ADO Board Tools Use Cases: Intelligent Work Item Search for Task Prioritization: Scenario: Developers can use ELITEA Agents to quickly search for work items assigned to them, filtered by priority or status, to efficiently prioritize their tasks for the day. Tools Used: search_work_item Example Instruction: \"Use the 'search_work_item' tool to find all 'Task' work items assigned to me that are currently in 'Active' state and sorted by 'Priority'.\" Benefit: Improves developer efficiency by providing a fast and intelligent way to find and prioritize their work items directly within ELITEA, streamlining daily task management. Contextual Work Item Details for Team Discussions: Scenario: During team meetings or project discussions within ELITEA, Agents can provide immediate access to detailed information about specific work items to provide context and facilitate informed decision-making. Tools Used: get_work_item Example Instruction: \"Use the 'get_work_item' tool to get details for work item with ID [work_item_id] and display the 'Title', 'Description', and 'Status' to the team.\" Benefit: Enhances team collaboration by providing immediate access to relevant work item details within ELITEA, improving context and facilitating more focused and productive discussions. Automated Bug Logging from ELITEA Workflows: Scenario: When automated tests within ELITEA workflows detect a bug, automatically create a new Bug work item in Azure Boards, pre-populated with error details and relevant context from the test execution. Tools Used: create_work_item Example Instruction: \"Use the 'create_work_item' tool to create a new 'Bug' work item with the title 'Automated Test Failure Detected' and description containing the error logs and test details from the failed workflow step.\" Benefit: Streamlines bug reporting and issue tracking by automating bug logging directly from ELITEA workflows, ensuring timely and consistent bug reporting and accelerating the bug triage process. Automated Work Item Updates Based on Workflow Progress: Scenario: As tasks progress through ELITEA workflows, automatically update the status of linked work items in Azure Boards to reflect the current progress and keep project status up-to-date. Tools Used: update_work_item Example Instruction: \"Use the 'update_work_item' tool to update work item with ID [work_item_id]. Set the 'Status' field to 'In Progress' when the workflow reaches the 'Development' stage.\" Benefit: Automates work item status management, ensuring work item statuses are always synchronized with the actual project progress. Reduces manual status updates and improves project tracking accuracy and real-time visibility. Automated Linking of Related Work Items: Scenario: When a new feature request work item is created in ELITEA, automatically link it to related User Story work items in Azure Boards to establish clear relationships and dependencies between features and user stories. Tools Used: link_work_item Example Instruction: \"Use the 'link_work_item' tool to link work item with ID [feature_work_item_id] to work item with ID [user_story_work_item_id] using the 'Relates to' link type.\" Benefit: Enhances work item traceability and project management by automating the creation of links between related work items, providing a clear view of dependencies and relationships between different aspects of the project. ADO Test Plan Tools Use Cases: Automated Test Plan Creation for Release Cycles: Scenario: At the start of each release cycle, automatically create a new test plan in Azure Test Plans, pre-populated with a predefined set of test suites and test cases, to streamline test planning for new releases. Tools Used: create_test_plan , create_test_suite , add_test_case Example Instruction: \"Use the 'create_test_plan' tool to create a new test plan named 'Regression Tests - Release [release_version]'. Then, use 'create_test_suite' and 'add_test_case' to populate the test plan with standard regression test suites and test cases.\" Benefit: Automates test planning and setup for each release cycle, saving significant time and effort in test planning and ensuring consistent test coverage for every release. Dynamic Test Suite Creation Based on Feature Scope: Scenario: When a new feature is developed, automatically create a dedicated test suite within the project's test plan in Azure Test Plans to organize test cases specific to that feature. Tools Used: create_test_suite Example Instruction: \"Use the 'create_test_suite' tool to create a new test suite named 'Feature [feature_name] Tests' within the test plan 'Regression Test Plan'.\" Benefit: Enables dynamic and organized test case management by automatically creating test suites tailored to specific features, improving test organization and focus. Automated Test Case Updates from Requirements Changes: Scenario: When requirements for a specific feature change, automatically update the corresponding test cases in Azure Test Plans to ensure test cases remain aligned with the latest requirements. Tools Used: get_test_case Example Instruction: \"Use the 'get_test_case' tool to retrieve the test case with ID [test_case_id]. Benefit: Automates test case maintenance, ensuring test cases are always up-to-date with the latest requirements, reducing manual effort in test case updates and improving test accuracy. Reporting on Test Plan Status and Progress: Scenario: Project managers can use ELITEA Agents to generate reports summarizing the status and progress of test execution within specific test plans, providing real-time visibility into testing efforts. Tools Used: get_test_plan , get_test_suite , get_test_case Example Instruction: \"Use the 'get_test_plan' tool to get details for test plan 'Regression Test Plan'. Summarize the overall test execution status and progress for each test suite within the plan and present a report to the project manager.\" Benefit: Provides project managers with automated and up-to-date reports on test plan status and progress directly within ELITEA, improving project visibility and enabling data-driven decision-making regarding release readiness.","title":"Use Cases"},{"location":"how-tos/agents-toolkits/ado_wiki_plan_board_toolkit/#troubleshooting-and-support","text":"","title":"Troubleshooting and Support"},{"location":"how-tos/agents-toolkits/ado_wiki_plan_board_toolkit/#troubleshooting-common-issues","text":"Connection Errors: Problem: ELITEA Agent fails to connect to Azure DevOps services (Wiki, Boards, Test Plans), resulting in errors during toolkit execution. Possible Solutions: Verify Azure DevOps URL: Double-check that you have entered the correct Azure DevOps organization URL in the toolkit configuration, including https://dev.azure.com/{YourOrganizationName} format. Check Personal Access Token: Ensure that the Personal Access Token you provided is correct, has not expired, and is valid for your Azure DevOps account and project. Verify Token Scopes: Review the scopes/permissions granted to your Personal Access Token. Ensure it has the necessary scopes (e.g., vso.work_full , vso.wiki_full , vso.test_full ) for the Azure DevOps tools your Agent is trying to use. Network Connectivity: Confirm that both your ELITEA environment and your Azure DevOps instance are connected to the internet and that there are no network connectivity issues blocking the integration. Permission Denied Errors: Problem: Agent execution fails with \"Permission Denied\" or \"Unauthorized\" errors when trying to access or modify Azure DevOps resources. Possible Solutions: Verify Token Scopes: Double-check the scopes/permissions granted to your Azure DevOps Personal Access Token. Ensure it has the necessary scopes for the specific Azure DevOps actions your Agent is trying to perform (e.g., vso.work_write scope for creating work items, vso.wiki_write for modifying wiki pages, vso.test_write for managing test plans). Project and User Permissions: Confirm that the Azure DevOps account associated with the Personal Access Token has the required access to the specified project and the specific Azure DevOps services (Wiki, Boards, Test Plans). Verify that the account is a member of the project and has the necessary roles or permissions within Azure DevOps project settings. Incorrect Organization or Project Names: Problem: Agent tools fail to operate on the intended Azure DevOps organization or project. Possible Solutions: Double-Check Organization Name: Carefully verify that you have entered the correct Azure DevOps Organization Name in the toolkit configuration, ensuring it matches your Azure DevOps organization URL (e.g., AlitaTest in https://dev.azure.com/AlitaTest/ ). Pay attention to capitalization and spelling. Verify Project Name: Ensure that you are using the correct Azure DevOps Project Name in the toolkit configuration. Project names are case-sensitive in Azure DevOps.","title":"Troubleshooting Common Issues"},{"location":"how-tos/agents-toolkits/ado_wiki_plan_board_toolkit/#faqs","text":"Q: Can I use my regular Azure DevOps password for the ELITEA integration? A: No, it is strongly recommended to use an Azure DevOps Personal Access Token instead of your main account password for security reasons. Personal Access Tokens provide a more secure and controlled way to grant access to external applications like ELITEA. Q: What scopes/permissions should I grant to the Azure DevOps Personal Access Token? A: Grant only the minimum necessary scopes required for your ELITEA Agent's intended interactions with Azure DevOps services. For typical integration with ADO Wiki, Boards, and Test Plans, the vso.work_full , vso.wiki_full , and vso.test_full scopes are commonly needed. Avoid granting \"Full access\" or unnecessary permissions. Q: What is the correct format for the Azure DevOps Organization URL in the toolkit configuration? A: The Azure DevOps URL should be entered in the format https://dev.azure.com/{YourOrganizationName} . Replace {YourOrganizationName} with your actual Azure DevOps organization name. Q: Why is my Agent getting \"Permission Denied\" errors even though I think I have configured everything correctly? A: Double-check the scopes/permissions granted to your Azure DevOps Personal Access Token. Ensure that the token has the specific scopes required for the Azure DevOps tools your Agent is trying to use (e.g., vso.work_write scope for creating work items, vso.wiki_write for modifying wiki pages, vso.test_write for managing test plans). Also, verify that the Azure DevOps account associated with the token has the necessary access to the target project and the specific Azure DevOps services (Wiki, Boards, Test Plans).","title":"FAQs"},{"location":"how-tos/agents-toolkits/ado_wiki_plan_board_toolkit/#support-and-contact-information","text":"If you encounter any issues, have questions, or require further assistance beyond what is covered in this guide regarding the Azure DevOps integration or ELITEA Agents in general, please do not hesitate to contact our dedicated ELITEA Support Team. We are here to help you resolve any problems quickly and efficiently and ensure you have a smooth and productive experience with ELITEA. How to Reach ELITEA Support: Email: SupportAlita@epam.com Best Practices for Effective Support Requests: To help us understand and resolve your issue as quickly as possible, please ensure you provide the following information in your support email: ELITEA Environment: Clearly specify the ELITEA environment you are using (e.g., \"Nexus,\" \"Alita Lab,\" \"EYE\"). Project Details: Indicate the Project Name and whether you are working in your Private workspace or a Team project. Detailed Issue Description: Provide a clear, concise, and detailed description of the problem you are encountering. Explain what you were trying to do, what you expected to happen, and what actually occurred. Relevant Configuration Information: To help us diagnose the issue, please include relevant configuration details, such as: Agent Instructions (Screenshot or Text): If the issue is with an Agent, provide a screenshot or copy the text of your Agent's \"Instructions\" field. Toolkit Configurations (Screenshots): If the issue involves the Azure DevOps toolkits or other toolkits, include screenshots of the toolkit configuration settings within your Agent. Error Messages (Full Error Text): If you are encountering an error message, please provide the complete error text . In the Chat window, expand the error details and copy the full error message. This detailed error information is crucial for diagnosis. Your Query/Prompt (Exact Text): If the issue is related to Agent execution, provide the exact query or prompt you used to trigger the issue. Before Contacting Support: We encourage you to first explore the resources available within this guide and the broader ELITEA documentation. You may find answers to common questions or solutions to known issues in the documentation.","title":"Support and Contact Information"},{"location":"how-tos/agents-toolkits/ado_wiki_plan_board_toolkit/#useful-links","text":"To further enhance your understanding and skills in integrating Azure DevOps with ELITEA, here are some helpful resources: Azure DevOps Website : Access the main Azure DevOps platform to create an account or log in. Azure DevOps Login Page : Directly access the login page for Azure DevOps. ELITEA Secrets Management : Learn how to securely store your Azure DevOps Personal Access Token using ELITEA's Secrets management feature for enhanced security. ELITEA Agents Configuration : Find out more about creating and configuring Agents in ELITEA, where you integrate the Azure DevOps toolkits to automate your workflows. ELITEA Toolkit Guide: Azure Repos (ADO Repo) Integration : Refer to the Azure Repos Integration Guide for detailed information on setting up Azure DevOps accounts, organizations, and Personal Access Tokens. ELITEA Support Email : Contact the ELITEA support team for direct assistance with Azure DevOps integration or any other questions and issues you may encounter.","title":"Useful Links"},{"location":"how-tos/agents-toolkits/artifact_toolkit/","text":"ELITEA Agent Toolkit: Artifact Toolkit Guide Introduction Purpose and Overview This guide is designed to assist users in setting up and utilizing the Artifact Toolkit within the ELITEA application. It provides detailed instructions on configuring the toolkit and integrating it into ELITEA agents. This integration empowers agents to leverage artifacts for temporary data storage, context management, and inter-agent data sharing, enhancing the efficiency of data handling within AI-driven workflows. Brief Overview of the Artifact Toolkit The Artifact Toolkit within ELITEA provides a simple yet powerful data storage mechanism for AI agents. It allows agents to create, read, update, and delete text-based files within project-specific buckets. Think of buckets as folders where agents can store temporary data files. This toolkit is particularly useful for: Temporary Data Storage: Storing intermediate results, generated content, or data retrieved during agent operations. Context Management: Preserving context across multiple agent actions or workflow steps by storing and retrieving relevant information from artifacts. Data Sharing Between Agents: Enabling different agents within the same project to share data by accessing and modifying files within a common bucket. Important Note: Artifact storage is designed for temporary data and operational context. It is not intended for long-term data archival or as a primary database. Files are subject to retention policies and potential manual deletion. Key Terms Artifact: In the context of the Artifact Toolkit, an artifact refers to a text-based file stored within a project-specific bucket. These are used for temporary data storage and context management during agent operations. Bucket (Folder): A project-specific storage container within the Artifact system where artifacts (files) are organized. Buckets act like folders to group related files. Retention Period: The duration for which artifacts are automatically stored before being deleted. The default retention period is 30 days, but it can be modified. Setup and Configuration To configure the Artifact Toolkit for use with an ELITEA agent, follow these steps: Integration with ELITEA Navigate to ELITEA Agents: Access the Agent configuration section within your ELITEA instance. Configure a New Agent (or Edit Existing): Create a new agent or modify an existing one. Define the Agent Name , Description , and Instructions that guide the agent's behavior when using the Artifact Toolkit. Select the appropriate Agent Type for your workflow ( e.g. OpenAI ) . Add Artifact Tool: Within the Agent configuration, locate the \"Tools\" section and click the \"+\" (Add Tool) icon. Select Artifact Toolkit: From the dropdown list of available toolkits, choose \"Artifact\" . Artifact Tool Configuration: The \"New artifact tool configuration\" section will appear. Configure the following: Name: Enter a descriptive name for your Artifact Toolkit instance (e.g., \"My Temporary Storage\", \"Context Artifacts\"). This name is for your internal reference within the agent configuration. Description: Provide a brief description outlining the intended purpose of this specific Artifact Toolkit instance. For example, \"Used for storing intermediate test case generation results.\" Folder (Bucket): Specify the name of the bucket (folder) you want to use. Creating a New Bucket: If you enter a bucket name that does not already exist within the project, a new bucket with that name will be automatically created when the tool is first used by the agent. The bucket will initially be empty. Using an Existing Bucket: If you enter the name of an existing bucket, the toolkit will connect to and use that bucket. Default Bucket: If you leave this field blank or enter \"test\", it will use a bucket named \"test\". However, for better organization and to avoid potential conflicts, it is highly recommended to use descriptive and unique bucket names. Select Tools: Choose the specific tools you want to enable within this Artifact Toolkit instance. You can select all tools or only the ones your agent will need: The Artifact Toolkit provides the following tools (actions) that your agent can use: List Files: Functionality: Retrieves a list of all files currently stored within the specified bucket (folder). Purpose: To check which files are available in the bucket before reading or processing them. Create File: Functionality: Creates a new text file within the specified bucket. Parameters: The desired name for the new file (e.g., test_cases.txt ) and the initial text content to be written into the file. Purpose: To store initial data, generated content, or start a new log file. Read File: Functionality: Reads and retrieves the text content of a specified file from the bucket. Parameters: The name of the file to read (e.g., report_data.json ). Purpose: To access and process data previously stored in an artifact file. Delete File: Functionality: Permanently deletes a specified file from the bucket. Parameters: The name of the file to delete (e.g., temp_data.csv ). Purpose: To remove temporary files that are no longer needed, or to clean up artifact storage. Caution: Deletion is permanent and files cannot be recovered. Append Data: Functionality: Adds (appends) text data to the end of an existing file in the bucket. If the file does not exist, it might create the file (behavior depends on specific ELITEA implementation, check documentation). Parameters: The name of the file to append data to (e.g., log_entries.txt ) and the text content to append to the file. Purpose: To incrementally build up a file, such as adding log entries, accumulating test cases, or expanding a dataset over time. Save Configuration: Click the \"Save\" button to save the Artifact Toolkit configuration for your agent. File Types Supported The Artifact Toolkit is designed to work with plain text files . It supports various text-based file formats, including: .txt (Plain Text) .md (Markdown) .csv (Comma Separated Values) .json (JSON Data) .yaml or .yml (YAML Data) Other file extensions containing unformatted plain text. Unsupported File Types: The toolkit does not support binary files or formatted document types that contain complex structures and formatting beyond plain text. Examples of unsupported file types include: .docx .pdf .xlsx , Images like .jpg , .png , etc. Bucket Accessibility and Security Project-Specific Buckets: Buckets created using the Artifact Toolkit are specific to the ELITEA project in which they are created. Buckets and files within one project cannot be directly accessed from another separate ELITEA project. Project Member Access using agents Within a project, all project members who have access to agents using the Artifact Toolkit can potentially access the files within the buckets configured for those agents. Project Member Access: Within a project, all project members who have access to artifacts page can potentially access the files within the buckets download and delete them. Shared Bucket Usage (Caution): If multiple agents or users within a project configure Artifact Toolkits to use the same bucket name, they will be sharing the same storage space. While the toolkit aims to prevent accidental data corruption, it's crucial to be mindful of potential conflicts. Recommendation: For agents performing independent tasks, use unique bucket names to avoid unintended data interference. If agents are designed to collaborate and share data, using a shared bucket is intentional and acceptable. Security Considerations: Be aware that within a project, users with access to agent configurations can potentially access and manipulate data in Artifact buckets. Avoid storing highly sensitive or confidential information in Artifact storage without appropriate security measures and understanding the access controls within your ELITEA project environment. Artifact Retention Default Retention: Files created in Artifact buckets have a default retention period of 30 days . After 30 days, files are automatically deleted and cannot be recovered. Retention Management: You can view and potentially modify the retention period for artifacts within the \"Artifacts\" section of the ELITEA application.(More details on managing retention can be found in ELITEA Artifacts page ). Manual Deletion: Files and entire buckets can also be manually deleted at any time from the ELITEA Artifacts page . Artifact Functionality Section Use Cases The Artifact Toolkit provides a versatile set of tools to enhance agent workflows within ELITEA. Below are key use cases, illustrating how each tool can be applied to streamline data handling and improve agent capabilities: Automated Retrieval of High-Priority Issues: 1. Storing Large Generated Outputs: Scenario: An agent generates a large volume of text data, such as a detailed report, a long list of items, or extensive test cases, that exceeds the LLM's context window or is too large to be efficiently managed in memory. Tools Used: create_file , append_data Example Instruction: \"Use the 'create_file' tool to create a file named 'detailed_report.txt' to store the generated report data. Append each section of the report to this file using the 'append_data' tool as it is generated.\" Benefit: Enables agents to handle and persist large outputs that would otherwise be impractical to manage directly within the agent's memory or context, allowing for later retrieval, download, or further processing. 2. Managing Workflow Context and State: Scenario: An agent needs to maintain state or context across multiple interactions or steps within a workflow execution. For example, tracking progress in a multi-stage process, remembering user preferences, or managing temporary variables. Tools Used: create_file , read_file , append_data , delete_file Example Instruction: \"At the beginning of the workflow, use 'create_file' to create 'workflow_state.json' to store the initial workflow state as JSON. In subsequent steps, use 'read_file' to retrieve and update this state using 'append_data', and 'delete_file' at the end of workflow if state is no longer needed.\" Benefit: Provides a persistent yet temporary storage mechanism for agents to maintain and access workflow context, enabling more complex, stateful interactions and workflows. 3. Facilitating Data Sharing Between Agents: Scenario: A workflow involves multiple agents that need to collaborate and exchange data. For example, one agent might generate data, and another agent needs to analyze or process it. Tools Used: create_file , append_data (by Agent 1), read_file (by Agent 2) Example Instruction (Agent 1 - Data Creator): \"Use 'create_file' to save the processed data into 'shared_data.json' for the analysis agent to access.\" Example Instruction (Agent 2 - Data Analyzer): \"Use 'read_file' to retrieve the data from 'shared_data.json' to perform analysis on it.\" Benefit: Enables seamless data exchange and collaboration between different agents within a project, allowing for the creation of more sophisticated multi-agent workflows. 4. Implementing Extended Clipboard Functionality: Scenario: Agents need to manage and access multiple text snippets or pieces of information beyond the limitations of a single system clipboard. Tools Used: create_file , append_data , read_file , list_files Example Instruction: \"When the user copies text, use 'create_file' with a filename like 'clipboard_item_1.txt' to save it. Use 'list_files' to show available clipboard items and 'read_file' to retrieve a specific item based on filename.\" Benefit: Extends the agent's ability to handle and recall multiple pieces of textual information, improving flexibility in tasks involving text manipulation and data reuse. 5. Storing Temporary Logs and Audit Trails: Scenario: Agents need to record execution logs, audit trails, or debugging information during their operation for monitoring, troubleshooting, or compliance purposes. Tools Used: create_file , append_data Example Instruction: \"Use 'create_file' to create a log file named 'agent_log.txt' at the start of the agent execution. Use 'append_data' to add timestamped log entries to this file throughout the agent's operation.\" Benefit: Provides a simple way to automatically generate and persist execution logs, improving traceability, debugging capabilities, and auditability of agent actions. 6. Utilizing Pre-existing Data Files: Scenario: Agents need to process data that is already available as text files, perhaps uploaded by a user or generated by an external system. Tools Used: list_files , read_file Example Instruction: \"First, use 'list_files' to see available data files. Then, use 'read_file' to read the content of 'data_file_1.txt' from the 'input_data' bucket for processing.\" Benefit: Allows agents to readily integrate with and process existing text-based data, making them more versatile and adaptable to different data sources and workflows. Troubleshooting and Support Troubleshooting File Not Found Errors: Problem: Agent execution fails with \"File Not Found\" errors when attempting to use read_file , delete_file , or append_data tools. Troubleshooting Steps: Verify Filename: Double-check the filename specified in the agent instruction. Ensure it exactly matches the filename of the artifact in the bucket. Check Bucket Name: Confirm that the correct bucket name is configured for the Artifact Toolkit. List Files: Use the list_files tool to list the contents of the bucket and verify if the file actually exists and if the filename is spelled correctly. File Deletion or Retention: Ensure the file has not been accidentally deleted by another agent/user or automatically deleted due to exceeding the retention period. Check the ELITEA Artifacts page fore more details about files and retention settings. Bucket Not Found or Access Issues: Problem: Bucket is empty. Troubleshooting Steps: Verify Bucket Name: Double-check the bucket name configured in the Artifact Toolkit settings. Ensure it is spelled correctly and matches the intended bucket name. Project Scope: Remember that buckets are project-specific. Ensure you are trying to access a bucket within the correct ELITEA project. Buckets from other projects are not directly accessible. Data Not Appending or Creating as Expected: Problem: append_data or create_file tools do not seem to be creating or modifying files correctly. Data is missing, incomplete, or not being saved. Troubleshooting Steps: Check Tool Output/Errors: Carefully examine the agent's execution logs or chat output for any error messages or warnings related to the append_data or create_file tool calls. Errors can provide clues about why the operation failed. File Type Limitations: Confirm that you are working with supported text file types. The Artifact Toolkit is designed for plain text files. Attempting to write binary data or complex formatted files might lead to unexpected results. Instructions provided to LLM: Verify that the instructions given to the language model are clear and capable of effectively carrying out the intended operations. Ensure that commands are precise and aligned with tool capabilities. FAQs Q: Can I work with binary files e.g. excel or images in Artifacts? A: No, the Artifact Toolkit is designed for plain text files only. It does not support binary files, images, or formatted document types like .docx or .pdf . You can store text-based data in formats like .txt , .csv , .json , .yaml , etc. Q: What is the maximum file size for artifacts? A: While there isn't a strict file size limit documented for individual artifacts, there is a project-wide storage limit of 9 GB for all artifacts within a project. It is best practice to keep individual artifact files reasonably sized for optimal performance. Extremely large files might impact agent performance and processing efficiency. Q: How long are files stored in Artifacts? A: By default, files stored in Artifact buckets have a retention period of 30 days . After 30 days, they are automatically deleted. You can potentially modify the retention period from the ELITEA Artifacts page . Q: Can I recover deleted files from Artifacts? A: No, files deleted from Artifact buckets (either manually or due to retention) are permanently deleted and cannot be recovered. It is important to download and back up any important data stored in artifacts if you need to retain it beyond the retention period. More information how to download artifacs can be found in ELITEA Artifacts page Q: How do I access and download files stored in Artifacts? A: You can access and manage artifact files through the ELITEA Artifacts page within the ELITEA application. Refer to the \"Artifact Functionality Section\" of the main ELITEA documentation for detailed instructions on browsing buckets, viewing file lists, downloading files, and managing artifact retention. Support and Contact Information If you encounter any persistent issues, have questions not covered in this guide, or require further assistance with the Artifact Toolkit or ELITEA Agents, please contact the ELITEA Support Team: Email: SupportAlita@epam.com Please provide the following details in your support request to help us assist you efficiently: ELITEA Environment: (e.g., \"Nexus,\" \"Alita Lab,\" \"EYE\") Project Details: Project Name, Private or Team project. Detailed Issue Description: Clear explanation of the problem, steps to reproduce, expected vs. actual behavior. Relevant Configuration Information: Agent Instructions (screenshot or text) Artifact Toolkit Configuration (screenshots) Error Messages (full error text from chat window details) Your Query/Prompt: Exact text used to trigger the issue. Before Contacting Support: We encourage you to first explore the resources available within this guide and the broader ELITEA documentation. You may find answers to common questions or solutions to known issues in the documentation.","title":"Artifact Toolkit"},{"location":"how-tos/agents-toolkits/artifact_toolkit/#elitea-agent-toolkit-artifact-toolkit-guide","text":"","title":"ELITEA Agent Toolkit: Artifact Toolkit Guide"},{"location":"how-tos/agents-toolkits/artifact_toolkit/#introduction","text":"","title":"Introduction"},{"location":"how-tos/agents-toolkits/artifact_toolkit/#purpose-and-overview","text":"This guide is designed to assist users in setting up and utilizing the Artifact Toolkit within the ELITEA application. It provides detailed instructions on configuring the toolkit and integrating it into ELITEA agents. This integration empowers agents to leverage artifacts for temporary data storage, context management, and inter-agent data sharing, enhancing the efficiency of data handling within AI-driven workflows.","title":"Purpose and Overview"},{"location":"how-tos/agents-toolkits/artifact_toolkit/#brief-overview-of-the-artifact-toolkit","text":"The Artifact Toolkit within ELITEA provides a simple yet powerful data storage mechanism for AI agents. It allows agents to create, read, update, and delete text-based files within project-specific buckets. Think of buckets as folders where agents can store temporary data files. This toolkit is particularly useful for: Temporary Data Storage: Storing intermediate results, generated content, or data retrieved during agent operations. Context Management: Preserving context across multiple agent actions or workflow steps by storing and retrieving relevant information from artifacts. Data Sharing Between Agents: Enabling different agents within the same project to share data by accessing and modifying files within a common bucket. Important Note: Artifact storage is designed for temporary data and operational context. It is not intended for long-term data archival or as a primary database. Files are subject to retention policies and potential manual deletion.","title":"Brief Overview of the Artifact Toolkit"},{"location":"how-tos/agents-toolkits/artifact_toolkit/#key-terms","text":"Artifact: In the context of the Artifact Toolkit, an artifact refers to a text-based file stored within a project-specific bucket. These are used for temporary data storage and context management during agent operations. Bucket (Folder): A project-specific storage container within the Artifact system where artifacts (files) are organized. Buckets act like folders to group related files. Retention Period: The duration for which artifacts are automatically stored before being deleted. The default retention period is 30 days, but it can be modified.","title":"Key Terms"},{"location":"how-tos/agents-toolkits/artifact_toolkit/#setup-and-configuration","text":"To configure the Artifact Toolkit for use with an ELITEA agent, follow these steps:","title":"Setup and Configuration"},{"location":"how-tos/agents-toolkits/artifact_toolkit/#integration-with-elitea","text":"Navigate to ELITEA Agents: Access the Agent configuration section within your ELITEA instance. Configure a New Agent (or Edit Existing): Create a new agent or modify an existing one. Define the Agent Name , Description , and Instructions that guide the agent's behavior when using the Artifact Toolkit. Select the appropriate Agent Type for your workflow ( e.g. OpenAI ) . Add Artifact Tool: Within the Agent configuration, locate the \"Tools\" section and click the \"+\" (Add Tool) icon. Select Artifact Toolkit: From the dropdown list of available toolkits, choose \"Artifact\" . Artifact Tool Configuration: The \"New artifact tool configuration\" section will appear. Configure the following: Name: Enter a descriptive name for your Artifact Toolkit instance (e.g., \"My Temporary Storage\", \"Context Artifacts\"). This name is for your internal reference within the agent configuration. Description: Provide a brief description outlining the intended purpose of this specific Artifact Toolkit instance. For example, \"Used for storing intermediate test case generation results.\" Folder (Bucket): Specify the name of the bucket (folder) you want to use. Creating a New Bucket: If you enter a bucket name that does not already exist within the project, a new bucket with that name will be automatically created when the tool is first used by the agent. The bucket will initially be empty. Using an Existing Bucket: If you enter the name of an existing bucket, the toolkit will connect to and use that bucket. Default Bucket: If you leave this field blank or enter \"test\", it will use a bucket named \"test\". However, for better organization and to avoid potential conflicts, it is highly recommended to use descriptive and unique bucket names. Select Tools: Choose the specific tools you want to enable within this Artifact Toolkit instance. You can select all tools or only the ones your agent will need: The Artifact Toolkit provides the following tools (actions) that your agent can use: List Files: Functionality: Retrieves a list of all files currently stored within the specified bucket (folder). Purpose: To check which files are available in the bucket before reading or processing them. Create File: Functionality: Creates a new text file within the specified bucket. Parameters: The desired name for the new file (e.g., test_cases.txt ) and the initial text content to be written into the file. Purpose: To store initial data, generated content, or start a new log file. Read File: Functionality: Reads and retrieves the text content of a specified file from the bucket. Parameters: The name of the file to read (e.g., report_data.json ). Purpose: To access and process data previously stored in an artifact file. Delete File: Functionality: Permanently deletes a specified file from the bucket. Parameters: The name of the file to delete (e.g., temp_data.csv ). Purpose: To remove temporary files that are no longer needed, or to clean up artifact storage. Caution: Deletion is permanent and files cannot be recovered. Append Data: Functionality: Adds (appends) text data to the end of an existing file in the bucket. If the file does not exist, it might create the file (behavior depends on specific ELITEA implementation, check documentation). Parameters: The name of the file to append data to (e.g., log_entries.txt ) and the text content to append to the file. Purpose: To incrementally build up a file, such as adding log entries, accumulating test cases, or expanding a dataset over time. Save Configuration: Click the \"Save\" button to save the Artifact Toolkit configuration for your agent.","title":"Integration with ELITEA"},{"location":"how-tos/agents-toolkits/artifact_toolkit/#file-types-supported","text":"The Artifact Toolkit is designed to work with plain text files . It supports various text-based file formats, including: .txt (Plain Text) .md (Markdown) .csv (Comma Separated Values) .json (JSON Data) .yaml or .yml (YAML Data) Other file extensions containing unformatted plain text. Unsupported File Types: The toolkit does not support binary files or formatted document types that contain complex structures and formatting beyond plain text. Examples of unsupported file types include: .docx .pdf .xlsx , Images like .jpg , .png , etc.","title":"File Types Supported"},{"location":"how-tos/agents-toolkits/artifact_toolkit/#bucket-accessibility-and-security","text":"Project-Specific Buckets: Buckets created using the Artifact Toolkit are specific to the ELITEA project in which they are created. Buckets and files within one project cannot be directly accessed from another separate ELITEA project. Project Member Access using agents Within a project, all project members who have access to agents using the Artifact Toolkit can potentially access the files within the buckets configured for those agents. Project Member Access: Within a project, all project members who have access to artifacts page can potentially access the files within the buckets download and delete them. Shared Bucket Usage (Caution): If multiple agents or users within a project configure Artifact Toolkits to use the same bucket name, they will be sharing the same storage space. While the toolkit aims to prevent accidental data corruption, it's crucial to be mindful of potential conflicts. Recommendation: For agents performing independent tasks, use unique bucket names to avoid unintended data interference. If agents are designed to collaborate and share data, using a shared bucket is intentional and acceptable. Security Considerations: Be aware that within a project, users with access to agent configurations can potentially access and manipulate data in Artifact buckets. Avoid storing highly sensitive or confidential information in Artifact storage without appropriate security measures and understanding the access controls within your ELITEA project environment.","title":"Bucket Accessibility and Security"},{"location":"how-tos/agents-toolkits/artifact_toolkit/#artifact-retention","text":"Default Retention: Files created in Artifact buckets have a default retention period of 30 days . After 30 days, files are automatically deleted and cannot be recovered. Retention Management: You can view and potentially modify the retention period for artifacts within the \"Artifacts\" section of the ELITEA application.(More details on managing retention can be found in ELITEA Artifacts page ). Manual Deletion: Files and entire buckets can also be manually deleted at any time from the ELITEA Artifacts page .","title":"Artifact Retention"},{"location":"how-tos/agents-toolkits/artifact_toolkit/#artifact-functionality-section","text":"","title":"Artifact Functionality Section"},{"location":"how-tos/agents-toolkits/artifact_toolkit/#use-cases","text":"The Artifact Toolkit provides a versatile set of tools to enhance agent workflows within ELITEA. Below are key use cases, illustrating how each tool can be applied to streamline data handling and improve agent capabilities: Automated Retrieval of High-Priority Issues: 1. Storing Large Generated Outputs: Scenario: An agent generates a large volume of text data, such as a detailed report, a long list of items, or extensive test cases, that exceeds the LLM's context window or is too large to be efficiently managed in memory. Tools Used: create_file , append_data Example Instruction: \"Use the 'create_file' tool to create a file named 'detailed_report.txt' to store the generated report data. Append each section of the report to this file using the 'append_data' tool as it is generated.\" Benefit: Enables agents to handle and persist large outputs that would otherwise be impractical to manage directly within the agent's memory or context, allowing for later retrieval, download, or further processing. 2. Managing Workflow Context and State: Scenario: An agent needs to maintain state or context across multiple interactions or steps within a workflow execution. For example, tracking progress in a multi-stage process, remembering user preferences, or managing temporary variables. Tools Used: create_file , read_file , append_data , delete_file Example Instruction: \"At the beginning of the workflow, use 'create_file' to create 'workflow_state.json' to store the initial workflow state as JSON. In subsequent steps, use 'read_file' to retrieve and update this state using 'append_data', and 'delete_file' at the end of workflow if state is no longer needed.\" Benefit: Provides a persistent yet temporary storage mechanism for agents to maintain and access workflow context, enabling more complex, stateful interactions and workflows. 3. Facilitating Data Sharing Between Agents: Scenario: A workflow involves multiple agents that need to collaborate and exchange data. For example, one agent might generate data, and another agent needs to analyze or process it. Tools Used: create_file , append_data (by Agent 1), read_file (by Agent 2) Example Instruction (Agent 1 - Data Creator): \"Use 'create_file' to save the processed data into 'shared_data.json' for the analysis agent to access.\" Example Instruction (Agent 2 - Data Analyzer): \"Use 'read_file' to retrieve the data from 'shared_data.json' to perform analysis on it.\" Benefit: Enables seamless data exchange and collaboration between different agents within a project, allowing for the creation of more sophisticated multi-agent workflows. 4. Implementing Extended Clipboard Functionality: Scenario: Agents need to manage and access multiple text snippets or pieces of information beyond the limitations of a single system clipboard. Tools Used: create_file , append_data , read_file , list_files Example Instruction: \"When the user copies text, use 'create_file' with a filename like 'clipboard_item_1.txt' to save it. Use 'list_files' to show available clipboard items and 'read_file' to retrieve a specific item based on filename.\" Benefit: Extends the agent's ability to handle and recall multiple pieces of textual information, improving flexibility in tasks involving text manipulation and data reuse. 5. Storing Temporary Logs and Audit Trails: Scenario: Agents need to record execution logs, audit trails, or debugging information during their operation for monitoring, troubleshooting, or compliance purposes. Tools Used: create_file , append_data Example Instruction: \"Use 'create_file' to create a log file named 'agent_log.txt' at the start of the agent execution. Use 'append_data' to add timestamped log entries to this file throughout the agent's operation.\" Benefit: Provides a simple way to automatically generate and persist execution logs, improving traceability, debugging capabilities, and auditability of agent actions. 6. Utilizing Pre-existing Data Files: Scenario: Agents need to process data that is already available as text files, perhaps uploaded by a user or generated by an external system. Tools Used: list_files , read_file Example Instruction: \"First, use 'list_files' to see available data files. Then, use 'read_file' to read the content of 'data_file_1.txt' from the 'input_data' bucket for processing.\" Benefit: Allows agents to readily integrate with and process existing text-based data, making them more versatile and adaptable to different data sources and workflows.","title":"Use Cases"},{"location":"how-tos/agents-toolkits/artifact_toolkit/#troubleshooting-and-support","text":"","title":"Troubleshooting and Support"},{"location":"how-tos/agents-toolkits/artifact_toolkit/#troubleshooting","text":"File Not Found Errors: Problem: Agent execution fails with \"File Not Found\" errors when attempting to use read_file , delete_file , or append_data tools. Troubleshooting Steps: Verify Filename: Double-check the filename specified in the agent instruction. Ensure it exactly matches the filename of the artifact in the bucket. Check Bucket Name: Confirm that the correct bucket name is configured for the Artifact Toolkit. List Files: Use the list_files tool to list the contents of the bucket and verify if the file actually exists and if the filename is spelled correctly. File Deletion or Retention: Ensure the file has not been accidentally deleted by another agent/user or automatically deleted due to exceeding the retention period. Check the ELITEA Artifacts page fore more details about files and retention settings. Bucket Not Found or Access Issues: Problem: Bucket is empty. Troubleshooting Steps: Verify Bucket Name: Double-check the bucket name configured in the Artifact Toolkit settings. Ensure it is spelled correctly and matches the intended bucket name. Project Scope: Remember that buckets are project-specific. Ensure you are trying to access a bucket within the correct ELITEA project. Buckets from other projects are not directly accessible. Data Not Appending or Creating as Expected: Problem: append_data or create_file tools do not seem to be creating or modifying files correctly. Data is missing, incomplete, or not being saved. Troubleshooting Steps: Check Tool Output/Errors: Carefully examine the agent's execution logs or chat output for any error messages or warnings related to the append_data or create_file tool calls. Errors can provide clues about why the operation failed. File Type Limitations: Confirm that you are working with supported text file types. The Artifact Toolkit is designed for plain text files. Attempting to write binary data or complex formatted files might lead to unexpected results. Instructions provided to LLM: Verify that the instructions given to the language model are clear and capable of effectively carrying out the intended operations. Ensure that commands are precise and aligned with tool capabilities.","title":"Troubleshooting"},{"location":"how-tos/agents-toolkits/artifact_toolkit/#faqs","text":"Q: Can I work with binary files e.g. excel or images in Artifacts? A: No, the Artifact Toolkit is designed for plain text files only. It does not support binary files, images, or formatted document types like .docx or .pdf . You can store text-based data in formats like .txt , .csv , .json , .yaml , etc. Q: What is the maximum file size for artifacts? A: While there isn't a strict file size limit documented for individual artifacts, there is a project-wide storage limit of 9 GB for all artifacts within a project. It is best practice to keep individual artifact files reasonably sized for optimal performance. Extremely large files might impact agent performance and processing efficiency. Q: How long are files stored in Artifacts? A: By default, files stored in Artifact buckets have a retention period of 30 days . After 30 days, they are automatically deleted. You can potentially modify the retention period from the ELITEA Artifacts page . Q: Can I recover deleted files from Artifacts? A: No, files deleted from Artifact buckets (either manually or due to retention) are permanently deleted and cannot be recovered. It is important to download and back up any important data stored in artifacts if you need to retain it beyond the retention period. More information how to download artifacs can be found in ELITEA Artifacts page Q: How do I access and download files stored in Artifacts? A: You can access and manage artifact files through the ELITEA Artifacts page within the ELITEA application. Refer to the \"Artifact Functionality Section\" of the main ELITEA documentation for detailed instructions on browsing buckets, viewing file lists, downloading files, and managing artifact retention.","title":"FAQs"},{"location":"how-tos/agents-toolkits/artifact_toolkit/#support-and-contact-information","text":"If you encounter any persistent issues, have questions not covered in this guide, or require further assistance with the Artifact Toolkit or ELITEA Agents, please contact the ELITEA Support Team: Email: SupportAlita@epam.com Please provide the following details in your support request to help us assist you efficiently: ELITEA Environment: (e.g., \"Nexus,\" \"Alita Lab,\" \"EYE\") Project Details: Project Name, Private or Team project. Detailed Issue Description: Clear explanation of the problem, steps to reproduce, expected vs. actual behavior. Relevant Configuration Information: Agent Instructions (screenshot or text) Artifact Toolkit Configuration (screenshots) Error Messages (full error text from chat window details) Your Query/Prompt: Exact text used to trigger the issue. Before Contacting Support: We encourage you to first explore the resources available within this guide and the broader ELITEA documentation. You may find answers to common questions or solutions to known issues in the documentation.","title":"Support and Contact Information"},{"location":"how-tos/agents-toolkits/bitbucket_toolkit/","text":"ELITEA Toolkit Guide: Bitbucket Integration Introduction Purpose of this Guide This guide is your definitive resource for integrating and utilizing the Bitbucket toolkit within ELITEA. It provides a step-by-step walkthrough, from setting up your Bitbucket App Password to configuring the toolkit in ELITEA and effectively using it within your Agents. By following this guide, you will unlock the power of automated code management, streamlined development workflows, and enhanced team collaboration, all directly within the ELITEA platform. This integration empowers you to leverage AI-driven automation to optimize your software development lifecycle using the combined strengths of ELITEA and Bitbucket. Brief Overview of Bitbucket Bitbucket, by Atlassian, is a leading web-based platform for version control and code collaboration. It's designed for professional teams working on software development projects using Git. Bitbucket provides a central place to manage your entire development process, offering features for: Efficient Version Control: Track every change to your code, enabling easy collaboration, rollback to previous versions, and a clear history of project evolution. Seamless Code Collaboration: Facilitate teamwork with features like pull requests, in-line code reviews, and branch-based development workflows. Organized Branch Management: Structure your development with branches for features, bug fixes, and releases, ensuring a clear and manageable development process. Workflow Automation: Integrate with CI/CD pipelines and other tools to automate building, testing, and deploying your software. Integrating Bitbucket with ELITEA brings these robust code management capabilities directly into your AI-powered workflows. Your ELITEA Agents can then interact with your Bitbucket repositories to automate code-related tasks, enhance development processes, and improve team collaboration through intelligent automation. BitBucket Account Setup and Configuration Account Setup If you don't have a Bitbucket account yet, here\u2019s how to get started: Go to Bitbucket: Open your web browser and navigate to bitbucket.org . Sign Up for Free: Click the \"Sign up for Free\" button. Enter Your Email: Provide your email address. For professional use, it's highly recommended to use your company email. Create Your Account: Follow the prompts to set up your account, including entering your name and creating a secure password. Verify Your Email: Check your inbox for a verification email from Bitbucket and click the verification link to activate your account. Log In: Once verified, log in to Bitbucket with your new credentials. Token/API Key Generation: Creating an App Password in Bitbucket For secure integration with ELITEA, we strongly recommend using a Bitbucket App Password . This method is more secure than using your primary account password directly and allows you to control the permissions granted to ELITEA. Follow these steps to create an App Password: Log in to Bitbucket: Access your Bitbucket account at bitbucket.org . Access Personal Settings: Click on your profile avatar in the bottom left corner and select \"Personal settings\" . Navigate to App Passwords: In the left-hand menu under \"Security,\" click on \"App passwords\" . Create App Password: Click the \"Create app password\" button. Name the App Password: In the \"Label\" field, enter a descriptive name like \"ELITEA Integration\" to easily identify its purpose. Define Permissions - Grant Least Privilege: This is crucial for security. Carefully select only the necessary permissions for ELITEA to interact with Bitbucket. For typical ELITEA integration, consider these minimal permissions: Account permissions: Account: Read Project permissions: Projects: Read Repository permissions: Repository: Read Repository: Write (Only if your Agent needs to modify repositories, e.g., create files, branches, or pull requests) Pull requests: Write (If your Agent will create pull requests) Issues: Read (If your Agent needs to access issues) Wiki: Read (If your Agent needs to read wiki content) Security Best Practice: Avoid granting \"Admin\" or any unnecessary permissions. Limiting permissions significantly reduces potential security risks. Create Password: Click \"Create\" by using the following link . Securely Store Your App Password: Immediately copy the generated App Password. This is the only time it will be displayed in full. Store it securely using a password manager or ELITEA's built-in Secrets feature (recommended for enhanced security within ELITEA). You will need this App Password to configure the Bitbucket toolkit in ELITEA. BitBucket Integration with ELITEA Agent Creation/Configuration To integrate Bitbucket, you'll need to configure it within an ELITEA Agent. You can either create a new Agent or modify an existing one. Navigate to Agents: In ELITEA, go to the Agents menu. Create or Edit Agent: New Agent: Click \"+ Agent\" to create a new Agent. Follow the steps to define Agent details like name, description, type, and instructions. Existing Agent: Select the Agent you want to integrate with Bitbucket and click on its name to edit. Access Tools Section: In the Agent configuration, scroll down to the \"Tools\" section. Toolkit Configuration This section details how to configure the Bitbucket toolkit within your ELITEA Agent. Add Toolkit: In the \"Tools\" section, click the \"+\" icon . Select Bitbucket: Choose \"Bitbucket\" from the dropdown list of available toolkits. This opens the \"New Bitbucket tool\" configuration panel. Configure Toolkit Details: Fill in the following fields: Name: Enter a Name for this Bitbucket toolkit instance. Choose a descriptive name that helps you identify its purpose within your Agent's instructions (e.g., \"ProjectCodeRepo\", \"BitbucketAccess\"). Description: Provide a Description for the toolkit, clarifying its purpose or the specific Bitbucket repository it accesses (e.g., \"Toolkit to access and manage the main project repository\"). URL: Enter the Bitbucket API URL. It is crucial to use the correct format: https://api.bitbucket.org/ . This is the base URL for the Bitbucket API endpoint. Username: Enter your Bitbucket Username . This is the username associated with the Bitbucket account for which you created the App Password. Project / Workspace: Specify the Project or Workspace in Bitbucket where your repository is located. For personal accounts or teams , this is your Workspace ID . You can find your Workspace ID in Bitbucket URL after login, e.g., https://bitbucket.org/your_workspace_id/ . For organizations using Bitbucket Cloud Premium/Enterprise , this is the Project Key . You can find the Project Key in the Project settings in Bitbucket. Repository: Specify the Repository name you want to access. Use the format: repository_owner/repository_name (e.g., MyOrganization/MyProjectRepo ). This refers to the specific repository within your Bitbucket Workspace or Project that you want to integrate with ELITEA. Main branch: Indicate the Main branch of your repository. Typically, this is main or master . Authentication - Password: Select \"Password\" as the authentication method. Password/Secret: Choose \"Password\" and paste the App Password you generated in Bitbucket into the \"Password\" field. Enhanced Security with Secrets: For improved security, it's highly recommended to use \"Secret\" . Select \"Secret\" and choose a pre-configured secret from the dropdown. You must first create and securely store your App Password as a Secret in ELITEA's Secrets feature. Using Secrets prevents hardcoding sensitive credentials directly in the toolkit configuration. Enable Tools: In the \"Tools\" section of the Bitbucket toolkit configuration, select the checkboxes next to the Bitbucket tools you want to enable for your Agent. Enable only the tools your Agent will actually use to adhere to the principle of least privilege and enhance security. Available tools are: Create pull request: Allows the Agent to create pull requests. Create file: Enables the Agent to create new files in the repository. Read file: Allows the Agent to read file content from the repository. Update file: Allows the Agent to update existing files content in the repository. List branches in repo: Enables the Agent to list branches in the repository. Set active branch: Allows the Agent to set a specific branch as active. Create branch: Enables the Agent to create new branches. Complete Configuration: Click the arrow icon (at the top right of the toolkit configuration) to save the Bitbucket toolkit setup and return to the main Agent configuration. Click Save to apply configuration and changes. Tool Overview The Bitbucket toolkit provides the following tools for your ELITEA Agents: Create pull request: create_pull_request - Automates the creation of pull requests for code changes. Create file: create_file - Enables automated creation of new files within your repository. Read file: read_file - Allows Agents to retrieve and utilize file contents from your repository. Update file: update_file - Allows Agents to update the content of existing files within your repository. List branches in repo: list_branches_in_repo - Provides a list of all branches in the repository for branch management tasks. Set active branch: set_active_branch - Sets a specific branch as the target for subsequent repository operations. Create branch: create_branch - Automates the creation of new branches for feature development or bug fixes. Instructions and Prompts for Using the Toolkit To instruct your ELITEA Agent to use the Bitbucket toolkit, you need to provide clear instructions within the Agent's \"Instructions\" field. These instructions guide the Agent on when and how to use the available tools. Instruction Creation for OpenAI Agents When creating instructions for the Bitbucket toolkit for OpenAI-based Agents, focus on clear, action-oriented language. Break down tasks into simple steps and explicitly state the parameters required for each tool. OpenAI Agents respond best to instructions that are: Direct and Imperative: Use action verbs and clear commands (e.g., \"Use the 'read_file' tool...\", \"Create a branch named...\"). Parameter-Focused: Clearly list each parameter and how the Agent should determine its value. Context-Aware: Provide enough context so the Agent understands the overall goal and when to use specific tools within a workflow. When instructing your Agent to use a Bitbucket toolkit, use this pattern: 1. Identify the goal: [State the objective, e.g., \"To read the content of a file\"]. 2. Tool Selection: Use the \"[tool_name]\" tool. 3. Parameter Specification: Provide the following parameters: - Parameter Name 1: <value or description of value> - Parameter Name 2: <value or description of value> - ... 4. Expected Outcome: [Optionally, describe what should happen after the tool is used]. Example Agent Instructions for Bitbucket Toolkit Tools (OpenAI Agent Friendly): Agent Instructions for Updating a File: 1. Goal: To update the content of the 'config.json' file in the 'settings' branch. 2. Tool: Use the \"update_file\" tool. 3. Parameters: - Repository Name: \"your-bitbucket-username/your-repository-name\" - File Path: \"config.json\" - Branch Name: \"settings\" - New Content: \"Provide the new JSON configuration content here. For example: {\\\"setting\\\": \\\"new_value\\\"}\" 4. Outcome: The 'config.json' file in the 'settings' branch will be updated with the new content. Agent Instructions for Creating a New Branch: 1. Goal: To create a new feature branch for user authentication. 2. Tool: Use the \"create_branch\" tool. 3. Parameters: - Repository Name: \"your-bitbucket-username/your-repository-name\" - New Branch Name: \"feature-user-auth\" - Base Branch: \"develop\" 4. Outcome: A new branch named 'feature-user-auth' will be created based on the 'develop' branch. Agent Instructions for Listing Branches in a Repository: 1. Goal: To get a list of all branches in the repository to understand the current project structure. 2. Tool: Use the \"list_branches_in_repo\" tool. 3. Parameters: - Repository Name: \"your-bitbucket-username/your-repository-name\" 4. Outcome: The Agent will provide a list of all branches in the repository. Agent Instructions for Reading a File from a Repository: 1. Goal: To read the content of the 'README.md' file to understand the project's overview. 2. Tool: Use the \"read_file\" tool. 3. Parameters: - Repository Name: \"your-bitbucket-username/your-repository-name\" - File Path: \"README.md\" - Branch Name: \"main\" 4. Outcome: The Agent will provide the content of the 'README.md' file from the 'main' branch. Conversation Starters Use these conversation starters to interact with your Bitbucket-integrated Agent. 1. For Testing and Troubleshooting Connection: These starters are designed to verify if the Bitbucket toolkit is correctly configured and connected to your Bitbucket repository. \"List branches in the repository.\" - This tests basic connectivity and read permissions. \"Read the file 'README.md' from the main branch.\" - This further tests read permissions and file access. \"Create a new branch named 'test-connection' based on main.\" - This tests write permissions (if enabled) and branch creation functionality. Remember to delete the test branch afterwards. 2. For General Agent Usage Scenarios: These starters demonstrate how to initiate agent execution for common Bitbucket-related tasks. \"I want to update the documentation file 'user_guide.md' with the new feature details. Can you help me with that?\" - This could trigger a workflow involving read_file , content modification, and update_file . \"Create a pull request to merge my 'feature-x' branch into 'develop' for review.\" - This directly initiates the create_pull_request tool. \"What are the active feature branches currently in the repository?\" - This would use the list_branches_in_repo tool to provide a project status overview. \"I need to add a new configuration file 'deploy.config' to the 'config' directory in the main branch.\" - This would use the create_file tool. These conversation starters provide a starting point for interacting with your Bitbucket-integrated ELITEA Agent and can be customized further based on your specific use cases and workflows. Use Cases The Bitbucket toolkit unlocks numerous automation possibilities for software development workflows within ELITEA. Here are some key use cases, demonstrating how each tool can be applied: Automated Feature Branching: Scenario: When a new feature is planned, the Agent can automatically create a dedicated feature branch in Bitbucket. Tools Used: create_branch Example Instruction: \"Use the 'create_branch' tool to create a new branch named 'feature-branch-name' based on the 'develop' branch.\" Benefit: Streamlines branch management, ensures organized feature development. Contextual Code Retrieval for Support: Scenario: During a support conversation, an Agent can retrieve relevant code snippets from Bitbucket to provide context or examples to the user. Tools Used: read_file Example Instruction: \"Use the 'read_file' tool to read the content of the file 'src/components/UserComponent.js' from the 'main' branch and show it to the user.\" Benefit: Enhances support interactions with direct access to codebase information. Automated Documentation Updates: Scenario: When code changes are made, the Agent can automatically update related documentation files in the repository. Tools Used: read_file , update_file Example Instruction: \"Use the 'read_file' tool to get the current content of 'docs/api.md'. Update it with the new API changes and use 'update_file' to save the updated content back to 'docs/api.md' in the 'main' branch.\" Benefit: Keeps documentation synchronized with the latest codebase, reducing manual effort and errors. Pull Request Automation for Code Review: Scenario: After a developer completes a task, the Agent can automatically create a pull request for code review. Tools Used: create_pull_request Example Instruction: \"Use the 'create_pull_request' tool to create a pull request from branch 'feature-branch-name' to 'develop' branch with the title 'Feature Branch Review' and description 'Please review the changes for the new feature.'\" Benefit: Automates the pull request process, facilitating timely code reviews and improving code quality. Listing Branches for Project Overview: Scenario: A project manager wants a quick overview of all active branches in the repository. Tools Used: list_branches_in_repo Example Instruction: \"Use the 'list_branches_in_repo' tool to list all branches in the repository and present them to the user.\" Benefit: Provides easy access to branch information for project management and monitoring. Setting Active Branch for Focused Operations: Scenario: Before performing a series of file operations, ensure the Agent is working on the correct branch. Tools Used: set_active_branch Example Instruction: \"First, use 'set_active_branch' to set the active branch to 'develop'. Then, use 'read_file' to read 'config.json' from the active branch.\" Benefit: Ensures operations are performed in the intended branch context, reducing errors and improving workflow reliability. Troubleshooting and Support Troubleshooting Connection Issues: Problem: Agent fails to connect to Bitbucket, resulting in errors during toolkit execution. Troubleshooting Steps: Verify Bitbucket API URL: Ensure the URL is correctly entered as https://api.bitbucket.org/ . Check Authentication: Double-check the Bitbucket Username and App Password for accuracy. App Password Permissions: Review the App Password permissions in Bitbucket. Ensure they include the necessary permissions (Read, Write, etc.) for the tools you are using. Network Connectivity: Verify that both ELITEA and Bitbucket have internet access and no network issues are blocking the connection. Hosting Option (If Applicable): For self-hosted Bitbucket Server instances, ensure the URL and network settings are correctly configured. Authorization Errors (Permission Denied): Problem: Agent receives \"Permission Denied\" or \"Unauthorized\" errors when accessing or modifying Bitbucket resources. Troubleshooting Steps: App Password Permissions: Re-verify the App Password permissions. Ensure they grant sufficient access for the specific actions the Agent is trying to perform (e.g., \"Repository: Write\" for creating files). Repository Access: Confirm that the Bitbucket account associated with the App Password has the necessary access to the target repository. Check repository membership and permissions within Bitbucket. Incorrect Repository or Branch: Problem: Agent operates on the wrong repository or branch. Troubleshooting Steps: Repository Name: Double-check the Repository name in the toolkit configuration. It should be in the format repository_owner/repository_name . Branch Names in Instructions: Verify that branch names used in Agent instructions (e.g., for read_file , create_branch ) are correct and exist in the repository. FAQ Q: Can I use my regular Bitbucket password instead of an App Password? A: While possible, using a Bitbucket App Password is strongly recommended for security. App Passwords are more secure and allow you to limit the permissions granted to ELITEA. Q: What are the minimum permissions I should grant to the App Password? A: Grant only the essential permissions needed for your Agent's tasks. For read-only access, \"Repository: Read\" and \"Account: Read\" might suffice. If your Agent needs to modify the repository, include \"Repository: Write\" and other relevant permissions like \"Pull requests: Write\" as needed. Q: Can I use this toolkit with both Bitbucket Cloud and Bitbucket Server? A: Yes, the ELITEA Bitbucket toolkit is designed to work with both Bitbucket Cloud and Bitbucket Server instances. Ensure your URL is correctly pointing to your specific Bitbucket instance. Q: Why am I getting \"Permission Denied\" errors even though I think I have the right permissions? A: Carefully re-examine the App Password permissions in Bitbucket. Ensure that the specific permissions required for the actions your Agent is performing are granted. Also, double-check that the Bitbucket account associated with the App Password has the necessary repository access. Support Contact For any issues, questions, or further assistance with the Bitbucket integration or ELITEA Agents, please reach out to our dedicated ELITEA Support Team. We are committed to providing prompt and effective support to ensure your success with ELITEA. Contact ELITEA Support: Email: SupportAlita@epam.com Best Practices for Effective Support Requests: To help us understand and resolve your issue as quickly as possible, please ensure you provide the following information in your support email: ELITEA Environment: Clearly specify the ELITEA environment you are using (e.g., \"Nexus,\" \"Alita Lab,\" \"EYE\"). Project Details: Indicate the Project Name and whether you are working in your Private workspace or a Team project. Detailed Issue Description: Provide a clear, concise, and detailed description of the problem you are encountering. Explain what you were trying to do, what you expected to happen, and what actually occurred. Relevant Configuration Information: To help us diagnose the issue, please include relevant configuration details, such as: Agent Instructions (Screenshot or Text): If the issue is with an Agent, provide a screenshot or copy the text of your Agent's \"Instructions\" field. Toolkit Configurations (Screenshots): If the issue involves the Bitbucket toolkit or other toolkits, include screenshots of the toolkit configuration settings within your Agent. Error Messages (Full Error Text): If you are encountering an error message, please provide the complete error text . In the Chat window, expand the error details and copy the full error message. This detailed error information is crucial for diagnosis. Your Query/Prompt (Exact Text): If the issue is related to Agent execution, provide the exact query or prompt you used to trigger the issue. Before Contacting Support: We encourage you to first explore the resources available within this guide and the broader ELITEA documentation. You may find answers to common questions or solutions to known issues in the documentation. Useful Links To further enhance your understanding and skills in integrating Bitbucket with ELITEA, here are some helpful resources: Bitbucket Website : Access the main Bitbucket platform to create an account or log in. Bitbucket Workspace URL Example : Example URL to understand the structure of a Bitbucket Workspace URL and locate your Workspace ID. Bitbucket API URL : Access the base URL for the Bitbucket API endpoint, necessary for configuring the Bitbucket toolkit in ELITEA. Bitbucket App Passwords Settings : Directly navigate to the App Passwords settings page in Bitbucket to create and manage app passwords for secure integrations. ELITEA Secrets : Learn how to securely store your Bitbucket App Password using ELITEA's Secrets management feature for enhanced security. ELITEA Agents Configuration : Find out more about creating and configuring Agents in ELITEA, where you integrate the Bitbucket toolkit to automate your workflows. ELITEA Support Email : Contact the ELITEA support team for direct assistance with Bitbucket integration or any other questions and issues you may encounter.","title":"BitBucket Integration"},{"location":"how-tos/agents-toolkits/bitbucket_toolkit/#elitea-toolkit-guide-bitbucket-integration","text":"","title":"ELITEA Toolkit Guide: Bitbucket Integration"},{"location":"how-tos/agents-toolkits/bitbucket_toolkit/#introduction","text":"","title":"Introduction"},{"location":"how-tos/agents-toolkits/bitbucket_toolkit/#purpose-of-this-guide","text":"This guide is your definitive resource for integrating and utilizing the Bitbucket toolkit within ELITEA. It provides a step-by-step walkthrough, from setting up your Bitbucket App Password to configuring the toolkit in ELITEA and effectively using it within your Agents. By following this guide, you will unlock the power of automated code management, streamlined development workflows, and enhanced team collaboration, all directly within the ELITEA platform. This integration empowers you to leverage AI-driven automation to optimize your software development lifecycle using the combined strengths of ELITEA and Bitbucket.","title":"Purpose of this Guide"},{"location":"how-tos/agents-toolkits/bitbucket_toolkit/#brief-overview-of-bitbucket","text":"Bitbucket, by Atlassian, is a leading web-based platform for version control and code collaboration. It's designed for professional teams working on software development projects using Git. Bitbucket provides a central place to manage your entire development process, offering features for: Efficient Version Control: Track every change to your code, enabling easy collaboration, rollback to previous versions, and a clear history of project evolution. Seamless Code Collaboration: Facilitate teamwork with features like pull requests, in-line code reviews, and branch-based development workflows. Organized Branch Management: Structure your development with branches for features, bug fixes, and releases, ensuring a clear and manageable development process. Workflow Automation: Integrate with CI/CD pipelines and other tools to automate building, testing, and deploying your software. Integrating Bitbucket with ELITEA brings these robust code management capabilities directly into your AI-powered workflows. Your ELITEA Agents can then interact with your Bitbucket repositories to automate code-related tasks, enhance development processes, and improve team collaboration through intelligent automation.","title":"Brief Overview of Bitbucket"},{"location":"how-tos/agents-toolkits/bitbucket_toolkit/#bitbucket-account-setup-and-configuration","text":"","title":"BitBucket Account Setup and Configuration"},{"location":"how-tos/agents-toolkits/bitbucket_toolkit/#account-setup","text":"If you don't have a Bitbucket account yet, here\u2019s how to get started: Go to Bitbucket: Open your web browser and navigate to bitbucket.org . Sign Up for Free: Click the \"Sign up for Free\" button. Enter Your Email: Provide your email address. For professional use, it's highly recommended to use your company email. Create Your Account: Follow the prompts to set up your account, including entering your name and creating a secure password. Verify Your Email: Check your inbox for a verification email from Bitbucket and click the verification link to activate your account. Log In: Once verified, log in to Bitbucket with your new credentials.","title":"Account Setup"},{"location":"how-tos/agents-toolkits/bitbucket_toolkit/#tokenapi-key-generation-creating-an-app-password-in-bitbucket","text":"For secure integration with ELITEA, we strongly recommend using a Bitbucket App Password . This method is more secure than using your primary account password directly and allows you to control the permissions granted to ELITEA. Follow these steps to create an App Password: Log in to Bitbucket: Access your Bitbucket account at bitbucket.org . Access Personal Settings: Click on your profile avatar in the bottom left corner and select \"Personal settings\" . Navigate to App Passwords: In the left-hand menu under \"Security,\" click on \"App passwords\" . Create App Password: Click the \"Create app password\" button. Name the App Password: In the \"Label\" field, enter a descriptive name like \"ELITEA Integration\" to easily identify its purpose. Define Permissions - Grant Least Privilege: This is crucial for security. Carefully select only the necessary permissions for ELITEA to interact with Bitbucket. For typical ELITEA integration, consider these minimal permissions: Account permissions: Account: Read Project permissions: Projects: Read Repository permissions: Repository: Read Repository: Write (Only if your Agent needs to modify repositories, e.g., create files, branches, or pull requests) Pull requests: Write (If your Agent will create pull requests) Issues: Read (If your Agent needs to access issues) Wiki: Read (If your Agent needs to read wiki content) Security Best Practice: Avoid granting \"Admin\" or any unnecessary permissions. Limiting permissions significantly reduces potential security risks. Create Password: Click \"Create\" by using the following link . Securely Store Your App Password: Immediately copy the generated App Password. This is the only time it will be displayed in full. Store it securely using a password manager or ELITEA's built-in Secrets feature (recommended for enhanced security within ELITEA). You will need this App Password to configure the Bitbucket toolkit in ELITEA.","title":"Token/API Key Generation: Creating an App Password in Bitbucket"},{"location":"how-tos/agents-toolkits/bitbucket_toolkit/#bitbucket-integration-with-elitea","text":"","title":"BitBucket Integration with ELITEA"},{"location":"how-tos/agents-toolkits/bitbucket_toolkit/#agent-creationconfiguration","text":"To integrate Bitbucket, you'll need to configure it within an ELITEA Agent. You can either create a new Agent or modify an existing one. Navigate to Agents: In ELITEA, go to the Agents menu. Create or Edit Agent: New Agent: Click \"+ Agent\" to create a new Agent. Follow the steps to define Agent details like name, description, type, and instructions. Existing Agent: Select the Agent you want to integrate with Bitbucket and click on its name to edit. Access Tools Section: In the Agent configuration, scroll down to the \"Tools\" section.","title":"Agent Creation/Configuration"},{"location":"how-tos/agents-toolkits/bitbucket_toolkit/#toolkit-configuration","text":"This section details how to configure the Bitbucket toolkit within your ELITEA Agent. Add Toolkit: In the \"Tools\" section, click the \"+\" icon . Select Bitbucket: Choose \"Bitbucket\" from the dropdown list of available toolkits. This opens the \"New Bitbucket tool\" configuration panel. Configure Toolkit Details: Fill in the following fields: Name: Enter a Name for this Bitbucket toolkit instance. Choose a descriptive name that helps you identify its purpose within your Agent's instructions (e.g., \"ProjectCodeRepo\", \"BitbucketAccess\"). Description: Provide a Description for the toolkit, clarifying its purpose or the specific Bitbucket repository it accesses (e.g., \"Toolkit to access and manage the main project repository\"). URL: Enter the Bitbucket API URL. It is crucial to use the correct format: https://api.bitbucket.org/ . This is the base URL for the Bitbucket API endpoint. Username: Enter your Bitbucket Username . This is the username associated with the Bitbucket account for which you created the App Password. Project / Workspace: Specify the Project or Workspace in Bitbucket where your repository is located. For personal accounts or teams , this is your Workspace ID . You can find your Workspace ID in Bitbucket URL after login, e.g., https://bitbucket.org/your_workspace_id/ . For organizations using Bitbucket Cloud Premium/Enterprise , this is the Project Key . You can find the Project Key in the Project settings in Bitbucket. Repository: Specify the Repository name you want to access. Use the format: repository_owner/repository_name (e.g., MyOrganization/MyProjectRepo ). This refers to the specific repository within your Bitbucket Workspace or Project that you want to integrate with ELITEA. Main branch: Indicate the Main branch of your repository. Typically, this is main or master . Authentication - Password: Select \"Password\" as the authentication method. Password/Secret: Choose \"Password\" and paste the App Password you generated in Bitbucket into the \"Password\" field. Enhanced Security with Secrets: For improved security, it's highly recommended to use \"Secret\" . Select \"Secret\" and choose a pre-configured secret from the dropdown. You must first create and securely store your App Password as a Secret in ELITEA's Secrets feature. Using Secrets prevents hardcoding sensitive credentials directly in the toolkit configuration. Enable Tools: In the \"Tools\" section of the Bitbucket toolkit configuration, select the checkboxes next to the Bitbucket tools you want to enable for your Agent. Enable only the tools your Agent will actually use to adhere to the principle of least privilege and enhance security. Available tools are: Create pull request: Allows the Agent to create pull requests. Create file: Enables the Agent to create new files in the repository. Read file: Allows the Agent to read file content from the repository. Update file: Allows the Agent to update existing files content in the repository. List branches in repo: Enables the Agent to list branches in the repository. Set active branch: Allows the Agent to set a specific branch as active. Create branch: Enables the Agent to create new branches. Complete Configuration: Click the arrow icon (at the top right of the toolkit configuration) to save the Bitbucket toolkit setup and return to the main Agent configuration. Click Save to apply configuration and changes.","title":"Toolkit Configuration"},{"location":"how-tos/agents-toolkits/bitbucket_toolkit/#tool-overview","text":"The Bitbucket toolkit provides the following tools for your ELITEA Agents: Create pull request: create_pull_request - Automates the creation of pull requests for code changes. Create file: create_file - Enables automated creation of new files within your repository. Read file: read_file - Allows Agents to retrieve and utilize file contents from your repository. Update file: update_file - Allows Agents to update the content of existing files within your repository. List branches in repo: list_branches_in_repo - Provides a list of all branches in the repository for branch management tasks. Set active branch: set_active_branch - Sets a specific branch as the target for subsequent repository operations. Create branch: create_branch - Automates the creation of new branches for feature development or bug fixes.","title":"Tool Overview"},{"location":"how-tos/agents-toolkits/bitbucket_toolkit/#instructions-and-prompts-for-using-the-toolkit","text":"To instruct your ELITEA Agent to use the Bitbucket toolkit, you need to provide clear instructions within the Agent's \"Instructions\" field. These instructions guide the Agent on when and how to use the available tools.","title":"Instructions and Prompts for Using the Toolkit"},{"location":"how-tos/agents-toolkits/bitbucket_toolkit/#instruction-creation-for-openai-agents","text":"When creating instructions for the Bitbucket toolkit for OpenAI-based Agents, focus on clear, action-oriented language. Break down tasks into simple steps and explicitly state the parameters required for each tool. OpenAI Agents respond best to instructions that are: Direct and Imperative: Use action verbs and clear commands (e.g., \"Use the 'read_file' tool...\", \"Create a branch named...\"). Parameter-Focused: Clearly list each parameter and how the Agent should determine its value. Context-Aware: Provide enough context so the Agent understands the overall goal and when to use specific tools within a workflow. When instructing your Agent to use a Bitbucket toolkit, use this pattern: 1. Identify the goal: [State the objective, e.g., \"To read the content of a file\"]. 2. Tool Selection: Use the \"[tool_name]\" tool. 3. Parameter Specification: Provide the following parameters: - Parameter Name 1: <value or description of value> - Parameter Name 2: <value or description of value> - ... 4. Expected Outcome: [Optionally, describe what should happen after the tool is used]. Example Agent Instructions for Bitbucket Toolkit Tools (OpenAI Agent Friendly): Agent Instructions for Updating a File: 1. Goal: To update the content of the 'config.json' file in the 'settings' branch. 2. Tool: Use the \"update_file\" tool. 3. Parameters: - Repository Name: \"your-bitbucket-username/your-repository-name\" - File Path: \"config.json\" - Branch Name: \"settings\" - New Content: \"Provide the new JSON configuration content here. For example: {\\\"setting\\\": \\\"new_value\\\"}\" 4. Outcome: The 'config.json' file in the 'settings' branch will be updated with the new content. Agent Instructions for Creating a New Branch: 1. Goal: To create a new feature branch for user authentication. 2. Tool: Use the \"create_branch\" tool. 3. Parameters: - Repository Name: \"your-bitbucket-username/your-repository-name\" - New Branch Name: \"feature-user-auth\" - Base Branch: \"develop\" 4. Outcome: A new branch named 'feature-user-auth' will be created based on the 'develop' branch. Agent Instructions for Listing Branches in a Repository: 1. Goal: To get a list of all branches in the repository to understand the current project structure. 2. Tool: Use the \"list_branches_in_repo\" tool. 3. Parameters: - Repository Name: \"your-bitbucket-username/your-repository-name\" 4. Outcome: The Agent will provide a list of all branches in the repository. Agent Instructions for Reading a File from a Repository: 1. Goal: To read the content of the 'README.md' file to understand the project's overview. 2. Tool: Use the \"read_file\" tool. 3. Parameters: - Repository Name: \"your-bitbucket-username/your-repository-name\" - File Path: \"README.md\" - Branch Name: \"main\" 4. Outcome: The Agent will provide the content of the 'README.md' file from the 'main' branch.","title":"Instruction Creation for OpenAI Agents"},{"location":"how-tos/agents-toolkits/bitbucket_toolkit/#conversation-starters","text":"Use these conversation starters to interact with your Bitbucket-integrated Agent. 1. For Testing and Troubleshooting Connection: These starters are designed to verify if the Bitbucket toolkit is correctly configured and connected to your Bitbucket repository. \"List branches in the repository.\" - This tests basic connectivity and read permissions. \"Read the file 'README.md' from the main branch.\" - This further tests read permissions and file access. \"Create a new branch named 'test-connection' based on main.\" - This tests write permissions (if enabled) and branch creation functionality. Remember to delete the test branch afterwards. 2. For General Agent Usage Scenarios: These starters demonstrate how to initiate agent execution for common Bitbucket-related tasks. \"I want to update the documentation file 'user_guide.md' with the new feature details. Can you help me with that?\" - This could trigger a workflow involving read_file , content modification, and update_file . \"Create a pull request to merge my 'feature-x' branch into 'develop' for review.\" - This directly initiates the create_pull_request tool. \"What are the active feature branches currently in the repository?\" - This would use the list_branches_in_repo tool to provide a project status overview. \"I need to add a new configuration file 'deploy.config' to the 'config' directory in the main branch.\" - This would use the create_file tool. These conversation starters provide a starting point for interacting with your Bitbucket-integrated ELITEA Agent and can be customized further based on your specific use cases and workflows.","title":"Conversation Starters"},{"location":"how-tos/agents-toolkits/bitbucket_toolkit/#use-cases","text":"The Bitbucket toolkit unlocks numerous automation possibilities for software development workflows within ELITEA. Here are some key use cases, demonstrating how each tool can be applied: Automated Feature Branching: Scenario: When a new feature is planned, the Agent can automatically create a dedicated feature branch in Bitbucket. Tools Used: create_branch Example Instruction: \"Use the 'create_branch' tool to create a new branch named 'feature-branch-name' based on the 'develop' branch.\" Benefit: Streamlines branch management, ensures organized feature development. Contextual Code Retrieval for Support: Scenario: During a support conversation, an Agent can retrieve relevant code snippets from Bitbucket to provide context or examples to the user. Tools Used: read_file Example Instruction: \"Use the 'read_file' tool to read the content of the file 'src/components/UserComponent.js' from the 'main' branch and show it to the user.\" Benefit: Enhances support interactions with direct access to codebase information. Automated Documentation Updates: Scenario: When code changes are made, the Agent can automatically update related documentation files in the repository. Tools Used: read_file , update_file Example Instruction: \"Use the 'read_file' tool to get the current content of 'docs/api.md'. Update it with the new API changes and use 'update_file' to save the updated content back to 'docs/api.md' in the 'main' branch.\" Benefit: Keeps documentation synchronized with the latest codebase, reducing manual effort and errors. Pull Request Automation for Code Review: Scenario: After a developer completes a task, the Agent can automatically create a pull request for code review. Tools Used: create_pull_request Example Instruction: \"Use the 'create_pull_request' tool to create a pull request from branch 'feature-branch-name' to 'develop' branch with the title 'Feature Branch Review' and description 'Please review the changes for the new feature.'\" Benefit: Automates the pull request process, facilitating timely code reviews and improving code quality. Listing Branches for Project Overview: Scenario: A project manager wants a quick overview of all active branches in the repository. Tools Used: list_branches_in_repo Example Instruction: \"Use the 'list_branches_in_repo' tool to list all branches in the repository and present them to the user.\" Benefit: Provides easy access to branch information for project management and monitoring. Setting Active Branch for Focused Operations: Scenario: Before performing a series of file operations, ensure the Agent is working on the correct branch. Tools Used: set_active_branch Example Instruction: \"First, use 'set_active_branch' to set the active branch to 'develop'. Then, use 'read_file' to read 'config.json' from the active branch.\" Benefit: Ensures operations are performed in the intended branch context, reducing errors and improving workflow reliability.","title":"Use Cases"},{"location":"how-tos/agents-toolkits/bitbucket_toolkit/#troubleshooting-and-support","text":"","title":"Troubleshooting and Support"},{"location":"how-tos/agents-toolkits/bitbucket_toolkit/#troubleshooting","text":"Connection Issues: Problem: Agent fails to connect to Bitbucket, resulting in errors during toolkit execution. Troubleshooting Steps: Verify Bitbucket API URL: Ensure the URL is correctly entered as https://api.bitbucket.org/ . Check Authentication: Double-check the Bitbucket Username and App Password for accuracy. App Password Permissions: Review the App Password permissions in Bitbucket. Ensure they include the necessary permissions (Read, Write, etc.) for the tools you are using. Network Connectivity: Verify that both ELITEA and Bitbucket have internet access and no network issues are blocking the connection. Hosting Option (If Applicable): For self-hosted Bitbucket Server instances, ensure the URL and network settings are correctly configured. Authorization Errors (Permission Denied): Problem: Agent receives \"Permission Denied\" or \"Unauthorized\" errors when accessing or modifying Bitbucket resources. Troubleshooting Steps: App Password Permissions: Re-verify the App Password permissions. Ensure they grant sufficient access for the specific actions the Agent is trying to perform (e.g., \"Repository: Write\" for creating files). Repository Access: Confirm that the Bitbucket account associated with the App Password has the necessary access to the target repository. Check repository membership and permissions within Bitbucket. Incorrect Repository or Branch: Problem: Agent operates on the wrong repository or branch. Troubleshooting Steps: Repository Name: Double-check the Repository name in the toolkit configuration. It should be in the format repository_owner/repository_name . Branch Names in Instructions: Verify that branch names used in Agent instructions (e.g., for read_file , create_branch ) are correct and exist in the repository.","title":"Troubleshooting"},{"location":"how-tos/agents-toolkits/bitbucket_toolkit/#faq","text":"Q: Can I use my regular Bitbucket password instead of an App Password? A: While possible, using a Bitbucket App Password is strongly recommended for security. App Passwords are more secure and allow you to limit the permissions granted to ELITEA. Q: What are the minimum permissions I should grant to the App Password? A: Grant only the essential permissions needed for your Agent's tasks. For read-only access, \"Repository: Read\" and \"Account: Read\" might suffice. If your Agent needs to modify the repository, include \"Repository: Write\" and other relevant permissions like \"Pull requests: Write\" as needed. Q: Can I use this toolkit with both Bitbucket Cloud and Bitbucket Server? A: Yes, the ELITEA Bitbucket toolkit is designed to work with both Bitbucket Cloud and Bitbucket Server instances. Ensure your URL is correctly pointing to your specific Bitbucket instance. Q: Why am I getting \"Permission Denied\" errors even though I think I have the right permissions? A: Carefully re-examine the App Password permissions in Bitbucket. Ensure that the specific permissions required for the actions your Agent is performing are granted. Also, double-check that the Bitbucket account associated with the App Password has the necessary repository access.","title":"FAQ"},{"location":"how-tos/agents-toolkits/bitbucket_toolkit/#support-contact","text":"For any issues, questions, or further assistance with the Bitbucket integration or ELITEA Agents, please reach out to our dedicated ELITEA Support Team. We are committed to providing prompt and effective support to ensure your success with ELITEA. Contact ELITEA Support: Email: SupportAlita@epam.com Best Practices for Effective Support Requests: To help us understand and resolve your issue as quickly as possible, please ensure you provide the following information in your support email: ELITEA Environment: Clearly specify the ELITEA environment you are using (e.g., \"Nexus,\" \"Alita Lab,\" \"EYE\"). Project Details: Indicate the Project Name and whether you are working in your Private workspace or a Team project. Detailed Issue Description: Provide a clear, concise, and detailed description of the problem you are encountering. Explain what you were trying to do, what you expected to happen, and what actually occurred. Relevant Configuration Information: To help us diagnose the issue, please include relevant configuration details, such as: Agent Instructions (Screenshot or Text): If the issue is with an Agent, provide a screenshot or copy the text of your Agent's \"Instructions\" field. Toolkit Configurations (Screenshots): If the issue involves the Bitbucket toolkit or other toolkits, include screenshots of the toolkit configuration settings within your Agent. Error Messages (Full Error Text): If you are encountering an error message, please provide the complete error text . In the Chat window, expand the error details and copy the full error message. This detailed error information is crucial for diagnosis. Your Query/Prompt (Exact Text): If the issue is related to Agent execution, provide the exact query or prompt you used to trigger the issue. Before Contacting Support: We encourage you to first explore the resources available within this guide and the broader ELITEA documentation. You may find answers to common questions or solutions to known issues in the documentation.","title":"Support Contact"},{"location":"how-tos/agents-toolkits/bitbucket_toolkit/#useful-links","text":"To further enhance your understanding and skills in integrating Bitbucket with ELITEA, here are some helpful resources: Bitbucket Website : Access the main Bitbucket platform to create an account or log in. Bitbucket Workspace URL Example : Example URL to understand the structure of a Bitbucket Workspace URL and locate your Workspace ID. Bitbucket API URL : Access the base URL for the Bitbucket API endpoint, necessary for configuring the Bitbucket toolkit in ELITEA. Bitbucket App Passwords Settings : Directly navigate to the App Passwords settings page in Bitbucket to create and manage app passwords for secure integrations. ELITEA Secrets : Learn how to securely store your Bitbucket App Password using ELITEA's Secrets management feature for enhanced security. ELITEA Agents Configuration : Find out more about creating and configuring Agents in ELITEA, where you integrate the Bitbucket toolkit to automate your workflows. ELITEA Support Email : Contact the ELITEA support team for direct assistance with Bitbucket integration or any other questions and issues you may encounter.","title":"Useful Links"},{"location":"how-tos/agents-toolkits/confluence_toolkit/","text":"ELITEA Toolkit Guide: Confluence Integration Introduction Purpose of this Guide This guide is your definitive resource for integrating and effectively utilizing the Confluence toolkit within ELITEA. It provides a detailed, step-by-step walkthrough, from setting up your Confluence API token to configuring the toolkit in ELITEA and seamlessly incorporating it into your Agents. By following this guide, you will unlock the power of automated knowledge management, streamlined collaboration workflows, and enhanced information access, all directly within the ELITEA platform. This integration empowers you to leverage AI-driven automation to optimize your Confluence-driven workflows, enhance team productivity, and improve knowledge sharing within your organization. Brief Overview of Confluence Confluence, by Atlassian, is a leading team collaboration and knowledge management platform widely used by organizations to create, organize, and share information. It serves as a central hub for teams to collaborate on projects, document knowledge, and build a comprehensive knowledge base. Confluence offers a wide array of functionalities, including: Centralized Knowledge Base: Confluence provides a centralized platform for creating, storing, and organizing all types of project and organizational knowledge, including project plans, meeting notes, documentation, how-to guides, and best practices. Collaborative Page Editing: Enables real-time collaborative editing of pages, allowing teams to work together simultaneously on documents, plans, and other content, fostering teamwork and co-creation. Organized Spaces and Pages: Confluence uses a structured hierarchy of Spaces and Pages to organize information logically. Spaces can represent teams, projects, or departments, while Pages within spaces hold specific content, making it easy to navigate and find information. Rich Content Creation and Formatting: Confluence provides a rich text editor with various formatting options, templates, and macros, allowing users to create visually appealing and informative pages with diverse content types, including text, images, tables, and multimedia. Powerful Search Capabilities: Confluence offers robust search functionality, enabling users to quickly find relevant information across all spaces and pages based on keywords, labels, and content, improving information discovery and knowledge retrieval. Integrating Confluence with ELITEA brings these powerful collaboration and knowledge management capabilities directly into your AI-driven workflows. Your ELITEA Agents can then intelligently interact with your Confluence spaces and pages to automate knowledge-related tasks, enhance collaboration processes, and improve information accessibility through AI-powered automation. Toolkit's Account Setup and Configuration in Confluence Account Setup If you do not yet have a Confluence account, please follow these steps to create one: Visit Atlassian Website: Open your web browser and navigate to the official Atlassian website . Sign Up for Confluence: Click on the \"Try Confluence free\" or \"Get it free\" button to start the sign-up process. Create an Atlassian Account: Follow the prompts to create an Atlassian account. You can sign up using your email address, Google account, or Apple account. For professional use, it's recommended to use your company email address. Choose a Workspace Name: During the signup process, you will be asked to choose a workspace name for your Confluence site. Enter a suitable name for your workspace. Set Up Your Workspace: Follow the remaining onboarding steps to set up your Confluence workspace, including defining its purpose and inviting team members if needed. Explore Confluence Features: Once your workspace is set up, explore the onboarding tips and familiarize yourself with Confluence features, spaces, pages, and navigation. Token/API Key Generation: Creating an API Token in Confluence For secure integration with ELITEA, it is essential to use a Confluence API token for authentication. This method is more secure than using your primary Confluence account password directly and allows you to control access permissions. Follow these steps to generate an API token in Confluence: Log in to Confluence: Access your Confluence workspace by navigating to your Confluence URL (e.g., your-workspace.atlassian.net/wiki ) and logging in with your credentials. Access Account Settings: Click on your profile avatar in the top right corner of the Confluence interface. From the dropdown menu, select \"Manage account\" . Navigate to Security Settings: In the Atlassian account settings page, navigate to the \"Security\" section in the left-hand sidebar. Access API Tokens: Within the \"Security\" settings, locate the \"API tokens\" section and click on \"Create and manage API tokens\" . Create API Token: On the \"API tokens\" page, click the \"Create API token\" button. Name Your Token: In the \"Create API token\" dialog, enter a descriptive Label for your token, such as \"ELITEA Integration Token\" or \"ELITEA Agent Access.\" This label will help you identify the purpose of this token later. You can also set an optional expiration date if needed. Create Token: Click the \"Create\" button to generate the API token. Securely Copy and Store Your API Token: Immediately copy the generated API token that is displayed in the pop-up window. This is the only time you will see the full token value. Store it securely in a password manager or, preferably, ELITEA's built-in Secrets feature for enhanced security within ELITEA. You will need this API token to configure the Confluence toolkit in ELITEA. System Integration with ELITEA Agent Creation/Configuration To integrate Confluence functionalities into your workflows, you will need to configure the Confluence toolkit within an ELITEA Agent. You can either create a new Agent specifically for Confluence interactions or modify an existing Agent to incorporate Confluence tools. Navigate to Agents Menu: In ELITEA, go to the Agents menu from the main navigation panel. Create or Edit Agent: Create a New Agent: Click on the \"+ Agent\" button to create a new Agent. Follow the on-screen prompts to define essential Agent attributes such as Agent name, a descriptive Agent description, the desired Agent type, and initial instructions for the Agent. Edit an Existing Agent: Select the Agent you intend to integrate with Confluence from your list of Agents. Click on the Agent's name to open its configuration settings for editing. Access Tools Section: Within the Agent configuration interface, scroll down until you locate the \"Tools\" section. This section is where you will add and configure toolkits, including the Confluence toolkit. Toolkit Configuration This section provides detailed instructions on how to configure the Confluence toolkit within your ELITEA Agent. Add Toolkit: In the \"Tools\" section of the Agent configuration, click on the \"+\" icon . This action will display a dropdown list of available toolkits that can be integrated with your Agent. Select Confluence Toolkit: From the dropdown list of available toolkits, choose \"Confluence\" . Selecting \"Confluence\" will open the \"New Confluence tool\" configuration panel, where you will specify the settings for your Confluence integration. Configure Confluence Toolkit Settings: Carefully fill in the following configuration fields within the \"New Confluence tool\" section: Name: Enter a descriptive Name for this specific Confluence toolkit instance. Choose a name that is easily recognizable and helps you identify its purpose within your Agent's instructions (e.g., \"ProjectConfluence\", \"KnowledgeBaseAccess\", \"ConfluenceIntegration\"). Description: Provide a concise Description for the toolkit. This description should clarify the toolkit's purpose or the specific Confluence space it is intended to access (e.g., \"Toolkit for accessing and managing project documentation in Confluence\", \"Integration for Confluence Space 'Project Documentation'\"). URL: Enter the base URL of your Confluence instance. Ensure you use the correct format , including https:// or http:// and the full workspace URL (e.g., https://your-workspace.atlassian.net/wiki ). Username: Enter the Username associated with your Confluence account for which you generated the API token. This is typically your email address used for Confluence login. Authentication Options - API Key: Select the \"API Key\" authentication option. Password/Secret: Choose \"Password\" and paste the API token you generated in Confluence (during the \"Software-Specific Setup\" section of this guide) into the \"Password\" field. Enhanced Security with Secrets (Recommended): For enhanced security, it is strongly recommended to use ELITEA's Secrets Management feature to store your Confluence API token securely. Instead of directly pasting the token into the \"Password\" field, select the \"Secret\" option and choose the pre-configured secret containing your Confluence API token from the dropdown list. This prevents hardcoding sensitive credentials in your toolkit configuration. Space: Enter the Space name in Confluence that you want to access with this toolkit. This is the Space Key, which is typically found in the URL of your Confluence space (e.g., for URL https://your-workspace.atlassian.net/wiki/spaces/DOCS/overview , the Space Key is DOCS ). Hosting Option: Select the appropriate \"Hosting option\" for your Confluence instance: Cloud: Select \"Cloud\" if you are using Confluence Cloud (e.g., accessed via atlassian.net ). Server: Select \"Server\" if you are using a self-hosted Confluence Server or Data Center instance. Note: When connecting to an Epam Confluence instance, ensure you select \"Server\" as the Hosting option. Advanced Settings: Configure additional settings to control data fetching and presentation: Pages limit per request : Set the maximum number of pages to retrieve per request (e.g., 5 ). Max total pages : Define the maximum number of pages to retrieve in total (e.g., 10 ). Number of retries : Specify how many times the tool should retry after a failure (e.g., 2 ). Min retry, sec : Set the minimum number of seconds to wait before retrying (e.g., 10 ). Max retry, sec : Set the maximum number of seconds to wait before retrying (e.g., 60 ). Enable Desired Tools: In the \"Tools\" section within the Confluence toolkit configuration panel, select the checkboxes next to the specific Confluence tools that you want to enable for your Agent. It is crucial to enable only the tools that your Agent will actually need to use to adhere to the principle of least privilege and minimize potential security risks. Available tools include: Get pages with label - Retrieves all pages that have a specific label. List pages with label - Lists all pages that contain a specific label. Search pages - Searches for pages based on keywords or phrases. Create page - Creates a single new page in Confluence. Create pages - Creates multiple pages in Confluence. Get page tree - Retrieves the hierarchical structure of pages. Delete page - Deletes a specific page. Update page by id - Updates the content of a page identified by its ID. Update page by title - Updates the content of a page identified by its title. Update labels - Adds or removes labels from a page. Update pages - Updates multiple pages at once. Site search - Performs a search across the entire Confluence site. Search by title - Searches for pages based on their title. Read page by id - Retrieves the content of a page using its unique ID. Generic request - Allows to send custom HTTP requests to Confluence API. Complete Setup: After configuring all the necessary settings and enabling the desired tools, click the arrow icon (typically located at the top right of the toolkit configuration section) to finalize the Confluence toolkit setup and return to the main Agent configuration menu. Click Save in the Agent configuration to save all changes and activate the Confluence toolkit integration for your Agent. Tool Overview: Confluence Toolkit Functionalities Once the Confluence toolkit is successfully configured and added to your Agent, you can leverage the following tools within your Agent's instructions to enable intelligent interaction with your Confluence workspace: Get Pages with Label: Tool Name: get_pages_with_label Functionality: Retrieves a list of Confluence pages within a specified space that are tagged with a specific label. Purpose: Enables Agents to quickly access and retrieve related content based on labels, facilitating content organization, topic-based information retrieval, and automated content aggregation for specific projects or topics. List Pages with Label: Tool Name: list_pages_with_label Functionality: Lists the titles of all Confluence pages within a specified space that have a specific label. Returns a simple list of page titles. Purpose: Provides Agents with a concise overview of pages categorized by labels, enabling efficient content discovery, quick identification of relevant pages for review or further action, and streamlined content management based on labels. Search Pages: Tool Name: search_pages Functionality: Searches for Confluence pages across a specified space based on keywords or phrases provided in a query. Purpose: Enables Agents to perform targeted searches for information within a Confluence space, allowing for efficient retrieval of relevant pages based on user queries, keywords, or specific information needs, improving information discovery and access. Create Page: Tool Name: create_page Functionality: Creates a new Confluence page within a specified space with a given title and content. Purpose: Automates page creation in Confluence, allowing Agents to automatically generate new documentation pages, meeting notes, project plans, or any other type of Confluence page directly from ELITEA workflows, streamlining content creation and collaboration. Create Pages: Tool Name: create_pages Functionality: Creates multiple Confluence pages within a specified space based on a list of page titles and content. Allows for bulk creation of pages. Purpose: Enables efficient bulk creation of Confluence pages, saving time and effort when setting up new project spaces, creating documentation sets, or generating multiple pages with similar structures, improving content creation efficiency for large-scale documentation efforts. Get Page Tree: Tool Name: get_page_tree Functionality: Retrieves the hierarchical structure of pages within a Confluence space, showing parent-child relationships between pages. Purpose: Allows Agents to understand and visualize the organization of content within a Confluence space, facilitating navigation, content management, and analysis of information architecture within Confluence. Delete Page: Tool Name: delete_page Functionality: Deletes a specific Confluence page identified by its page ID. Purpose: Enables automated deletion of outdated or obsolete Confluence pages, helping maintain a clean and up-to-date knowledge base, removing irrelevant content, and ensuring the Confluence workspace remains organized and efficient. Update Page by ID: Tool Name: update_page_by_id Functionality: Updates the content of an existing Confluence page, identified by its unique Page ID, with new content. Purpose: Allows for precise and automated updates to specific Confluence pages based on their Page ID, ensuring accurate content modification, enabling dynamic content updates, and streamlining the process of keeping critical information current. Update Page by Title: Tool Name: update_page_by_title Functionality: Updates the content of a Confluence page, identified by its title, with new content. Useful when you know the page title but not the Page ID. Purpose: Provides flexibility in updating Confluence pages by allowing content updates based on page titles, simplifying content maintenance when page titles are readily available, and enabling user-friendly page updates within automated workflows. Update Labels: Tool Name: update_labels Functionality: Adds or removes labels from a specific Confluence page, identified by its Page ID. Allows for automated label management. Purpose: Enables automated categorization and tagging of Confluence pages, improving content organization, searchability, and discoverability through automated label management, streamlining content classification and information retrieval. Update Pages: Tool Name: update_pages Functionality: Updates the content of multiple Confluence pages at once, based on a list of Page IDs and their corresponding new content. Enables bulk content updates. Purpose: Facilitates efficient bulk updates of Confluence pages, saving time and effort when applying changes to multiple pages simultaneously, ensuring consistency across related documentation, and streamlining large-scale content updates. Site Search: Tool Name: site_search Functionality: Performs a search across the entire Confluence site for content matching specific keywords or phrases. Searches across all spaces and pages within the Confluence instance. Purpose: Enables broad, site-wide searches for information across Confluence, allowing Agents to locate content that matches specific keywords or user queries, even when the location of the information is unknown, improving information discovery across the entire Confluence knowledge base. Search by Title: Tool Name: search_by_title Functionality: Searches for Confluence pages specifically by their titles within a specified space. Filters search results to only include pages matching the provided title. Purpose: Allows for targeted searches for specific pages when you know the title, enabling quick and precise retrieval of pages based on their names, improving search accuracy and efficiency when looking for pages with known titles. Read Page by ID: Tool Name: read_page_by_id Functionality: Retrieves and returns the content of a Confluence page, identified by its unique Page ID. Purpose: Enables Agents to access and utilize content from specific Confluence pages, allowing retrieval of documentation, meeting notes, project information, or any page content to provide context, data, or instructions within ELITEA workflows and conversations, facilitating dynamic and context-aware automation. Generic request : Tool Name: generic_request Functionality: Allows to send custom HTTP requests to Confluence API. Purpose: Enables advanced users to interact with Confluence API directly and perform actions that are not covered by other tools. Instructions and Prompts for Using the Confluence Toolkit To effectively utilize the Confluence toolkit within your ELITEA Agents, you need to provide clear and precise instructions within the Agent's \"Instructions\" field, telling the Agent how and when to use these tools. General Instruction Structure: When instructing your Agent to use a Confluence tool, you will typically follow this pattern: Use the \"[tool_name]\" tool to [describe the action you want to perform] in Confluence. Provide the following parameters: - Parameter 1: <value or description of value> - Parameter 2: <value or description of value> - ... Example Agent Instructions for Confluence Toolkit Tools: Agent Instructions for Getting Pages with a Label: Use the \"get_pages_with_label\" tool to retrieve all Confluence pages labeled with \"project-alpha\" in the \"Project Documentation\" space. Provide the following parameters: - Space Name: \"Project Documentation\" - Label Name: \"project-alpha\" Agent Instructions for Searching Pages: Use the \"search_pages\" tool to search for Confluence pages containing the keyword \"ELITEA Agents\" in the \"ELITEA Knowledge Base\" space. Provide the following parameters: - Space Name: \"ELITEA Knowledge Base\" - Query: \"ELITEA Agents\" Agent Instructions for Creating a New Page: Use the \"create_page\" tool to create a new Confluence page in the \"Meeting Notes\" space. Provide the following parameters: - Space Name: \"Meeting Notes\" - Title: \"Project Alpha - Weekly Meeting - [Current Date]\" - Content: \"Meeting notes will be added here...\" Important Considerations for Agent Instructions: Tool Name Accuracy: Ensure you use the correct Tool Name (e.g., \"get_pages_with_label\" , \"search_pages\" , \"create_page\" ) as listed in the \"Tool Overview\" section. Typos or incorrect tool names will prevent the Agent from using the toolkit correctly. Parameter Clarity: Clearly specify the parameters required for each tool and provide instructions on where the Agent should obtain the values for these parameters (e.g., from user input, from previous steps in the workflow, or hardcoded values). Context and Examples: Provide sufficient context and examples within your Agent's \"Instructions\" to guide the LLM in understanding when and how to use the Confluence toolkit tools effectively within your desired workflow. Space and Page Identifiers: Ensure that you use the correct Space Names, Page Titles, and Page IDs in your Agent instructions. Space Names and Page Titles are case-sensitive and must exactly match the names in your Confluence workspace. When using Page IDs, ensure you are using the correct numerical ID for the intended page. Best Practices and Use Cases for Confluence Integration Best Practices for Efficient Integration Test Integration Thoroughly: After setting up the Confluence toolkit and incorporating it into your Agents, thoroughly test each tool you intend to use to ensure seamless connectivity, correct authentication, and accurate execution of Confluence actions. Monitor Agent Performance and Usage: Regularly monitor the performance of Agents utilizing Confluence toolkits. Track metrics such as task completion success rate, execution time, and error rates to identify any potential issues or areas for optimization in Agent instructions or toolkit configurations. Follow Security Best Practices: Use API Tokens: Always use Confluence API tokens instead of your main account password for integrations. Grant Least Privilege: Grant only the minimum necessary scopes/permissions to the API token to limit potential security risks. While Confluence API tokens have limited scope control, ensure you are generating tokens specifically for ELITEA integration and not reusing tokens with broader access. Securely Store Credentials: Utilize ELITEA's Secrets Management feature to securely store and manage your Confluence API tokens instead of hardcoding them directly in Agent configurations. Provide Clear Instructions and Prompts: Craft clear and unambiguous instructions within your ELITEA Agents to guide them in using the Confluence toolkit effectively. Use the prompt examples provided in this guide as a starting point and adapt them to your specific use cases. Start with Simple Use Cases: Begin by implementing Confluence integration for simpler automation tasks, such as retrieving page content or listing pages with labels, and gradually progress to more complex workflows as you gain experience and confidence with the toolkit. Utilize Advanced Settings for Performance Tuning: Leverage the \"Advanced Settings\" in the toolkit configuration to fine-tune data fetching parameters like \"Pages limit per request\" and \"Max total pages\" to optimize performance and avoid overloading the Confluence API, especially when working with large Confluence workspaces. Use Cases for Confluence Toolkit Integration The Confluence toolkit opens up a wide range of automation possibilities for knowledge management, documentation workflows, and information retrieval within ELITEA. Here are some compelling use cases: Automated Meeting Notes Archival and Summarization: Scenario: After team meetings, ELITEA Agents can automatically archive meeting notes pages in Confluence by adding a \"meeting-minutes-archive\" label and create a summary of key discussion points and action items to share with stakeholders. Tools Used: get_pages_with_label , update_labels , read_page_by_id , create_page Example Instruction: \"Use the 'get_pages_with_label' tool to find pages labeled 'meeting-notes-pending-archive'. For each page, use 'update_labels' to add the 'meeting-minutes-archive' label and remove 'meeting-notes-pending-archive'. Then, use 'read_page_by_id' to read the content of each archived page and generate a summary of key discussion points and action items. Finally, use 'create_page' to create a new page named 'Meeting Minutes Summary - [Date]' with the generated summary in the 'Meeting Minutes Summaries' space.\" Benefit: Automates meeting notes archival and summarization, saving time on manual documentation tasks, ensuring meeting notes are properly archived and key insights are readily accessible in summarized form. Dynamic FAQ Generation from Confluence Knowledge Base: Scenario: ELITEA Agents can dynamically generate FAQs for user support by searching Confluence for pages labeled \"faq\" and extracting question-answer pairs to create a dynamic FAQ resource within ELITEA. Tools Used: get_pages_with_label , read_page_by_id , site_search , search_pages Example Instruction: \"Use the 'get_pages_with_label' tool to retrieve all Confluence pages labeled 'faq' in the 'Knowledge Base' space. For each page, use 'read_page_by_id' to extract question-answer pairs from the page content. Compile these pairs to generate a dynamic FAQ resource within ELITEA. If no 'faq' labeled pages are found in the 'Knowledge Base' space, use 'site_search' to search for pages containing 'Frequently Asked Questions' across the entire Confluence site and extract FAQ content from those pages instead.\" Benefit: Enables dynamic and automated FAQ generation, ensuring users always have access to the most up-to-date FAQ information from Confluence, improving self-service support and reducing the workload on support teams. Automated Content Updates Based on External Data Sources: Scenario: ELITEA Agents can automatically update Confluence pages with information retrieved from external data sources, such as real-time metrics, reports, or database information, ensuring Confluence pages always display the latest data. Tools Used: read_page_by_id , update_page_by_id , generic_request (for external data retrieval) Example Instruction: \"Use the 'generic_request' tool to retrieve the latest sales metrics from the external sales database API. Then, use 'read_page_by_id' to get the current content of the 'Sales Dashboard' Confluence page. Update the 'Sales Metrics' section of the page with the newly retrieved sales data using 'update_page_by_id'.\" Benefit: Enables dynamic and data-driven Confluence pages, ensuring that critical dashboards, reports, and information pages always display the most current data, improving data accuracy and real-time visibility for stakeholders. Streamlined Content Migration and Bulk Updates: Scenario: When migrating content to Confluence or performing bulk updates across multiple pages, ELITEA Agents can automate the creation or updating of numerous Confluence pages based on structured data or templates. Tools Used: create_pages , update_pages Example Instruction: \"Use the 'create_pages' tool to create new Confluence pages in the 'Project Documentation' space based on the following JSON data: [{\\\"page1_name\\\": \\\"Page 1 Content\\\"}, {\\\"page2_name\\\": \\\"Page 2 Content\\\"}, ...] . For bulk updates, use 'update_pages' tool with the following JSON data: [{\\\"page_id_1\\\": \\\"new content for page 1\\\"}, {\\\"page_id_2\\\": \\\"new content for page 2\\\"}, ...] .\" Benefit: Streamlines content migration and bulk update tasks, saving significant time and effort when managing large Confluence workspaces, ensuring consistency across content, and improving efficiency for large-scale content operations. Troubleshooting and Support Troubleshooting Common Issues Connection Errors: Problem: ELITEA Agent fails to connect to Confluence, resulting in errors during toolkit execution. Possible Solutions: Verify Confluence URL: Double-check that you have entered the correct Confluence workspace URL in the toolkit configuration, including https:// or http:// and the full workspace URL (e.g., https://your-workspace.atlassian.net/wiki ). Check Username and API Token: Ensure that the Username and API Token you provided are correct and valid for your Confluence account and workspace. Carefully re-enter or copy-paste these credentials to rule out typos. Verify Hosting Option: Double-check that you have selected the correct Hosting option (Cloud or Server) in the Confluence toolkit configuration, especially when connecting to Epam's Confluence (use \"Server\"). Network Connectivity: Confirm that both your ELITEA environment and your Confluence instance are connected to the internet and that there are no network connectivity issues blocking the integration. Authorization Errors (Permission Denied/Unauthorized): Problem: Agent execution fails with \"Permission Denied\" or \"Unauthorized\" errors when trying to access or modify Confluence resources. Possible Solutions: Verify API Token Validity: Ensure that the Confluence API token you are using is still valid and has not been revoked in your Atlassian account settings. Generate a new token if necessary. Check Confluence Permissions: Confirm that the Confluence account associated with the Username and API Token has the necessary permissions to access and modify the specific Confluence space and pages your Agent is trying to interact with. Verify space and page permissions within Confluence. Hosting Option Mismatch: Double-check that you have selected the correct \"Hosting option\" (Cloud or Server) in the Confluence toolkit configuration. Using the wrong hosting option can lead to authentication and connection errors. Tool-Specific Parameter Errors: Problem: Agent execution fails for specific Confluence tools due to incorrect parameter values. Troubleshooting Steps: Verify Space Name: Ensure that you are using the correct Confluence Space Name in your Agent's instructions and toolkit configuration. Space Names are case-sensitive and must exactly match the space name in Confluence. Verify Page Titles and IDs: Double-check that you are using the correct Page Titles or Page IDs when referencing Confluence pages in your Agent's instructions. Page Titles are case-sensitive and must match the page titles in Confluence exactly. When using Page IDs, ensure you are using the correct numerical ID for the intended page. Parameter Format: Verify that you are providing parameters in the correct format expected by each Confluence tool (e.g., string values for names, numerical values for IDs, JSON format for bulk updates). Refer to the \"Instructions and Prompts for Using the Toolkit\" section for parameter details and examples. FAQs Q: Can I use my regular Confluence password for the ELITEA integration? A: No, it is strongly recommended to use a Confluence API token instead of your main account password for security reasons. API tokens provide a more secure and controlled way to grant access to external applications like ELITEA. Q: What permissions should I grant to the Confluence API Token? A: Confluence API tokens have a fixed scope (access to Confluence REST API). You don't need to select specific scopes when generating the token. However, ensure that the Confluence account associated with the API token has the necessary permissions within Confluence to access and modify the spaces and pages your Agent will be interacting with. Q: What is the correct format for the Confluence URL in the toolkit configuration? A: The Confluence URL should be entered in the full format, including https:// or http:// and the complete workspace URL (e.g., https://your-workspace.atlassian.net/wiki ). Ensure there are no typos or missing parts in the URL. For Epam Confluence, use https://kb.epam.com/ . Q: Why is my Agent getting \"Permission Denied\" errors even though I think I have configured everything correctly? A: Double-check the following: API Token Validity: Ensure that the API token is valid and has not been revoked. Confluence Account Permissions: Verify that the Confluence account associated with the API token has the necessary permissions to access the specific spaces and pages your Agent is trying to interact with. Hosting Option: Double-check that you have selected the correct \"Hosting option\" (Cloud or Server) in the toolkit configuration, especially for self-hosted or Epam Confluence instances. Support and Contact Information If you encounter any issues, have questions, or require further assistance beyond what is covered in this guide regarding the Confluence integration or ELITEA Agents in general, please do not hesitate to contact our dedicated ELITEA Support Team. We are here to help you resolve any problems quickly and efficiently and ensure you have a smooth and productive experience with ELITEA. How to Reach ELITEA Support: Email: SupportAlita@epam.com Best Practices for Effective Support Requests: To help us understand and resolve your issue as quickly as possible, please ensure you provide the following information in your support email: ELITEA Environment: Clearly specify the ELITEA environment you are using (e.g., \"Nexus,\" \"Alita Lab,\" \"EYE\"). Project Details: Indicate the Project Name and whether you are working in your Private workspace or a Team project. Detailed Issue Description: Provide a clear, concise, and detailed description of the problem you are encountering. Explain what you were trying to do, what you expected to happen, and what actually occurred. Relevant Configuration Information: To help us diagnose the issue, please include relevant configuration details, such as: Agent Instructions (Screenshot or Text): If the issue is with an Agent, provide a screenshot or copy the text of your Agent's \"Instructions\" field. Toolkit Configurations (Screenshots): If the issue involves the Confluence toolkit or other toolkits, include screenshots of the toolkit configuration settings within your Agent. Error Messages (Full Error Text): If you are encountering an error message, please provide the complete error text . In the Chat window, expand the error details and copy the full error message. This detailed error information is crucial for diagnosis. Your Query/Prompt (Exact Text): If the issue is related to Agent execution, provide the exact query or prompt you used to trigger the issue. Before Contacting Support: We encourage you to first explore the resources available within this guide and the broader ELITEA documentation. You may find answers to common questions or solutions to known issues in the documentation. Useful Links To further enhance your understanding and skills in integrating Confluence with ELITEA, here are some helpful resources: Atlassian Confluence Website : Access the main Confluence product website for product information and documentation. Atlassian Account Settings : Access your Atlassian account settings to manage your profile and API tokens. ELITEA Secrets Management : Learn how to securely store your Confluence API Token using ELITEA's Secrets management feature for enhanced security. ELITEA Agents Configuration : Find out more about creating and configuring Agents in ELITEA, where you integrate the Confluence toolkit to automate your workflows. ELITEA Support Email : Contact the ELITEA support team for direct assistance with Confluence integration or any other questions and issues you may encounter.","title":"Confluence Integration"},{"location":"how-tos/agents-toolkits/confluence_toolkit/#elitea-toolkit-guide-confluence-integration","text":"","title":"ELITEA Toolkit Guide: Confluence Integration"},{"location":"how-tos/agents-toolkits/confluence_toolkit/#introduction","text":"","title":"Introduction"},{"location":"how-tos/agents-toolkits/confluence_toolkit/#purpose-of-this-guide","text":"This guide is your definitive resource for integrating and effectively utilizing the Confluence toolkit within ELITEA. It provides a detailed, step-by-step walkthrough, from setting up your Confluence API token to configuring the toolkit in ELITEA and seamlessly incorporating it into your Agents. By following this guide, you will unlock the power of automated knowledge management, streamlined collaboration workflows, and enhanced information access, all directly within the ELITEA platform. This integration empowers you to leverage AI-driven automation to optimize your Confluence-driven workflows, enhance team productivity, and improve knowledge sharing within your organization.","title":"Purpose of this Guide"},{"location":"how-tos/agents-toolkits/confluence_toolkit/#brief-overview-of-confluence","text":"Confluence, by Atlassian, is a leading team collaboration and knowledge management platform widely used by organizations to create, organize, and share information. It serves as a central hub for teams to collaborate on projects, document knowledge, and build a comprehensive knowledge base. Confluence offers a wide array of functionalities, including: Centralized Knowledge Base: Confluence provides a centralized platform for creating, storing, and organizing all types of project and organizational knowledge, including project plans, meeting notes, documentation, how-to guides, and best practices. Collaborative Page Editing: Enables real-time collaborative editing of pages, allowing teams to work together simultaneously on documents, plans, and other content, fostering teamwork and co-creation. Organized Spaces and Pages: Confluence uses a structured hierarchy of Spaces and Pages to organize information logically. Spaces can represent teams, projects, or departments, while Pages within spaces hold specific content, making it easy to navigate and find information. Rich Content Creation and Formatting: Confluence provides a rich text editor with various formatting options, templates, and macros, allowing users to create visually appealing and informative pages with diverse content types, including text, images, tables, and multimedia. Powerful Search Capabilities: Confluence offers robust search functionality, enabling users to quickly find relevant information across all spaces and pages based on keywords, labels, and content, improving information discovery and knowledge retrieval. Integrating Confluence with ELITEA brings these powerful collaboration and knowledge management capabilities directly into your AI-driven workflows. Your ELITEA Agents can then intelligently interact with your Confluence spaces and pages to automate knowledge-related tasks, enhance collaboration processes, and improve information accessibility through AI-powered automation.","title":"Brief Overview of Confluence"},{"location":"how-tos/agents-toolkits/confluence_toolkit/#toolkits-account-setup-and-configuration-in-confluence","text":"","title":"Toolkit's Account Setup and Configuration in Confluence"},{"location":"how-tos/agents-toolkits/confluence_toolkit/#account-setup","text":"If you do not yet have a Confluence account, please follow these steps to create one: Visit Atlassian Website: Open your web browser and navigate to the official Atlassian website . Sign Up for Confluence: Click on the \"Try Confluence free\" or \"Get it free\" button to start the sign-up process. Create an Atlassian Account: Follow the prompts to create an Atlassian account. You can sign up using your email address, Google account, or Apple account. For professional use, it's recommended to use your company email address. Choose a Workspace Name: During the signup process, you will be asked to choose a workspace name for your Confluence site. Enter a suitable name for your workspace. Set Up Your Workspace: Follow the remaining onboarding steps to set up your Confluence workspace, including defining its purpose and inviting team members if needed. Explore Confluence Features: Once your workspace is set up, explore the onboarding tips and familiarize yourself with Confluence features, spaces, pages, and navigation.","title":"Account Setup"},{"location":"how-tos/agents-toolkits/confluence_toolkit/#tokenapi-key-generation-creating-an-api-token-in-confluence","text":"For secure integration with ELITEA, it is essential to use a Confluence API token for authentication. This method is more secure than using your primary Confluence account password directly and allows you to control access permissions. Follow these steps to generate an API token in Confluence: Log in to Confluence: Access your Confluence workspace by navigating to your Confluence URL (e.g., your-workspace.atlassian.net/wiki ) and logging in with your credentials. Access Account Settings: Click on your profile avatar in the top right corner of the Confluence interface. From the dropdown menu, select \"Manage account\" . Navigate to Security Settings: In the Atlassian account settings page, navigate to the \"Security\" section in the left-hand sidebar. Access API Tokens: Within the \"Security\" settings, locate the \"API tokens\" section and click on \"Create and manage API tokens\" . Create API Token: On the \"API tokens\" page, click the \"Create API token\" button. Name Your Token: In the \"Create API token\" dialog, enter a descriptive Label for your token, such as \"ELITEA Integration Token\" or \"ELITEA Agent Access.\" This label will help you identify the purpose of this token later. You can also set an optional expiration date if needed. Create Token: Click the \"Create\" button to generate the API token. Securely Copy and Store Your API Token: Immediately copy the generated API token that is displayed in the pop-up window. This is the only time you will see the full token value. Store it securely in a password manager or, preferably, ELITEA's built-in Secrets feature for enhanced security within ELITEA. You will need this API token to configure the Confluence toolkit in ELITEA.","title":"Token/API Key Generation: Creating an API Token in Confluence"},{"location":"how-tos/agents-toolkits/confluence_toolkit/#system-integration-with-elitea","text":"","title":"System Integration with ELITEA"},{"location":"how-tos/agents-toolkits/confluence_toolkit/#agent-creationconfiguration","text":"To integrate Confluence functionalities into your workflows, you will need to configure the Confluence toolkit within an ELITEA Agent. You can either create a new Agent specifically for Confluence interactions or modify an existing Agent to incorporate Confluence tools. Navigate to Agents Menu: In ELITEA, go to the Agents menu from the main navigation panel. Create or Edit Agent: Create a New Agent: Click on the \"+ Agent\" button to create a new Agent. Follow the on-screen prompts to define essential Agent attributes such as Agent name, a descriptive Agent description, the desired Agent type, and initial instructions for the Agent. Edit an Existing Agent: Select the Agent you intend to integrate with Confluence from your list of Agents. Click on the Agent's name to open its configuration settings for editing. Access Tools Section: Within the Agent configuration interface, scroll down until you locate the \"Tools\" section. This section is where you will add and configure toolkits, including the Confluence toolkit.","title":"Agent Creation/Configuration"},{"location":"how-tos/agents-toolkits/confluence_toolkit/#toolkit-configuration","text":"This section provides detailed instructions on how to configure the Confluence toolkit within your ELITEA Agent. Add Toolkit: In the \"Tools\" section of the Agent configuration, click on the \"+\" icon . This action will display a dropdown list of available toolkits that can be integrated with your Agent. Select Confluence Toolkit: From the dropdown list of available toolkits, choose \"Confluence\" . Selecting \"Confluence\" will open the \"New Confluence tool\" configuration panel, where you will specify the settings for your Confluence integration. Configure Confluence Toolkit Settings: Carefully fill in the following configuration fields within the \"New Confluence tool\" section: Name: Enter a descriptive Name for this specific Confluence toolkit instance. Choose a name that is easily recognizable and helps you identify its purpose within your Agent's instructions (e.g., \"ProjectConfluence\", \"KnowledgeBaseAccess\", \"ConfluenceIntegration\"). Description: Provide a concise Description for the toolkit. This description should clarify the toolkit's purpose or the specific Confluence space it is intended to access (e.g., \"Toolkit for accessing and managing project documentation in Confluence\", \"Integration for Confluence Space 'Project Documentation'\"). URL: Enter the base URL of your Confluence instance. Ensure you use the correct format , including https:// or http:// and the full workspace URL (e.g., https://your-workspace.atlassian.net/wiki ). Username: Enter the Username associated with your Confluence account for which you generated the API token. This is typically your email address used for Confluence login. Authentication Options - API Key: Select the \"API Key\" authentication option. Password/Secret: Choose \"Password\" and paste the API token you generated in Confluence (during the \"Software-Specific Setup\" section of this guide) into the \"Password\" field. Enhanced Security with Secrets (Recommended): For enhanced security, it is strongly recommended to use ELITEA's Secrets Management feature to store your Confluence API token securely. Instead of directly pasting the token into the \"Password\" field, select the \"Secret\" option and choose the pre-configured secret containing your Confluence API token from the dropdown list. This prevents hardcoding sensitive credentials in your toolkit configuration. Space: Enter the Space name in Confluence that you want to access with this toolkit. This is the Space Key, which is typically found in the URL of your Confluence space (e.g., for URL https://your-workspace.atlassian.net/wiki/spaces/DOCS/overview , the Space Key is DOCS ). Hosting Option: Select the appropriate \"Hosting option\" for your Confluence instance: Cloud: Select \"Cloud\" if you are using Confluence Cloud (e.g., accessed via atlassian.net ). Server: Select \"Server\" if you are using a self-hosted Confluence Server or Data Center instance. Note: When connecting to an Epam Confluence instance, ensure you select \"Server\" as the Hosting option. Advanced Settings: Configure additional settings to control data fetching and presentation: Pages limit per request : Set the maximum number of pages to retrieve per request (e.g., 5 ). Max total pages : Define the maximum number of pages to retrieve in total (e.g., 10 ). Number of retries : Specify how many times the tool should retry after a failure (e.g., 2 ). Min retry, sec : Set the minimum number of seconds to wait before retrying (e.g., 10 ). Max retry, sec : Set the maximum number of seconds to wait before retrying (e.g., 60 ). Enable Desired Tools: In the \"Tools\" section within the Confluence toolkit configuration panel, select the checkboxes next to the specific Confluence tools that you want to enable for your Agent. It is crucial to enable only the tools that your Agent will actually need to use to adhere to the principle of least privilege and minimize potential security risks. Available tools include: Get pages with label - Retrieves all pages that have a specific label. List pages with label - Lists all pages that contain a specific label. Search pages - Searches for pages based on keywords or phrases. Create page - Creates a single new page in Confluence. Create pages - Creates multiple pages in Confluence. Get page tree - Retrieves the hierarchical structure of pages. Delete page - Deletes a specific page. Update page by id - Updates the content of a page identified by its ID. Update page by title - Updates the content of a page identified by its title. Update labels - Adds or removes labels from a page. Update pages - Updates multiple pages at once. Site search - Performs a search across the entire Confluence site. Search by title - Searches for pages based on their title. Read page by id - Retrieves the content of a page using its unique ID. Generic request - Allows to send custom HTTP requests to Confluence API. Complete Setup: After configuring all the necessary settings and enabling the desired tools, click the arrow icon (typically located at the top right of the toolkit configuration section) to finalize the Confluence toolkit setup and return to the main Agent configuration menu. Click Save in the Agent configuration to save all changes and activate the Confluence toolkit integration for your Agent.","title":"Toolkit Configuration"},{"location":"how-tos/agents-toolkits/confluence_toolkit/#tool-overview-confluence-toolkit-functionalities","text":"Once the Confluence toolkit is successfully configured and added to your Agent, you can leverage the following tools within your Agent's instructions to enable intelligent interaction with your Confluence workspace: Get Pages with Label: Tool Name: get_pages_with_label Functionality: Retrieves a list of Confluence pages within a specified space that are tagged with a specific label. Purpose: Enables Agents to quickly access and retrieve related content based on labels, facilitating content organization, topic-based information retrieval, and automated content aggregation for specific projects or topics. List Pages with Label: Tool Name: list_pages_with_label Functionality: Lists the titles of all Confluence pages within a specified space that have a specific label. Returns a simple list of page titles. Purpose: Provides Agents with a concise overview of pages categorized by labels, enabling efficient content discovery, quick identification of relevant pages for review or further action, and streamlined content management based on labels. Search Pages: Tool Name: search_pages Functionality: Searches for Confluence pages across a specified space based on keywords or phrases provided in a query. Purpose: Enables Agents to perform targeted searches for information within a Confluence space, allowing for efficient retrieval of relevant pages based on user queries, keywords, or specific information needs, improving information discovery and access. Create Page: Tool Name: create_page Functionality: Creates a new Confluence page within a specified space with a given title and content. Purpose: Automates page creation in Confluence, allowing Agents to automatically generate new documentation pages, meeting notes, project plans, or any other type of Confluence page directly from ELITEA workflows, streamlining content creation and collaboration. Create Pages: Tool Name: create_pages Functionality: Creates multiple Confluence pages within a specified space based on a list of page titles and content. Allows for bulk creation of pages. Purpose: Enables efficient bulk creation of Confluence pages, saving time and effort when setting up new project spaces, creating documentation sets, or generating multiple pages with similar structures, improving content creation efficiency for large-scale documentation efforts. Get Page Tree: Tool Name: get_page_tree Functionality: Retrieves the hierarchical structure of pages within a Confluence space, showing parent-child relationships between pages. Purpose: Allows Agents to understand and visualize the organization of content within a Confluence space, facilitating navigation, content management, and analysis of information architecture within Confluence. Delete Page: Tool Name: delete_page Functionality: Deletes a specific Confluence page identified by its page ID. Purpose: Enables automated deletion of outdated or obsolete Confluence pages, helping maintain a clean and up-to-date knowledge base, removing irrelevant content, and ensuring the Confluence workspace remains organized and efficient. Update Page by ID: Tool Name: update_page_by_id Functionality: Updates the content of an existing Confluence page, identified by its unique Page ID, with new content. Purpose: Allows for precise and automated updates to specific Confluence pages based on their Page ID, ensuring accurate content modification, enabling dynamic content updates, and streamlining the process of keeping critical information current. Update Page by Title: Tool Name: update_page_by_title Functionality: Updates the content of a Confluence page, identified by its title, with new content. Useful when you know the page title but not the Page ID. Purpose: Provides flexibility in updating Confluence pages by allowing content updates based on page titles, simplifying content maintenance when page titles are readily available, and enabling user-friendly page updates within automated workflows. Update Labels: Tool Name: update_labels Functionality: Adds or removes labels from a specific Confluence page, identified by its Page ID. Allows for automated label management. Purpose: Enables automated categorization and tagging of Confluence pages, improving content organization, searchability, and discoverability through automated label management, streamlining content classification and information retrieval. Update Pages: Tool Name: update_pages Functionality: Updates the content of multiple Confluence pages at once, based on a list of Page IDs and their corresponding new content. Enables bulk content updates. Purpose: Facilitates efficient bulk updates of Confluence pages, saving time and effort when applying changes to multiple pages simultaneously, ensuring consistency across related documentation, and streamlining large-scale content updates. Site Search: Tool Name: site_search Functionality: Performs a search across the entire Confluence site for content matching specific keywords or phrases. Searches across all spaces and pages within the Confluence instance. Purpose: Enables broad, site-wide searches for information across Confluence, allowing Agents to locate content that matches specific keywords or user queries, even when the location of the information is unknown, improving information discovery across the entire Confluence knowledge base. Search by Title: Tool Name: search_by_title Functionality: Searches for Confluence pages specifically by their titles within a specified space. Filters search results to only include pages matching the provided title. Purpose: Allows for targeted searches for specific pages when you know the title, enabling quick and precise retrieval of pages based on their names, improving search accuracy and efficiency when looking for pages with known titles. Read Page by ID: Tool Name: read_page_by_id Functionality: Retrieves and returns the content of a Confluence page, identified by its unique Page ID. Purpose: Enables Agents to access and utilize content from specific Confluence pages, allowing retrieval of documentation, meeting notes, project information, or any page content to provide context, data, or instructions within ELITEA workflows and conversations, facilitating dynamic and context-aware automation. Generic request : Tool Name: generic_request Functionality: Allows to send custom HTTP requests to Confluence API. Purpose: Enables advanced users to interact with Confluence API directly and perform actions that are not covered by other tools.","title":"Tool Overview: Confluence Toolkit Functionalities"},{"location":"how-tos/agents-toolkits/confluence_toolkit/#instructions-and-prompts-for-using-the-confluence-toolkit","text":"To effectively utilize the Confluence toolkit within your ELITEA Agents, you need to provide clear and precise instructions within the Agent's \"Instructions\" field, telling the Agent how and when to use these tools. General Instruction Structure: When instructing your Agent to use a Confluence tool, you will typically follow this pattern: Use the \"[tool_name]\" tool to [describe the action you want to perform] in Confluence. Provide the following parameters: - Parameter 1: <value or description of value> - Parameter 2: <value or description of value> - ... Example Agent Instructions for Confluence Toolkit Tools: Agent Instructions for Getting Pages with a Label: Use the \"get_pages_with_label\" tool to retrieve all Confluence pages labeled with \"project-alpha\" in the \"Project Documentation\" space. Provide the following parameters: - Space Name: \"Project Documentation\" - Label Name: \"project-alpha\" Agent Instructions for Searching Pages: Use the \"search_pages\" tool to search for Confluence pages containing the keyword \"ELITEA Agents\" in the \"ELITEA Knowledge Base\" space. Provide the following parameters: - Space Name: \"ELITEA Knowledge Base\" - Query: \"ELITEA Agents\" Agent Instructions for Creating a New Page: Use the \"create_page\" tool to create a new Confluence page in the \"Meeting Notes\" space. Provide the following parameters: - Space Name: \"Meeting Notes\" - Title: \"Project Alpha - Weekly Meeting - [Current Date]\" - Content: \"Meeting notes will be added here...\" Important Considerations for Agent Instructions: Tool Name Accuracy: Ensure you use the correct Tool Name (e.g., \"get_pages_with_label\" , \"search_pages\" , \"create_page\" ) as listed in the \"Tool Overview\" section. Typos or incorrect tool names will prevent the Agent from using the toolkit correctly. Parameter Clarity: Clearly specify the parameters required for each tool and provide instructions on where the Agent should obtain the values for these parameters (e.g., from user input, from previous steps in the workflow, or hardcoded values). Context and Examples: Provide sufficient context and examples within your Agent's \"Instructions\" to guide the LLM in understanding when and how to use the Confluence toolkit tools effectively within your desired workflow. Space and Page Identifiers: Ensure that you use the correct Space Names, Page Titles, and Page IDs in your Agent instructions. Space Names and Page Titles are case-sensitive and must exactly match the names in your Confluence workspace. When using Page IDs, ensure you are using the correct numerical ID for the intended page.","title":"Instructions and Prompts for Using the Confluence Toolkit"},{"location":"how-tos/agents-toolkits/confluence_toolkit/#best-practices-and-use-cases-for-confluence-integration","text":"","title":"Best Practices and Use Cases for Confluence Integration"},{"location":"how-tos/agents-toolkits/confluence_toolkit/#best-practices-for-efficient-integration","text":"Test Integration Thoroughly: After setting up the Confluence toolkit and incorporating it into your Agents, thoroughly test each tool you intend to use to ensure seamless connectivity, correct authentication, and accurate execution of Confluence actions. Monitor Agent Performance and Usage: Regularly monitor the performance of Agents utilizing Confluence toolkits. Track metrics such as task completion success rate, execution time, and error rates to identify any potential issues or areas for optimization in Agent instructions or toolkit configurations. Follow Security Best Practices: Use API Tokens: Always use Confluence API tokens instead of your main account password for integrations. Grant Least Privilege: Grant only the minimum necessary scopes/permissions to the API token to limit potential security risks. While Confluence API tokens have limited scope control, ensure you are generating tokens specifically for ELITEA integration and not reusing tokens with broader access. Securely Store Credentials: Utilize ELITEA's Secrets Management feature to securely store and manage your Confluence API tokens instead of hardcoding them directly in Agent configurations. Provide Clear Instructions and Prompts: Craft clear and unambiguous instructions within your ELITEA Agents to guide them in using the Confluence toolkit effectively. Use the prompt examples provided in this guide as a starting point and adapt them to your specific use cases. Start with Simple Use Cases: Begin by implementing Confluence integration for simpler automation tasks, such as retrieving page content or listing pages with labels, and gradually progress to more complex workflows as you gain experience and confidence with the toolkit. Utilize Advanced Settings for Performance Tuning: Leverage the \"Advanced Settings\" in the toolkit configuration to fine-tune data fetching parameters like \"Pages limit per request\" and \"Max total pages\" to optimize performance and avoid overloading the Confluence API, especially when working with large Confluence workspaces.","title":"Best Practices for Efficient Integration"},{"location":"how-tos/agents-toolkits/confluence_toolkit/#use-cases-for-confluence-toolkit-integration","text":"The Confluence toolkit opens up a wide range of automation possibilities for knowledge management, documentation workflows, and information retrieval within ELITEA. Here are some compelling use cases: Automated Meeting Notes Archival and Summarization: Scenario: After team meetings, ELITEA Agents can automatically archive meeting notes pages in Confluence by adding a \"meeting-minutes-archive\" label and create a summary of key discussion points and action items to share with stakeholders. Tools Used: get_pages_with_label , update_labels , read_page_by_id , create_page Example Instruction: \"Use the 'get_pages_with_label' tool to find pages labeled 'meeting-notes-pending-archive'. For each page, use 'update_labels' to add the 'meeting-minutes-archive' label and remove 'meeting-notes-pending-archive'. Then, use 'read_page_by_id' to read the content of each archived page and generate a summary of key discussion points and action items. Finally, use 'create_page' to create a new page named 'Meeting Minutes Summary - [Date]' with the generated summary in the 'Meeting Minutes Summaries' space.\" Benefit: Automates meeting notes archival and summarization, saving time on manual documentation tasks, ensuring meeting notes are properly archived and key insights are readily accessible in summarized form. Dynamic FAQ Generation from Confluence Knowledge Base: Scenario: ELITEA Agents can dynamically generate FAQs for user support by searching Confluence for pages labeled \"faq\" and extracting question-answer pairs to create a dynamic FAQ resource within ELITEA. Tools Used: get_pages_with_label , read_page_by_id , site_search , search_pages Example Instruction: \"Use the 'get_pages_with_label' tool to retrieve all Confluence pages labeled 'faq' in the 'Knowledge Base' space. For each page, use 'read_page_by_id' to extract question-answer pairs from the page content. Compile these pairs to generate a dynamic FAQ resource within ELITEA. If no 'faq' labeled pages are found in the 'Knowledge Base' space, use 'site_search' to search for pages containing 'Frequently Asked Questions' across the entire Confluence site and extract FAQ content from those pages instead.\" Benefit: Enables dynamic and automated FAQ generation, ensuring users always have access to the most up-to-date FAQ information from Confluence, improving self-service support and reducing the workload on support teams. Automated Content Updates Based on External Data Sources: Scenario: ELITEA Agents can automatically update Confluence pages with information retrieved from external data sources, such as real-time metrics, reports, or database information, ensuring Confluence pages always display the latest data. Tools Used: read_page_by_id , update_page_by_id , generic_request (for external data retrieval) Example Instruction: \"Use the 'generic_request' tool to retrieve the latest sales metrics from the external sales database API. Then, use 'read_page_by_id' to get the current content of the 'Sales Dashboard' Confluence page. Update the 'Sales Metrics' section of the page with the newly retrieved sales data using 'update_page_by_id'.\" Benefit: Enables dynamic and data-driven Confluence pages, ensuring that critical dashboards, reports, and information pages always display the most current data, improving data accuracy and real-time visibility for stakeholders. Streamlined Content Migration and Bulk Updates: Scenario: When migrating content to Confluence or performing bulk updates across multiple pages, ELITEA Agents can automate the creation or updating of numerous Confluence pages based on structured data or templates. Tools Used: create_pages , update_pages Example Instruction: \"Use the 'create_pages' tool to create new Confluence pages in the 'Project Documentation' space based on the following JSON data: [{\\\"page1_name\\\": \\\"Page 1 Content\\\"}, {\\\"page2_name\\\": \\\"Page 2 Content\\\"}, ...] . For bulk updates, use 'update_pages' tool with the following JSON data: [{\\\"page_id_1\\\": \\\"new content for page 1\\\"}, {\\\"page_id_2\\\": \\\"new content for page 2\\\"}, ...] .\" Benefit: Streamlines content migration and bulk update tasks, saving significant time and effort when managing large Confluence workspaces, ensuring consistency across content, and improving efficiency for large-scale content operations.","title":"Use Cases for Confluence Toolkit Integration"},{"location":"how-tos/agents-toolkits/confluence_toolkit/#troubleshooting-and-support","text":"","title":"Troubleshooting and Support"},{"location":"how-tos/agents-toolkits/confluence_toolkit/#troubleshooting-common-issues","text":"Connection Errors: Problem: ELITEA Agent fails to connect to Confluence, resulting in errors during toolkit execution. Possible Solutions: Verify Confluence URL: Double-check that you have entered the correct Confluence workspace URL in the toolkit configuration, including https:// or http:// and the full workspace URL (e.g., https://your-workspace.atlassian.net/wiki ). Check Username and API Token: Ensure that the Username and API Token you provided are correct and valid for your Confluence account and workspace. Carefully re-enter or copy-paste these credentials to rule out typos. Verify Hosting Option: Double-check that you have selected the correct Hosting option (Cloud or Server) in the Confluence toolkit configuration, especially when connecting to Epam's Confluence (use \"Server\"). Network Connectivity: Confirm that both your ELITEA environment and your Confluence instance are connected to the internet and that there are no network connectivity issues blocking the integration. Authorization Errors (Permission Denied/Unauthorized): Problem: Agent execution fails with \"Permission Denied\" or \"Unauthorized\" errors when trying to access or modify Confluence resources. Possible Solutions: Verify API Token Validity: Ensure that the Confluence API token you are using is still valid and has not been revoked in your Atlassian account settings. Generate a new token if necessary. Check Confluence Permissions: Confirm that the Confluence account associated with the Username and API Token has the necessary permissions to access and modify the specific Confluence space and pages your Agent is trying to interact with. Verify space and page permissions within Confluence. Hosting Option Mismatch: Double-check that you have selected the correct \"Hosting option\" (Cloud or Server) in the Confluence toolkit configuration. Using the wrong hosting option can lead to authentication and connection errors. Tool-Specific Parameter Errors: Problem: Agent execution fails for specific Confluence tools due to incorrect parameter values. Troubleshooting Steps: Verify Space Name: Ensure that you are using the correct Confluence Space Name in your Agent's instructions and toolkit configuration. Space Names are case-sensitive and must exactly match the space name in Confluence. Verify Page Titles and IDs: Double-check that you are using the correct Page Titles or Page IDs when referencing Confluence pages in your Agent's instructions. Page Titles are case-sensitive and must match the page titles in Confluence exactly. When using Page IDs, ensure you are using the correct numerical ID for the intended page. Parameter Format: Verify that you are providing parameters in the correct format expected by each Confluence tool (e.g., string values for names, numerical values for IDs, JSON format for bulk updates). Refer to the \"Instructions and Prompts for Using the Toolkit\" section for parameter details and examples.","title":"Troubleshooting Common Issues"},{"location":"how-tos/agents-toolkits/confluence_toolkit/#faqs","text":"Q: Can I use my regular Confluence password for the ELITEA integration? A: No, it is strongly recommended to use a Confluence API token instead of your main account password for security reasons. API tokens provide a more secure and controlled way to grant access to external applications like ELITEA. Q: What permissions should I grant to the Confluence API Token? A: Confluence API tokens have a fixed scope (access to Confluence REST API). You don't need to select specific scopes when generating the token. However, ensure that the Confluence account associated with the API token has the necessary permissions within Confluence to access and modify the spaces and pages your Agent will be interacting with. Q: What is the correct format for the Confluence URL in the toolkit configuration? A: The Confluence URL should be entered in the full format, including https:// or http:// and the complete workspace URL (e.g., https://your-workspace.atlassian.net/wiki ). Ensure there are no typos or missing parts in the URL. For Epam Confluence, use https://kb.epam.com/ . Q: Why is my Agent getting \"Permission Denied\" errors even though I think I have configured everything correctly? A: Double-check the following: API Token Validity: Ensure that the API token is valid and has not been revoked. Confluence Account Permissions: Verify that the Confluence account associated with the API token has the necessary permissions to access the specific spaces and pages your Agent is trying to interact with. Hosting Option: Double-check that you have selected the correct \"Hosting option\" (Cloud or Server) in the toolkit configuration, especially for self-hosted or Epam Confluence instances.","title":"FAQs"},{"location":"how-tos/agents-toolkits/confluence_toolkit/#support-and-contact-information","text":"If you encounter any issues, have questions, or require further assistance beyond what is covered in this guide regarding the Confluence integration or ELITEA Agents in general, please do not hesitate to contact our dedicated ELITEA Support Team. We are here to help you resolve any problems quickly and efficiently and ensure you have a smooth and productive experience with ELITEA. How to Reach ELITEA Support: Email: SupportAlita@epam.com Best Practices for Effective Support Requests: To help us understand and resolve your issue as quickly as possible, please ensure you provide the following information in your support email: ELITEA Environment: Clearly specify the ELITEA environment you are using (e.g., \"Nexus,\" \"Alita Lab,\" \"EYE\"). Project Details: Indicate the Project Name and whether you are working in your Private workspace or a Team project. Detailed Issue Description: Provide a clear, concise, and detailed description of the problem you are encountering. Explain what you were trying to do, what you expected to happen, and what actually occurred. Relevant Configuration Information: To help us diagnose the issue, please include relevant configuration details, such as: Agent Instructions (Screenshot or Text): If the issue is with an Agent, provide a screenshot or copy the text of your Agent's \"Instructions\" field. Toolkit Configurations (Screenshots): If the issue involves the Confluence toolkit or other toolkits, include screenshots of the toolkit configuration settings within your Agent. Error Messages (Full Error Text): If you are encountering an error message, please provide the complete error text . In the Chat window, expand the error details and copy the full error message. This detailed error information is crucial for diagnosis. Your Query/Prompt (Exact Text): If the issue is related to Agent execution, provide the exact query or prompt you used to trigger the issue. Before Contacting Support: We encourage you to first explore the resources available within this guide and the broader ELITEA documentation. You may find answers to common questions or solutions to known issues in the documentation.","title":"Support and Contact Information"},{"location":"how-tos/agents-toolkits/confluence_toolkit/#useful-links","text":"To further enhance your understanding and skills in integrating Confluence with ELITEA, here are some helpful resources: Atlassian Confluence Website : Access the main Confluence product website for product information and documentation. Atlassian Account Settings : Access your Atlassian account settings to manage your profile and API tokens. ELITEA Secrets Management : Learn how to securely store your Confluence API Token using ELITEA's Secrets management feature for enhanced security. ELITEA Agents Configuration : Find out more about creating and configuring Agents in ELITEA, where you integrate the Confluence toolkit to automate your workflows. ELITEA Support Email : Contact the ELITEA support team for direct assistance with Confluence integration or any other questions and issues you may encounter.","title":"Useful Links"},{"location":"how-tos/agents-toolkits/custom_toolkit/","text":"ELITEA Toolkit Guide: ELITEA Custom Toolkit Introduction Purpose and Overview The ELITEA Custom Toolkit is a specialized development tool designed to implement custom solutions by ELITEA Development team . It provides capability to provide certain users with non standard solutions also it is a streamlined way to build, test, and iterate on the backend components of ELITEA toolkits before the corresponding frontend user interface is fully developed. This toolkit enables controlled access and rapid backend development cycles within the ELITEA platform. Important Considerations Backend Dependency: The Custom Toolkit requires a fully functional backend implementation within ELITEA to operate. Without a corresponding backend service ready to handle requests, this toolkit cannot be configured or used effectively. Configurations entered in the Custom Toolkit will have no effect if there is no backend component designed to process them. Not for General API Integrations: This toolkit is not intended for general-purpose integrations with external applications or APIs. For integrating ELITEA with external APIs (like REST APIs, SOAP APIs, etc.), you should use the \"OpenAPI Toolkit\" . Toolkit Creation and Configuration Configuration Steps To create and configure an ELITEA Custom Toolkit for testing your backend components, follow these steps: Navigate to ELITEA Agents: Access the Agent configuration section within your ELITEA instance. Configure a New Agent (or Edit Existing): Select an existing agent or create a new agent by clicking \"Create Agent\". Configure the agent by specifying the Agent Name , Description , Instructions , and Agent Type as needed for your testing purposes. (Note: The specific Agent Type must be selected depending on toolkits backend configurations.) Add a New Tool: In the Agent configuration, locate the \"Tools\" section and click the \"+\" (Add Tool) icon. Select Custom Toolkit: From the dropdown list of available toolkits, choose \"Custom\" . Enter JSON Configuration: In the \"Schema\" (or Configuration) field provided for the Custom Toolkit, enter the required configuration parameters in JSON format . The specific JSON structure and parameters will be dictated by the backend component that was developed. Crucial Configuration Note Backend Component Documentation: Refer to the documentation or specifications for your backend component to understand the exact JSON configuration schema it expects. Save Configuration: Click the \"Save\" button to save the Custom Toolkit configuration. Use Cases Leveraging User-Requested Custom Toolkits: Scenario: You have a specific and unique business need that isn't met by standard ELITEA toolkits. You request the ELITEA team to develop a custom toolkit tailored precisely to your requirements. This custom toolkit is designed for your exclusive use and may not be intended for general release. How the Custom Toolkit Enables This: The ELITEA Custom Toolkit is the primary way to integrate and utilize these user-requested, bespoke toolkits within ELITEA agents. The ELITEA team develops the backend service for your custom toolkit. You, as the user, then employ the Custom Toolkit in ELITEA to connect to and interact with this backend. You'll use JSON configurations within the Custom Toolkit to send instructions and data to your custom backend service and receive results. Example: Your organization needs to integrate ELITEA with a highly specific, internal legacy database for a niche workflow. You request a custom toolkit. The ELITEA team builds a backend service that bridges ELITEA to your legacy database. They provide you with documentation detailing the JSON configuration schema for interacting with this service. You then use the ELITEA Custom Toolkit to configure ELITEA agents. By crafting specific JSON payloads within the Custom Toolkit, your agents can now query, update, or manage data within your legacy database, directly through the custom toolkit's backend. Implementing Specialized and Niche Workflows: Scenario: You need to implement highly specialized or niche workflows within ELITEA that are not addressed by publicly available or general-purpose toolkits. These workflows might involve unique data processing, interactions with internal systems not exposed via standard APIs, or very specific business logic. How the Custom Toolkit Enables This: The Custom Toolkit allows you to directly connect to and utilize custom-built backend services within ELITEA. This is ideal for implementing workflows that require unique functionality or integrations that go beyond the scope of standard toolkits. You have full control over the backend logic and define how your agents interact with it through JSON configurations within the Custom Toolkit. Example: You are building an agent to automate a complex, multi-step internal compliance process. This process requires specialized data validation, custom rule engines, and interactions with internal audit systems. You develop a custom backend service to encapsulate this complex logic. Within ELITEA, you use the Custom Toolkit to create agents that send specific compliance-related data (as JSON) to your backend service. The backend then executes the complex compliance checks and returns results back to the agent, all orchestrated via the Custom Toolkit. Controlled Testing and Internal Access to Toolkits: Scenario: You need to test a toolkit's backend functionality in a controlled environment before broader deployment or frontend UI development. You might want to provide access to the toolkit's backend capabilities to a limited group, such as internal QA, beta testers, or a specific team, without making it widely available. How the Custom Toolkit Enables This: By configuring the Custom Toolkit within agents and controlling access to the ELITEA projects or workspaces containing these agents, you can effectively restrict who can interact with the toolkit's backend. This allows for focused testing, internal validation, and feedback gathering in a secure and controlled manner. Example: You are developing a new, sensitive data processing toolkit. Before releasing it broadly, you want your internal security team to audit its backend logic and data handling. You deploy the toolkit's backend, configure a Custom Toolkit in an ELITEA agent, and grant access to the ELITEA project containing this agent only to your security team. They can then use the agent and Custom Toolkit to send test data (via JSON configurations) to the backend, examine its behavior, and perform security assessments in a safe, isolated environment. These use cases highlight the ELITEA Custom Toolkit's role in enabling specialized, tailored, and controlled toolkit functionalities within ELITEA, particularly when dealing with user-requested custom solutions, niche workflows, and scenarios requiring restricted access for testing or internal use. Troubleshooting and Support Troubleshooting Toolkit Not Saved: Problem: You attempt to save the Custom Toolkit configuration, but it fails to save, and you may see an error message or the configuration is discarded. Possible Cause: The JSON configuration you entered in the \"Schema\" field is not valid JSON. Troubleshooting Steps: Validate JSON: Use a JSON validator tool (online or within your code editor) to check if the JSON you entered is syntactically correct. Ensure proper formatting, brackets, quotes, and data types are used. Check Required Fields: Refer to the backend component's documentation to see if there are any required fields in the JSON configuration. Ensure all mandatory fields are present and correctly formatted. Custom Tool Converted to Another Tool on UI: Problem: After entering the JSON configuration and saving, the Custom Toolkit in the UI appears to have been converted to a different toolkit type. Possible Cause: There is an existing toolkit within the ELITEA system that has been configured with the same combination of toolkit type and configuration parameters as what you entered. ELITEA might be designed to reuse existing toolkit configurations to avoid duplication. Troubleshooting Steps: Check for Existing Toolkits: Carefully review the list of available toolkits in your ELITEA environment. Look for toolkits that might have a similar name or description to what you were trying to create. Reuse Existing Toolkit (if appropriate): If you find an existing toolkit that matches your intended configuration, consider reusing it instead of creating a duplicate. Create a Unique Configuration: If you need a distinct Custom Toolkit configuration, ensure that the JSON you enter is truly unique and does not conflict with any existing toolkit configurations in the system. You might need to adjust parameter names or values to make it distinct. If the system logic is matching based on toolkit type and JSON configuration, you might need to ensure even minor variations in JSON structure. (Consult ELITEA documentation or support for details on how toolkit uniqueness is determined). Support Contact For any issues, questions, or further assistance with the Bitbucket integration or ELITEA Agents, please reach out to our dedicated ELITEA Support Team. We are committed to providing prompt and effective support to ensure your success with ELITEA. Contact ELITEA Support: Email: SupportAlita@epam.com To help us assist you efficiently, please provide the following details in your support request: ELITEA Environment: (e.g., \"Development,\" \"Testing,\" \"Production\") Project Details: Project Name, Workspace (if applicable). Detailed Issue Description: Clear explanation of the problem, steps to reproduce, expected vs. actual behavior. Custom Toolkit Configuration (JSON Payload): Provide the JSON configuration you are using with the Custom Toolkit. Error Messages (if any): Full error messages or logs observed. Details of Backend Component: (If relevant and known) Information about the backend service you are testing with the Custom Toolkit. Before Contacting Support: We encourage you to first explore the resources available within this guide and the broader ELITEA documentation. You may find answers to common questions or solutions to known issues in the documentation.","title":"Custom Toolkit"},{"location":"how-tos/agents-toolkits/custom_toolkit/#elitea-toolkit-guide-elitea-custom-toolkit","text":"","title":"ELITEA Toolkit Guide: ELITEA Custom Toolkit"},{"location":"how-tos/agents-toolkits/custom_toolkit/#introduction","text":"","title":"Introduction"},{"location":"how-tos/agents-toolkits/custom_toolkit/#purpose-and-overview","text":"The ELITEA Custom Toolkit is a specialized development tool designed to implement custom solutions by ELITEA Development team . It provides capability to provide certain users with non standard solutions also it is a streamlined way to build, test, and iterate on the backend components of ELITEA toolkits before the corresponding frontend user interface is fully developed. This toolkit enables controlled access and rapid backend development cycles within the ELITEA platform.","title":"Purpose and Overview"},{"location":"how-tos/agents-toolkits/custom_toolkit/#important-considerations","text":"Backend Dependency: The Custom Toolkit requires a fully functional backend implementation within ELITEA to operate. Without a corresponding backend service ready to handle requests, this toolkit cannot be configured or used effectively. Configurations entered in the Custom Toolkit will have no effect if there is no backend component designed to process them. Not for General API Integrations: This toolkit is not intended for general-purpose integrations with external applications or APIs. For integrating ELITEA with external APIs (like REST APIs, SOAP APIs, etc.), you should use the \"OpenAPI Toolkit\" .","title":"Important Considerations"},{"location":"how-tos/agents-toolkits/custom_toolkit/#toolkit-creation-and-configuration","text":"","title":"Toolkit Creation and Configuration"},{"location":"how-tos/agents-toolkits/custom_toolkit/#configuration-steps","text":"To create and configure an ELITEA Custom Toolkit for testing your backend components, follow these steps: Navigate to ELITEA Agents: Access the Agent configuration section within your ELITEA instance. Configure a New Agent (or Edit Existing): Select an existing agent or create a new agent by clicking \"Create Agent\". Configure the agent by specifying the Agent Name , Description , Instructions , and Agent Type as needed for your testing purposes. (Note: The specific Agent Type must be selected depending on toolkits backend configurations.) Add a New Tool: In the Agent configuration, locate the \"Tools\" section and click the \"+\" (Add Tool) icon. Select Custom Toolkit: From the dropdown list of available toolkits, choose \"Custom\" . Enter JSON Configuration: In the \"Schema\" (or Configuration) field provided for the Custom Toolkit, enter the required configuration parameters in JSON format . The specific JSON structure and parameters will be dictated by the backend component that was developed.","title":"Configuration Steps"},{"location":"how-tos/agents-toolkits/custom_toolkit/#crucial-configuration-note","text":"Backend Component Documentation: Refer to the documentation or specifications for your backend component to understand the exact JSON configuration schema it expects. Save Configuration: Click the \"Save\" button to save the Custom Toolkit configuration.","title":"Crucial Configuration Note"},{"location":"how-tos/agents-toolkits/custom_toolkit/#use-cases","text":"Leveraging User-Requested Custom Toolkits: Scenario: You have a specific and unique business need that isn't met by standard ELITEA toolkits. You request the ELITEA team to develop a custom toolkit tailored precisely to your requirements. This custom toolkit is designed for your exclusive use and may not be intended for general release. How the Custom Toolkit Enables This: The ELITEA Custom Toolkit is the primary way to integrate and utilize these user-requested, bespoke toolkits within ELITEA agents. The ELITEA team develops the backend service for your custom toolkit. You, as the user, then employ the Custom Toolkit in ELITEA to connect to and interact with this backend. You'll use JSON configurations within the Custom Toolkit to send instructions and data to your custom backend service and receive results. Example: Your organization needs to integrate ELITEA with a highly specific, internal legacy database for a niche workflow. You request a custom toolkit. The ELITEA team builds a backend service that bridges ELITEA to your legacy database. They provide you with documentation detailing the JSON configuration schema for interacting with this service. You then use the ELITEA Custom Toolkit to configure ELITEA agents. By crafting specific JSON payloads within the Custom Toolkit, your agents can now query, update, or manage data within your legacy database, directly through the custom toolkit's backend. Implementing Specialized and Niche Workflows: Scenario: You need to implement highly specialized or niche workflows within ELITEA that are not addressed by publicly available or general-purpose toolkits. These workflows might involve unique data processing, interactions with internal systems not exposed via standard APIs, or very specific business logic. How the Custom Toolkit Enables This: The Custom Toolkit allows you to directly connect to and utilize custom-built backend services within ELITEA. This is ideal for implementing workflows that require unique functionality or integrations that go beyond the scope of standard toolkits. You have full control over the backend logic and define how your agents interact with it through JSON configurations within the Custom Toolkit. Example: You are building an agent to automate a complex, multi-step internal compliance process. This process requires specialized data validation, custom rule engines, and interactions with internal audit systems. You develop a custom backend service to encapsulate this complex logic. Within ELITEA, you use the Custom Toolkit to create agents that send specific compliance-related data (as JSON) to your backend service. The backend then executes the complex compliance checks and returns results back to the agent, all orchestrated via the Custom Toolkit. Controlled Testing and Internal Access to Toolkits: Scenario: You need to test a toolkit's backend functionality in a controlled environment before broader deployment or frontend UI development. You might want to provide access to the toolkit's backend capabilities to a limited group, such as internal QA, beta testers, or a specific team, without making it widely available. How the Custom Toolkit Enables This: By configuring the Custom Toolkit within agents and controlling access to the ELITEA projects or workspaces containing these agents, you can effectively restrict who can interact with the toolkit's backend. This allows for focused testing, internal validation, and feedback gathering in a secure and controlled manner. Example: You are developing a new, sensitive data processing toolkit. Before releasing it broadly, you want your internal security team to audit its backend logic and data handling. You deploy the toolkit's backend, configure a Custom Toolkit in an ELITEA agent, and grant access to the ELITEA project containing this agent only to your security team. They can then use the agent and Custom Toolkit to send test data (via JSON configurations) to the backend, examine its behavior, and perform security assessments in a safe, isolated environment. These use cases highlight the ELITEA Custom Toolkit's role in enabling specialized, tailored, and controlled toolkit functionalities within ELITEA, particularly when dealing with user-requested custom solutions, niche workflows, and scenarios requiring restricted access for testing or internal use.","title":"Use Cases"},{"location":"how-tos/agents-toolkits/custom_toolkit/#troubleshooting-and-support","text":"","title":"Troubleshooting and Support"},{"location":"how-tos/agents-toolkits/custom_toolkit/#troubleshooting","text":"Toolkit Not Saved: Problem: You attempt to save the Custom Toolkit configuration, but it fails to save, and you may see an error message or the configuration is discarded. Possible Cause: The JSON configuration you entered in the \"Schema\" field is not valid JSON. Troubleshooting Steps: Validate JSON: Use a JSON validator tool (online or within your code editor) to check if the JSON you entered is syntactically correct. Ensure proper formatting, brackets, quotes, and data types are used. Check Required Fields: Refer to the backend component's documentation to see if there are any required fields in the JSON configuration. Ensure all mandatory fields are present and correctly formatted. Custom Tool Converted to Another Tool on UI: Problem: After entering the JSON configuration and saving, the Custom Toolkit in the UI appears to have been converted to a different toolkit type. Possible Cause: There is an existing toolkit within the ELITEA system that has been configured with the same combination of toolkit type and configuration parameters as what you entered. ELITEA might be designed to reuse existing toolkit configurations to avoid duplication. Troubleshooting Steps: Check for Existing Toolkits: Carefully review the list of available toolkits in your ELITEA environment. Look for toolkits that might have a similar name or description to what you were trying to create. Reuse Existing Toolkit (if appropriate): If you find an existing toolkit that matches your intended configuration, consider reusing it instead of creating a duplicate. Create a Unique Configuration: If you need a distinct Custom Toolkit configuration, ensure that the JSON you enter is truly unique and does not conflict with any existing toolkit configurations in the system. You might need to adjust parameter names or values to make it distinct. If the system logic is matching based on toolkit type and JSON configuration, you might need to ensure even minor variations in JSON structure. (Consult ELITEA documentation or support for details on how toolkit uniqueness is determined).","title":"Troubleshooting"},{"location":"how-tos/agents-toolkits/custom_toolkit/#support-contact","text":"For any issues, questions, or further assistance with the Bitbucket integration or ELITEA Agents, please reach out to our dedicated ELITEA Support Team. We are committed to providing prompt and effective support to ensure your success with ELITEA. Contact ELITEA Support: Email: SupportAlita@epam.com To help us assist you efficiently, please provide the following details in your support request: ELITEA Environment: (e.g., \"Development,\" \"Testing,\" \"Production\") Project Details: Project Name, Workspace (if applicable). Detailed Issue Description: Clear explanation of the problem, steps to reproduce, expected vs. actual behavior. Custom Toolkit Configuration (JSON Payload): Provide the JSON configuration you are using with the Custom Toolkit. Error Messages (if any): Full error messages or logs observed. Details of Backend Component: (If relevant and known) Information about the backend service you are testing with the Custom Toolkit. Before Contacting Support: We encourage you to first explore the resources available within this guide and the broader ELITEA documentation. You may find answers to common questions or solutions to known issues in the documentation.","title":"Support Contact"},{"location":"how-tos/agents-toolkits/github_toolkit/","text":"ELITEA Toolkit Guide: GitHub Integration Introduction Purpose of this Guide This guide is your definitive resource for integrating and utilizing the GitHub toolkit within ELITEA. It provides a comprehensive, step-by-step walkthrough, from generating a GitHub Personal Access Token to configuring the toolkit in ELITEA and effectively using it within your Agents. By following this guide, you will unlock the power of automated code management, streamlined development workflows, and enhanced team collaboration, all directly within the ELITEA platform. This integration empowers you to leverage AI-driven automation to optimize your software development lifecycle using the combined strengths of ELITEA and GitHub. Brief Overview of GitHub GitHub is the world's leading web-based platform for version control, collaboration, and software development. It is built around Git and provides a rich ecosystem for developers to host, manage, and collaborate on code. GitHub is essential for modern software development, offering features for: Robust Version Control: Leveraging Git, GitHub meticulously tracks every change to your code, enabling seamless collaboration, easy rollback to previous states, and a complete history of project evolution. Streamlined Code Collaboration: Facilitate effective teamwork with features like pull requests for code review, in-line commenting, and branch-based development workflows, fostering a collaborative coding environment. Centralized Code Hosting: Provides a secure, reliable, and globally accessible platform for hosting and managing your Git repositories, ensuring code availability and integrity. Powerful Workflow Automation (GitHub Actions): Enables you to automate your software development lifecycle with GitHub Actions, including building, testing, and deploying code directly from your repositories. Issue Tracking and Project Management: Integrated issue tracking and project management tools help teams organize tasks, track bugs, and manage projects directly within the GitHub platform. Integrating GitHub with ELITEA brings these powerful development capabilities directly into your AI-driven workflows. Your ELITEA Agents can then interact with your GitHub repositories to automate code-related tasks, enhance development processes, and improve team collaboration through intelligent automation, making your development workflows smarter and more efficient. Toolkit's Account Setup and Configuration in GitHub Account Setup If you don't already have a GitHub account, follow these steps to create one: Visit GitHub Website: Open your web browser and go to github.com . Sign Up: Click on the \"Sign up\" button, located in the top right corner of the homepage. Enter Details: Follow the on-screen instructions to create your account. You will need to choose a username, provide your email address, and create a strong password. Verify Email: Check your inbox for a verification email from GitHub. Click the verification link in the email to activate your account. Log In: Once your email is verified, log in to GitHub using your newly created username and password. Token/API Key Generation: Creating a Personal Access Token (Classic) in GitHub For secure integration with ELITEA, it is essential to use a GitHub Personal Access Token (Classic) . This method is significantly more secure than using your primary GitHub account password directly and allows you to precisely control the permissions granted to ELITEA. Follow these steps to generate a Personal Access Token (Classic) in GitHub: Log in to GitHub: Access your GitHub account at github.com . Access Settings: Click on your profile avatar in the top right corner and then click on \"Settings\" . Navigate to Developer Settings: In the left-hand sidebar, scroll down and click on \"Developer settings\" . Access Personal Access Tokens (Classic): In the left-hand sidebar under \"Personal access tokens,\" click on \"Tokens (classic)\" . Generate New Token: Click the \"Generate new token (classic)\" button. Note: If you have previously created tokens, you might see a \"Generate new token\" button instead. Provide Token Details: Note (Description): In the \"Note\" field, enter a descriptive label for your token, such as \"ELITEA Integration\" or \"ELITEA Agent Access.\" This will help you easily identify the purpose of this token in the future. Expiration (Recommended): For enhanced security, it is highly recommended to set an Expiration date for your token. Choose a reasonable validity period to limit the token's lifespan. If compromised, a token with a shorter lifespan poses less risk. Select Scopes - Grant Least Privilege (Crucial for Security): Carefully and deliberately select the scopes or permissions you grant to this token. It is paramount to grant only the absolute minimum necessary permissions required for your ELITEA Agent's intended interactions with GitHub. Overly permissive tokens pose a significant security risk. For typical ELITEA integration, consider these minimal scopes: Minimal Scopes for Common Use Cases: repo (For full access to private and public repositories. If possible, select more granular repo scopes instead of full repo ): repo:status (Access commit statuses) public_repo (Access public repositories) workflow (Access GitHub Actions workflows if your Agent needs to interact with workflows) read:user (To read user profile information, often needed for basic interactions) Additional Scopes for Specific Functionality (Grant only if needed): issues (To access and manage issues) pull_request (To access and manage pull requests) gist (To access gists, if your Agent needs to work with gists) read:org (To read organization membership and information, if your Agent needs organization-level access) Important Security Practices: Principle of Least Privilege: Strictly adhere to the principle of least privilege. Grant only the scopes that are absolutely essential for your ELITEA Agent to perform its intended tasks. Avoid \"admin\" or Broad Scopes: Never grant \"admin\" or overly broad permissions unless absolutely necessary and with a clear understanding of the security implications. Broad scopes significantly increase the potential security impact if the token is compromised. Regular Token Review and Rotation: Regularly review the tokens you have generated and their associated scopes. Rotate tokens periodically (generate new ones and revoke old ones) as a security best practice, especially for sensitive integrations. Generate Token: Click the \"Generate token\" button at the bottom of the page. Securely Copy and Store the Personal Access Token: Immediately copy the generated token that is displayed on the next page. This is the only time you will be able to see and copy the full token value. Store it securely using a robust password manager or, preferably, ELITEA's built-in Secrets feature for enhanced security within the ELITEA platform. You will need this token to configure the GitHub toolkit in ELITEA. GitHub Integration with ELITEA Agent Creation/Configuration To integrate GitHub, you'll need to configure it within an ELITEA Agent. You can integrate GitHub with a new Agent or modify an existing one. Navigate to Agents Menu: In ELITEA, go to the Agents menu. Create or Edit Agent: New Agent: Click \"+ Agent\" to create a new Agent. Follow the steps to define Agent details such as name, description, type, and instructions. Existing Agent: Select the Agent you wish to integrate with GitHub and click on its name to edit its configuration. Access Toolkits Section: Within the Agent configuration, scroll down to the \"Tools\" section. Toolkit Configuration This section details how to configure the GitHub toolkit within your ELITEA Agent. Add Toolkit: In the \"Tools\" section, click the \"+\" icon . Select GitHub Toolkit: From the dropdown list of available toolkits, choose \"GitHub\" . This will open the \"New GitHub tool\" configuration section. Configure GitHub Toolkit Settings: Fill in the following configuration fields in the \"New GitHub tool\" section: Name: Enter a descriptive Name for your GitHub toolkit instance. This name will be used to reference the toolkit within your Agent's instructions (e.g., \"MyGitHubRepo\", \"CodeRepoAccess\"). Choose a name that clearly indicates its purpose. Description: Provide a concise Description of the toolkit's purpose or the specific GitHub repository it will access (e.g., \"Access to the main development code repository\"). URL: This field is pre-filled with the standard GitHub API URL: https://api.github.com . In the vast majority of cases, you should not modify this URL. Only change it if you are connecting to a self-hosted GitHub Enterprise Server instance, in which case you should enter the specific API URL for your Enterprise Server. Repository: Enter the Repository name that you want to access with this toolkit. Use the format: repository_owner/repository_name (e.g., MyOrganization/my-project-repo ). Ensure you use the correct owner/organization and repository name. Main branch: Specify the Main branch of your repository. This is typically main or master . Authentication Options - Token: Select the \"Token\" authentication option. Password/Secret: Choose \"Password\" and then paste the Personal Access Token (Classic) you generated in GitHub (during the \"Software-Specific Setup\" section of this guide) into the \"Password\" field. Enhanced Security with Secrets (Recommended): For significantly enhanced security, it is strongly recommended to use the \"Secret\" option. Select \"Secret\" and then choose a pre-configured secret from the dropdown list. You must first securely store your Personal Access Token as a Secret within ELITEA's Secrets Management feature. Using Secrets is a critical security best practice that prevents hardcoding sensitive credentials directly in the toolkit configuration, reducing the risk of exposure. Enable Desired Tools: In the \"Tools\" section within the GitHub toolkit configuration, carefully select the checkboxes next to only the specific GitHub tools that your Agent will actually need to use. Enable only the tools that are absolutely necessary to adhere to the principle of least privilege and minimize potential security risks. Available tools include: Get issues - Retrieves a list of issues. Get issue - Retrieves details of a specific issue. Search issues - Searches for issues based on provided criteria. Create issue - Creates a new issue. Update issue - Updates an existing issue. Comment on issue - Adds a comment to an issue. List open pull requests (PRs) - Lists open pull requests. Get pull request - Retrieves details of a specific pull request. List pull request files - Lists files changed in a pull request. Create pull request - Creates a new pull request. Create file - Creates a new file. Read file - Reads the content of a file. Update file - Updates the content of an existing file. Delete file - Deletes a file. List files in branch - Lists files in a branch. List branches in repo - Lists branches in the repository. Set active branch - Sets the active branch. Create branch - Creates a new branch. Get files from directory - Retrieves files from a directory. Complete Setup: Click the arrow icon (usually located at the top right of the toolkit configuration section) to finalize the GitHub toolkit setup and return to the main Agent configuration menu. Click Save in the Agent configuration to save all changes. Tool Overview Once the GitHub toolkit is configured and added to your Agent, you can utilize the following tools within your Agent's instructions to enable interaction with your GitHub repositories: Get Issues: Tool Name: get_issues Functionality: Retrieves a list of issues from the specified GitHub repository. Supports filtering and sorting based on various criteria like state, labels, assignees, and creation date. Purpose: Enables Agents to efficiently fetch and organize issue lists for task management, prioritization of bug fixes and feature requests, generating reports on project issues, or providing users with summarized views of project issues directly within ELITEA workflows. Get Issue: Tool Name: get_issue Functionality: Retrieves detailed information about a specific issue from a GitHub repository using its issue number. Includes comprehensive details such as issue title, description, status, labels, assignees, creation and update dates, and all associated comments and metadata. Purpose: Allows Agents to access in-depth issue details for providing rich context during problem-solving, summarizing the complete status of a particular issue, or incorporating comprehensive issue information into ELITEA conversations, reports, and automated workflows. Search Issues: Tool Name: search_issues Functionality: Searches for issues across the specified GitHub repository based on a query string. Supports advanced search syntax and filters to refine search results by keywords, authors, labels, state, and more. Purpose: Enables Agents to perform targeted searches for issues matching specific criteria, facilitating efficient retrieval of relevant issues based on keywords, user queries, or workflow requirements. Useful for finding issues related to specific topics, bugs, or feature areas. Create Issue: Tool Name: create_issue Functionality: Creates a new issue in the specified GitHub repository. Requires parameters such as issue title and body, and optionally supports setting assignees, labels, and milestones during issue creation. Purpose: Automates the process of issue creation directly from ELITEA workflows. Allows Agents to automatically log bugs, feature requests, or tasks based on user input, workflow triggers, or analysis results, streamlining issue reporting and task management. Update Issue: Tool Name: update_issue Functionality: Updates an existing issue in the specified GitHub repository. Allows modification of issue attributes such as title, body, status (open/closed), assignees, and labels. Requires the issue number to identify the issue to be updated. Purpose: Enables Agents to automate issue status updates, assignment changes, priority adjustments, or content modifications based on workflow progress, user actions, or external events. Facilitates dynamic issue management and keeps issue tracking information current and accurate. Comment on Issue: Tool Name: comment_on_issue Functionality: Adds a new comment to a specific issue in a GitHub repository. Requires the issue number and the comment text as parameters. Purpose: Automates communication and updates within issue tracking workflows by allowing Agents to add comments to GitHub issues directly from ELITEA. Streamlines providing status updates, asking for clarifications, notifying stakeholders, or logging automated actions related to specific issues. List Open Pull Requests (PRs): Tool Name: list_open_pull_requests Functionality: Retrieves a list of currently open pull requests from the specified GitHub repository. Provides an overview of pending code changes and code review activities. Purpose: Enables Agents to fetch lists of open pull requests for code review management, generating reminders for pending reviews, creating reports on code changes in progress, or providing users with summaries of open PRs within ELITEA, improving code review workflow efficiency. Get Pull Request: Tool Name: get_pull_request Functionality: Retrieves detailed information about a specific pull request from a GitHub repository using its pull request number. Includes details like PR title, description, status, associated commits, comments, reviewers, and merge status. Purpose: Allows Agents to access comprehensive pull request details for in-depth code review assistance, providing complete context on specific pull requests, facilitating informed decision-making during code merging, or incorporating detailed PR information into ELITEA workflows and reports. List Pull Request Files: Tool Name: list_pull_request_files Functionality: Retrieves a list of files that have been changed within a specific pull request in a GitHub repository. Highlights the specific code modifications introduced by the pull request. Purpose: Enables Agents to provide concise summaries of files changed in a pull request, facilitate efficient code review by quickly listing modified files for reviewers, or analyze the scope and potential impact of code changes introduced by a PR within ELITEA workflows, aiding in impact assessment and review focus. Create Pull Request: Tool Name: create_pull_request Functionality: Creates a new pull request in the specified GitHub repository. Requires parameters such as the source branch, target branch, pull request title, and body. Purpose: Automates the pull request creation process for code contributions, feature branches, or bug fixes directly from ELITEA. Significantly streamlines the code review and merging process, reduces manual effort for developers, and accelerates development cycles by automating the initiation of code integration. Create File: Tool Name: create_file Functionality: Creates a new file within the specified GitHub repository at a specified path with provided content. Purpose: Automates the creation of new code files, documentation files, configuration files, or any other type of file within your repository directly from ELITEA workflows. Ensures consistency in file creation, reduces manual file creation tasks, and enables automated generation of project assets. Read File: Tool Name: read_file Functionality: Reads and retrieves the content of a specific file from the specified GitHub repository, based on the file path and branch name. Purpose: Enables Agents to dynamically retrieve code snippets, configuration parameters, documentation content, or any file content from your repository. Provides context, data, or instructions to your ELITEA Agent or to users within ELITEA conversations, facilitating dynamic, data-driven, and context-aware workflows. Update File: Tool Name: update_file Functionality: Updates the content of a specific, existing file within a GitHub repository. Replaces the entire file content with the provided new content. Purpose: Automates the process of updating code files, documentation, configuration files, or any file content within your repository based on ELITEA workflow outputs, user requests, or external triggers. Ensures configurations are synchronized, documentation is kept up-to-date, and codebase modifications are automated. Delete File: Tool Name: delete_file Functionality: Deletes a specific file from a GitHub repository, based on the file path and branch name. Purpose: Automates file deletion tasks within your repository, such as removing obsolete files, cleaning up temporary files generated by ELITEA workflows, or enforcing codebase cleanup policies. Helps maintain a clean, organized, and efficient codebase by automating file lifecycle management. List Files in Branch: Tool Name: list_files_in_branch Functionality: Retrieves a list of files present in a specific branch of a GitHub repository. Provides a flat list of file paths within the branch. Purpose: Allows Agents to programmatically browse repository contents, provide users with file lists for navigation and file selection within ELITEA, or analyze file structures within automated workflows, facilitating file-based operations and repository exploration. List Branches in Repo: Tool Name: list_branches_in_repo Functionality: Retrieves a list of all branches available in the specified GitHub repository. Provides a simple list of branch names. Purpose: Enables Agents to get a comprehensive list of branches for branch management automation, generating reports on repository branching structure, providing users with branch selection options within ELITEA workflows, or automating branch-related decision-making processes. Set Active Branch: Tool Name: set_active_branch Functionality: Sets a specific branch as the currently active branch within the GitHub toolkit's context. Affects subsequent file-related operations to target the specified branch. Purpose: Ensures that subsequent file operations (like read_file , update_file , create_file , delete_file ) performed by the Agent are directed to the correct branch. Improves workflow accuracy, prevents unintended modifications to incorrect branches, and provides branch context for file actions. Create Branch: Tool Name: create_branch Functionality: Creates a new branch in the specified GitHub repository, branching off from a specified base branch. Requires the new branch name and the base branch name as parameters. Purpose: Automates the creation of new branches for feature development, bug fixes, experimental code changes, or any branching requirement directly from ELITEA. Streamlines branch management, speeds up development workflows by automating branch setup, and reduces manual steps for initiating new development work streams. Get files from directory: Tool Name: get_files_from_directory Functionality: Retrieves a list of files located within a specific directory in a GitHub repository. Allows retrieval of files from a specified subdirectory path within a branch. Purpose: Enables Agents to retrieve file listings from specific directories, facilitating focused navigation within complex repositories, targeting relevant files within a directory structure for processing, or automating directory-specific file management tasks within ELITEA workflows, improving efficiency when working with organized file sets. Instructions and Prompts for Using the GitHub Toolkit To effectively instruct your ELITEA Agent to use the GitHub toolkit, you need to provide clear and precise instructions within the Agent's \"Instructions\" field. These instructions are crucial for guiding the Agent on when and how to utilize the available GitHub tools to achieve your desired automation goals. Instruction Creation for OpenAI Agents When crafting instructions for the GitHub toolkit, especially for OpenAI-based Agents, clarity and precision are paramount. Break down complex tasks into a sequence of simple, actionable steps. Explicitly define all parameters required for each tool and guide the Agent on how to obtain or determine the values for these parameters. OpenAI Agents respond best to instructions that are: Direct and Action-Oriented: Employ strong action verbs and clear commands to initiate actions. For example, \"Use the 'read_file' tool...\", \"Create a branch named...\", \"List all open pull requests...\". Parameter-Centric: Clearly enumerate each parameter required by the tool. For each parameter, specify: Its name (exactly as expected by the tool). The format or type of value expected. How the Agent should obtain the value \u2013 whether from user input, derived from previous steps in the conversation, retrieved from an external source, or a predefined static value. Contextually Rich: Provide sufficient context so the Agent understands the overarching objective and the specific scenario in which each GitHub tool should be applied within the broader workflow. Explain the desired outcome or goal for each tool invocation. Step-by-Step Structure: Organize instructions into a numbered or bulleted list of steps for complex workflows. This helps the Agent follow a logical sequence of actions. When instructing your Agent to use a GitHub toolkit tool, adhere to this structured pattern: 1. **State the Goal:** Begin by clearly stating the objective you want to achieve with this step. For example, \"Goal: To retrieve the content of the 'README.md' file.\" 2. **Specify the Tool:** Clearly indicate the specific GitHub tool to be used for this step. For example, \"Tool: Use the 'read_file' tool.\" 3. **Define Parameters:** Provide a detailed list of all parameters required by the selected tool. For each parameter: - Parameter Name: `<Parameter Name as defined in tool documentation>` - Value or Source: `<Specify the value or how to obtain the value. Examples: \"user input\", \"from previous step\", \"hardcoded value 'main'\", \"value of variable X\">` 4. **Describe Expected Outcome (Optional but Recommended):** Briefly describe the expected result or outcome after the tool is successfully executed. For example, \"Outcome: The Agent will provide the content of the 'README.md' file.\" Example Agent Instructions for GitHub Toolkit Tools (Optimized for OpenAI Agents): Agent Instructions for Updating a File: 1. Goal: Update the 'config.json' file in the 'settings' branch with new configuration values provided by the user. 2. Tool: Use the \"update_file\" tool. 3. Parameters: - Repository Name: \"Specify the repository name in 'owner/repo' format. Use the repository configured in the GitHub toolkit.\" - File Path: \"config.json\" - Branch Name: \"settings\" - New Content: \"Ask the user for the new JSON configuration content. Ensure it is valid JSON format. Example: {\\\"setting\\\": \\\"new_value\\\"}\" 4. Outcome: The 'config.json' file in the 'settings' branch will be updated with the user-provided JSON configuration. Confirm the update to the user. Agent Instructions for Creating a New Feature Branch: 1. Goal: Create a new feature branch for implementing user authentication, named 'feature-user-auth', branching from the 'develop' branch. 2. Tool: Use the \"create_branch\" tool. 3. Parameters: - Repository Name: \"Specify the repository name in 'owner/repo' format. Use the repository configured in the GitHub toolkit.\" - New Branch Name: \"feature-user-auth\" - Base Branch: \"develop\" 4. Outcome: A new branch named 'feature-user-auth' will be created in the repository, based on the 'develop' branch. Inform the user that the branch has been created. Agent Instructions for Listing Branches in a Repository: 1. Goal: Provide the user with a list of all branches in the repository to help them understand the project's branch structure. 2. Tool: Use the \"list_branches_in_repo\" tool. 3. Parameters: - Repository Name: \"Specify the repository name in 'owner/repo' format. Use the repository configured in the GitHub toolkit.\" 4. Outcome: Present the list of branches to the user in a clear and readable format. Agent Instructions for Reading a File from a Repository: 1. Goal: Retrieve the content of the 'README.md' file from the 'main' branch to provide the user with a project overview. 2. Tool: Use the \"read_file\" tool. 3. Parameters: - Repository Name: \"Specify the repository name in 'owner/repo' format. Use the repository configured in the GitHub toolkit.\" - File Path: \"README.md\" - Branch Name: \"main\" 4. Outcome: Display the content of the 'README.md' file to the user. Conversation Starters Utilize these conversation starters to initiate interactions with your GitHub-integrated Agent. These are useful for both testing the integration and for common usage scenarios. 1. For Testing and Troubleshooting Connection & Configuration: These conversation starters are specifically designed to verify if the GitHub toolkit is correctly configured, authenticated, and successfully connected to your GitHub repository. They test basic functionalities to ensure the integration is working as expected. \"List branches in the repository.\" - This starter tests basic connectivity to GitHub and verifies read permissions for branch listing. \"Read the file 'README.md' from the main branch.\" - This starter further tests read permissions and the ability to access and retrieve file content from the repository. \"Create a new branch named 'test-connection' based on main.\" - This starter tests write permissions (if enabled in your token scopes) and the branch creation functionality. Important: Remember to manually delete the 'test-connection' branch from your repository after successful testing to maintain repository hygiene. \"List open pull requests.\" - Tests the ability to retrieve pull request data, verifying permissions for PR access. \"Get issues.\" - Tests the ability to retrieve issue data, verifying permissions for issue access. 2. For General Agent Usage Scenarios & Workflow Initiation: These conversation starters demonstrate how to initiate agent execution for common, practical GitHub-related tasks and workflows. They represent typical user requests and showcase the agent's ability to perform useful actions within GitHub. \"I need to update the documentation file 'user_guide.md' with details about the new API endpoints. Can you help me update it in GitHub?\" - This starter could trigger a workflow involving read_file to get the current documentation content, potentially some content modification steps, and then update_file to save the updated documentation back to the repository. \"Create a pull request to merge my 'feature-x' branch into 'develop' for code review and integration.\" - This starter directly initiates the create_pull_request tool to automate the pull request creation process. \"What are the currently open feature branches in the repository that need code review?\" - This starter would utilize the list_branches_in_repo tool (potentially combined with issue or PR data) to provide a project status overview, specifically focusing on feature branches awaiting review. \"I want to add a new configuration file named 'deployment.config' to the 'config' directory in the main branch with these settings: [provide configuration settings here]. Can you create this file for me?\" - This starter would use the create_file tool to automate the creation of a new configuration file with user-specified content in the designated repository location. \"Comment on issue #123 with 'I have completed the code changes and addressed the feedback.'\" - This starter directly uses the comment_on_issue tool to add a comment to a specific GitHub issue, automating communication within issue tracking. These conversation starters offer a solid foundation for interacting with your GitHub-integrated ELITEA Agent. They can be further customized and expanded upon to precisely match your specific use cases, workflows, and the unique automation needs of your software development projects. Use Cases The GitHub toolkit unlocks numerous automation possibilities for software development workflows within ELITEA. Here are key use cases, demonstrating how each tool can be applied, formatted to match the Bitbucket guide style: Automated Retrieval of High-Priority Issues: Scenario: At the start of each workday, development teams need to be aware of critical, high-priority bug issues requiring immediate attention. Tools Used: get_issues Example Instruction: \"Use the 'get_issues' tool to retrieve a list of issues from the repository that are labeled 'priority:high'. Present the issue titles and descriptions.\" Benefit: Proactively informs developers about critical issues, enabling them to focus on high-priority bug fixes, improve issue resolution times, and minimize potential disruptions. Contextual Issue Details for Support and Troubleshooting: Scenario: During a troubleshooting session or support interaction, quick access to detailed information about a specific GitHub issue is needed to understand the problem and provide context. Tools Used: get_issue Example Instruction: \"Use the 'get_issue' tool to get details for issue number [issue_number]. Summarize the issue title, description, and the latest comments for the user.\" Benefit: Provides users with quick, contextual access to detailed issue information directly within ELITEA, improving understanding, facilitating faster problem-solving, and enhancing communication around specific issues. Intelligent Issue Search for Targeted Information Retrieval: Scenario: Project managers or developers need to find issues related to a specific topic or keyword within the repository to track progress or identify related tasks. Tools Used: search_issues Example Instruction: \"Use the 'search_issues' tool to find all open issues in the repository that contain the keywords '[search_keywords]' in their title or description. List the titles and issue numbers.\" Benefit: Enables efficient and targeted issue discovery based on keywords and search criteria. Allows users to quickly locate relevant issues, track progress on specific features or bug areas, and identify related tasks or discussions. Automated Bug Reporting from User Feedback: Scenario: When users report bugs through ELITEA-integrated support channels, automatically create corresponding issues in the GitHub repository for the development team to address. Tools Used: create_issue Example Instruction: \"Use the 'create_issue' tool to create a new issue in the repository with the title '[issue_title]' and body '[issue_description]'. Add labels 'bug' and 'reported-by-user'.\" Benefit: Streamlines bug reporting by automating issue creation directly from user feedback. Reduces manual effort, ensures consistent bug report formatting, and accelerates the process of logging and triaging new issues. Dynamic Issue Status Updates Based on Workflow Events: Scenario: Automatically update the status of a GitHub issue to 'closed' when a linked code change (e.g., pull request merge) is completed in ELITEA, reflecting the issue resolution in the tracking system. Tools Used: update_issue Example Instruction: \"Use the 'update_issue' tool to update issue number [issue_number]. Set the issue status to 'closed' and add a comment 'Issue resolved by commit [commit_hash]'.\" Benefit: Automates issue lifecycle management, ensuring issue statuses are always synchronized with the actual development progress. Reduces manual status updates, improves issue tracking accuracy, and provides a clear audit trail of issue resolution. Real-time Issue Commenting for Enhanced Collaboration: Scenario: Allow ELITEA Agents to automatically add comments to GitHub issues to provide updates, request information, or log actions taken within ELITEA workflows, keeping issue discussions current. Tools Used: comment_on_issue Example Instruction: \"Use the 'comment_on_issue' tool to add a comment to issue number [issue_number] with the text '[comment_text]'.\" Benefit: Streamlines communication within issue tracking, enabling automated updates and feedback directly within GitHub issues. Keeps all stakeholders informed, reduces manual communication overhead, and centralizes issue-related discussions. Proactive Pull Request Review Reminders: Scenario: Automatically remind developers about open pull requests awaiting their review to expedite code reviews and maintain a smooth development pipeline. Tools Used: list_open_pull_requests Example Instruction: \"Use the 'list_open_pull_requests' tool to get a list of open pull requests assigned to [developer_username]. Send a summary of these PRs to the developer as a reminder.\" Benefit: Improves code review workflow efficiency by providing automated reminders. Helps developers prioritize code reviews, reduces bottlenecks in the code integration process, and promotes timely code integration. Quick Access to Pull Request Details for Code Review: Scenario: During code review discussions within ELITEA, provide reviewers with immediate access to the full details of a specific pull request to facilitate informed and efficient reviews. Tools Used: get_pull_request Example Instruction: \"Use the 'get_pull_request' tool to get details for pull request number [pr_number]. Display the PR title, description, status, and reviewer information.\" Benefit: Provides code reviewers with immediate access to comprehensive pull request information directly within ELITEA, facilitating informed and efficient code reviews without context switching. Efficient Code Review Preparation with File Lists: Scenario: Before starting a code review, provide reviewers with a list of files changed in a pull request to help them understand the scope of changes and plan their review approach. Tools Used: list_pull_request_files Example Instruction: \"Use the 'list_pull_request_files' tool to get a list of files changed in pull request number [pr_number]. Present this list to the code reviewers before the review meeting.\" Benefit: Enhances code review preparation and efficiency by providing reviewers with a clear overview of the files modified in a pull request beforehand, enabling better planning and focused review efforts. Automated Pull Request Creation for Code Contributions: Scenario: After a developer completes a code modification task within ELITEA, automatically initiate the code review process by creating a pull request for their changes in GitHub. Tools Used: create_pull_request Example Instruction: \"Use the 'create_pull_request' tool to create a pull request from branch '[source_branch]' to branch '[target_branch]' with the title '[pr_title]' and description '[pr_description]'.\" Benefit: Automates the pull request creation process, significantly reducing manual effort for developers and streamlining the code contribution workflow. Ensures code changes are promptly submitted for review and integration. Templated File Creation for Code Consistency: Scenario: When creating new code components or modules, automatically generate template files in the repository to enforce coding standards and project conventions. Tools Used: create_file Example Instruction: \"Use the 'create_file' tool to create a new file at path '[file_path]' with the content from the template '[template_content]'. Ensure the file extension is '.js'.\" Benefit: Automates file creation using templates, enforcing coding standards and consistency across the codebase. Reduces manual file creation effort and ensures adherence to project conventions for new files. Dynamic Configuration Loading from Repository Files: Scenario: Dynamically load application configuration settings from a configuration file stored in the GitHub repository to ensure ELITEA workflows are always using the latest configurations. Tools Used: read_file Example Instruction: \"Use the 'read_file' tool to read the content of the file '[config_file_path]' from the 'main' branch. Parse the content as JSON and use the configuration values in the workflow.\" Benefit: Enables dynamic configuration management, allowing ELITEA to adapt its behavior based on configuration files stored in GitHub. Ensures configurations are centrally managed, version-controlled, and consistently applied. Automated Documentation Updates for Code Changes: Scenario: When code changes are merged that affect API documentation, automatically update the corresponding documentation files in the repository to keep documentation synchronized with the codebase. Tools Used: read_file , update_file Example Instruction: \"Use 'read_file' to get the current content of '[docs_file_path]'. Update the content with the new API documentation and use 'update_file' to save the updated content back to '[docs_file_path]' in the 'main' branch.\" Benefit: Keeps documentation synchronized with the latest codebase, reducing manual effort and errors in documentation maintenance. Ensures accurate and up-to-date documentation for users and developers. Automated Cleanup of Obsolete Code Files: Scenario: Periodically delete obsolete or unused code files from designated directories in the repository to maintain codebase cleanliness and reduce technical debt. Tools Used: delete_file Example Instruction: \"Use the 'delete_file' tool to delete the file at path '[obsolete_file_path]' from the 'cleanup' branch. Verify the file is no longer needed before deletion.\" Benefit: Helps maintain a clean and organized codebase by automating the removal of unnecessary files. Reduces repository clutter, improves code navigability, and enhances long-term project maintainability. Codebase Exploration and File Navigation within ELITEA: Scenario: Allow users to easily browse the file structure of a specific branch in the GitHub repository directly within ELITEA to explore code or locate specific files. Tools Used: list_files_in_branch Example Instruction: \"Use the 'list_files_in_branch' tool to list all files in the branch '[branch_name]'. Present the file list to the user in a tree-like structure if possible.\" Benefit: Provides users with a convenient way to browse repository contents directly within ELITEA, enabling easy navigation and file selection for further actions without switching to GitHub. Project Overview with Branch Listing and Summaries: Scenario: Provide project managers with an automated overview of all active branches in the repository, including their last commit dates, to monitor development activity and branch management. Tools Used: list_branches_in_repo Example Instruction: \"Use the 'list_branches_in_repo' tool to list all branches in the repository. For each branch, retrieve the date of the last commit and present a summary to the project manager.\" Benefit: Provides project managers with an automated overview of repository branches, facilitating project monitoring, branch management, and understanding of the current development landscape within the repository. Branch Context Management for Workflow Reliability: Scenario: Ensure that a series of automated code modification operations are performed within the correct branch context to prevent unintended changes and maintain workflow integrity. Tools Used: set_active_branch Example Instruction: \"First, use 'set_active_branch' to set the active branch to '[target_branch]'. Then, proceed with the file modification operations within this active branch context.\" Benefit: Ensures operations are performed on the intended branch, reducing the risk of errors and unintended modifications to the wrong branch. Improves the reliability and accuracy of automated workflows involving file operations. Automated Sprint Branch Creation for Agile Development: Scenario: At the beginning of each sprint, automatically create a new sprint branch in the repository to provide a dedicated space for sprint-related development activities, following agile development practices. Tools Used: create_branch Example Instruction: \"Use the 'create_branch' tool to create a new branch named 'sprint-[sprint_number]' based on the 'develop' branch. Notify the development team about the new sprint branch.\" Benefit: Automates branch creation for sprint-based development, streamlining sprint setup and ensuring organized code management for each sprint cycle. Reduces manual branch creation steps and promotes branch-based development best practices. Directory-Specific File Retrieval for Focused Operations: Scenario: Retrieve a list of all configuration files located within the 'config' directory of the repository to enable centralized access and management of project configurations within ELITEA workflows. Tools Used: get_files_from_directory Example Instruction: \"Use the 'get_files_from_directory' tool to get a list of files from the 'config' directory in the 'main' branch. Present the list of configuration files to the user.\" Benefit: Provides a focused way to access and manage files within specific directories, enabling efficient retrieval of configuration files, documentation sets, or other organized file groups within the repository structure, improving workflow efficiency when working with structured file sets. Troubleshooting and Support Troubleshooting Connection Errors: Problem: ELITEA Agent fails to establish a connection with GitHub, resulting in errors during toolkit execution. Troubleshooting Steps: Verify GitHub API URL: Ensure that the URL field in the toolkit configuration is correctly set to the standard GitHub API URL: https://api.github.com . Avoid modifying this URL unless you are using GitHub Enterprise Server. Check Personal Access Token (PAT): Double-check that the Personal Access Token (Classic) you have provided is accurate, has not expired, and is valid for your GitHub account and the target repository. Carefully re-enter or copy-paste the token to rule out typos. Verify Token Scopes: Review the scopes/permissions granted to your Personal Access Token in GitHub. Ensure that the token has the necessary scopes (e.g., repo , workflow , issues , pull_request ) for the specific GitHub tools your Agent is attempting to use. Insufficient scopes are a common cause of connection and permission errors. Network Connectivity: Confirm that both your ELITEA environment and the GitHub service are connected to the internet and that there are no network connectivity issues, firewalls, or proxies blocking the integration. Test network connectivity to api.github.com from your ELITEA environment if possible. Authorization Errors (Permission Denied/Unauthorized): Problem: Agent execution fails with \"Permission Denied\" or \"Unauthorized\" errors when attempting to access or modify GitHub resources, even with a seemingly valid token. Troubleshooting Steps: Re-verify Token Scopes: Double-check the scopes/permissions granted to your Personal Access Token with extreme care. Ensure that the token possesses the precise scopes required for the specific GitHub actions your Agent is trying to perform. For example, creating files or pull requests requires scopes that grant write access ( repo scope or granular write:repo scopes). Repository Access Permissions: Confirm that the GitHub account associated with the Personal Access Token has the necessary access permissions to the specified repository. Verify that the account is a collaborator, member of the organization that owns the repository, or has the appropriate roles and permissions (e.g., write access for modifying repositories). Check repository settings in GitHub to confirm access levels. Token Revocation or Expiration: Ensure that the Personal Access Token has not been accidentally revoked in GitHub settings or that it has not reached its expiration date if you set one. Generate a new token if necessary. Incorrect Repository or Branch Names: Problem: Agent tools fail to operate on the intended repository or branch, often resulting in \"Repository not found\" or \"Branch not found\" errors. Troubleshooting Steps: Double-Check Repository Name: Carefully and meticulously verify that you have entered the correct GitHub Repository name in the toolkit configuration within ELITEA. Pay close attention to capitalization, spelling, and the repository_owner/repository_name format. Even minor typos can cause errors. Verify Branch Name Spelling and Case: Ensure that you are using the correct branch name (e.g., main , develop , feature-branch ) in your Agent's instructions when specifying branch-related parameters for GitHub tools. Branch names in Git are case-sensitive. Double-check the spelling and capitalization of branch names against your repository in GitHub. Branch Existence: Confirm that the specified branch actually exists in your GitHub repository. It's possible the branch name is correct but the branch was deleted or renamed. FAQ Q: Can I use my regular GitHub password directly for the ELITEA integration instead of a Personal Access Token? A: No, using a GitHub Personal Access Token (Classic) is mandatory and strongly recommended for security. Direct password authentication is not supported for ELITEA's GitHub toolkit integration. Personal Access Tokens provide a significantly more secure and controlled method for granting access to external applications like ELITEA, without exposing your primary account credentials. Q: What scopes/permissions are absolutely necessary and minimally sufficient for the GitHub Personal Access Token to work with ELITEA? A: The minimum required scopes depend on the specific GitHub tools your ELITEA Agent will be using. For basic read-only access to repositories (e.g., using read_file , list_files_in_branch ), the repo:status and public_repo scopes might suffice. However, for most common integration scenarios involving modifications (e.g., create_file , update_file , create_pull_request ), you will need the broader repo scope or more granular repo write scopes. For issue and pull request management, include issues and pull_request scopes respectively. Always adhere to the principle of least privilege and grant only the scopes that are strictly necessary for your Agent's intended functionalities. Refer to the GitHub documentation for detailed scope descriptions. Q: What is the correct format for specifying the GitHub Repository name in the ELITEA toolkit configuration? A: The GitHub Repository name must be entered in the format repository_owner/repository_name (e.g., MyOrganization/my-project-repo ). Ensure you include both the repository owner's username or organization name and the repository name, separated by a forward slash / . This format is crucial for ELITEA to correctly identify and access your repository on GitHub. Q: Why am I consistently encountering \"Permission Denied\" errors, even though I believe I have configured everything correctly and granted the necessary permissions? A: If you are still facing \"Permission Denied\" errors despite careful configuration, systematically re-examine the following: Token Scope Accuracy: Double and triple-check the scopes/permissions granted to your GitHub Personal Access Token in your GitHub Developer Settings. Ensure that the token possesses the exact scopes required for each GitHub tool your Agent is attempting to use. Pay close attention to write vs. read permissions. Repository Access Verification: Explicitly verify that the GitHub account associated with the Personal Access Token has the necessary access rights to the specific target repository within GitHub itself. Confirm repository membership, collaborator status, and assigned roles/permissions within the GitHub repository settings. Token Validity and Revocation: Double-check that the Personal Access Token is still valid, has not expired, and has not been accidentally revoked in your GitHub settings. Generate a new token as a test if unsure. Typographical Errors: Carefully review all configuration fields in ELITEA, especially the Repository name, Username (though less relevant for token auth), and the Token itself for any hidden typographical errors or accidental whitespace. If, after meticulously checking all of these points, you still encounter \"Permission Denied\" errors, please reach out to ELITEA Support with detailed information for further assistance. Support and Contact Information If you encounter any persistent issues, have further questions, or require additional assistance beyond the scope of this guide regarding the GitHub integration or ELITEA Agents in general, please do not hesitate to contact our dedicated ELITEA Support Team. We are committed to providing timely and effective support to ensure you have a seamless and productive experience with ELITEA. How to Reach ELITEA Support: Email: SupportAlita@epam.com Best Practices for Submitting Effective Support Requests: To enable our support team to understand and resolve your issue as efficiently as possible, please include the following critical information in your support email: ELITEA Environment Details: Clearly specify the ELITEA environment you are currently using (e.g., \"Nexus,\" \"Alita Lab,\" \"EYE,\" or the specific name of your ELITEA instance). Project Context: Indicate the Project Name within ELITEA where you are experiencing the issue and specify whether you are working in your Private workspace or a Team project. Detailed Issue Description: Provide a clear, concise, and comprehensive description of the problem you are encountering. Articulate precisely what you were attempting to do, what behavior you expected to observe, and what actually occurred (the unexpected behavior or error). Step-by-step descriptions are highly valuable. Relevant Configuration Information (Screenshots Preferred): To facilitate efficient diagnosis, please include relevant configuration details, ideally as screenshots: Agent Instructions (Screenshot or Text Export): If the issue is related to a specific Agent's behavior, provide a screenshot of the Agent's \"Instructions\" field or export the instructions as text. Toolkit Configurations (Screenshots): If the issue involves the GitHub toolkit or any other toolkits, include clear screenshots of the toolkit configuration settings as they appear within your Agent's configuration in ELITEA. Complete Error Messages (Full Text): If you are encountering any error messages, please provide the complete and unabridged error text . In the ELITEA Chat window, expand the error details section (if available) and copy the entire error message text. Detailed error information is often crucial for accurate diagnosis. Your Query/Prompt (Exact Text): If the issue is related to Agent execution or an unexpected response, provide the exact query or prompt you used to trigger the Agent's action that led to the problem. Pre-Support Request Actions (Self-Help): Before contacting support, we strongly encourage you to first thoroughly explore the resources available within this comprehensive guide and the broader ELITEA documentation. You may find readily available answers to common questions, solutions to known issues, or configuration guidance within these resources, potentially resolving your issue more quickly. Useful Links To further enhance your understanding and skills in integrating GitHub with ELITEA, here are some helpful resources: GitHub Website : Access the main GitHub platform to create an account or log in. GitHub Developer Settings : Navigate to the Developer settings in your GitHub account to manage Personal Access Tokens and other developer-related configurations. GitHub Personal Access Tokens (Classic) : Directly access the section in GitHub settings to manage your Personal Access Tokens (Classic) for secure integrations. GitHub API URL : Access the base URL for the GitHub API endpoint, necessary for configuring the GitHub toolkit in ELITEA. ELITEA Secrets Management : Learn how to securely store your GitHub Personal Access Token using ELITEA's Secrets management feature for enhanced security. ELITEA Agents Configuration : Find out more about creating and configuring Agents in ELITEA, where you integrate the GitHub toolkit to automate your workflows. ELITEA Support Email : Contact the ELITEA support team for direct assistance with GitHub integration or any other questions and issues you may encounter.","title":"GitHub Integration"},{"location":"how-tos/agents-toolkits/github_toolkit/#elitea-toolkit-guide-github-integration","text":"","title":"ELITEA Toolkit Guide: GitHub Integration"},{"location":"how-tos/agents-toolkits/github_toolkit/#introduction","text":"","title":"Introduction"},{"location":"how-tos/agents-toolkits/github_toolkit/#purpose-of-this-guide","text":"This guide is your definitive resource for integrating and utilizing the GitHub toolkit within ELITEA. It provides a comprehensive, step-by-step walkthrough, from generating a GitHub Personal Access Token to configuring the toolkit in ELITEA and effectively using it within your Agents. By following this guide, you will unlock the power of automated code management, streamlined development workflows, and enhanced team collaboration, all directly within the ELITEA platform. This integration empowers you to leverage AI-driven automation to optimize your software development lifecycle using the combined strengths of ELITEA and GitHub.","title":"Purpose of this Guide"},{"location":"how-tos/agents-toolkits/github_toolkit/#brief-overview-of-github","text":"GitHub is the world's leading web-based platform for version control, collaboration, and software development. It is built around Git and provides a rich ecosystem for developers to host, manage, and collaborate on code. GitHub is essential for modern software development, offering features for: Robust Version Control: Leveraging Git, GitHub meticulously tracks every change to your code, enabling seamless collaboration, easy rollback to previous states, and a complete history of project evolution. Streamlined Code Collaboration: Facilitate effective teamwork with features like pull requests for code review, in-line commenting, and branch-based development workflows, fostering a collaborative coding environment. Centralized Code Hosting: Provides a secure, reliable, and globally accessible platform for hosting and managing your Git repositories, ensuring code availability and integrity. Powerful Workflow Automation (GitHub Actions): Enables you to automate your software development lifecycle with GitHub Actions, including building, testing, and deploying code directly from your repositories. Issue Tracking and Project Management: Integrated issue tracking and project management tools help teams organize tasks, track bugs, and manage projects directly within the GitHub platform. Integrating GitHub with ELITEA brings these powerful development capabilities directly into your AI-driven workflows. Your ELITEA Agents can then interact with your GitHub repositories to automate code-related tasks, enhance development processes, and improve team collaboration through intelligent automation, making your development workflows smarter and more efficient.","title":"Brief Overview of GitHub"},{"location":"how-tos/agents-toolkits/github_toolkit/#toolkits-account-setup-and-configuration-in-github","text":"","title":"Toolkit's Account Setup and Configuration in GitHub"},{"location":"how-tos/agents-toolkits/github_toolkit/#account-setup","text":"If you don't already have a GitHub account, follow these steps to create one: Visit GitHub Website: Open your web browser and go to github.com . Sign Up: Click on the \"Sign up\" button, located in the top right corner of the homepage. Enter Details: Follow the on-screen instructions to create your account. You will need to choose a username, provide your email address, and create a strong password. Verify Email: Check your inbox for a verification email from GitHub. Click the verification link in the email to activate your account. Log In: Once your email is verified, log in to GitHub using your newly created username and password.","title":"Account Setup"},{"location":"how-tos/agents-toolkits/github_toolkit/#tokenapi-key-generation-creating-a-personal-access-token-classic-in-github","text":"For secure integration with ELITEA, it is essential to use a GitHub Personal Access Token (Classic) . This method is significantly more secure than using your primary GitHub account password directly and allows you to precisely control the permissions granted to ELITEA. Follow these steps to generate a Personal Access Token (Classic) in GitHub: Log in to GitHub: Access your GitHub account at github.com . Access Settings: Click on your profile avatar in the top right corner and then click on \"Settings\" . Navigate to Developer Settings: In the left-hand sidebar, scroll down and click on \"Developer settings\" . Access Personal Access Tokens (Classic): In the left-hand sidebar under \"Personal access tokens,\" click on \"Tokens (classic)\" . Generate New Token: Click the \"Generate new token (classic)\" button. Note: If you have previously created tokens, you might see a \"Generate new token\" button instead. Provide Token Details: Note (Description): In the \"Note\" field, enter a descriptive label for your token, such as \"ELITEA Integration\" or \"ELITEA Agent Access.\" This will help you easily identify the purpose of this token in the future. Expiration (Recommended): For enhanced security, it is highly recommended to set an Expiration date for your token. Choose a reasonable validity period to limit the token's lifespan. If compromised, a token with a shorter lifespan poses less risk. Select Scopes - Grant Least Privilege (Crucial for Security): Carefully and deliberately select the scopes or permissions you grant to this token. It is paramount to grant only the absolute minimum necessary permissions required for your ELITEA Agent's intended interactions with GitHub. Overly permissive tokens pose a significant security risk. For typical ELITEA integration, consider these minimal scopes: Minimal Scopes for Common Use Cases: repo (For full access to private and public repositories. If possible, select more granular repo scopes instead of full repo ): repo:status (Access commit statuses) public_repo (Access public repositories) workflow (Access GitHub Actions workflows if your Agent needs to interact with workflows) read:user (To read user profile information, often needed for basic interactions) Additional Scopes for Specific Functionality (Grant only if needed): issues (To access and manage issues) pull_request (To access and manage pull requests) gist (To access gists, if your Agent needs to work with gists) read:org (To read organization membership and information, if your Agent needs organization-level access) Important Security Practices: Principle of Least Privilege: Strictly adhere to the principle of least privilege. Grant only the scopes that are absolutely essential for your ELITEA Agent to perform its intended tasks. Avoid \"admin\" or Broad Scopes: Never grant \"admin\" or overly broad permissions unless absolutely necessary and with a clear understanding of the security implications. Broad scopes significantly increase the potential security impact if the token is compromised. Regular Token Review and Rotation: Regularly review the tokens you have generated and their associated scopes. Rotate tokens periodically (generate new ones and revoke old ones) as a security best practice, especially for sensitive integrations. Generate Token: Click the \"Generate token\" button at the bottom of the page. Securely Copy and Store the Personal Access Token: Immediately copy the generated token that is displayed on the next page. This is the only time you will be able to see and copy the full token value. Store it securely using a robust password manager or, preferably, ELITEA's built-in Secrets feature for enhanced security within the ELITEA platform. You will need this token to configure the GitHub toolkit in ELITEA.","title":"Token/API Key Generation: Creating a Personal Access Token (Classic) in GitHub"},{"location":"how-tos/agents-toolkits/github_toolkit/#github-integration-with-elitea","text":"","title":"GitHub Integration with ELITEA"},{"location":"how-tos/agents-toolkits/github_toolkit/#agent-creationconfiguration","text":"To integrate GitHub, you'll need to configure it within an ELITEA Agent. You can integrate GitHub with a new Agent or modify an existing one. Navigate to Agents Menu: In ELITEA, go to the Agents menu. Create or Edit Agent: New Agent: Click \"+ Agent\" to create a new Agent. Follow the steps to define Agent details such as name, description, type, and instructions. Existing Agent: Select the Agent you wish to integrate with GitHub and click on its name to edit its configuration. Access Toolkits Section: Within the Agent configuration, scroll down to the \"Tools\" section.","title":"Agent Creation/Configuration"},{"location":"how-tos/agents-toolkits/github_toolkit/#toolkit-configuration","text":"This section details how to configure the GitHub toolkit within your ELITEA Agent. Add Toolkit: In the \"Tools\" section, click the \"+\" icon . Select GitHub Toolkit: From the dropdown list of available toolkits, choose \"GitHub\" . This will open the \"New GitHub tool\" configuration section. Configure GitHub Toolkit Settings: Fill in the following configuration fields in the \"New GitHub tool\" section: Name: Enter a descriptive Name for your GitHub toolkit instance. This name will be used to reference the toolkit within your Agent's instructions (e.g., \"MyGitHubRepo\", \"CodeRepoAccess\"). Choose a name that clearly indicates its purpose. Description: Provide a concise Description of the toolkit's purpose or the specific GitHub repository it will access (e.g., \"Access to the main development code repository\"). URL: This field is pre-filled with the standard GitHub API URL: https://api.github.com . In the vast majority of cases, you should not modify this URL. Only change it if you are connecting to a self-hosted GitHub Enterprise Server instance, in which case you should enter the specific API URL for your Enterprise Server. Repository: Enter the Repository name that you want to access with this toolkit. Use the format: repository_owner/repository_name (e.g., MyOrganization/my-project-repo ). Ensure you use the correct owner/organization and repository name. Main branch: Specify the Main branch of your repository. This is typically main or master . Authentication Options - Token: Select the \"Token\" authentication option. Password/Secret: Choose \"Password\" and then paste the Personal Access Token (Classic) you generated in GitHub (during the \"Software-Specific Setup\" section of this guide) into the \"Password\" field. Enhanced Security with Secrets (Recommended): For significantly enhanced security, it is strongly recommended to use the \"Secret\" option. Select \"Secret\" and then choose a pre-configured secret from the dropdown list. You must first securely store your Personal Access Token as a Secret within ELITEA's Secrets Management feature. Using Secrets is a critical security best practice that prevents hardcoding sensitive credentials directly in the toolkit configuration, reducing the risk of exposure. Enable Desired Tools: In the \"Tools\" section within the GitHub toolkit configuration, carefully select the checkboxes next to only the specific GitHub tools that your Agent will actually need to use. Enable only the tools that are absolutely necessary to adhere to the principle of least privilege and minimize potential security risks. Available tools include: Get issues - Retrieves a list of issues. Get issue - Retrieves details of a specific issue. Search issues - Searches for issues based on provided criteria. Create issue - Creates a new issue. Update issue - Updates an existing issue. Comment on issue - Adds a comment to an issue. List open pull requests (PRs) - Lists open pull requests. Get pull request - Retrieves details of a specific pull request. List pull request files - Lists files changed in a pull request. Create pull request - Creates a new pull request. Create file - Creates a new file. Read file - Reads the content of a file. Update file - Updates the content of an existing file. Delete file - Deletes a file. List files in branch - Lists files in a branch. List branches in repo - Lists branches in the repository. Set active branch - Sets the active branch. Create branch - Creates a new branch. Get files from directory - Retrieves files from a directory. Complete Setup: Click the arrow icon (usually located at the top right of the toolkit configuration section) to finalize the GitHub toolkit setup and return to the main Agent configuration menu. Click Save in the Agent configuration to save all changes.","title":"Toolkit Configuration"},{"location":"how-tos/agents-toolkits/github_toolkit/#tool-overview","text":"Once the GitHub toolkit is configured and added to your Agent, you can utilize the following tools within your Agent's instructions to enable interaction with your GitHub repositories: Get Issues: Tool Name: get_issues Functionality: Retrieves a list of issues from the specified GitHub repository. Supports filtering and sorting based on various criteria like state, labels, assignees, and creation date. Purpose: Enables Agents to efficiently fetch and organize issue lists for task management, prioritization of bug fixes and feature requests, generating reports on project issues, or providing users with summarized views of project issues directly within ELITEA workflows. Get Issue: Tool Name: get_issue Functionality: Retrieves detailed information about a specific issue from a GitHub repository using its issue number. Includes comprehensive details such as issue title, description, status, labels, assignees, creation and update dates, and all associated comments and metadata. Purpose: Allows Agents to access in-depth issue details for providing rich context during problem-solving, summarizing the complete status of a particular issue, or incorporating comprehensive issue information into ELITEA conversations, reports, and automated workflows. Search Issues: Tool Name: search_issues Functionality: Searches for issues across the specified GitHub repository based on a query string. Supports advanced search syntax and filters to refine search results by keywords, authors, labels, state, and more. Purpose: Enables Agents to perform targeted searches for issues matching specific criteria, facilitating efficient retrieval of relevant issues based on keywords, user queries, or workflow requirements. Useful for finding issues related to specific topics, bugs, or feature areas. Create Issue: Tool Name: create_issue Functionality: Creates a new issue in the specified GitHub repository. Requires parameters such as issue title and body, and optionally supports setting assignees, labels, and milestones during issue creation. Purpose: Automates the process of issue creation directly from ELITEA workflows. Allows Agents to automatically log bugs, feature requests, or tasks based on user input, workflow triggers, or analysis results, streamlining issue reporting and task management. Update Issue: Tool Name: update_issue Functionality: Updates an existing issue in the specified GitHub repository. Allows modification of issue attributes such as title, body, status (open/closed), assignees, and labels. Requires the issue number to identify the issue to be updated. Purpose: Enables Agents to automate issue status updates, assignment changes, priority adjustments, or content modifications based on workflow progress, user actions, or external events. Facilitates dynamic issue management and keeps issue tracking information current and accurate. Comment on Issue: Tool Name: comment_on_issue Functionality: Adds a new comment to a specific issue in a GitHub repository. Requires the issue number and the comment text as parameters. Purpose: Automates communication and updates within issue tracking workflows by allowing Agents to add comments to GitHub issues directly from ELITEA. Streamlines providing status updates, asking for clarifications, notifying stakeholders, or logging automated actions related to specific issues. List Open Pull Requests (PRs): Tool Name: list_open_pull_requests Functionality: Retrieves a list of currently open pull requests from the specified GitHub repository. Provides an overview of pending code changes and code review activities. Purpose: Enables Agents to fetch lists of open pull requests for code review management, generating reminders for pending reviews, creating reports on code changes in progress, or providing users with summaries of open PRs within ELITEA, improving code review workflow efficiency. Get Pull Request: Tool Name: get_pull_request Functionality: Retrieves detailed information about a specific pull request from a GitHub repository using its pull request number. Includes details like PR title, description, status, associated commits, comments, reviewers, and merge status. Purpose: Allows Agents to access comprehensive pull request details for in-depth code review assistance, providing complete context on specific pull requests, facilitating informed decision-making during code merging, or incorporating detailed PR information into ELITEA workflows and reports. List Pull Request Files: Tool Name: list_pull_request_files Functionality: Retrieves a list of files that have been changed within a specific pull request in a GitHub repository. Highlights the specific code modifications introduced by the pull request. Purpose: Enables Agents to provide concise summaries of files changed in a pull request, facilitate efficient code review by quickly listing modified files for reviewers, or analyze the scope and potential impact of code changes introduced by a PR within ELITEA workflows, aiding in impact assessment and review focus. Create Pull Request: Tool Name: create_pull_request Functionality: Creates a new pull request in the specified GitHub repository. Requires parameters such as the source branch, target branch, pull request title, and body. Purpose: Automates the pull request creation process for code contributions, feature branches, or bug fixes directly from ELITEA. Significantly streamlines the code review and merging process, reduces manual effort for developers, and accelerates development cycles by automating the initiation of code integration. Create File: Tool Name: create_file Functionality: Creates a new file within the specified GitHub repository at a specified path with provided content. Purpose: Automates the creation of new code files, documentation files, configuration files, or any other type of file within your repository directly from ELITEA workflows. Ensures consistency in file creation, reduces manual file creation tasks, and enables automated generation of project assets. Read File: Tool Name: read_file Functionality: Reads and retrieves the content of a specific file from the specified GitHub repository, based on the file path and branch name. Purpose: Enables Agents to dynamically retrieve code snippets, configuration parameters, documentation content, or any file content from your repository. Provides context, data, or instructions to your ELITEA Agent or to users within ELITEA conversations, facilitating dynamic, data-driven, and context-aware workflows. Update File: Tool Name: update_file Functionality: Updates the content of a specific, existing file within a GitHub repository. Replaces the entire file content with the provided new content. Purpose: Automates the process of updating code files, documentation, configuration files, or any file content within your repository based on ELITEA workflow outputs, user requests, or external triggers. Ensures configurations are synchronized, documentation is kept up-to-date, and codebase modifications are automated. Delete File: Tool Name: delete_file Functionality: Deletes a specific file from a GitHub repository, based on the file path and branch name. Purpose: Automates file deletion tasks within your repository, such as removing obsolete files, cleaning up temporary files generated by ELITEA workflows, or enforcing codebase cleanup policies. Helps maintain a clean, organized, and efficient codebase by automating file lifecycle management. List Files in Branch: Tool Name: list_files_in_branch Functionality: Retrieves a list of files present in a specific branch of a GitHub repository. Provides a flat list of file paths within the branch. Purpose: Allows Agents to programmatically browse repository contents, provide users with file lists for navigation and file selection within ELITEA, or analyze file structures within automated workflows, facilitating file-based operations and repository exploration. List Branches in Repo: Tool Name: list_branches_in_repo Functionality: Retrieves a list of all branches available in the specified GitHub repository. Provides a simple list of branch names. Purpose: Enables Agents to get a comprehensive list of branches for branch management automation, generating reports on repository branching structure, providing users with branch selection options within ELITEA workflows, or automating branch-related decision-making processes. Set Active Branch: Tool Name: set_active_branch Functionality: Sets a specific branch as the currently active branch within the GitHub toolkit's context. Affects subsequent file-related operations to target the specified branch. Purpose: Ensures that subsequent file operations (like read_file , update_file , create_file , delete_file ) performed by the Agent are directed to the correct branch. Improves workflow accuracy, prevents unintended modifications to incorrect branches, and provides branch context for file actions. Create Branch: Tool Name: create_branch Functionality: Creates a new branch in the specified GitHub repository, branching off from a specified base branch. Requires the new branch name and the base branch name as parameters. Purpose: Automates the creation of new branches for feature development, bug fixes, experimental code changes, or any branching requirement directly from ELITEA. Streamlines branch management, speeds up development workflows by automating branch setup, and reduces manual steps for initiating new development work streams. Get files from directory: Tool Name: get_files_from_directory Functionality: Retrieves a list of files located within a specific directory in a GitHub repository. Allows retrieval of files from a specified subdirectory path within a branch. Purpose: Enables Agents to retrieve file listings from specific directories, facilitating focused navigation within complex repositories, targeting relevant files within a directory structure for processing, or automating directory-specific file management tasks within ELITEA workflows, improving efficiency when working with organized file sets.","title":"Tool Overview"},{"location":"how-tos/agents-toolkits/github_toolkit/#instructions-and-prompts-for-using-the-github-toolkit","text":"To effectively instruct your ELITEA Agent to use the GitHub toolkit, you need to provide clear and precise instructions within the Agent's \"Instructions\" field. These instructions are crucial for guiding the Agent on when and how to utilize the available GitHub tools to achieve your desired automation goals.","title":"Instructions and Prompts for Using the GitHub Toolkit"},{"location":"how-tos/agents-toolkits/github_toolkit/#instruction-creation-for-openai-agents","text":"When crafting instructions for the GitHub toolkit, especially for OpenAI-based Agents, clarity and precision are paramount. Break down complex tasks into a sequence of simple, actionable steps. Explicitly define all parameters required for each tool and guide the Agent on how to obtain or determine the values for these parameters. OpenAI Agents respond best to instructions that are: Direct and Action-Oriented: Employ strong action verbs and clear commands to initiate actions. For example, \"Use the 'read_file' tool...\", \"Create a branch named...\", \"List all open pull requests...\". Parameter-Centric: Clearly enumerate each parameter required by the tool. For each parameter, specify: Its name (exactly as expected by the tool). The format or type of value expected. How the Agent should obtain the value \u2013 whether from user input, derived from previous steps in the conversation, retrieved from an external source, or a predefined static value. Contextually Rich: Provide sufficient context so the Agent understands the overarching objective and the specific scenario in which each GitHub tool should be applied within the broader workflow. Explain the desired outcome or goal for each tool invocation. Step-by-Step Structure: Organize instructions into a numbered or bulleted list of steps for complex workflows. This helps the Agent follow a logical sequence of actions. When instructing your Agent to use a GitHub toolkit tool, adhere to this structured pattern: 1. **State the Goal:** Begin by clearly stating the objective you want to achieve with this step. For example, \"Goal: To retrieve the content of the 'README.md' file.\" 2. **Specify the Tool:** Clearly indicate the specific GitHub tool to be used for this step. For example, \"Tool: Use the 'read_file' tool.\" 3. **Define Parameters:** Provide a detailed list of all parameters required by the selected tool. For each parameter: - Parameter Name: `<Parameter Name as defined in tool documentation>` - Value or Source: `<Specify the value or how to obtain the value. Examples: \"user input\", \"from previous step\", \"hardcoded value 'main'\", \"value of variable X\">` 4. **Describe Expected Outcome (Optional but Recommended):** Briefly describe the expected result or outcome after the tool is successfully executed. For example, \"Outcome: The Agent will provide the content of the 'README.md' file.\" Example Agent Instructions for GitHub Toolkit Tools (Optimized for OpenAI Agents): Agent Instructions for Updating a File: 1. Goal: Update the 'config.json' file in the 'settings' branch with new configuration values provided by the user. 2. Tool: Use the \"update_file\" tool. 3. Parameters: - Repository Name: \"Specify the repository name in 'owner/repo' format. Use the repository configured in the GitHub toolkit.\" - File Path: \"config.json\" - Branch Name: \"settings\" - New Content: \"Ask the user for the new JSON configuration content. Ensure it is valid JSON format. Example: {\\\"setting\\\": \\\"new_value\\\"}\" 4. Outcome: The 'config.json' file in the 'settings' branch will be updated with the user-provided JSON configuration. Confirm the update to the user. Agent Instructions for Creating a New Feature Branch: 1. Goal: Create a new feature branch for implementing user authentication, named 'feature-user-auth', branching from the 'develop' branch. 2. Tool: Use the \"create_branch\" tool. 3. Parameters: - Repository Name: \"Specify the repository name in 'owner/repo' format. Use the repository configured in the GitHub toolkit.\" - New Branch Name: \"feature-user-auth\" - Base Branch: \"develop\" 4. Outcome: A new branch named 'feature-user-auth' will be created in the repository, based on the 'develop' branch. Inform the user that the branch has been created. Agent Instructions for Listing Branches in a Repository: 1. Goal: Provide the user with a list of all branches in the repository to help them understand the project's branch structure. 2. Tool: Use the \"list_branches_in_repo\" tool. 3. Parameters: - Repository Name: \"Specify the repository name in 'owner/repo' format. Use the repository configured in the GitHub toolkit.\" 4. Outcome: Present the list of branches to the user in a clear and readable format. Agent Instructions for Reading a File from a Repository: 1. Goal: Retrieve the content of the 'README.md' file from the 'main' branch to provide the user with a project overview. 2. Tool: Use the \"read_file\" tool. 3. Parameters: - Repository Name: \"Specify the repository name in 'owner/repo' format. Use the repository configured in the GitHub toolkit.\" - File Path: \"README.md\" - Branch Name: \"main\" 4. Outcome: Display the content of the 'README.md' file to the user.","title":"Instruction Creation for OpenAI Agents"},{"location":"how-tos/agents-toolkits/github_toolkit/#conversation-starters","text":"Utilize these conversation starters to initiate interactions with your GitHub-integrated Agent. These are useful for both testing the integration and for common usage scenarios. 1. For Testing and Troubleshooting Connection & Configuration: These conversation starters are specifically designed to verify if the GitHub toolkit is correctly configured, authenticated, and successfully connected to your GitHub repository. They test basic functionalities to ensure the integration is working as expected. \"List branches in the repository.\" - This starter tests basic connectivity to GitHub and verifies read permissions for branch listing. \"Read the file 'README.md' from the main branch.\" - This starter further tests read permissions and the ability to access and retrieve file content from the repository. \"Create a new branch named 'test-connection' based on main.\" - This starter tests write permissions (if enabled in your token scopes) and the branch creation functionality. Important: Remember to manually delete the 'test-connection' branch from your repository after successful testing to maintain repository hygiene. \"List open pull requests.\" - Tests the ability to retrieve pull request data, verifying permissions for PR access. \"Get issues.\" - Tests the ability to retrieve issue data, verifying permissions for issue access. 2. For General Agent Usage Scenarios & Workflow Initiation: These conversation starters demonstrate how to initiate agent execution for common, practical GitHub-related tasks and workflows. They represent typical user requests and showcase the agent's ability to perform useful actions within GitHub. \"I need to update the documentation file 'user_guide.md' with details about the new API endpoints. Can you help me update it in GitHub?\" - This starter could trigger a workflow involving read_file to get the current documentation content, potentially some content modification steps, and then update_file to save the updated documentation back to the repository. \"Create a pull request to merge my 'feature-x' branch into 'develop' for code review and integration.\" - This starter directly initiates the create_pull_request tool to automate the pull request creation process. \"What are the currently open feature branches in the repository that need code review?\" - This starter would utilize the list_branches_in_repo tool (potentially combined with issue or PR data) to provide a project status overview, specifically focusing on feature branches awaiting review. \"I want to add a new configuration file named 'deployment.config' to the 'config' directory in the main branch with these settings: [provide configuration settings here]. Can you create this file for me?\" - This starter would use the create_file tool to automate the creation of a new configuration file with user-specified content in the designated repository location. \"Comment on issue #123 with 'I have completed the code changes and addressed the feedback.'\" - This starter directly uses the comment_on_issue tool to add a comment to a specific GitHub issue, automating communication within issue tracking. These conversation starters offer a solid foundation for interacting with your GitHub-integrated ELITEA Agent. They can be further customized and expanded upon to precisely match your specific use cases, workflows, and the unique automation needs of your software development projects.","title":"Conversation Starters"},{"location":"how-tos/agents-toolkits/github_toolkit/#use-cases","text":"The GitHub toolkit unlocks numerous automation possibilities for software development workflows within ELITEA. Here are key use cases, demonstrating how each tool can be applied, formatted to match the Bitbucket guide style: Automated Retrieval of High-Priority Issues: Scenario: At the start of each workday, development teams need to be aware of critical, high-priority bug issues requiring immediate attention. Tools Used: get_issues Example Instruction: \"Use the 'get_issues' tool to retrieve a list of issues from the repository that are labeled 'priority:high'. Present the issue titles and descriptions.\" Benefit: Proactively informs developers about critical issues, enabling them to focus on high-priority bug fixes, improve issue resolution times, and minimize potential disruptions. Contextual Issue Details for Support and Troubleshooting: Scenario: During a troubleshooting session or support interaction, quick access to detailed information about a specific GitHub issue is needed to understand the problem and provide context. Tools Used: get_issue Example Instruction: \"Use the 'get_issue' tool to get details for issue number [issue_number]. Summarize the issue title, description, and the latest comments for the user.\" Benefit: Provides users with quick, contextual access to detailed issue information directly within ELITEA, improving understanding, facilitating faster problem-solving, and enhancing communication around specific issues. Intelligent Issue Search for Targeted Information Retrieval: Scenario: Project managers or developers need to find issues related to a specific topic or keyword within the repository to track progress or identify related tasks. Tools Used: search_issues Example Instruction: \"Use the 'search_issues' tool to find all open issues in the repository that contain the keywords '[search_keywords]' in their title or description. List the titles and issue numbers.\" Benefit: Enables efficient and targeted issue discovery based on keywords and search criteria. Allows users to quickly locate relevant issues, track progress on specific features or bug areas, and identify related tasks or discussions. Automated Bug Reporting from User Feedback: Scenario: When users report bugs through ELITEA-integrated support channels, automatically create corresponding issues in the GitHub repository for the development team to address. Tools Used: create_issue Example Instruction: \"Use the 'create_issue' tool to create a new issue in the repository with the title '[issue_title]' and body '[issue_description]'. Add labels 'bug' and 'reported-by-user'.\" Benefit: Streamlines bug reporting by automating issue creation directly from user feedback. Reduces manual effort, ensures consistent bug report formatting, and accelerates the process of logging and triaging new issues. Dynamic Issue Status Updates Based on Workflow Events: Scenario: Automatically update the status of a GitHub issue to 'closed' when a linked code change (e.g., pull request merge) is completed in ELITEA, reflecting the issue resolution in the tracking system. Tools Used: update_issue Example Instruction: \"Use the 'update_issue' tool to update issue number [issue_number]. Set the issue status to 'closed' and add a comment 'Issue resolved by commit [commit_hash]'.\" Benefit: Automates issue lifecycle management, ensuring issue statuses are always synchronized with the actual development progress. Reduces manual status updates, improves issue tracking accuracy, and provides a clear audit trail of issue resolution. Real-time Issue Commenting for Enhanced Collaboration: Scenario: Allow ELITEA Agents to automatically add comments to GitHub issues to provide updates, request information, or log actions taken within ELITEA workflows, keeping issue discussions current. Tools Used: comment_on_issue Example Instruction: \"Use the 'comment_on_issue' tool to add a comment to issue number [issue_number] with the text '[comment_text]'.\" Benefit: Streamlines communication within issue tracking, enabling automated updates and feedback directly within GitHub issues. Keeps all stakeholders informed, reduces manual communication overhead, and centralizes issue-related discussions. Proactive Pull Request Review Reminders: Scenario: Automatically remind developers about open pull requests awaiting their review to expedite code reviews and maintain a smooth development pipeline. Tools Used: list_open_pull_requests Example Instruction: \"Use the 'list_open_pull_requests' tool to get a list of open pull requests assigned to [developer_username]. Send a summary of these PRs to the developer as a reminder.\" Benefit: Improves code review workflow efficiency by providing automated reminders. Helps developers prioritize code reviews, reduces bottlenecks in the code integration process, and promotes timely code integration. Quick Access to Pull Request Details for Code Review: Scenario: During code review discussions within ELITEA, provide reviewers with immediate access to the full details of a specific pull request to facilitate informed and efficient reviews. Tools Used: get_pull_request Example Instruction: \"Use the 'get_pull_request' tool to get details for pull request number [pr_number]. Display the PR title, description, status, and reviewer information.\" Benefit: Provides code reviewers with immediate access to comprehensive pull request information directly within ELITEA, facilitating informed and efficient code reviews without context switching. Efficient Code Review Preparation with File Lists: Scenario: Before starting a code review, provide reviewers with a list of files changed in a pull request to help them understand the scope of changes and plan their review approach. Tools Used: list_pull_request_files Example Instruction: \"Use the 'list_pull_request_files' tool to get a list of files changed in pull request number [pr_number]. Present this list to the code reviewers before the review meeting.\" Benefit: Enhances code review preparation and efficiency by providing reviewers with a clear overview of the files modified in a pull request beforehand, enabling better planning and focused review efforts. Automated Pull Request Creation for Code Contributions: Scenario: After a developer completes a code modification task within ELITEA, automatically initiate the code review process by creating a pull request for their changes in GitHub. Tools Used: create_pull_request Example Instruction: \"Use the 'create_pull_request' tool to create a pull request from branch '[source_branch]' to branch '[target_branch]' with the title '[pr_title]' and description '[pr_description]'.\" Benefit: Automates the pull request creation process, significantly reducing manual effort for developers and streamlining the code contribution workflow. Ensures code changes are promptly submitted for review and integration. Templated File Creation for Code Consistency: Scenario: When creating new code components or modules, automatically generate template files in the repository to enforce coding standards and project conventions. Tools Used: create_file Example Instruction: \"Use the 'create_file' tool to create a new file at path '[file_path]' with the content from the template '[template_content]'. Ensure the file extension is '.js'.\" Benefit: Automates file creation using templates, enforcing coding standards and consistency across the codebase. Reduces manual file creation effort and ensures adherence to project conventions for new files. Dynamic Configuration Loading from Repository Files: Scenario: Dynamically load application configuration settings from a configuration file stored in the GitHub repository to ensure ELITEA workflows are always using the latest configurations. Tools Used: read_file Example Instruction: \"Use the 'read_file' tool to read the content of the file '[config_file_path]' from the 'main' branch. Parse the content as JSON and use the configuration values in the workflow.\" Benefit: Enables dynamic configuration management, allowing ELITEA to adapt its behavior based on configuration files stored in GitHub. Ensures configurations are centrally managed, version-controlled, and consistently applied. Automated Documentation Updates for Code Changes: Scenario: When code changes are merged that affect API documentation, automatically update the corresponding documentation files in the repository to keep documentation synchronized with the codebase. Tools Used: read_file , update_file Example Instruction: \"Use 'read_file' to get the current content of '[docs_file_path]'. Update the content with the new API documentation and use 'update_file' to save the updated content back to '[docs_file_path]' in the 'main' branch.\" Benefit: Keeps documentation synchronized with the latest codebase, reducing manual effort and errors in documentation maintenance. Ensures accurate and up-to-date documentation for users and developers. Automated Cleanup of Obsolete Code Files: Scenario: Periodically delete obsolete or unused code files from designated directories in the repository to maintain codebase cleanliness and reduce technical debt. Tools Used: delete_file Example Instruction: \"Use the 'delete_file' tool to delete the file at path '[obsolete_file_path]' from the 'cleanup' branch. Verify the file is no longer needed before deletion.\" Benefit: Helps maintain a clean and organized codebase by automating the removal of unnecessary files. Reduces repository clutter, improves code navigability, and enhances long-term project maintainability. Codebase Exploration and File Navigation within ELITEA: Scenario: Allow users to easily browse the file structure of a specific branch in the GitHub repository directly within ELITEA to explore code or locate specific files. Tools Used: list_files_in_branch Example Instruction: \"Use the 'list_files_in_branch' tool to list all files in the branch '[branch_name]'. Present the file list to the user in a tree-like structure if possible.\" Benefit: Provides users with a convenient way to browse repository contents directly within ELITEA, enabling easy navigation and file selection for further actions without switching to GitHub. Project Overview with Branch Listing and Summaries: Scenario: Provide project managers with an automated overview of all active branches in the repository, including their last commit dates, to monitor development activity and branch management. Tools Used: list_branches_in_repo Example Instruction: \"Use the 'list_branches_in_repo' tool to list all branches in the repository. For each branch, retrieve the date of the last commit and present a summary to the project manager.\" Benefit: Provides project managers with an automated overview of repository branches, facilitating project monitoring, branch management, and understanding of the current development landscape within the repository. Branch Context Management for Workflow Reliability: Scenario: Ensure that a series of automated code modification operations are performed within the correct branch context to prevent unintended changes and maintain workflow integrity. Tools Used: set_active_branch Example Instruction: \"First, use 'set_active_branch' to set the active branch to '[target_branch]'. Then, proceed with the file modification operations within this active branch context.\" Benefit: Ensures operations are performed on the intended branch, reducing the risk of errors and unintended modifications to the wrong branch. Improves the reliability and accuracy of automated workflows involving file operations. Automated Sprint Branch Creation for Agile Development: Scenario: At the beginning of each sprint, automatically create a new sprint branch in the repository to provide a dedicated space for sprint-related development activities, following agile development practices. Tools Used: create_branch Example Instruction: \"Use the 'create_branch' tool to create a new branch named 'sprint-[sprint_number]' based on the 'develop' branch. Notify the development team about the new sprint branch.\" Benefit: Automates branch creation for sprint-based development, streamlining sprint setup and ensuring organized code management for each sprint cycle. Reduces manual branch creation steps and promotes branch-based development best practices. Directory-Specific File Retrieval for Focused Operations: Scenario: Retrieve a list of all configuration files located within the 'config' directory of the repository to enable centralized access and management of project configurations within ELITEA workflows. Tools Used: get_files_from_directory Example Instruction: \"Use the 'get_files_from_directory' tool to get a list of files from the 'config' directory in the 'main' branch. Present the list of configuration files to the user.\" Benefit: Provides a focused way to access and manage files within specific directories, enabling efficient retrieval of configuration files, documentation sets, or other organized file groups within the repository structure, improving workflow efficiency when working with structured file sets.","title":"Use Cases"},{"location":"how-tos/agents-toolkits/github_toolkit/#troubleshooting-and-support","text":"","title":"Troubleshooting and Support"},{"location":"how-tos/agents-toolkits/github_toolkit/#troubleshooting","text":"Connection Errors: Problem: ELITEA Agent fails to establish a connection with GitHub, resulting in errors during toolkit execution. Troubleshooting Steps: Verify GitHub API URL: Ensure that the URL field in the toolkit configuration is correctly set to the standard GitHub API URL: https://api.github.com . Avoid modifying this URL unless you are using GitHub Enterprise Server. Check Personal Access Token (PAT): Double-check that the Personal Access Token (Classic) you have provided is accurate, has not expired, and is valid for your GitHub account and the target repository. Carefully re-enter or copy-paste the token to rule out typos. Verify Token Scopes: Review the scopes/permissions granted to your Personal Access Token in GitHub. Ensure that the token has the necessary scopes (e.g., repo , workflow , issues , pull_request ) for the specific GitHub tools your Agent is attempting to use. Insufficient scopes are a common cause of connection and permission errors. Network Connectivity: Confirm that both your ELITEA environment and the GitHub service are connected to the internet and that there are no network connectivity issues, firewalls, or proxies blocking the integration. Test network connectivity to api.github.com from your ELITEA environment if possible. Authorization Errors (Permission Denied/Unauthorized): Problem: Agent execution fails with \"Permission Denied\" or \"Unauthorized\" errors when attempting to access or modify GitHub resources, even with a seemingly valid token. Troubleshooting Steps: Re-verify Token Scopes: Double-check the scopes/permissions granted to your Personal Access Token with extreme care. Ensure that the token possesses the precise scopes required for the specific GitHub actions your Agent is trying to perform. For example, creating files or pull requests requires scopes that grant write access ( repo scope or granular write:repo scopes). Repository Access Permissions: Confirm that the GitHub account associated with the Personal Access Token has the necessary access permissions to the specified repository. Verify that the account is a collaborator, member of the organization that owns the repository, or has the appropriate roles and permissions (e.g., write access for modifying repositories). Check repository settings in GitHub to confirm access levels. Token Revocation or Expiration: Ensure that the Personal Access Token has not been accidentally revoked in GitHub settings or that it has not reached its expiration date if you set one. Generate a new token if necessary. Incorrect Repository or Branch Names: Problem: Agent tools fail to operate on the intended repository or branch, often resulting in \"Repository not found\" or \"Branch not found\" errors. Troubleshooting Steps: Double-Check Repository Name: Carefully and meticulously verify that you have entered the correct GitHub Repository name in the toolkit configuration within ELITEA. Pay close attention to capitalization, spelling, and the repository_owner/repository_name format. Even minor typos can cause errors. Verify Branch Name Spelling and Case: Ensure that you are using the correct branch name (e.g., main , develop , feature-branch ) in your Agent's instructions when specifying branch-related parameters for GitHub tools. Branch names in Git are case-sensitive. Double-check the spelling and capitalization of branch names against your repository in GitHub. Branch Existence: Confirm that the specified branch actually exists in your GitHub repository. It's possible the branch name is correct but the branch was deleted or renamed.","title":"Troubleshooting"},{"location":"how-tos/agents-toolkits/github_toolkit/#faq","text":"Q: Can I use my regular GitHub password directly for the ELITEA integration instead of a Personal Access Token? A: No, using a GitHub Personal Access Token (Classic) is mandatory and strongly recommended for security. Direct password authentication is not supported for ELITEA's GitHub toolkit integration. Personal Access Tokens provide a significantly more secure and controlled method for granting access to external applications like ELITEA, without exposing your primary account credentials. Q: What scopes/permissions are absolutely necessary and minimally sufficient for the GitHub Personal Access Token to work with ELITEA? A: The minimum required scopes depend on the specific GitHub tools your ELITEA Agent will be using. For basic read-only access to repositories (e.g., using read_file , list_files_in_branch ), the repo:status and public_repo scopes might suffice. However, for most common integration scenarios involving modifications (e.g., create_file , update_file , create_pull_request ), you will need the broader repo scope or more granular repo write scopes. For issue and pull request management, include issues and pull_request scopes respectively. Always adhere to the principle of least privilege and grant only the scopes that are strictly necessary for your Agent's intended functionalities. Refer to the GitHub documentation for detailed scope descriptions. Q: What is the correct format for specifying the GitHub Repository name in the ELITEA toolkit configuration? A: The GitHub Repository name must be entered in the format repository_owner/repository_name (e.g., MyOrganization/my-project-repo ). Ensure you include both the repository owner's username or organization name and the repository name, separated by a forward slash / . This format is crucial for ELITEA to correctly identify and access your repository on GitHub. Q: Why am I consistently encountering \"Permission Denied\" errors, even though I believe I have configured everything correctly and granted the necessary permissions? A: If you are still facing \"Permission Denied\" errors despite careful configuration, systematically re-examine the following: Token Scope Accuracy: Double and triple-check the scopes/permissions granted to your GitHub Personal Access Token in your GitHub Developer Settings. Ensure that the token possesses the exact scopes required for each GitHub tool your Agent is attempting to use. Pay close attention to write vs. read permissions. Repository Access Verification: Explicitly verify that the GitHub account associated with the Personal Access Token has the necessary access rights to the specific target repository within GitHub itself. Confirm repository membership, collaborator status, and assigned roles/permissions within the GitHub repository settings. Token Validity and Revocation: Double-check that the Personal Access Token is still valid, has not expired, and has not been accidentally revoked in your GitHub settings. Generate a new token as a test if unsure. Typographical Errors: Carefully review all configuration fields in ELITEA, especially the Repository name, Username (though less relevant for token auth), and the Token itself for any hidden typographical errors or accidental whitespace. If, after meticulously checking all of these points, you still encounter \"Permission Denied\" errors, please reach out to ELITEA Support with detailed information for further assistance.","title":"FAQ"},{"location":"how-tos/agents-toolkits/github_toolkit/#support-and-contact-information","text":"If you encounter any persistent issues, have further questions, or require additional assistance beyond the scope of this guide regarding the GitHub integration or ELITEA Agents in general, please do not hesitate to contact our dedicated ELITEA Support Team. We are committed to providing timely and effective support to ensure you have a seamless and productive experience with ELITEA. How to Reach ELITEA Support: Email: SupportAlita@epam.com Best Practices for Submitting Effective Support Requests: To enable our support team to understand and resolve your issue as efficiently as possible, please include the following critical information in your support email: ELITEA Environment Details: Clearly specify the ELITEA environment you are currently using (e.g., \"Nexus,\" \"Alita Lab,\" \"EYE,\" or the specific name of your ELITEA instance). Project Context: Indicate the Project Name within ELITEA where you are experiencing the issue and specify whether you are working in your Private workspace or a Team project. Detailed Issue Description: Provide a clear, concise, and comprehensive description of the problem you are encountering. Articulate precisely what you were attempting to do, what behavior you expected to observe, and what actually occurred (the unexpected behavior or error). Step-by-step descriptions are highly valuable. Relevant Configuration Information (Screenshots Preferred): To facilitate efficient diagnosis, please include relevant configuration details, ideally as screenshots: Agent Instructions (Screenshot or Text Export): If the issue is related to a specific Agent's behavior, provide a screenshot of the Agent's \"Instructions\" field or export the instructions as text. Toolkit Configurations (Screenshots): If the issue involves the GitHub toolkit or any other toolkits, include clear screenshots of the toolkit configuration settings as they appear within your Agent's configuration in ELITEA. Complete Error Messages (Full Text): If you are encountering any error messages, please provide the complete and unabridged error text . In the ELITEA Chat window, expand the error details section (if available) and copy the entire error message text. Detailed error information is often crucial for accurate diagnosis. Your Query/Prompt (Exact Text): If the issue is related to Agent execution or an unexpected response, provide the exact query or prompt you used to trigger the Agent's action that led to the problem. Pre-Support Request Actions (Self-Help): Before contacting support, we strongly encourage you to first thoroughly explore the resources available within this comprehensive guide and the broader ELITEA documentation. You may find readily available answers to common questions, solutions to known issues, or configuration guidance within these resources, potentially resolving your issue more quickly.","title":"Support and Contact Information"},{"location":"how-tos/agents-toolkits/github_toolkit/#useful-links","text":"To further enhance your understanding and skills in integrating GitHub with ELITEA, here are some helpful resources: GitHub Website : Access the main GitHub platform to create an account or log in. GitHub Developer Settings : Navigate to the Developer settings in your GitHub account to manage Personal Access Tokens and other developer-related configurations. GitHub Personal Access Tokens (Classic) : Directly access the section in GitHub settings to manage your Personal Access Tokens (Classic) for secure integrations. GitHub API URL : Access the base URL for the GitHub API endpoint, necessary for configuring the GitHub toolkit in ELITEA. ELITEA Secrets Management : Learn how to securely store your GitHub Personal Access Token using ELITEA's Secrets management feature for enhanced security. ELITEA Agents Configuration : Find out more about creating and configuring Agents in ELITEA, where you integrate the GitHub toolkit to automate your workflows. ELITEA Support Email : Contact the ELITEA support team for direct assistance with GitHub integration or any other questions and issues you may encounter.","title":"Useful Links"},{"location":"how-tos/agents-toolkits/gitlab_org_toolkit/","text":"ELITEA Toolkit Guide: GitLab Org Integration Introduction Purpose of this Guide This guide is your definitive resource for integrating and effectively utilizing the GitLab Org toolkit within ELITEA. It provides a detailed, step-by-step walkthrough, from setting up your GitLab Personal Access Token to configuring the toolkit in ELITEA and seamlessly incorporating it into your Agents for organizational-level repository management. By following this guide, you will unlock the full potential of automated code management, streamlined development workflows across your GitLab Organization, and enhanced team collaboration, all directly within the ELITEA platform. This integration empowers you to leverage AI-driven automation to optimize your software development lifecycle within your GitLab Organization, harnessing the combined strengths of ELITEA and GitLab Org. Brief Overview of GitLab Org GitLab Org refers to the organizational structure within GitLab, designed to manage multiple projects and users under a single, centralized umbrella. It is a powerful feature of GitLab, especially for larger teams and enterprises, offering enhanced control and collaboration across numerous projects. GitLab Org provides a hierarchical structure for managing your DevOps lifecycle and offers functionalities including: Centralized Management of Multiple Projects: GitLab Org allows you to organize and manage numerous related projects under a single organizational unit (Group), providing a consolidated view and control over your entire portfolio of projects. Hierarchical Structure with Groups and Subgroups: GitLab Org enables the creation of a hierarchical structure using groups and subgroups, allowing you to mirror your organizational structure within GitLab and manage projects in a logical and scalable manner. Centralized User and Permission Management: GitLab Org facilitates centralized management of users and permissions across all projects within the organization. You can define roles and permissions at the group level, which are then inherited by subgroups and projects, simplifying access control and ensuring consistent security policies. Enhanced Collaboration Across Teams: GitLab Org promotes collaboration across teams by providing a shared platform for all projects within the organization. Teams can easily collaborate on related projects, share resources, and maintain consistent workflows across the organization. Organizational-Level Reporting and Analytics: GitLab Org provides organizational-level reporting and analytics, giving you insights into the overall health and performance of your DevOps processes across all projects within the organization. This enables data-driven decision-making and continuous improvement at the organizational level. Integrating GitLab Org with ELITEA brings these powerful organizational-level DevOps capabilities directly into your AI-driven workflows. Your ELITEA Agents can then intelligently interact with your GitLab Organization's repositories to automate code-related tasks across multiple projects, enhance development processes at scale, improve team collaboration across the organization, and leverage AI to optimize your entire software development lifecycle within your GitLab Org. Toolkit's Account Setup and Configuration in GitLab Org Account Setup If you do not yet have access to a GitLab Organization account, please follow these steps to gain access: Contact your GitLab Organization Administrator: Access to a GitLab Organization is typically managed by an administrator within your organization. Contact your GitLab administrator or IT support team to request access to your organization's GitLab instance. Receive Invitation (If Applicable): Your GitLab Organization administrator may invite you to join the organization. Check your email inbox for an invitation email from GitLab and follow the instructions in the email to accept the invitation and join the organization. Account Creation (If Required): If you do not have an existing GitLab account, you may be prompted to create one as part of the organization access process. Follow the steps to create a GitLab account, as described in the standard GitLab Integration Guide, using your company email address if possible. Log In to GitLab Org: Once your account is set up and you have been granted access to the GitLab Organization, log in to your organization's GitLab instance using your credentials. The URL for your GitLab Organization may be different from the standard GitLab.com, depending on your organization's setup (e.g., gitlab.yourcompany.com ). Token/API Key Generation: Creating a Personal Access Token in GitLab for Org Access For secure integration with ELITEA and to enable access to your GitLab Organization's repositories, it is essential to utilize a GitLab Personal Access Token (PAT) . This method is significantly more secure than using your primary GitLab account password directly and provides granular control over the permissions granted to ELITEA for organizational access. Follow these steps to generate a Personal Access Token (PAT) in GitLab for GitLab Org Integration: Log in to GitLab Org: Access your GitLab Organization's GitLab instance (e.g., gitlab.yourcompany.com ) and log in with your organizational account credentials. Access User Settings: Click on your profile avatar, located in the top right corner of the GitLab interface. From the dropdown menu, select \"Edit profile\" . Navigate to Access Tokens: In the left-hand sidebar of your profile settings, click on \"Access Tokens\" . Generate New Token: Click the \"Add new token\" button to begin the process of creating a new Personal Access Token. Configure Token Details: Token name: In the \"Token name\" field, provide a descriptive and easily recognizable label for your token, such as \"ELITEA Org Integration Token\" or \"ELITEA Agent Org Access.\" This label will help you identify the purpose of this token for organizational access in the future. Expiration date (Recommended): For enhanced security, it is strongly recommended to set an Expiration date for your token. Choose a reasonable validity period that aligns with your organization's security policies. Setting an expiration date limits the token's lifespan and reduces the potential security risk if the token is ever compromised. Select Scopes - Grant Least Privilege for Org Access (Crucial for Security): Carefully and deliberately select the scopes or permissions you grant to this Personal Access Token. It is of utmost importance to grant only the minimum necessary permissions required for your ELITEA Agent's intended interactions with your GitLab Organization's repositories. Overly permissive tokens significantly increase the potential security risk, especially at the organizational level. For typical ELITEA integration with GitLab Org, consider these minimal scopes: Minimal Scopes for Common Org Use Cases: api: (Provides full access to the GitLab API, encompassing all groups and projects within the organization. If possible, for enhanced security, consider using more granular scopes instead of the broad api scope, especially if you only need read access.) read_api: (Allows read-only access to the GitLab API for the organization, suitable for retrieving data without modification.) read_repository: (Grants read-only access to repositories within the organization, enabling actions like listing files and reading file content.) write_repository: (Grants write access to repositories within the organization, allowing actions like creating branches, creating files, and updating file content. Only include this if your Agent needs to modify repositories within the Org.) Additional Scopes for Specific Functionality (Grant only when required for Org-Level Actions): read_user: (Allows read access to user profiles within the organization, useful for user-related actions at the organizational level.) read_issue: (Grants read access to issues across the organization, enabling issue retrieval and listing across projects.) write_issue: (Grants write access to issues across the organization, allowing issue creation and updates across projects. Include only if your Agent needs to manage issues at the organizational level.) read_merge_requests: (Allows read access to merge requests across the organization, enabling merge request retrieval and listing across projects.) write_merge_requests: (Grants write access to merge requests across the organization, allowing merge request creation and updates across projects. Include only if your Agent needs to manage merge requests at the organizational level.) Important Security Best Practices for GitLab Org Integration: Principle of Least Privilege (Organizational Level): Strictly adhere to the principle of least privilege, especially when granting access at the GitLab Organization level. Grant only the absolute minimum set of scopes necessary for your ELITEA Agent to perform its specific, intended tasks across the organization. Carefully consider the potential impact of each scope at the organizational level. Avoid \"sudo\" or Admin Scopes (Organizational Level): Never grant \"sudo\" or other administrative scopes unless absolutely essential and with explicit authorization from your organization's security team. Administrative scopes provide extensive access to your entire GitLab Organization and should be avoided for integration purposes due to the significant security risks. Regular Token Review and Rotation (Organizational Level): Implement a rigorous process for regularly reviewing the Personal Access Tokens used for GitLab Org integration, their associated scopes, and their usage patterns. Rotate tokens frequently (generate new tokens and immediately revoke older ones) as a critical security measure for organizational-level integrations, especially those handling sensitive code or critical workflows. Secure Storage (Organizational Level): Store the generated GitLab Org Personal Access Token with extreme care, utilizing ELITEA's built-in Secrets Management feature, which is designed for securely managing sensitive credentials. Avoid storing tokens in less secure locations or hardcoding them directly in Agent configurations, as this significantly increases the risk of unauthorized access to your GitLab Organization. Create Personal Access Token: Click the \"Create personal access token\" button located at the bottom of the page to generate your token. Securely Copy and Store the Token (Organizational Level): Immediately copy the generated Personal Access Token that is displayed on the subsequent page. This is the only time you will be able to view and copy the full token value. Store it with utmost security using a robust password manager or, ideally, ELITEA's built-in Secrets feature, ensuring that access to this token is strictly controlled and auditable within your organization. You will require this token to configure the GitLab Org toolkit within ELITEA. System Integration with ELITEA Agent Creation/Configuration To integrate GitLab Org functionalities into your workflows, you will need to configure the GitLab Org toolkit within an ELITEA Agent. You can either create a new Agent specifically for GitLab Org interactions or modify an existing Agent to incorporate GitLab Org tools. Navigate to Agents Menu: In ELITEA, access the Agents menu from the main navigation panel. Create or Edit Agent: Create a New Agent: Click on the \"+ Agent\" button to initiate the creation of a new Agent. Follow the on-screen prompts to define essential Agent attributes such as Agent name, a descriptive Agent description, the desired Agent type, and initial instructions for the Agent. Edit an Existing Agent: Select the Agent you intend to integrate with GitLab Org from your list of Agents. Click on the Agent's name to open its configuration settings for editing. Access Tools Section: Within the Agent configuration interface, scroll down until you locate the \"Tools\" section. This section is where you will add and configure toolkits, including the GitLab Org toolkit. Toolkit Configuration This section provides detailed instructions on how to configure the GitLab Org toolkit within your ELITEA Agent for organizational-level repository access. Add Toolkit: In the \"Tools\" section of the Agent configuration, click on the \"+\" icon . This action will display a dropdown list of available toolkits that can be integrated with your Agent. Select GitLab Org Toolkit: From the dropdown list of available toolkits, choose \"GitLab Org\" . Selecting \"GitLab Org\" will open the \"New GitLab Org tool\" configuration panel, where you will specify the settings for your GitLab Org integration. Configure GitLab Org Toolkit Settings: Carefully fill in the following configuration fields within the \"New GitLab Org tool\" section: Name: Enter a descriptive Name for this specific GitLab Org toolkit instance. Choose a name that is easily recognizable and helps you identify its purpose within your Agent's instructions. For example, you might use names like \"OrgCodeAccess\", \"GitLabOrgIntegration\", or \"EnterpriseGitLab\". Description: Provide a concise Description for the toolkit. This description should clarify the toolkit's purpose or the GitLab Organization it is intended to access. For example, you could describe it as \"Toolkit for accessing and managing repositories across the GitLab Organization\" or \"Integration for the entire GitLab Enterprise Organization\". GitLab URL: Enter the base URL of your GitLab instance. For GitLab.com (Cloud) : Use the standard GitLab.com URL: https://gitlab.com . For Self-Hosted GitLab Instances : If your organization uses a self-hosted GitLab instance (GitLab Enterprise Edition), enter the specific URL of your GitLab server. For example, https://gitlab.yourcompany.com . Ensure you include https:// or http:// at the beginning of the URL. API Token: In the \"API token\" field, paste the Personal Access Token that you generated in GitLab during the \"Software-Specific Setup\" section of this guide. Enhanced Security with Secrets (Recommended): For enhanced security, it is strongly recommended to use ELITEA's Secrets Management feature to store your GitLab Personal Access Token securely. Instead of directly pasting the token into the \"API token\" field, select the \"Secret\" option and choose the pre-configured secret containing your GitLab Org token from the dropdown list. This prevents hardcoding sensitive organizational credentials in your toolkit configuration. Repository Name: Specify the Repository names that you want to access with this toolkit. Enter a list of comma-separated repository names if you plan to interact with a predefined set of repositories within your Agent's instructions. Use the format: group_or_username/repository_name . For Organizational Access : Leave this field empty if you intend to dynamically specify the repository name within your Agent's instructions at runtime. This allows for greater flexibility, enabling your Agent to interact with different repositories within the GitLab Organization based on the context of the workflow or user input. For Predefined Repositories : If you are configuring the toolkit for a specific, limited set of repositories, you can enter them here as a comma-separated list (e.g., my_group/repo1,my_group/repo2,another_group/repo3 ). Enable Desired Tools: In the \"Tools\" section within the GitLab Org toolkit configuration panel, select the checkboxes next to the specific GitLab tools that you want to enable for your Agent. It is crucial to enable only the tools that your Agent will actually need to use to adhere to the principle of least privilege and minimize potential security risks, especially when dealing with organizational-level access. Available tools are identical to the standard GitLab toolkit and include: Create branch - Allows the Agent to create new branches in the repository. Create file - Enables the Agent to create new files within the repository. Create PR change comment - Allows the Agent to add comments to specific changes within a pull request (Merge Request in GitLab). Create pull request - Enables the Agent to create new pull requests (Merge Requests) for code review. Delete file - Allows the Agent to delete files from the repository. Get PR changes - Enables the Agent to retrieve the changes introduced in a specific pull request (Merge Request). List branches in repo - Allows the Agent to list all branches within the repository. List files - Enables the Agent to list all files within the repository. Read file - Allows the Agent to read the content of files within the repository. Set active branch - Enables the Agent to set a specific branch as the active branch for subsequent operations. Update file - Allows the Agent to update the content of existing files within the repository. Append file - Allows the Agent to append content to existing files within the repository. Complete Setup: After configuring all the necessary settings and enabling the desired tools, click the arrow icon (located at the top right of the toolkit configuration section) to finalize the GitLab Org toolkit setup and return to the main Agent configuration menu. Click Save in the Agent configuration to save all changes and activate the GitLab Org toolkit integration for your Agent. Tool Overview: GitLab Org Toolkit Functionalities Once the GitLab Org toolkit is successfully configured and added to your Agent, you can leverage the following tools within your Agent's instructions to enable intelligent interaction with your GitLab repositories: Create branch: Tool Name: create_branch Functionality: Automates the creation of a new branch within the specified GitLab repository. Requires parameters such as the new branch name and the base branch to branch from. Purpose: Streamlines branch management by enabling Agents to automatically create new branches for feature development, bug fixes, or experimental code changes directly from ELITEA workflows, ensuring organized and efficient branching strategies. Create file: Tool Name: create_file Functionality: Automates the creation of a new file within the specified GitLab repository at a given path with specified content. Purpose: Enables automated creation of new code files, documentation files, configuration files, or any other type of file within your repository directly from ELITEA workflows, ensuring consistency and reducing manual file creation tasks. Create PR change comment: Tool Name: create_pr_change_comment Functionality: Automates adding comments to specific changes within a GitLab Merge Request (Pull Request). Requires the Merge Request ID, the path to the changed file, the position within the file, and the comment text. Purpose: Facilitates more granular and contextual code review feedback by allowing Agents to automatically add comments directly to specific lines or sections of code changes within Merge Requests, improving the clarity and efficiency of code reviews. Create pull request: Tool Name: create_pull_request Functionality: Automates the creation of a new Merge Request (Pull Request) in the specified GitLab repository. Requires parameters such as the source branch, target branch, Merge Request title, and description. Purpose: Streamlines the code review and merging process by automating Merge Request creation for code contributions, feature branches, or bug fixes directly from ELITEA. Reduces manual effort for developers and accelerates code integration workflows. Delete file: Tool Name: delete_file Functionality: Automates the deletion of a specified file from the GitLab repository. Requires the file path and branch name as parameters. Purpose: Enables automated file cleanup and codebase management by allowing Agents to delete obsolete files, remove temporary files, or enforce file lifecycle policies within your repository, helping maintain a clean and organized codebase. Get PR changes: Tool Name: get_pr_changes Functionality: Retrieves the details of changes introduced within a specific GitLab Merge Request (Pull Request). Returns information about the files changed, additions, and deletions. Purpose: Provides Agents with the ability to analyze code changes within Merge Requests, facilitating automated code review analysis, change impact assessment, or generating summaries of modifications for reviewers, enhancing code review automation and insights. List branches in repo: Tool Name: list_branches_in_repo Functionality: Retrieves a list of all branches available in the specified GitLab repository. Provides a simple list of branch names. Purpose: Enables Agents to obtain a comprehensive list of branches for branch management automation, generating reports on repository branching structure, providing users with branch selection options within ELITEA workflows, or automating branch-related decision-making processes. List files: Tool Name: list_files Functionality: Retrieves a list of all files within the specified GitLab repository at the root level of the repository's default branch. Provides a flat list of file paths. Purpose: Allows Agents to programmatically browse the top-level contents of a repository, providing a quick overview of the repository's structure, enabling basic file listing for navigation or automated file processing workflows. Read file: Tool Name: read_file Functionality: Reads and retrieves the content of a specific file from the specified GitLab repository. Requires the file path and branch name as parameters. Purpose: Enables Agents to dynamically access and utilize file contents from your GitLab repository, allowing retrieval of code snippets, configuration parameters, documentation content, or any other file data to provide context, data, or instructions within ELITEA workflows and conversations, facilitating dynamic and data-driven automation. Set active branch: Tool Name: set_active_branch Functionality: Sets a specific branch as the currently active branch within the GitLab toolkit's context. Directs subsequent file-related operations to target this active branch. Purpose: Ensures that file operations performed by the Agent are executed within the intended branch context, improving workflow accuracy and preventing unintended modifications to incorrect branches. Provides branch context management for reliable file-based automation. Update file: Tool Name: update_file Functionality: Updates the content of a specific, existing file within the GitLab repository. Replaces the entire file content with the provided new content. Requires the file path, branch name, and new file content as parameters. Purpose: Automates the process of updating code files, documentation, configuration files, or any file content within your repository based on ELITEA workflow outputs, user requests, or external triggers. Ensures configurations are synchronized, documentation is kept current, and codebase modifications are automated and version-controlled. Append file: Tool Name: append_file Functionality: Appends content to the end of an existing file within the GitLab repository. Requires the file path, branch name, and content to append as parameters. Purpose: Enables automated appending of data to log files, documentation files, or other files where incremental content addition is needed. Useful for adding timestamps, generating audit trails, or accumulating data within repository files through automated workflows. Use Cases The GitLab Org toolkit unlocks a vast array of automation possibilities for managing software development workflows across your entire GitLab Organization within ELITEA. Here are key use cases, demonstrating how each tool can be effectively applied to streamline development processes and enhance productivity at the organizational level: Centralized Automated Branch Management Across Projects: Scenario: When initiating a new organizational-wide feature or security patch, automatically create dedicated feature branches across multiple relevant repositories within the GitLab Org, ensuring consistent branching across projects. Tools Used: create_branch Example Instruction: \"Use the 'create_branch' tool to create a new branch named 'org-feature-branch-name' based on the 'main' branch in repositories: 'my_group/repo1,my_group/repo2,another_group/repo3'.\" Benefit: Streamlines branch management across multiple projects within the organization, ensures consistent branching strategies for organizational initiatives, and reduces manual branch creation effort for large-scale changes. Organizational-Wide Code Snippet Retrieval for Standardization: Scenario: During organizational-level standardization efforts, retrieve code snippets or configuration templates from a designated \"template\" repository within the GitLab Org and apply them across multiple projects to enforce consistency. Tools Used: read_file Example Instruction: \"Use the 'read_file' tool to read the content of the file 'templates/code_template.txt' from the repository 'org_templates/common_templates' and apply this template to new files created in repositories: 'my_group/repo1,my_group/repo2'.\" Benefit: Enhances code standardization and consistency across the organization by enabling easy retrieval and application of templates and best practices from a central repository, promoting code quality and maintainability. Automated Documentation Updates Across Projects: Scenario: When organizational-level policies or guidelines change, automatically update relevant documentation files across multiple documentation repositories within the GitLab Org to ensure consistent and up-to-date information across all projects. Tools Used: read_file , update_file Example Instruction: \"Use the 'read_file' tool to get the current content of 'README.md' in repositories 'my_group/docs1,another_group/docs2'. Update it with the new organizational guidelines and use 'update_file' to save the updated content back to each 'README.md' in the 'main' branch.\" Benefit: Keeps documentation synchronized with organizational-level changes across multiple projects, reducing manual effort and errors in documentation maintenance and ensuring consistent information dissemination. Bulk Merge Request Automation for Organizational Refactoring: Scenario: After performing a large-scale refactoring across multiple repositories within the GitLab Org, automatically create merge requests for each refactored branch to merge the changes into the respective 'develop' branches for code review and integration. Tools Used: create_pull_request Example Instruction: \"Use the 'create_pull_request' tool to create merge requests from branch 'refactor-branch' to 'develop' branch with the title 'Organizational Refactoring Review' and description 'Please review the organizational refactoring changes' for repositories: 'my_group/repo1,my_group/repo2,another_group/repo3'.\" Benefit: Automates the merge request process for large-scale organizational changes, facilitating timely code reviews and improving code quality across multiple projects during significant refactoring efforts. Centralized Reporting on Branching Structure Across Org: Scenario: A GitLab Org administrator wants a quick overview of all active branches across all repositories within the organization for governance and monitoring purposes. Tools Used: list_branches_in_repo Example Instruction: \"Use the 'list_branches_in_repo' tool to list all branches in repositories: 'my_group/repo1,my_group/repo2,another_group/repo3' and present a consolidated report of all branches across these repositories.\" Benefit: Provides easy access to branch information across the entire GitLab Organization, facilitating organizational-level project monitoring, branch management governance, and understanding of the overall development landscape. Consistent Branch Context for Org-Wide Operations: Scenario: Before performing a series of automated file operations across multiple repositories, ensure the Agent is working on the correct branch in each repository to maintain consistency and avoid errors. Tools Used: set_active_branch Example Instruction: \"First, use 'set_active_branch' to set the active branch to 'develop' for repositories: 'my_group/repo1,my_group/repo2'. Then, proceed with the file operations in each repository within this active branch context.\" Benefit: Ensures operations are performed on the intended branch context across multiple repositories, reducing the risk of errors and unintended modifications during organizational-level automated workflows, improving workflow reliability and accuracy at scale. Troubleshooting and Support Troubleshooting Common Issues Connection Errors: Problem: ELITEA Agent fails to connect to GitLab Org, resulting in errors during toolkit execution. Troubleshooting Steps: Verify GitLab URL: Double-check that the GitLab URL field in the toolkit configuration is correctly set to your GitLab Org instance URL (e.g., https://gitlab.com or https://gitlab.yourcompany.com ). Ensure it includes https:// or http:// . Check Personal Access Token: Ensure that the Personal Access Token you provided is correct, has not expired, and is valid for your GitLab Org account and for organizational access. Carefully re-enter or copy-paste the token to rule out typos. Verify Token Scopes: Review the scopes/permissions granted to your GitLab Org Personal Access Token in GitLab. Ensure it has the necessary scopes (e.g., api , read_repository , write_repository , read_user ) for the GitLab Org tools your Agent is trying to use across the organization. Insufficient scopes are a common cause of connection and permission errors, especially at the organizational level. Network Connectivity: Confirm that both your ELITEA environment and the GitLab Org instance are connected to the internet and that there are no network connectivity issues, firewalls, or proxies blocking the integration. Test network connectivity to your GitLab Org URL from your ELITEA environment if possible. Authorization Errors (Permission Denied/Unauthorized) at Org Level: Problem: Agent execution fails with \"Permission Denied\" or \"Unauthorized\" errors when trying to access or modify GitLab Org resources, especially across multiple repositories. Troubleshooting Steps: Re-verify Token Scopes (Org Level): Double-check the scopes/permissions granted to your GitLab Org Personal Access Token with extreme care. Ensure it grants sufficient access for the specific GitLab Org actions your Agent is trying to perform across the organization (e.g., write_repository scope for creating branches or files in multiple repositories). Verify that the scopes are appropriate for organizational-level access. Organizational Access Verification: Confirm that the GitLab Org account associated with the Personal Access Token has the required access to the GitLab Organization itself and to all the specific repositories within the organization that your Agent needs to interact with. Verify that the account has the necessary roles or permissions at the organizational level (e.g., Owner or Maintainer role for broad organizational access). Check organization-level settings in GitLab to confirm access levels. Token Revocation or Expiration: Ensure that the Personal Access Token has not been accidentally revoked in GitLab settings or that it has not reached its expiration date if you set one. Generate a new token as a test if unsure. Incorrect Repository Names (Org Level): Problem: Agent tools fail to operate on the intended repositories within the GitLab Org, often resulting in \"Repository not found\" errors, especially when working with multiple repositories. Troubleshooting Steps: Double-Check Repository Names: Carefully verify that you have entered the correct GitLab Repository names in your Agent's instructions, using the format group_or_username/repository_name . Pay close attention to capitalization, spelling, and ensure the repository paths are accurate for the GitLab Organization structure. Verify Repository Existence within Org: Confirm that all specified repositories actually exist within your GitLab Organization and that the repository names and paths are correct within the organizational hierarchy. It's possible repository names or group paths have changed, or repositories have been moved or deleted within the Org. Comma Separation and Formatting: If you are providing a comma-separated list of repositories in the toolkit configuration or Agent instructions, ensure that the repository names are correctly separated by commas without extra spaces or incorrect formatting. FAQs Q: Can I use my regular GitLab Org password for the ELITEA integration? A: No, it is strongly recommended to use a GitLab Personal Access Token instead of your main account password for security reasons, especially for organizational-level integrations. Personal Access Tokens provide a more secure and controlled way to grant access to external applications like ELITEA, and are essential for secure organizational access. Q: What scopes/permissions should I grant to the GitLab Org Personal Access Token? A: Grant only the minimum necessary scopes required for your ELITEA Agent's intended interactions with your GitLab Organization. For typical organizational-level integration, the api scope (or granular read_api , read_repository , write_repository ) is often necessary to access resources across the organization. Carefully consider the principle of least privilege and avoid granting \"sudo\" or unnecessary permissions, especially at the organizational level. Q: What is the correct format for the GitLab Repository names when specifying multiple repositories for the GitLab Org toolkit? A: When specifying multiple repositories, use a comma-separated list in the format group_or_username/repository_name,group_or_username/repository_name,... (e.g., my_group/repo1,my_group/repo2,another_group/repo3 ). Ensure each repository name is correctly formatted with the group path or username and the repository name separated by a forward slash / . Q: Why is my Agent getting \"Permission Denied\" errors when using the GitLab Org toolkit, even though I think I have the right permissions? A: If you are encountering \"Permission Denied\" errors with the GitLab Org toolkit, carefully re-examine the following: Token Scope Accuracy (Org Level): Double and triple-check the scopes/permissions granted to your GitLab Org Personal Access Token in your GitLab user settings. Ensure that the token possesses the exact scopes required for each GitLab tool your Agent is attempting to use across the organization. Verify that the scopes are sufficient for organizational-level access if needed. Organizational Access Verification: Explicitly verify that the GitLab Org account associated with the Personal Access Token has the necessary access rights to the GitLab Organization itself and to all target repositories within the organization. Confirm organizational membership and assigned roles/permissions within GitLab Org settings. Token Validity and Revocation: Double-check that the Personal Access Token is still valid, has not expired, and has not been accidentally revoked in your GitLab settings. Generate a new token as a test if unsure. Repository Name Accuracy (Org Level): Carefully review all repository names in your Agent instructions and toolkit configuration, ensuring they are correctly spelled, capitalized, and formatted with the correct group paths for your GitLab Organization's structure. If, after meticulously checking all of these points, you still encounter \"Permission Denied\" errors when using the GitLab Org toolkit, please reach out to ELITEA Support with detailed information for further assistance. Support and Contact Information If you encounter any issues, have questions, or require further assistance beyond what is covered in this guide regarding the GitLab Org integration or ELITEA Agents in general, please do not hesitate to contact our dedicated ELITEA Support Team. We are here to help you resolve any problems quickly and efficiently and ensure you have a smooth and productive experience with ELITEA. How to Reach ELITEA Support: Email: SupportAlita@epam.com Best Practices for Effective Support Requests: To help us understand and resolve your issue as quickly as possible, please ensure you provide the following information in your support email: ELITEA Environment: Clearly specify the ELITEA environment you are using (e.g., \"Nexus,\" \"Alita Lab,\" \"EYE\"). Project Details: Indicate the Project Name and whether you are working in your Private workspace or a Team project. Detailed Issue Description: Provide a clear, concise, and detailed description of the problem you are encountering. Explain what you were trying to do, what you expected to happen, and what actually occurred. Relevant Configuration Information: To help us diagnose the issue, please include relevant configuration details, such as: Agent Instructions (Screenshot or Text): If the issue is with an Agent, provide a screenshot or copy the text of your Agent's \"Instructions\" field. Toolkit Configurations (Screenshots): If the issue involves the GitLab Org toolkit or other toolkits, include screenshots of the toolkit configuration settings within your Agent. Error Messages (Full Error Text): If you are encountering an error message, please provide the complete error text . In the Chat window, expand the error details and copy the full error message. This detailed error information is crucial for diagnosis. Your Query/Prompt (Exact Text): If the issue is related to Agent execution, provide the exact query or prompt you used to trigger the issue. Before Contacting Support: We encourage you to first explore the resources available within this guide and the broader ELITEA documentation. You may find answers to common questions or solutions to known issues in the documentation. Useful Links To further enhance your understanding and skills in integrating GitLab Org with ELITEA, here are some helpful resources: GitLab Website : Access the main GitLab platform to create an account or log in. GitLab Login Page : Directly access the login page for GitLab. ELITEA Secrets Management : Learn how to securely store your GitLab Personal Access Token using ELITEA's Secrets management feature for enhanced security. ELITEA Agents Configuration : Find out more about creating and configuring Agents in ELITEA, where you integrate the GitLab Org toolkit to automate your workflows. ELITEA Support Email : Contact the ELITEA support team for direct assistance with GitLab Org integration or any other questions and issues you may encounter.","title":"GitLab Org Integration"},{"location":"how-tos/agents-toolkits/gitlab_org_toolkit/#elitea-toolkit-guide-gitlab-org-integration","text":"","title":"ELITEA Toolkit Guide: GitLab Org Integration"},{"location":"how-tos/agents-toolkits/gitlab_org_toolkit/#introduction","text":"","title":"Introduction"},{"location":"how-tos/agents-toolkits/gitlab_org_toolkit/#purpose-of-this-guide","text":"This guide is your definitive resource for integrating and effectively utilizing the GitLab Org toolkit within ELITEA. It provides a detailed, step-by-step walkthrough, from setting up your GitLab Personal Access Token to configuring the toolkit in ELITEA and seamlessly incorporating it into your Agents for organizational-level repository management. By following this guide, you will unlock the full potential of automated code management, streamlined development workflows across your GitLab Organization, and enhanced team collaboration, all directly within the ELITEA platform. This integration empowers you to leverage AI-driven automation to optimize your software development lifecycle within your GitLab Organization, harnessing the combined strengths of ELITEA and GitLab Org.","title":"Purpose of this Guide"},{"location":"how-tos/agents-toolkits/gitlab_org_toolkit/#brief-overview-of-gitlab-org","text":"GitLab Org refers to the organizational structure within GitLab, designed to manage multiple projects and users under a single, centralized umbrella. It is a powerful feature of GitLab, especially for larger teams and enterprises, offering enhanced control and collaboration across numerous projects. GitLab Org provides a hierarchical structure for managing your DevOps lifecycle and offers functionalities including: Centralized Management of Multiple Projects: GitLab Org allows you to organize and manage numerous related projects under a single organizational unit (Group), providing a consolidated view and control over your entire portfolio of projects. Hierarchical Structure with Groups and Subgroups: GitLab Org enables the creation of a hierarchical structure using groups and subgroups, allowing you to mirror your organizational structure within GitLab and manage projects in a logical and scalable manner. Centralized User and Permission Management: GitLab Org facilitates centralized management of users and permissions across all projects within the organization. You can define roles and permissions at the group level, which are then inherited by subgroups and projects, simplifying access control and ensuring consistent security policies. Enhanced Collaboration Across Teams: GitLab Org promotes collaboration across teams by providing a shared platform for all projects within the organization. Teams can easily collaborate on related projects, share resources, and maintain consistent workflows across the organization. Organizational-Level Reporting and Analytics: GitLab Org provides organizational-level reporting and analytics, giving you insights into the overall health and performance of your DevOps processes across all projects within the organization. This enables data-driven decision-making and continuous improvement at the organizational level. Integrating GitLab Org with ELITEA brings these powerful organizational-level DevOps capabilities directly into your AI-driven workflows. Your ELITEA Agents can then intelligently interact with your GitLab Organization's repositories to automate code-related tasks across multiple projects, enhance development processes at scale, improve team collaboration across the organization, and leverage AI to optimize your entire software development lifecycle within your GitLab Org.","title":"Brief Overview of GitLab Org"},{"location":"how-tos/agents-toolkits/gitlab_org_toolkit/#toolkits-account-setup-and-configuration-in-gitlab-org","text":"","title":"Toolkit's Account Setup and Configuration in GitLab Org"},{"location":"how-tos/agents-toolkits/gitlab_org_toolkit/#account-setup","text":"If you do not yet have access to a GitLab Organization account, please follow these steps to gain access: Contact your GitLab Organization Administrator: Access to a GitLab Organization is typically managed by an administrator within your organization. Contact your GitLab administrator or IT support team to request access to your organization's GitLab instance. Receive Invitation (If Applicable): Your GitLab Organization administrator may invite you to join the organization. Check your email inbox for an invitation email from GitLab and follow the instructions in the email to accept the invitation and join the organization. Account Creation (If Required): If you do not have an existing GitLab account, you may be prompted to create one as part of the organization access process. Follow the steps to create a GitLab account, as described in the standard GitLab Integration Guide, using your company email address if possible. Log In to GitLab Org: Once your account is set up and you have been granted access to the GitLab Organization, log in to your organization's GitLab instance using your credentials. The URL for your GitLab Organization may be different from the standard GitLab.com, depending on your organization's setup (e.g., gitlab.yourcompany.com ).","title":"Account Setup"},{"location":"how-tos/agents-toolkits/gitlab_org_toolkit/#tokenapi-key-generation-creating-a-personal-access-token-in-gitlab-for-org-access","text":"For secure integration with ELITEA and to enable access to your GitLab Organization's repositories, it is essential to utilize a GitLab Personal Access Token (PAT) . This method is significantly more secure than using your primary GitLab account password directly and provides granular control over the permissions granted to ELITEA for organizational access. Follow these steps to generate a Personal Access Token (PAT) in GitLab for GitLab Org Integration: Log in to GitLab Org: Access your GitLab Organization's GitLab instance (e.g., gitlab.yourcompany.com ) and log in with your organizational account credentials. Access User Settings: Click on your profile avatar, located in the top right corner of the GitLab interface. From the dropdown menu, select \"Edit profile\" . Navigate to Access Tokens: In the left-hand sidebar of your profile settings, click on \"Access Tokens\" . Generate New Token: Click the \"Add new token\" button to begin the process of creating a new Personal Access Token. Configure Token Details: Token name: In the \"Token name\" field, provide a descriptive and easily recognizable label for your token, such as \"ELITEA Org Integration Token\" or \"ELITEA Agent Org Access.\" This label will help you identify the purpose of this token for organizational access in the future. Expiration date (Recommended): For enhanced security, it is strongly recommended to set an Expiration date for your token. Choose a reasonable validity period that aligns with your organization's security policies. Setting an expiration date limits the token's lifespan and reduces the potential security risk if the token is ever compromised. Select Scopes - Grant Least Privilege for Org Access (Crucial for Security): Carefully and deliberately select the scopes or permissions you grant to this Personal Access Token. It is of utmost importance to grant only the minimum necessary permissions required for your ELITEA Agent's intended interactions with your GitLab Organization's repositories. Overly permissive tokens significantly increase the potential security risk, especially at the organizational level. For typical ELITEA integration with GitLab Org, consider these minimal scopes: Minimal Scopes for Common Org Use Cases: api: (Provides full access to the GitLab API, encompassing all groups and projects within the organization. If possible, for enhanced security, consider using more granular scopes instead of the broad api scope, especially if you only need read access.) read_api: (Allows read-only access to the GitLab API for the organization, suitable for retrieving data without modification.) read_repository: (Grants read-only access to repositories within the organization, enabling actions like listing files and reading file content.) write_repository: (Grants write access to repositories within the organization, allowing actions like creating branches, creating files, and updating file content. Only include this if your Agent needs to modify repositories within the Org.) Additional Scopes for Specific Functionality (Grant only when required for Org-Level Actions): read_user: (Allows read access to user profiles within the organization, useful for user-related actions at the organizational level.) read_issue: (Grants read access to issues across the organization, enabling issue retrieval and listing across projects.) write_issue: (Grants write access to issues across the organization, allowing issue creation and updates across projects. Include only if your Agent needs to manage issues at the organizational level.) read_merge_requests: (Allows read access to merge requests across the organization, enabling merge request retrieval and listing across projects.) write_merge_requests: (Grants write access to merge requests across the organization, allowing merge request creation and updates across projects. Include only if your Agent needs to manage merge requests at the organizational level.) Important Security Best Practices for GitLab Org Integration: Principle of Least Privilege (Organizational Level): Strictly adhere to the principle of least privilege, especially when granting access at the GitLab Organization level. Grant only the absolute minimum set of scopes necessary for your ELITEA Agent to perform its specific, intended tasks across the organization. Carefully consider the potential impact of each scope at the organizational level. Avoid \"sudo\" or Admin Scopes (Organizational Level): Never grant \"sudo\" or other administrative scopes unless absolutely essential and with explicit authorization from your organization's security team. Administrative scopes provide extensive access to your entire GitLab Organization and should be avoided for integration purposes due to the significant security risks. Regular Token Review and Rotation (Organizational Level): Implement a rigorous process for regularly reviewing the Personal Access Tokens used for GitLab Org integration, their associated scopes, and their usage patterns. Rotate tokens frequently (generate new tokens and immediately revoke older ones) as a critical security measure for organizational-level integrations, especially those handling sensitive code or critical workflows. Secure Storage (Organizational Level): Store the generated GitLab Org Personal Access Token with extreme care, utilizing ELITEA's built-in Secrets Management feature, which is designed for securely managing sensitive credentials. Avoid storing tokens in less secure locations or hardcoding them directly in Agent configurations, as this significantly increases the risk of unauthorized access to your GitLab Organization. Create Personal Access Token: Click the \"Create personal access token\" button located at the bottom of the page to generate your token. Securely Copy and Store the Token (Organizational Level): Immediately copy the generated Personal Access Token that is displayed on the subsequent page. This is the only time you will be able to view and copy the full token value. Store it with utmost security using a robust password manager or, ideally, ELITEA's built-in Secrets feature, ensuring that access to this token is strictly controlled and auditable within your organization. You will require this token to configure the GitLab Org toolkit within ELITEA.","title":"Token/API Key Generation: Creating a Personal Access Token in GitLab for Org Access"},{"location":"how-tos/agents-toolkits/gitlab_org_toolkit/#system-integration-with-elitea","text":"","title":"System Integration with ELITEA"},{"location":"how-tos/agents-toolkits/gitlab_org_toolkit/#agent-creationconfiguration","text":"To integrate GitLab Org functionalities into your workflows, you will need to configure the GitLab Org toolkit within an ELITEA Agent. You can either create a new Agent specifically for GitLab Org interactions or modify an existing Agent to incorporate GitLab Org tools. Navigate to Agents Menu: In ELITEA, access the Agents menu from the main navigation panel. Create or Edit Agent: Create a New Agent: Click on the \"+ Agent\" button to initiate the creation of a new Agent. Follow the on-screen prompts to define essential Agent attributes such as Agent name, a descriptive Agent description, the desired Agent type, and initial instructions for the Agent. Edit an Existing Agent: Select the Agent you intend to integrate with GitLab Org from your list of Agents. Click on the Agent's name to open its configuration settings for editing. Access Tools Section: Within the Agent configuration interface, scroll down until you locate the \"Tools\" section. This section is where you will add and configure toolkits, including the GitLab Org toolkit.","title":"Agent Creation/Configuration"},{"location":"how-tos/agents-toolkits/gitlab_org_toolkit/#toolkit-configuration","text":"This section provides detailed instructions on how to configure the GitLab Org toolkit within your ELITEA Agent for organizational-level repository access. Add Toolkit: In the \"Tools\" section of the Agent configuration, click on the \"+\" icon . This action will display a dropdown list of available toolkits that can be integrated with your Agent. Select GitLab Org Toolkit: From the dropdown list of available toolkits, choose \"GitLab Org\" . Selecting \"GitLab Org\" will open the \"New GitLab Org tool\" configuration panel, where you will specify the settings for your GitLab Org integration. Configure GitLab Org Toolkit Settings: Carefully fill in the following configuration fields within the \"New GitLab Org tool\" section: Name: Enter a descriptive Name for this specific GitLab Org toolkit instance. Choose a name that is easily recognizable and helps you identify its purpose within your Agent's instructions. For example, you might use names like \"OrgCodeAccess\", \"GitLabOrgIntegration\", or \"EnterpriseGitLab\". Description: Provide a concise Description for the toolkit. This description should clarify the toolkit's purpose or the GitLab Organization it is intended to access. For example, you could describe it as \"Toolkit for accessing and managing repositories across the GitLab Organization\" or \"Integration for the entire GitLab Enterprise Organization\". GitLab URL: Enter the base URL of your GitLab instance. For GitLab.com (Cloud) : Use the standard GitLab.com URL: https://gitlab.com . For Self-Hosted GitLab Instances : If your organization uses a self-hosted GitLab instance (GitLab Enterprise Edition), enter the specific URL of your GitLab server. For example, https://gitlab.yourcompany.com . Ensure you include https:// or http:// at the beginning of the URL. API Token: In the \"API token\" field, paste the Personal Access Token that you generated in GitLab during the \"Software-Specific Setup\" section of this guide. Enhanced Security with Secrets (Recommended): For enhanced security, it is strongly recommended to use ELITEA's Secrets Management feature to store your GitLab Personal Access Token securely. Instead of directly pasting the token into the \"API token\" field, select the \"Secret\" option and choose the pre-configured secret containing your GitLab Org token from the dropdown list. This prevents hardcoding sensitive organizational credentials in your toolkit configuration. Repository Name: Specify the Repository names that you want to access with this toolkit. Enter a list of comma-separated repository names if you plan to interact with a predefined set of repositories within your Agent's instructions. Use the format: group_or_username/repository_name . For Organizational Access : Leave this field empty if you intend to dynamically specify the repository name within your Agent's instructions at runtime. This allows for greater flexibility, enabling your Agent to interact with different repositories within the GitLab Organization based on the context of the workflow or user input. For Predefined Repositories : If you are configuring the toolkit for a specific, limited set of repositories, you can enter them here as a comma-separated list (e.g., my_group/repo1,my_group/repo2,another_group/repo3 ). Enable Desired Tools: In the \"Tools\" section within the GitLab Org toolkit configuration panel, select the checkboxes next to the specific GitLab tools that you want to enable for your Agent. It is crucial to enable only the tools that your Agent will actually need to use to adhere to the principle of least privilege and minimize potential security risks, especially when dealing with organizational-level access. Available tools are identical to the standard GitLab toolkit and include: Create branch - Allows the Agent to create new branches in the repository. Create file - Enables the Agent to create new files within the repository. Create PR change comment - Allows the Agent to add comments to specific changes within a pull request (Merge Request in GitLab). Create pull request - Enables the Agent to create new pull requests (Merge Requests) for code review. Delete file - Allows the Agent to delete files from the repository. Get PR changes - Enables the Agent to retrieve the changes introduced in a specific pull request (Merge Request). List branches in repo - Allows the Agent to list all branches within the repository. List files - Enables the Agent to list all files within the repository. Read file - Allows the Agent to read the content of files within the repository. Set active branch - Enables the Agent to set a specific branch as the active branch for subsequent operations. Update file - Allows the Agent to update the content of existing files within the repository. Append file - Allows the Agent to append content to existing files within the repository. Complete Setup: After configuring all the necessary settings and enabling the desired tools, click the arrow icon (located at the top right of the toolkit configuration section) to finalize the GitLab Org toolkit setup and return to the main Agent configuration menu. Click Save in the Agent configuration to save all changes and activate the GitLab Org toolkit integration for your Agent.","title":"Toolkit Configuration"},{"location":"how-tos/agents-toolkits/gitlab_org_toolkit/#tool-overview-gitlab-org-toolkit-functionalities","text":"Once the GitLab Org toolkit is successfully configured and added to your Agent, you can leverage the following tools within your Agent's instructions to enable intelligent interaction with your GitLab repositories: Create branch: Tool Name: create_branch Functionality: Automates the creation of a new branch within the specified GitLab repository. Requires parameters such as the new branch name and the base branch to branch from. Purpose: Streamlines branch management by enabling Agents to automatically create new branches for feature development, bug fixes, or experimental code changes directly from ELITEA workflows, ensuring organized and efficient branching strategies. Create file: Tool Name: create_file Functionality: Automates the creation of a new file within the specified GitLab repository at a given path with specified content. Purpose: Enables automated creation of new code files, documentation files, configuration files, or any other type of file within your repository directly from ELITEA workflows, ensuring consistency and reducing manual file creation tasks. Create PR change comment: Tool Name: create_pr_change_comment Functionality: Automates adding comments to specific changes within a GitLab Merge Request (Pull Request). Requires the Merge Request ID, the path to the changed file, the position within the file, and the comment text. Purpose: Facilitates more granular and contextual code review feedback by allowing Agents to automatically add comments directly to specific lines or sections of code changes within Merge Requests, improving the clarity and efficiency of code reviews. Create pull request: Tool Name: create_pull_request Functionality: Automates the creation of a new Merge Request (Pull Request) in the specified GitLab repository. Requires parameters such as the source branch, target branch, Merge Request title, and description. Purpose: Streamlines the code review and merging process by automating Merge Request creation for code contributions, feature branches, or bug fixes directly from ELITEA. Reduces manual effort for developers and accelerates code integration workflows. Delete file: Tool Name: delete_file Functionality: Automates the deletion of a specified file from the GitLab repository. Requires the file path and branch name as parameters. Purpose: Enables automated file cleanup and codebase management by allowing Agents to delete obsolete files, remove temporary files, or enforce file lifecycle policies within your repository, helping maintain a clean and organized codebase. Get PR changes: Tool Name: get_pr_changes Functionality: Retrieves the details of changes introduced within a specific GitLab Merge Request (Pull Request). Returns information about the files changed, additions, and deletions. Purpose: Provides Agents with the ability to analyze code changes within Merge Requests, facilitating automated code review analysis, change impact assessment, or generating summaries of modifications for reviewers, enhancing code review automation and insights. List branches in repo: Tool Name: list_branches_in_repo Functionality: Retrieves a list of all branches available in the specified GitLab repository. Provides a simple list of branch names. Purpose: Enables Agents to obtain a comprehensive list of branches for branch management automation, generating reports on repository branching structure, providing users with branch selection options within ELITEA workflows, or automating branch-related decision-making processes. List files: Tool Name: list_files Functionality: Retrieves a list of all files within the specified GitLab repository at the root level of the repository's default branch. Provides a flat list of file paths. Purpose: Allows Agents to programmatically browse the top-level contents of a repository, providing a quick overview of the repository's structure, enabling basic file listing for navigation or automated file processing workflows. Read file: Tool Name: read_file Functionality: Reads and retrieves the content of a specific file from the specified GitLab repository. Requires the file path and branch name as parameters. Purpose: Enables Agents to dynamically access and utilize file contents from your GitLab repository, allowing retrieval of code snippets, configuration parameters, documentation content, or any other file data to provide context, data, or instructions within ELITEA workflows and conversations, facilitating dynamic and data-driven automation. Set active branch: Tool Name: set_active_branch Functionality: Sets a specific branch as the currently active branch within the GitLab toolkit's context. Directs subsequent file-related operations to target this active branch. Purpose: Ensures that file operations performed by the Agent are executed within the intended branch context, improving workflow accuracy and preventing unintended modifications to incorrect branches. Provides branch context management for reliable file-based automation. Update file: Tool Name: update_file Functionality: Updates the content of a specific, existing file within the GitLab repository. Replaces the entire file content with the provided new content. Requires the file path, branch name, and new file content as parameters. Purpose: Automates the process of updating code files, documentation, configuration files, or any file content within your repository based on ELITEA workflow outputs, user requests, or external triggers. Ensures configurations are synchronized, documentation is kept current, and codebase modifications are automated and version-controlled. Append file: Tool Name: append_file Functionality: Appends content to the end of an existing file within the GitLab repository. Requires the file path, branch name, and content to append as parameters. Purpose: Enables automated appending of data to log files, documentation files, or other files where incremental content addition is needed. Useful for adding timestamps, generating audit trails, or accumulating data within repository files through automated workflows.","title":"Tool Overview: GitLab Org Toolkit Functionalities"},{"location":"how-tos/agents-toolkits/gitlab_org_toolkit/#use-cases","text":"The GitLab Org toolkit unlocks a vast array of automation possibilities for managing software development workflows across your entire GitLab Organization within ELITEA. Here are key use cases, demonstrating how each tool can be effectively applied to streamline development processes and enhance productivity at the organizational level: Centralized Automated Branch Management Across Projects: Scenario: When initiating a new organizational-wide feature or security patch, automatically create dedicated feature branches across multiple relevant repositories within the GitLab Org, ensuring consistent branching across projects. Tools Used: create_branch Example Instruction: \"Use the 'create_branch' tool to create a new branch named 'org-feature-branch-name' based on the 'main' branch in repositories: 'my_group/repo1,my_group/repo2,another_group/repo3'.\" Benefit: Streamlines branch management across multiple projects within the organization, ensures consistent branching strategies for organizational initiatives, and reduces manual branch creation effort for large-scale changes. Organizational-Wide Code Snippet Retrieval for Standardization: Scenario: During organizational-level standardization efforts, retrieve code snippets or configuration templates from a designated \"template\" repository within the GitLab Org and apply them across multiple projects to enforce consistency. Tools Used: read_file Example Instruction: \"Use the 'read_file' tool to read the content of the file 'templates/code_template.txt' from the repository 'org_templates/common_templates' and apply this template to new files created in repositories: 'my_group/repo1,my_group/repo2'.\" Benefit: Enhances code standardization and consistency across the organization by enabling easy retrieval and application of templates and best practices from a central repository, promoting code quality and maintainability. Automated Documentation Updates Across Projects: Scenario: When organizational-level policies or guidelines change, automatically update relevant documentation files across multiple documentation repositories within the GitLab Org to ensure consistent and up-to-date information across all projects. Tools Used: read_file , update_file Example Instruction: \"Use the 'read_file' tool to get the current content of 'README.md' in repositories 'my_group/docs1,another_group/docs2'. Update it with the new organizational guidelines and use 'update_file' to save the updated content back to each 'README.md' in the 'main' branch.\" Benefit: Keeps documentation synchronized with organizational-level changes across multiple projects, reducing manual effort and errors in documentation maintenance and ensuring consistent information dissemination. Bulk Merge Request Automation for Organizational Refactoring: Scenario: After performing a large-scale refactoring across multiple repositories within the GitLab Org, automatically create merge requests for each refactored branch to merge the changes into the respective 'develop' branches for code review and integration. Tools Used: create_pull_request Example Instruction: \"Use the 'create_pull_request' tool to create merge requests from branch 'refactor-branch' to 'develop' branch with the title 'Organizational Refactoring Review' and description 'Please review the organizational refactoring changes' for repositories: 'my_group/repo1,my_group/repo2,another_group/repo3'.\" Benefit: Automates the merge request process for large-scale organizational changes, facilitating timely code reviews and improving code quality across multiple projects during significant refactoring efforts. Centralized Reporting on Branching Structure Across Org: Scenario: A GitLab Org administrator wants a quick overview of all active branches across all repositories within the organization for governance and monitoring purposes. Tools Used: list_branches_in_repo Example Instruction: \"Use the 'list_branches_in_repo' tool to list all branches in repositories: 'my_group/repo1,my_group/repo2,another_group/repo3' and present a consolidated report of all branches across these repositories.\" Benefit: Provides easy access to branch information across the entire GitLab Organization, facilitating organizational-level project monitoring, branch management governance, and understanding of the overall development landscape. Consistent Branch Context for Org-Wide Operations: Scenario: Before performing a series of automated file operations across multiple repositories, ensure the Agent is working on the correct branch in each repository to maintain consistency and avoid errors. Tools Used: set_active_branch Example Instruction: \"First, use 'set_active_branch' to set the active branch to 'develop' for repositories: 'my_group/repo1,my_group/repo2'. Then, proceed with the file operations in each repository within this active branch context.\" Benefit: Ensures operations are performed on the intended branch context across multiple repositories, reducing the risk of errors and unintended modifications during organizational-level automated workflows, improving workflow reliability and accuracy at scale.","title":"Use Cases"},{"location":"how-tos/agents-toolkits/gitlab_org_toolkit/#troubleshooting-and-support","text":"","title":"Troubleshooting and Support"},{"location":"how-tos/agents-toolkits/gitlab_org_toolkit/#troubleshooting-common-issues","text":"Connection Errors: Problem: ELITEA Agent fails to connect to GitLab Org, resulting in errors during toolkit execution. Troubleshooting Steps: Verify GitLab URL: Double-check that the GitLab URL field in the toolkit configuration is correctly set to your GitLab Org instance URL (e.g., https://gitlab.com or https://gitlab.yourcompany.com ). Ensure it includes https:// or http:// . Check Personal Access Token: Ensure that the Personal Access Token you provided is correct, has not expired, and is valid for your GitLab Org account and for organizational access. Carefully re-enter or copy-paste the token to rule out typos. Verify Token Scopes: Review the scopes/permissions granted to your GitLab Org Personal Access Token in GitLab. Ensure it has the necessary scopes (e.g., api , read_repository , write_repository , read_user ) for the GitLab Org tools your Agent is trying to use across the organization. Insufficient scopes are a common cause of connection and permission errors, especially at the organizational level. Network Connectivity: Confirm that both your ELITEA environment and the GitLab Org instance are connected to the internet and that there are no network connectivity issues, firewalls, or proxies blocking the integration. Test network connectivity to your GitLab Org URL from your ELITEA environment if possible. Authorization Errors (Permission Denied/Unauthorized) at Org Level: Problem: Agent execution fails with \"Permission Denied\" or \"Unauthorized\" errors when trying to access or modify GitLab Org resources, especially across multiple repositories. Troubleshooting Steps: Re-verify Token Scopes (Org Level): Double-check the scopes/permissions granted to your GitLab Org Personal Access Token with extreme care. Ensure it grants sufficient access for the specific GitLab Org actions your Agent is trying to perform across the organization (e.g., write_repository scope for creating branches or files in multiple repositories). Verify that the scopes are appropriate for organizational-level access. Organizational Access Verification: Confirm that the GitLab Org account associated with the Personal Access Token has the required access to the GitLab Organization itself and to all the specific repositories within the organization that your Agent needs to interact with. Verify that the account has the necessary roles or permissions at the organizational level (e.g., Owner or Maintainer role for broad organizational access). Check organization-level settings in GitLab to confirm access levels. Token Revocation or Expiration: Ensure that the Personal Access Token has not been accidentally revoked in GitLab settings or that it has not reached its expiration date if you set one. Generate a new token as a test if unsure. Incorrect Repository Names (Org Level): Problem: Agent tools fail to operate on the intended repositories within the GitLab Org, often resulting in \"Repository not found\" errors, especially when working with multiple repositories. Troubleshooting Steps: Double-Check Repository Names: Carefully verify that you have entered the correct GitLab Repository names in your Agent's instructions, using the format group_or_username/repository_name . Pay close attention to capitalization, spelling, and ensure the repository paths are accurate for the GitLab Organization structure. Verify Repository Existence within Org: Confirm that all specified repositories actually exist within your GitLab Organization and that the repository names and paths are correct within the organizational hierarchy. It's possible repository names or group paths have changed, or repositories have been moved or deleted within the Org. Comma Separation and Formatting: If you are providing a comma-separated list of repositories in the toolkit configuration or Agent instructions, ensure that the repository names are correctly separated by commas without extra spaces or incorrect formatting.","title":"Troubleshooting Common Issues"},{"location":"how-tos/agents-toolkits/gitlab_org_toolkit/#faqs","text":"Q: Can I use my regular GitLab Org password for the ELITEA integration? A: No, it is strongly recommended to use a GitLab Personal Access Token instead of your main account password for security reasons, especially for organizational-level integrations. Personal Access Tokens provide a more secure and controlled way to grant access to external applications like ELITEA, and are essential for secure organizational access. Q: What scopes/permissions should I grant to the GitLab Org Personal Access Token? A: Grant only the minimum necessary scopes required for your ELITEA Agent's intended interactions with your GitLab Organization. For typical organizational-level integration, the api scope (or granular read_api , read_repository , write_repository ) is often necessary to access resources across the organization. Carefully consider the principle of least privilege and avoid granting \"sudo\" or unnecessary permissions, especially at the organizational level. Q: What is the correct format for the GitLab Repository names when specifying multiple repositories for the GitLab Org toolkit? A: When specifying multiple repositories, use a comma-separated list in the format group_or_username/repository_name,group_or_username/repository_name,... (e.g., my_group/repo1,my_group/repo2,another_group/repo3 ). Ensure each repository name is correctly formatted with the group path or username and the repository name separated by a forward slash / . Q: Why is my Agent getting \"Permission Denied\" errors when using the GitLab Org toolkit, even though I think I have the right permissions? A: If you are encountering \"Permission Denied\" errors with the GitLab Org toolkit, carefully re-examine the following: Token Scope Accuracy (Org Level): Double and triple-check the scopes/permissions granted to your GitLab Org Personal Access Token in your GitLab user settings. Ensure that the token possesses the exact scopes required for each GitLab tool your Agent is attempting to use across the organization. Verify that the scopes are sufficient for organizational-level access if needed. Organizational Access Verification: Explicitly verify that the GitLab Org account associated with the Personal Access Token has the necessary access rights to the GitLab Organization itself and to all target repositories within the organization. Confirm organizational membership and assigned roles/permissions within GitLab Org settings. Token Validity and Revocation: Double-check that the Personal Access Token is still valid, has not expired, and has not been accidentally revoked in your GitLab settings. Generate a new token as a test if unsure. Repository Name Accuracy (Org Level): Carefully review all repository names in your Agent instructions and toolkit configuration, ensuring they are correctly spelled, capitalized, and formatted with the correct group paths for your GitLab Organization's structure. If, after meticulously checking all of these points, you still encounter \"Permission Denied\" errors when using the GitLab Org toolkit, please reach out to ELITEA Support with detailed information for further assistance.","title":"FAQs"},{"location":"how-tos/agents-toolkits/gitlab_org_toolkit/#support-and-contact-information","text":"If you encounter any issues, have questions, or require further assistance beyond what is covered in this guide regarding the GitLab Org integration or ELITEA Agents in general, please do not hesitate to contact our dedicated ELITEA Support Team. We are here to help you resolve any problems quickly and efficiently and ensure you have a smooth and productive experience with ELITEA. How to Reach ELITEA Support: Email: SupportAlita@epam.com Best Practices for Effective Support Requests: To help us understand and resolve your issue as quickly as possible, please ensure you provide the following information in your support email: ELITEA Environment: Clearly specify the ELITEA environment you are using (e.g., \"Nexus,\" \"Alita Lab,\" \"EYE\"). Project Details: Indicate the Project Name and whether you are working in your Private workspace or a Team project. Detailed Issue Description: Provide a clear, concise, and detailed description of the problem you are encountering. Explain what you were trying to do, what you expected to happen, and what actually occurred. Relevant Configuration Information: To help us diagnose the issue, please include relevant configuration details, such as: Agent Instructions (Screenshot or Text): If the issue is with an Agent, provide a screenshot or copy the text of your Agent's \"Instructions\" field. Toolkit Configurations (Screenshots): If the issue involves the GitLab Org toolkit or other toolkits, include screenshots of the toolkit configuration settings within your Agent. Error Messages (Full Error Text): If you are encountering an error message, please provide the complete error text . In the Chat window, expand the error details and copy the full error message. This detailed error information is crucial for diagnosis. Your Query/Prompt (Exact Text): If the issue is related to Agent execution, provide the exact query or prompt you used to trigger the issue. Before Contacting Support: We encourage you to first explore the resources available within this guide and the broader ELITEA documentation. You may find answers to common questions or solutions to known issues in the documentation.","title":"Support and Contact Information"},{"location":"how-tos/agents-toolkits/gitlab_org_toolkit/#useful-links","text":"To further enhance your understanding and skills in integrating GitLab Org with ELITEA, here are some helpful resources: GitLab Website : Access the main GitLab platform to create an account or log in. GitLab Login Page : Directly access the login page for GitLab. ELITEA Secrets Management : Learn how to securely store your GitLab Personal Access Token using ELITEA's Secrets management feature for enhanced security. ELITEA Agents Configuration : Find out more about creating and configuring Agents in ELITEA, where you integrate the GitLab Org toolkit to automate your workflows. ELITEA Support Email : Contact the ELITEA support team for direct assistance with GitLab Org integration or any other questions and issues you may encounter.","title":"Useful Links"},{"location":"how-tos/agents-toolkits/gitlab_toolkit/","text":"ELITEA Toolkit Guide: GitLab Integration Introduction Purpose of this Guide This guide serves as your definitive resource for integrating and effectively utilizing the GitLab toolkit within ELITEA. It provides a detailed, step-by-step walkthrough, from setting up your GitLab Personal Access Token to configuring the toolkit in ELITEA and seamlessly incorporating it into your Agents. By following this guide, you will unlock the full potential of automated code management, streamlined development workflows, and enhanced team collaboration, all directly within the ELITEA platform. This integration empowers you to leverage AI-driven automation to optimize your software development lifecycle, harnessing the combined strengths of ELITEA and GitLab. Brief Overview of GitLab GitLab is a powerful, web-based DevOps platform that provides a comprehensive suite of tools for the entire software development lifecycle, delivered as a single, integrated application. It is widely adopted by development teams for its robust features and collaborative environment. GitLab excels as a version control repository manager and offers a wide array of functionalities, including: Centralized Git Repository Management: GitLab provides a robust and scalable platform for hosting and managing Git repositories, ensuring efficient version control, code organization, and secure access management for your entire codebase. Enhanced Collaboration Features: GitLab fosters seamless team collaboration with features such as Merge Requests for code review, robust Issue Tracking for project management, Wikis for documentation, and in-line Code Review tools, facilitating a collaborative and transparent development process. Integrated CI/CD Pipelines: GitLab CI/CD is a powerful built-in Continuous Integration and Continuous Delivery system that automates the entire software pipeline, from building and testing code to deploying applications, enabling rapid and reliable software releases. Comprehensive Project Management Tools: GitLab includes a rich set of project planning and management features, such as Issue Boards for agile task management, Milestones for tracking progress against deadlines, and Time Tracking to monitor effort, streamlining software development workflows and improving project visibility. DevSecOps Capabilities: GitLab integrates security scanning and testing throughout the DevOps lifecycle, enabling teams to build secure applications and proactively address vulnerabilities early in the development process, promoting a DevSecOps approach. Integrating GitLab with ELITEA brings these powerful DevOps capabilities directly into your AI-driven workflows. Your ELITEA Agents can then intelligently interact with your GitLab repositories to automate code-related tasks, enhance development processes, improve team collaboration, and leverage AI to optimize your entire software development lifecycle. Toolkit's Account Setup and Configuration in GitLab Account Setup If you do not yet have a GitLab account, please follow these steps to create one: Visit GitLab Website: Open your web browser and navigate to the official GitLab website: gitlab.com . Register/Sign Up: Click on the \"Register\" or \"Sign Up\" button, typically located in the top right corner of the homepage. Enter Account Details: Fill in the required information on the signup form. This usually includes your desired username, email address, full name, and a secure password. Note: For professional use cases, it is strongly recommended to use your company email address . Email Verification: Check your email inbox for a verification email sent by GitLab. Click on the confirmation link provided in the email to verify your email address and activate your newly created GitLab account. Log In to GitLab: Once your email is verified, log in to GitLab using your chosen username and password. You are now ready to proceed with GitLab account configuration. Token/API Key Generation: Creating a Personal Access Token in GitLab For secure integration with ELITEA, it is highly recommended to utilize a GitLab Personal Access Token . This method is significantly more secure than using your primary GitLab account password directly and provides granular control over the permissions granted to ELITEA. Follow these steps to generate a Personal Access Token in GitLab: Log in to GitLab: Access your GitLab account by navigating to gitlab.com and logging in with your credentials. Access User Settings: Click on your profile avatar, located in the top right corner of the GitLab interface. From the dropdown menu, select \"Edit profile\" . Navigate to Access Tokens: In the left-hand sidebar of your profile settings, click on \"Access Tokens\" . Generate New Token: Click the \"Add new token\" button to begin the process of creating a new Personal Access Token. Configure Token Details: Token name: In the \"Token name\" field, provide a descriptive and easily recognizable label for your token. For example, you could use \"ELITEA Integration Token\" or \"ELITEA Agent Access.\" This label will help you identify the purpose of this token in the future and manage your tokens effectively. Expiration date (Recommended): For enhanced security, it is strongly recommended to set an Expiration date for your token. Choose a reasonable validity period that aligns with your security policies and integration needs. Setting an expiration date limits the token's lifespan and reduces the potential security risk if the token is ever compromised. Select Scopes - Grant Least Privilege (Crucial for Security): Carefully and deliberately select the scopes or permissions you grant to this Personal Access Token. It is of utmost importance to grant only the minimum necessary permissions required for your ELITEA Agent's intended interactions with GitLab. Overly permissive tokens significantly increase the potential security risk. For typical ELITEA integration, consider these minimal scopes: Minimal Scopes for Common Use Cases: api: (Provides full access to the GitLab API, encompassing all groups and projects. If possible, for enhanced security, consider using more granular scopes instead of the broad api scope.) read_api: (Allows read-only access to the GitLab API, suitable for retrieving data without modification.) read_repository: (Grants read-only access to repositories, enabling actions like listing files and reading file content.) write_repository: (Grants write access to repositories, allowing actions like creating branches, creating files, and updating file content. Only include this if your Agent needs to modify the repository.) Additional Scopes for Specific Functionality (Grant only when required): read_user: (Allows read access to user profiles, useful for user-related actions.) read_issue: (Grants read access to issues, enabling issue retrieval and listing.) write_issue: (Grants write access to issues, allowing issue creation and updates. Include only if your Agent needs to manage issues.) read_merge_requests: (Allows read access to merge requests, enabling merge request retrieval and listing.) write_merge_requests: (Grants write access to merge requests, allowing merge request creation and updates. Include only if your Agent needs to manage merge requests.) Important Security Best Practices: Principle of Least Privilege: Strictly adhere to the principle of least privilege. Grant only the absolute minimum set of scopes necessary for your ELITEA Agent to perform its specific, intended tasks. Avoid granting broad or unnecessary permissions. Avoid \"sudo\" or Admin Scopes: Never grant \"sudo\" or other administrative scopes unless absolutely essential and with a clear and thorough understanding of the significant security implications. Administrative scopes provide extensive access and should be avoided for integration purposes whenever possible. Regular Token Review and Rotation: Implement a process for regularly reviewing the Personal Access Tokens you have generated, their associated scopes, and their usage. Rotate tokens periodically (generate new tokens and revoke older ones) as a proactive security measure, especially for integrations that handle sensitive data or critical operations. Secure Storage: Store the generated Personal Access Token securely, preferably using ELITEA's built-in Secrets Management feature, rather than hardcoding it directly in Agent configurations or less secure storage locations. Create Personal Access Token: Click the \"Create personal access token\" button located at the bottom of the page to generate your token. Securely Copy and Store the Token: Immediately copy the generated Personal Access Token that is displayed on the subsequent page. This is the only time you will be able to view and copy the full token value. Store it securely using a robust password manager or, ideally, ELITEA's built-in Secrets feature for enhanced security within the ELITEA platform. You will require this token to configure the GitLab toolkit within ELITEA. System Integration with ELITEA Agent Creation/Configuration To integrate GitLab functionalities into your workflows, you will need to configure the GitLab toolkit within an ELITEA Agent. You can either create a new Agent specifically for GitLab interactions or modify an existing Agent to incorporate GitLab tools. Navigate to Agents Menu: In ELITEA, access the Agents menu from the main navigation panel. Create or Edit Agent: Create a New Agent: Click on the \"+ Agent\" button to initiate the creation of a new Agent. Follow the on-screen prompts to define essential Agent attributes such as Agent name, a descriptive Agent description, the desired Agent type, and initial instructions for the Agent. Edit an Existing Agent: Select the Agent you intend to integrate with GitLab from your list of Agents. Click on the Agent's name to open its configuration settings for editing. Access Tools Section: Within the Agent configuration interface, scroll down until you locate the \"Tools\" section. This section is where you will add and configure toolkits, including the GitLab toolkit. Toolkit Configuration This section provides detailed instructions on how to configure the GitLab toolkit within your ELITEA Agent. Add Toolkit: In the \"Tools\" section of the Agent configuration, click on the \"+\" icon . This action will display a dropdown list of available toolkits that can be integrated with your Agent. Select GitLab Toolkit: From the dropdown list of available toolkits, choose \"GitLab\" . Selecting \"GitLab\" will open the \"New GitLab tool\" configuration panel, where you will specify the settings for your GitLab integration. Configure GitLab Toolkit Settings: Carefully fill in the following configuration fields within the \"New GitLab tool\" section: Name: Enter a descriptive Name for this specific GitLab toolkit instance. Choose a name that is easily recognizable and helps you identify its purpose within your Agent's instructions. For example, you might use names like \"ProjectGitLab\", \"CodeRepositoryAccess\", or \"GitLabIntegration\". Description: Provide a concise Description for the toolkit. This description should clarify the toolkit's purpose or the specific GitLab repository or project it is intended to access. For example, you could describe it as \"Toolkit for accessing and managing the main project code repository on GitLab\" or \"Integration for GitLab project 'MyProject'\". GitLab URL: Enter the base URL of your GitLab instance. For GitLab.com (Cloud) : Use the standard GitLab.com URL: https://gitlab.com . For Self-Hosted GitLab Instances : If you are using a self-hosted GitLab instance (GitLab Community Edition or GitLab Enterprise Edition), enter the specific URL of your GitLab server. For example, https://your-gitlab-instance.com . Ensure you include https:// or http:// at the beginning of the URL. API Token: In the \"API token\" field, paste the Personal Access Token that you generated in GitLab during the \"Software-Specific Setup\" section of this guide. Enhanced Security with Secrets (Recommended): For enhanced security, it is strongly recommended to use ELITEA's Secrets Management feature to store your GitLab Personal Access Token securely. Instead of directly pasting the token into the \"API token\" field, select the \"Secret\" option and choose the pre-configured secret containing your GitLab token from the dropdown list. This prevents hardcoding sensitive credentials in your toolkit configuration. Repository Name: Specify the Repository name that you want to access with this toolkit. Use the format: group_or_username/repository_name . For Personal Repositories : If the repository is under your personal GitLab account, use your username followed by the repository name (e.g., your_username/my-repo ). For Group Repositories : If the repository belongs to a GitLab group, use the group's path followed by the repository name (e.g., my_group/project-repo ). Ensure you use the correct group path, not just the group name. Enable Desired Tools: In the \"Tools\" section within the GitLab toolkit configuration panel, select the checkboxes next to the specific GitLab tools that you want to enable for your Agent. It is crucial to enable only the tools that your Agent will actually need to use to adhere to the principle of least privilege and minimize potential security risks. Available tools include: Create branch - Allows the Agent to create new branches in the repository. Create file - Enables the Agent to create new files within the repository. Create PR change comment - Allows the Agent to add comments to specific changes within a pull request (Merge Request in GitLab). Create pull request - Enables the Agent to create new pull requests (Merge Requests) for code review. Delete file - Allows the Agent to delete files from the repository. Get PR changes - Enables the Agent to retrieve the changes introduced in a specific pull request (Merge Request). List branches in repo - Allows the Agent to list all branches within the repository. List files - Enables the Agent to list all files within the repository. Read file - Allows the Agent to read the content of files within the repository. Set active branch - Enables the Agent to set a specific branch as the active branch for subsequent operations. Update file - Allows the Agent to update the content of existing files within the repository. Append file - Allows the Agent to append content to existing files within the repository. Complete Setup: After configuring all the necessary settings and enabling the desired tools, click the arrow icon (located at the top right of the toolkit configuration section) to finalize the GitLab toolkit setup and return to the main Agent configuration menu. Click Save in the Agent configuration to save all changes and activate the GitLab toolkit integration for your Agent. Tool Overview: GitLab Toolkit Functionalities Once the GitLab toolkit is successfully configured and added to your Agent, you can leverage the following tools within your Agent's instructions to enable intelligent interaction with your GitLab repositories: Create branch: Tool Name: create_branch Functionality: Automates the creation of a new branch within the specified GitLab repository. Requires parameters such as the new branch name and the base branch to branch from. Purpose: Streamlines branch management by enabling Agents to automatically create new branches for feature development, bug fixes, or experimental code changes directly from ELITEA workflows, ensuring organized and efficient branching strategies. Create file: Tool Name: create_file Functionality: Automates the creation of a new file within the specified GitLab repository at a given path with specified content. Purpose: Enables automated creation of new code files, documentation files, configuration files, or any other type of file within your repository directly from ELITEA workflows, ensuring consistency and reducing manual file creation tasks. Create PR change comment: Tool Name: create_pr_change_comment Functionality: Automates adding comments to specific changes within a GitLab Merge Request (Pull Request). Requires the Merge Request ID, the path to the changed file, the position within the file, and the comment text. Purpose: Facilitates more granular and contextual code review feedback by allowing Agents to automatically add comments directly to specific lines or sections of code changes within Merge Requests, improving the clarity and efficiency of code reviews. Create pull request: Tool Name: create_pull_request Functionality: Automates the creation of a new Merge Request (Pull Request) in the specified GitLab repository. Requires parameters such as the source branch, target branch, Merge Request title, and description. Purpose: Streamlines the code review and merging process by automating Merge Request creation for code contributions, feature branches, or bug fixes directly from ELITEA. Reduces manual effort for developers and accelerates code integration workflows. Delete file: Tool Name: delete_file Functionality: Automates the deletion of a specified file from the GitLab repository. Requires the file path and branch name as parameters. Purpose: Enables automated file cleanup and codebase management by allowing Agents to delete obsolete files, remove temporary files, or enforce file lifecycle policies within your repository, helping maintain a clean and organized codebase. Get PR changes: Tool Name: get_pr_changes Functionality: Retrieves the details of changes introduced within a specific GitLab Merge Request (Pull Request). Returns information about the files changed, additions, and deletions. Purpose: Provides Agents with the ability to analyze code changes within Merge Requests, facilitating automated code review analysis, change impact assessment, or generating summaries of modifications for reviewers, enhancing code review automation and insights. List branches in repo: Tool Name: list_branches_in_repo Functionality: Retrieves a list of all branches available in the specified GitLab repository. Provides a simple list of branch names. Purpose: Enables Agents to obtain a comprehensive list of branches for branch management automation, generating reports on repository branching structure, providing users with branch selection options within ELITEA workflows, or automating branch-related decision-making processes. List files: Tool Name: list_files Functionality: Retrieves a list of all files within the specified GitLab repository at the root level of the repository's default branch. Provides a flat list of file paths. Purpose: Allows Agents to programmatically browse the top-level contents of a repository, providing a quick overview of the repository's structure, enabling basic file listing for navigation or automated file processing workflows. Read file: Tool Name: read_file Functionality: Reads and retrieves the content of a specific file from the specified GitLab repository. Requires the file path and branch name as parameters. Purpose: Enables Agents to dynamically access and utilize file contents from your GitLab repository, allowing retrieval of code snippets, configuration parameters, documentation content, or any other file data to provide context, data, or instructions within ELITEA workflows and conversations, facilitating dynamic and data-driven automation. Set active branch: Tool Name: set_active_branch Functionality: Sets a specific branch as the currently active branch within the GitLab toolkit's context. Directs subsequent file-related operations to target this active branch. Purpose: Ensures that file operations performed by the Agent are executed within the intended branch context, improving workflow accuracy and preventing unintended modifications to incorrect branches. Provides branch context management for reliable file-based automation. Update file: Tool Name: update_file Functionality: Updates the content of a specific, existing file within the GitLab repository. Replaces the entire file content with the provided new content. Requires the file path, branch name, and new file content as parameters. Purpose: Automates the process of updating code files, documentation, configuration files, or any file content within your repository based on ELITEA workflow outputs, user requests, or external triggers. Ensures configurations are synchronized, documentation is kept current, and codebase modifications are automated and version-controlled. Append file: Tool Name: append_file Functionality: Appends content to the end of an existing file within the GitLab repository. Requires the file path, branch name, and content to append as parameters. Purpose: Enables automated appending of data to log files, documentation files, or other files where incremental content addition is needed. Useful for adding timestamps, generating audit trails, or accumulating data within repository files through automated workflows. Instructions and Prompts for Using the Toolkit To effectively instruct your ELITEA Agent to utilize the GitLab toolkit, you must provide clear and precise instructions within the Agent's \"Instructions\" field. These instructions are essential for guiding the Agent on when and how to use the available GitLab tools to achieve your desired automation outcomes. Instruction Creation for OpenAI Agents When crafting instructions for the GitLab toolkit, especially for OpenAI-based Agents, clarity and precision are paramount. Break down complex tasks into a sequence of simple, actionable steps. Explicitly define all parameters required for each tool and guide the Agent on how to obtain or determine the values for these parameters. OpenAI Agents respond best to instructions that are: Direct and Action-Oriented: Employ strong action verbs and clear commands to initiate actions. For example, \"Use the 'read_file' tool...\", \"Create a branch named...\", \"List all open merge requests...\". Parameter-Centric: Clearly enumerate each parameter required by the tool. For each parameter, specify: Its name (exactly as expected by the tool). The format or type of value expected. How the Agent should obtain the value \u2013 whether from user input, derived from previous steps in the conversation, retrieved from an external source, or a predefined static value. Contextually Rich: Provide sufficient context so the Agent understands the overarching objective and the specific scenario in which each GitLab tool should be applied within the broader workflow. Explain the desired outcome or goal for each tool invocation. Step-by-Step Structure: Organize instructions into a numbered or bulleted list of steps for complex workflows. This helps the Agent follow a logical sequence of actions. When instructing your Agent to use a GitLab toolkit tool, adhere to this structured pattern: 1. **State the Goal:** Begin by clearly stating the objective you want to achieve with this step. For example, \"Goal: To retrieve the content of the 'README.md' file.\" 2. **Specify the Tool:** Clearly indicate the specific GitLab tool to be used for this step. For example, \"Tool: Use the 'read_file' tool.\" 3. **Define Parameters:** Provide a detailed list of all parameters required by the selected tool. For each parameter: - Parameter Name: `<Parameter Name as defined in tool documentation>` - Value or Source: `<Specify the value or how to obtain the value. Examples: \"user input\", \"from previous step\", \"hardcoded value 'main'\", \"value of variable X\">` 4. **Describe Expected Outcome (Optional but Recommended):** Briefly describe the expected result or outcome after the tool is successfully executed. For example, \"Outcome: The Agent will provide the content of the 'README.md' file.\" Example Agent Instructions for GitLab Toolkit Tools (Optimized for OpenAI Agents): Agent Instructions for Updating a File: 1. Goal: Update the content of the 'config.json' file in the 'settings' branch with new configuration values provided by the user. 2. Tool: Use the \"update_file\" tool. 3. Parameters: - Repository Name: \"Specify the repository name in 'group/repo' format. Use the repository configured in the GitLab toolkit.\" - File Path: \"config.json\" - Branch Name: \"settings\" - New Content: \"Ask the user for the new JSON configuration content. Ensure it is valid JSON format. Example: {\\\"setting\\\": \\\"new_value\\\"}\" 4. Outcome: The 'config.json' file in the 'settings' branch will be updated with the user-provided JSON configuration. Confirm the update to the user. Agent Instructions for Creating a New Branch: 1. Goal: To create a new feature branch for user authentication, named 'feature-user-auth', branching from the 'develop' branch. 2. Tool: Use the \"create_branch\" tool. 3. Parameters: - Repository Name: \"Specify the repository name in 'group/repo' format. Use the repository configured in the GitLab toolkit.\" - New Branch Name: \"feature-user-auth\" - Base Branch: \"develop\" 4. Outcome: A new branch named 'feature-user-auth' will be created in the repository, based on the 'develop' branch. Inform the user that the branch has been created. Agent Instructions for Listing Branches in a Repository: 1. Goal: To get a list of all branches in the repository to understand the current project structure. 2. Tool: Use the \"list_branches_in_repo\" tool. 3. Parameters: - Repository Name: \"Specify the repository name in 'group/repo' format. Use the repository configured in the GitLab toolkit.\" 4. Outcome: The Agent will provide a list of all branches in the repository. Agent Instructions for Reading a File from a Repository: 1. Goal: To read the content of the 'README.md' file to understand the project's overview. 2. Tool: Use the \"read_file\" tool. 3. Parameters: - Repository Name: \"Specify the repository name in 'group/repo' format. Use the repository configured in the GitLab toolkit.\" - File Path: \"README.md\" - Branch Name: \"main\" 4. Outcome: The Agent will provide the content of the 'README.md' file from the 'main' branch. Conversation Starters Use these conversation starters to interact with your GitLab-integrated Agent. These are useful for both testing the integration and for common usage scenarios. 1. For Testing and Troubleshooting Connection & Configuration: These starters are specifically designed to verify if the GitLab toolkit is correctly configured, authenticated, and successfully connected to your GitLab repository. They test basic functionalities to ensure the integration is working as expected. \"List branches in the repository.\" - This starter tests basic connectivity to GitLab and verifies read permissions for branch listing. \"Read the file 'README.md' from the main branch.\" - This starter further tests read permissions and the ability to access and retrieve file content from the repository. \"Create a new branch named 'test-connection' based on main.\" - This starter tests write permissions (if enabled in your token scopes) and the branch creation functionality. Important: Remember to manually delete the 'test-connection' branch from your repository after successful testing to maintain repository hygiene. \"List open pull requests.\" - Tests the ability to retrieve pull request data, verifying permissions for PR access. \"Get PR changes for the latest pull request.\" - Tests the ability to retrieve pull request changes, verifying permissions for PR change access. 2. For General Agent Usage Scenarios & Workflow Initiation: These conversation starters demonstrate how to initiate agent execution for common, practical GitLab-related tasks and workflows. They represent typical user requests and showcase the agent's ability to perform useful actions within GitLab. \"I need to update the documentation file 'user_guide.md' with details about the new API endpoints. Can you help me update it in GitLab?\" - This starter could trigger a workflow involving read_file to get the current documentation content, potentially some content modification steps, and then update_file to save the updated documentation back to the repository. \"Create a merge request to merge my 'feature-x' branch into 'develop' for code review and integration.\" - This starter directly initiates the create_pull_request tool to automate the merge request creation process. \"What are the active feature branches currently in the repository that need code review?\" - This starter would utilize the list_branches_in_repo tool (potentially combined with merge request data) to provide a project status overview, specifically focusing on feature branches awaiting review. \"I want to add a new configuration file named 'deployment.config' to the 'config' directory in the main branch with these settings: [provide configuration settings here]. Can you create this file for me?\" - This starter would use the create_file tool to automate the creation of a new configuration file with user-specified content in the designated repository location. \"Append a timestamp and 'Workflow execution completed' message to the 'workflow.log' file in the main branch.\" - This starter directly uses the append_file tool to add a log entry to a file, automating logging within workflows. These conversation starters offer a solid foundation for interacting with your GitLab-integrated ELITEA Agent. They can be further customized and expanded upon to precisely match your specific use cases, workflows, and the unique automation needs of your software development projects. Use Cases The GitLab toolkit unlocks a vast array of automation possibilities for your software development workflows within ELITEA. Here are key use cases, presented in a structured format similar to the Bitbucket guide, illustrating how each tool can be effectively applied to streamline development processes and enhance productivity: Automated Feature Branching: Scenario: When a new feature is planned, the Agent can automatically create a dedicated feature branch in GitLab. Tools Used: create_branch Example Instruction: \"Use the 'create_branch' tool to create a new branch named 'feature-branch-name' based on the 'develop' branch.\" Benefit: Streamlines branch management, ensures organized feature development. Contextual Code Retrieval for Support: Scenario: During a support conversation, an Agent can retrieve relevant code snippets from GitLab to provide context or examples to the user. Tools Used: read_file Example Instruction: \"Use the 'read_file' tool to read the content of the file 'src/components/UserComponent.js' from the 'main' branch and show it to the user.\" Benefit: Enhances support interactions with direct access to codebase information. Automated Documentation Updates: Scenario: When code changes are made, the Agent can automatically update related documentation files in the repository. Tools Used: read_file , update_file Example Instruction: \"Use the 'read_file' tool to get the current content of 'docs/api.md'. Update it with the new API changes and use 'update_file' to save the updated content back to 'docs/api.md' in the 'main' branch.\" Benefit: Keeps documentation synchronized with the latest codebase, reducing manual effort and errors. Merge Request Automation for Code Review: Scenario: After a developer completes a task, the Agent can automatically create a merge request for code review. Tools Used: create_pull_request Example Instruction: \"Use the 'create_pull_request' tool to create a merge request from branch 'feature-branch-name' to 'develop' branch with the title 'Feature Branch Review' and description 'Please review the changes for the new feature.'\" Benefit: Automates the merge request process, facilitating timely code reviews and improving code quality. Listing Branches for Project Overview: Scenario: A project manager wants a quick overview of all active branches in the repository. Tools Used: list_branches_in_repo Example Instruction: \"Use the 'list_branches_in_repo' tool to list all branches in the repository and present them to the user.\" Benefit: Provides easy access to branch information for project management and monitoring. Setting Active Branch for Focused Operations: Scenario: Before performing a series of file operations, ensure the Agent is working on the correct branch. Tools Used: set_active_branch Example Instruction: \"First, use 'set_active_branch' to set the active branch to 'develop'. Then, use 'read_file' to read 'config.json' from the active branch.\" Benefit: Ensures operations are performed in the intended branch context, reducing errors and improving workflow reliability. Automated Logging with File Appending: Scenario: In automated workflows, append execution logs to a designated log file in the repository for audit trails and debugging purposes. Tools Used: append_file Example Instruction: \"Use the 'append_file' tool to append the text '[log_message]' to the file 'workflow.log' in the 'main' branch.\" Benefit: Enables automated logging within workflows, providing a persistent record of workflow executions, facilitating debugging, auditing, and monitoring of automated processes. Contextual Code Review Feedback with Change Comments: Scenario: During code reviews, allow Agents to automatically add comments to specific lines of code within merge requests to provide targeted feedback or suggestions. Tools Used: create_pr_change_comment Example Instruction: \"Use the 'create_pr_change_comment' tool to add a comment to merge request [mr_id] at file '[file_path]', line [line_number], with the text '[comment_text]'.\" Benefit: Facilitates more precise and actionable code review feedback by allowing comments to be directly associated with specific code changes, improving the clarity and effectiveness of the review process. Retrieving Merge Request Changes for Analysis: Scenario: Automate analysis of code changes introduced in a merge request to identify potential security vulnerabilities or code quality issues before merging. Tools Used: get_pr_changes Example Instruction: \"Use the 'get_pr_changes' tool to get the changes for merge request [mr_id]. Analyze the changes for potential security risks and report any findings.\" Benefit: Enables automated code analysis and security checks within merge request workflows, improving code quality and security posture by proactively identifying potential issues before code integration. Troubleshooting and Support Troubleshooting Common Issues Connection Errors: Problem: ELITEA Agent fails to connect to GitLab, resulting in errors during toolkit execution. Troubleshooting Steps: Verify GitLab URL: Double-check that the GitLab URL field in the toolkit configuration is correctly set to your GitLab instance URL (e.g., https://gitlab.com or your self-hosted instance URL). Ensure it includes https:// or http:// . Check Personal Access Token: Ensure that the Personal Access Token you provided is correct, has not expired, and is valid for your GitLab account and repository. Carefully re-enter or copy-paste the token to rule out typos. Verify Token Scopes: Review the scopes/permissions granted to your Personal Access Token in GitLab. Ensure it has the necessary scopes (e.g., api , read_repository , write_repository , read_user ) for the GitLab tools your Agent is trying to use. Insufficient scopes are a common cause of connection and permission errors. Network Connectivity: Confirm that both your ELITEA environment and the GitLab instance are connected to the internet and that there are no network connectivity issues, firewalls, or proxies blocking the integration. Test network connectivity to your GitLab URL from your ELITEA environment if possible. Authorization Errors (Permission Denied/Unauthorized): Problem: Agent execution fails with \"Permission Denied\" or \"Unauthorized\" errors when trying to access or modify GitLab resources. Troubleshooting Steps: Re-verify Token Scopes: Double-check the scopes/permissions granted to your GitLab Personal Access Token with extreme care. Ensure it grants sufficient access for the specific GitLab actions your Agent is trying to perform (e.g., write_repository scope for creating files or branches). Repository Access Permissions: Confirm that the GitLab account associated with the Personal Access Token has the required access to the specified repository. Verify that the account is a member of the project or group that owns the repository and has the necessary roles or permissions (e.g., Maintainer or Developer role for write access). Check project/group settings in GitLab to confirm access levels. Token Revocation or Expiration: Ensure that the Personal Access Token has not been accidentally revoked in GitLab settings or that it has not reached its expiration date if you set one. Generate a new token if necessary. Incorrect Repository or Branch Names: Problem: Agent tools fail to operate on the intended repository or branch, often resulting in \"Repository not found\" or \"Branch not found\" errors. Troubleshooting Steps: Double-Check Repository Name: Carefully verify that you have entered the correct GitLab Repository name in the toolkit configuration within ELITEA, using the format group_or_username/repository_name . Pay attention to capitalization and spelling. For group repositories, ensure you are using the group's path , not just the group name. Verify Branch Name: Ensure that you are using the correct branch name (e.g., main , develop , feature-branch ) in your Agent's instructions when specifying branch-related parameters for GitLab tools. Branch names are case-sensitive in Git. Double-check the spelling and capitalization of branch names against your repository in GitLab. Branch Existence: Confirm that the specified branch actually exists in your GitLab repository. It's possible the branch name is correct but the branch was deleted or renamed. FAQs Q: Can I use my regular GitLab password for the ELITEA integration? A: No, it is strongly recommended to use a GitLab Personal Access Token instead of your main account password for security reasons. Personal Access Tokens provide a more secure and controlled way to grant access to external applications like ELITEA. Q: What scopes/permissions should I grant to the GitLab Personal Access Token? A: Grant only the minimum necessary scopes required for your ELITEA Agent's intended interactions with GitLab. For typical integration, api scope (or granular read_api , read_repository , write_repository ), and potentially read_user , read_issue , write_issue , read_merge_requests , write_merge_requests scopes are commonly needed depending on the tools you enable. Avoid granting \"sudo\" or unnecessary permissions. Q: What is the correct format for the GitLab Repository name in the toolkit configuration? A: The Repository name should be entered in the format group_or_username/repository_name (e.g., my-group/my-project-repo or your-username/personal-repo ). Ensure you include both the group path or username and the repository name, separated by a forward slash / . For group repositories, use the group's path , not just the group name. Q: Why is my Agent getting \"Permission Denied\" errors even though I think I have configured everything correctly? A: Double-check the scopes/permissions granted to your GitLab Personal Access Token. Ensure that the token has the specific scopes required for the GitLab tools your Agent is trying to use (e.g., write_repository scope for creating files or branches). Also, verify that the GitLab account associated with the token has the necessary access to the target repository and project/group. Support and Contact Information If you encounter any issues, have questions, or require further assistance beyond what is covered in this guide regarding the GitLab integration or ELITEA Agents in general, please do not hesitate to contact our dedicated ELITEA Support Team. We are here to help you resolve any problems quickly and efficiently and ensure you have a smooth and productive experience with ELITEA. How to Reach ELITEA Support: Email: SupportAlita@epam.com Best Practices for Effective Support Requests: To help us understand and resolve your issue as quickly as possible, please ensure you provide the following information in your support email: ELITEA Environment: Clearly specify the ELITEA environment you are using (e.g., \"Nexus,\" \"Alita Lab,\" \"EYE\"). Project Details: Indicate the Project Name and whether you are working in your Private workspace or a Team project. Detailed Issue Description: Provide a clear, concise, and detailed description of the problem you are encountering. Explain what you were trying to do, what you expected to happen, and what actually occurred. Relevant Configuration Information: To help us diagnose the issue, please include relevant configuration details, such as: Agent Instructions (Screenshot or Text): If the issue is with an Agent, provide a screenshot or copy the text of your Agent's \"Instructions\" field. Toolkit Configurations (Screenshots): If the issue involves the GitLab toolkit or other toolkits, include screenshots of the toolkit configuration settings within your Agent. Error Messages (Full Error Text): If you are encountering an error message, please provide the complete error text . In the Chat window, expand the error details and copy the full error message. This detailed error information is crucial for diagnosis. Your Query/Prompt (Exact Text): If the issue is related to Agent execution, provide the exact query or prompt you used to trigger the issue. Before Contacting Support: We encourage you to first explore the resources available within this guide and the broader ELITEA documentation. You may find answers to common questions or solutions to known issues in the documentation. Useful Links To further enhance your understanding and skills in integrating GitLab with ELITEA, here are some helpful resources: GitLab Website : Access the main GitLab platform to create an account or log in. GitLab Login Page : Directly access the login page for GitLab. ELITEA Secrets Management : Learn how to securely store your GitLab Personal Access Token using ELITEA's Secrets management feature for enhanced security. ELITEA Agents Configuration : Find out more about creating and configuring Agents in ELITEA, where you integrate the GitLab toolkit to automate your workflows. ELITEA Support Email : Contact the ELITEA support team for direct assistance with GitLab integration or any other questions and issues you may encounter.","title":"GitLab Integration"},{"location":"how-tos/agents-toolkits/gitlab_toolkit/#elitea-toolkit-guide-gitlab-integration","text":"","title":"ELITEA Toolkit Guide: GitLab Integration"},{"location":"how-tos/agents-toolkits/gitlab_toolkit/#introduction","text":"","title":"Introduction"},{"location":"how-tos/agents-toolkits/gitlab_toolkit/#purpose-of-this-guide","text":"This guide serves as your definitive resource for integrating and effectively utilizing the GitLab toolkit within ELITEA. It provides a detailed, step-by-step walkthrough, from setting up your GitLab Personal Access Token to configuring the toolkit in ELITEA and seamlessly incorporating it into your Agents. By following this guide, you will unlock the full potential of automated code management, streamlined development workflows, and enhanced team collaboration, all directly within the ELITEA platform. This integration empowers you to leverage AI-driven automation to optimize your software development lifecycle, harnessing the combined strengths of ELITEA and GitLab.","title":"Purpose of this Guide"},{"location":"how-tos/agents-toolkits/gitlab_toolkit/#brief-overview-of-gitlab","text":"GitLab is a powerful, web-based DevOps platform that provides a comprehensive suite of tools for the entire software development lifecycle, delivered as a single, integrated application. It is widely adopted by development teams for its robust features and collaborative environment. GitLab excels as a version control repository manager and offers a wide array of functionalities, including: Centralized Git Repository Management: GitLab provides a robust and scalable platform for hosting and managing Git repositories, ensuring efficient version control, code organization, and secure access management for your entire codebase. Enhanced Collaboration Features: GitLab fosters seamless team collaboration with features such as Merge Requests for code review, robust Issue Tracking for project management, Wikis for documentation, and in-line Code Review tools, facilitating a collaborative and transparent development process. Integrated CI/CD Pipelines: GitLab CI/CD is a powerful built-in Continuous Integration and Continuous Delivery system that automates the entire software pipeline, from building and testing code to deploying applications, enabling rapid and reliable software releases. Comprehensive Project Management Tools: GitLab includes a rich set of project planning and management features, such as Issue Boards for agile task management, Milestones for tracking progress against deadlines, and Time Tracking to monitor effort, streamlining software development workflows and improving project visibility. DevSecOps Capabilities: GitLab integrates security scanning and testing throughout the DevOps lifecycle, enabling teams to build secure applications and proactively address vulnerabilities early in the development process, promoting a DevSecOps approach. Integrating GitLab with ELITEA brings these powerful DevOps capabilities directly into your AI-driven workflows. Your ELITEA Agents can then intelligently interact with your GitLab repositories to automate code-related tasks, enhance development processes, improve team collaboration, and leverage AI to optimize your entire software development lifecycle.","title":"Brief Overview of GitLab"},{"location":"how-tos/agents-toolkits/gitlab_toolkit/#toolkits-account-setup-and-configuration-in-gitlab","text":"","title":"Toolkit's Account Setup and Configuration in GitLab"},{"location":"how-tos/agents-toolkits/gitlab_toolkit/#account-setup","text":"If you do not yet have a GitLab account, please follow these steps to create one: Visit GitLab Website: Open your web browser and navigate to the official GitLab website: gitlab.com . Register/Sign Up: Click on the \"Register\" or \"Sign Up\" button, typically located in the top right corner of the homepage. Enter Account Details: Fill in the required information on the signup form. This usually includes your desired username, email address, full name, and a secure password. Note: For professional use cases, it is strongly recommended to use your company email address . Email Verification: Check your email inbox for a verification email sent by GitLab. Click on the confirmation link provided in the email to verify your email address and activate your newly created GitLab account. Log In to GitLab: Once your email is verified, log in to GitLab using your chosen username and password. You are now ready to proceed with GitLab account configuration.","title":"Account Setup"},{"location":"how-tos/agents-toolkits/gitlab_toolkit/#tokenapi-key-generation-creating-a-personal-access-token-in-gitlab","text":"For secure integration with ELITEA, it is highly recommended to utilize a GitLab Personal Access Token . This method is significantly more secure than using your primary GitLab account password directly and provides granular control over the permissions granted to ELITEA. Follow these steps to generate a Personal Access Token in GitLab: Log in to GitLab: Access your GitLab account by navigating to gitlab.com and logging in with your credentials. Access User Settings: Click on your profile avatar, located in the top right corner of the GitLab interface. From the dropdown menu, select \"Edit profile\" . Navigate to Access Tokens: In the left-hand sidebar of your profile settings, click on \"Access Tokens\" . Generate New Token: Click the \"Add new token\" button to begin the process of creating a new Personal Access Token. Configure Token Details: Token name: In the \"Token name\" field, provide a descriptive and easily recognizable label for your token. For example, you could use \"ELITEA Integration Token\" or \"ELITEA Agent Access.\" This label will help you identify the purpose of this token in the future and manage your tokens effectively. Expiration date (Recommended): For enhanced security, it is strongly recommended to set an Expiration date for your token. Choose a reasonable validity period that aligns with your security policies and integration needs. Setting an expiration date limits the token's lifespan and reduces the potential security risk if the token is ever compromised. Select Scopes - Grant Least Privilege (Crucial for Security): Carefully and deliberately select the scopes or permissions you grant to this Personal Access Token. It is of utmost importance to grant only the minimum necessary permissions required for your ELITEA Agent's intended interactions with GitLab. Overly permissive tokens significantly increase the potential security risk. For typical ELITEA integration, consider these minimal scopes: Minimal Scopes for Common Use Cases: api: (Provides full access to the GitLab API, encompassing all groups and projects. If possible, for enhanced security, consider using more granular scopes instead of the broad api scope.) read_api: (Allows read-only access to the GitLab API, suitable for retrieving data without modification.) read_repository: (Grants read-only access to repositories, enabling actions like listing files and reading file content.) write_repository: (Grants write access to repositories, allowing actions like creating branches, creating files, and updating file content. Only include this if your Agent needs to modify the repository.) Additional Scopes for Specific Functionality (Grant only when required): read_user: (Allows read access to user profiles, useful for user-related actions.) read_issue: (Grants read access to issues, enabling issue retrieval and listing.) write_issue: (Grants write access to issues, allowing issue creation and updates. Include only if your Agent needs to manage issues.) read_merge_requests: (Allows read access to merge requests, enabling merge request retrieval and listing.) write_merge_requests: (Grants write access to merge requests, allowing merge request creation and updates. Include only if your Agent needs to manage merge requests.) Important Security Best Practices: Principle of Least Privilege: Strictly adhere to the principle of least privilege. Grant only the absolute minimum set of scopes necessary for your ELITEA Agent to perform its specific, intended tasks. Avoid granting broad or unnecessary permissions. Avoid \"sudo\" or Admin Scopes: Never grant \"sudo\" or other administrative scopes unless absolutely essential and with a clear and thorough understanding of the significant security implications. Administrative scopes provide extensive access and should be avoided for integration purposes whenever possible. Regular Token Review and Rotation: Implement a process for regularly reviewing the Personal Access Tokens you have generated, their associated scopes, and their usage. Rotate tokens periodically (generate new tokens and revoke older ones) as a proactive security measure, especially for integrations that handle sensitive data or critical operations. Secure Storage: Store the generated Personal Access Token securely, preferably using ELITEA's built-in Secrets Management feature, rather than hardcoding it directly in Agent configurations or less secure storage locations. Create Personal Access Token: Click the \"Create personal access token\" button located at the bottom of the page to generate your token. Securely Copy and Store the Token: Immediately copy the generated Personal Access Token that is displayed on the subsequent page. This is the only time you will be able to view and copy the full token value. Store it securely using a robust password manager or, ideally, ELITEA's built-in Secrets feature for enhanced security within the ELITEA platform. You will require this token to configure the GitLab toolkit within ELITEA.","title":"Token/API Key Generation: Creating a Personal Access Token in GitLab"},{"location":"how-tos/agents-toolkits/gitlab_toolkit/#system-integration-with-elitea","text":"","title":"System Integration with ELITEA"},{"location":"how-tos/agents-toolkits/gitlab_toolkit/#agent-creationconfiguration","text":"To integrate GitLab functionalities into your workflows, you will need to configure the GitLab toolkit within an ELITEA Agent. You can either create a new Agent specifically for GitLab interactions or modify an existing Agent to incorporate GitLab tools. Navigate to Agents Menu: In ELITEA, access the Agents menu from the main navigation panel. Create or Edit Agent: Create a New Agent: Click on the \"+ Agent\" button to initiate the creation of a new Agent. Follow the on-screen prompts to define essential Agent attributes such as Agent name, a descriptive Agent description, the desired Agent type, and initial instructions for the Agent. Edit an Existing Agent: Select the Agent you intend to integrate with GitLab from your list of Agents. Click on the Agent's name to open its configuration settings for editing. Access Tools Section: Within the Agent configuration interface, scroll down until you locate the \"Tools\" section. This section is where you will add and configure toolkits, including the GitLab toolkit.","title":"Agent Creation/Configuration"},{"location":"how-tos/agents-toolkits/gitlab_toolkit/#toolkit-configuration","text":"This section provides detailed instructions on how to configure the GitLab toolkit within your ELITEA Agent. Add Toolkit: In the \"Tools\" section of the Agent configuration, click on the \"+\" icon . This action will display a dropdown list of available toolkits that can be integrated with your Agent. Select GitLab Toolkit: From the dropdown list of available toolkits, choose \"GitLab\" . Selecting \"GitLab\" will open the \"New GitLab tool\" configuration panel, where you will specify the settings for your GitLab integration. Configure GitLab Toolkit Settings: Carefully fill in the following configuration fields within the \"New GitLab tool\" section: Name: Enter a descriptive Name for this specific GitLab toolkit instance. Choose a name that is easily recognizable and helps you identify its purpose within your Agent's instructions. For example, you might use names like \"ProjectGitLab\", \"CodeRepositoryAccess\", or \"GitLabIntegration\". Description: Provide a concise Description for the toolkit. This description should clarify the toolkit's purpose or the specific GitLab repository or project it is intended to access. For example, you could describe it as \"Toolkit for accessing and managing the main project code repository on GitLab\" or \"Integration for GitLab project 'MyProject'\". GitLab URL: Enter the base URL of your GitLab instance. For GitLab.com (Cloud) : Use the standard GitLab.com URL: https://gitlab.com . For Self-Hosted GitLab Instances : If you are using a self-hosted GitLab instance (GitLab Community Edition or GitLab Enterprise Edition), enter the specific URL of your GitLab server. For example, https://your-gitlab-instance.com . Ensure you include https:// or http:// at the beginning of the URL. API Token: In the \"API token\" field, paste the Personal Access Token that you generated in GitLab during the \"Software-Specific Setup\" section of this guide. Enhanced Security with Secrets (Recommended): For enhanced security, it is strongly recommended to use ELITEA's Secrets Management feature to store your GitLab Personal Access Token securely. Instead of directly pasting the token into the \"API token\" field, select the \"Secret\" option and choose the pre-configured secret containing your GitLab token from the dropdown list. This prevents hardcoding sensitive credentials in your toolkit configuration. Repository Name: Specify the Repository name that you want to access with this toolkit. Use the format: group_or_username/repository_name . For Personal Repositories : If the repository is under your personal GitLab account, use your username followed by the repository name (e.g., your_username/my-repo ). For Group Repositories : If the repository belongs to a GitLab group, use the group's path followed by the repository name (e.g., my_group/project-repo ). Ensure you use the correct group path, not just the group name. Enable Desired Tools: In the \"Tools\" section within the GitLab toolkit configuration panel, select the checkboxes next to the specific GitLab tools that you want to enable for your Agent. It is crucial to enable only the tools that your Agent will actually need to use to adhere to the principle of least privilege and minimize potential security risks. Available tools include: Create branch - Allows the Agent to create new branches in the repository. Create file - Enables the Agent to create new files within the repository. Create PR change comment - Allows the Agent to add comments to specific changes within a pull request (Merge Request in GitLab). Create pull request - Enables the Agent to create new pull requests (Merge Requests) for code review. Delete file - Allows the Agent to delete files from the repository. Get PR changes - Enables the Agent to retrieve the changes introduced in a specific pull request (Merge Request). List branches in repo - Allows the Agent to list all branches within the repository. List files - Enables the Agent to list all files within the repository. Read file - Allows the Agent to read the content of files within the repository. Set active branch - Enables the Agent to set a specific branch as the active branch for subsequent operations. Update file - Allows the Agent to update the content of existing files within the repository. Append file - Allows the Agent to append content to existing files within the repository. Complete Setup: After configuring all the necessary settings and enabling the desired tools, click the arrow icon (located at the top right of the toolkit configuration section) to finalize the GitLab toolkit setup and return to the main Agent configuration menu. Click Save in the Agent configuration to save all changes and activate the GitLab toolkit integration for your Agent.","title":"Toolkit Configuration"},{"location":"how-tos/agents-toolkits/gitlab_toolkit/#tool-overview-gitlab-toolkit-functionalities","text":"Once the GitLab toolkit is successfully configured and added to your Agent, you can leverage the following tools within your Agent's instructions to enable intelligent interaction with your GitLab repositories: Create branch: Tool Name: create_branch Functionality: Automates the creation of a new branch within the specified GitLab repository. Requires parameters such as the new branch name and the base branch to branch from. Purpose: Streamlines branch management by enabling Agents to automatically create new branches for feature development, bug fixes, or experimental code changes directly from ELITEA workflows, ensuring organized and efficient branching strategies. Create file: Tool Name: create_file Functionality: Automates the creation of a new file within the specified GitLab repository at a given path with specified content. Purpose: Enables automated creation of new code files, documentation files, configuration files, or any other type of file within your repository directly from ELITEA workflows, ensuring consistency and reducing manual file creation tasks. Create PR change comment: Tool Name: create_pr_change_comment Functionality: Automates adding comments to specific changes within a GitLab Merge Request (Pull Request). Requires the Merge Request ID, the path to the changed file, the position within the file, and the comment text. Purpose: Facilitates more granular and contextual code review feedback by allowing Agents to automatically add comments directly to specific lines or sections of code changes within Merge Requests, improving the clarity and efficiency of code reviews. Create pull request: Tool Name: create_pull_request Functionality: Automates the creation of a new Merge Request (Pull Request) in the specified GitLab repository. Requires parameters such as the source branch, target branch, Merge Request title, and description. Purpose: Streamlines the code review and merging process by automating Merge Request creation for code contributions, feature branches, or bug fixes directly from ELITEA. Reduces manual effort for developers and accelerates code integration workflows. Delete file: Tool Name: delete_file Functionality: Automates the deletion of a specified file from the GitLab repository. Requires the file path and branch name as parameters. Purpose: Enables automated file cleanup and codebase management by allowing Agents to delete obsolete files, remove temporary files, or enforce file lifecycle policies within your repository, helping maintain a clean and organized codebase. Get PR changes: Tool Name: get_pr_changes Functionality: Retrieves the details of changes introduced within a specific GitLab Merge Request (Pull Request). Returns information about the files changed, additions, and deletions. Purpose: Provides Agents with the ability to analyze code changes within Merge Requests, facilitating automated code review analysis, change impact assessment, or generating summaries of modifications for reviewers, enhancing code review automation and insights. List branches in repo: Tool Name: list_branches_in_repo Functionality: Retrieves a list of all branches available in the specified GitLab repository. Provides a simple list of branch names. Purpose: Enables Agents to obtain a comprehensive list of branches for branch management automation, generating reports on repository branching structure, providing users with branch selection options within ELITEA workflows, or automating branch-related decision-making processes. List files: Tool Name: list_files Functionality: Retrieves a list of all files within the specified GitLab repository at the root level of the repository's default branch. Provides a flat list of file paths. Purpose: Allows Agents to programmatically browse the top-level contents of a repository, providing a quick overview of the repository's structure, enabling basic file listing for navigation or automated file processing workflows. Read file: Tool Name: read_file Functionality: Reads and retrieves the content of a specific file from the specified GitLab repository. Requires the file path and branch name as parameters. Purpose: Enables Agents to dynamically access and utilize file contents from your GitLab repository, allowing retrieval of code snippets, configuration parameters, documentation content, or any other file data to provide context, data, or instructions within ELITEA workflows and conversations, facilitating dynamic and data-driven automation. Set active branch: Tool Name: set_active_branch Functionality: Sets a specific branch as the currently active branch within the GitLab toolkit's context. Directs subsequent file-related operations to target this active branch. Purpose: Ensures that file operations performed by the Agent are executed within the intended branch context, improving workflow accuracy and preventing unintended modifications to incorrect branches. Provides branch context management for reliable file-based automation. Update file: Tool Name: update_file Functionality: Updates the content of a specific, existing file within the GitLab repository. Replaces the entire file content with the provided new content. Requires the file path, branch name, and new file content as parameters. Purpose: Automates the process of updating code files, documentation, configuration files, or any file content within your repository based on ELITEA workflow outputs, user requests, or external triggers. Ensures configurations are synchronized, documentation is kept current, and codebase modifications are automated and version-controlled. Append file: Tool Name: append_file Functionality: Appends content to the end of an existing file within the GitLab repository. Requires the file path, branch name, and content to append as parameters. Purpose: Enables automated appending of data to log files, documentation files, or other files where incremental content addition is needed. Useful for adding timestamps, generating audit trails, or accumulating data within repository files through automated workflows.","title":"Tool Overview: GitLab Toolkit Functionalities"},{"location":"how-tos/agents-toolkits/gitlab_toolkit/#instructions-and-prompts-for-using-the-toolkit","text":"To effectively instruct your ELITEA Agent to utilize the GitLab toolkit, you must provide clear and precise instructions within the Agent's \"Instructions\" field. These instructions are essential for guiding the Agent on when and how to use the available GitLab tools to achieve your desired automation outcomes.","title":"Instructions and Prompts for Using the Toolkit"},{"location":"how-tos/agents-toolkits/gitlab_toolkit/#instruction-creation-for-openai-agents","text":"When crafting instructions for the GitLab toolkit, especially for OpenAI-based Agents, clarity and precision are paramount. Break down complex tasks into a sequence of simple, actionable steps. Explicitly define all parameters required for each tool and guide the Agent on how to obtain or determine the values for these parameters. OpenAI Agents respond best to instructions that are: Direct and Action-Oriented: Employ strong action verbs and clear commands to initiate actions. For example, \"Use the 'read_file' tool...\", \"Create a branch named...\", \"List all open merge requests...\". Parameter-Centric: Clearly enumerate each parameter required by the tool. For each parameter, specify: Its name (exactly as expected by the tool). The format or type of value expected. How the Agent should obtain the value \u2013 whether from user input, derived from previous steps in the conversation, retrieved from an external source, or a predefined static value. Contextually Rich: Provide sufficient context so the Agent understands the overarching objective and the specific scenario in which each GitLab tool should be applied within the broader workflow. Explain the desired outcome or goal for each tool invocation. Step-by-Step Structure: Organize instructions into a numbered or bulleted list of steps for complex workflows. This helps the Agent follow a logical sequence of actions. When instructing your Agent to use a GitLab toolkit tool, adhere to this structured pattern: 1. **State the Goal:** Begin by clearly stating the objective you want to achieve with this step. For example, \"Goal: To retrieve the content of the 'README.md' file.\" 2. **Specify the Tool:** Clearly indicate the specific GitLab tool to be used for this step. For example, \"Tool: Use the 'read_file' tool.\" 3. **Define Parameters:** Provide a detailed list of all parameters required by the selected tool. For each parameter: - Parameter Name: `<Parameter Name as defined in tool documentation>` - Value or Source: `<Specify the value or how to obtain the value. Examples: \"user input\", \"from previous step\", \"hardcoded value 'main'\", \"value of variable X\">` 4. **Describe Expected Outcome (Optional but Recommended):** Briefly describe the expected result or outcome after the tool is successfully executed. For example, \"Outcome: The Agent will provide the content of the 'README.md' file.\" Example Agent Instructions for GitLab Toolkit Tools (Optimized for OpenAI Agents): Agent Instructions for Updating a File: 1. Goal: Update the content of the 'config.json' file in the 'settings' branch with new configuration values provided by the user. 2. Tool: Use the \"update_file\" tool. 3. Parameters: - Repository Name: \"Specify the repository name in 'group/repo' format. Use the repository configured in the GitLab toolkit.\" - File Path: \"config.json\" - Branch Name: \"settings\" - New Content: \"Ask the user for the new JSON configuration content. Ensure it is valid JSON format. Example: {\\\"setting\\\": \\\"new_value\\\"}\" 4. Outcome: The 'config.json' file in the 'settings' branch will be updated with the user-provided JSON configuration. Confirm the update to the user. Agent Instructions for Creating a New Branch: 1. Goal: To create a new feature branch for user authentication, named 'feature-user-auth', branching from the 'develop' branch. 2. Tool: Use the \"create_branch\" tool. 3. Parameters: - Repository Name: \"Specify the repository name in 'group/repo' format. Use the repository configured in the GitLab toolkit.\" - New Branch Name: \"feature-user-auth\" - Base Branch: \"develop\" 4. Outcome: A new branch named 'feature-user-auth' will be created in the repository, based on the 'develop' branch. Inform the user that the branch has been created. Agent Instructions for Listing Branches in a Repository: 1. Goal: To get a list of all branches in the repository to understand the current project structure. 2. Tool: Use the \"list_branches_in_repo\" tool. 3. Parameters: - Repository Name: \"Specify the repository name in 'group/repo' format. Use the repository configured in the GitLab toolkit.\" 4. Outcome: The Agent will provide a list of all branches in the repository. Agent Instructions for Reading a File from a Repository: 1. Goal: To read the content of the 'README.md' file to understand the project's overview. 2. Tool: Use the \"read_file\" tool. 3. Parameters: - Repository Name: \"Specify the repository name in 'group/repo' format. Use the repository configured in the GitLab toolkit.\" - File Path: \"README.md\" - Branch Name: \"main\" 4. Outcome: The Agent will provide the content of the 'README.md' file from the 'main' branch.","title":"Instruction Creation for OpenAI Agents"},{"location":"how-tos/agents-toolkits/gitlab_toolkit/#conversation-starters","text":"Use these conversation starters to interact with your GitLab-integrated Agent. These are useful for both testing the integration and for common usage scenarios. 1. For Testing and Troubleshooting Connection & Configuration: These starters are specifically designed to verify if the GitLab toolkit is correctly configured, authenticated, and successfully connected to your GitLab repository. They test basic functionalities to ensure the integration is working as expected. \"List branches in the repository.\" - This starter tests basic connectivity to GitLab and verifies read permissions for branch listing. \"Read the file 'README.md' from the main branch.\" - This starter further tests read permissions and the ability to access and retrieve file content from the repository. \"Create a new branch named 'test-connection' based on main.\" - This starter tests write permissions (if enabled in your token scopes) and the branch creation functionality. Important: Remember to manually delete the 'test-connection' branch from your repository after successful testing to maintain repository hygiene. \"List open pull requests.\" - Tests the ability to retrieve pull request data, verifying permissions for PR access. \"Get PR changes for the latest pull request.\" - Tests the ability to retrieve pull request changes, verifying permissions for PR change access. 2. For General Agent Usage Scenarios & Workflow Initiation: These conversation starters demonstrate how to initiate agent execution for common, practical GitLab-related tasks and workflows. They represent typical user requests and showcase the agent's ability to perform useful actions within GitLab. \"I need to update the documentation file 'user_guide.md' with details about the new API endpoints. Can you help me update it in GitLab?\" - This starter could trigger a workflow involving read_file to get the current documentation content, potentially some content modification steps, and then update_file to save the updated documentation back to the repository. \"Create a merge request to merge my 'feature-x' branch into 'develop' for code review and integration.\" - This starter directly initiates the create_pull_request tool to automate the merge request creation process. \"What are the active feature branches currently in the repository that need code review?\" - This starter would utilize the list_branches_in_repo tool (potentially combined with merge request data) to provide a project status overview, specifically focusing on feature branches awaiting review. \"I want to add a new configuration file named 'deployment.config' to the 'config' directory in the main branch with these settings: [provide configuration settings here]. Can you create this file for me?\" - This starter would use the create_file tool to automate the creation of a new configuration file with user-specified content in the designated repository location. \"Append a timestamp and 'Workflow execution completed' message to the 'workflow.log' file in the main branch.\" - This starter directly uses the append_file tool to add a log entry to a file, automating logging within workflows. These conversation starters offer a solid foundation for interacting with your GitLab-integrated ELITEA Agent. They can be further customized and expanded upon to precisely match your specific use cases, workflows, and the unique automation needs of your software development projects.","title":"Conversation Starters"},{"location":"how-tos/agents-toolkits/gitlab_toolkit/#use-cases","text":"The GitLab toolkit unlocks a vast array of automation possibilities for your software development workflows within ELITEA. Here are key use cases, presented in a structured format similar to the Bitbucket guide, illustrating how each tool can be effectively applied to streamline development processes and enhance productivity: Automated Feature Branching: Scenario: When a new feature is planned, the Agent can automatically create a dedicated feature branch in GitLab. Tools Used: create_branch Example Instruction: \"Use the 'create_branch' tool to create a new branch named 'feature-branch-name' based on the 'develop' branch.\" Benefit: Streamlines branch management, ensures organized feature development. Contextual Code Retrieval for Support: Scenario: During a support conversation, an Agent can retrieve relevant code snippets from GitLab to provide context or examples to the user. Tools Used: read_file Example Instruction: \"Use the 'read_file' tool to read the content of the file 'src/components/UserComponent.js' from the 'main' branch and show it to the user.\" Benefit: Enhances support interactions with direct access to codebase information. Automated Documentation Updates: Scenario: When code changes are made, the Agent can automatically update related documentation files in the repository. Tools Used: read_file , update_file Example Instruction: \"Use the 'read_file' tool to get the current content of 'docs/api.md'. Update it with the new API changes and use 'update_file' to save the updated content back to 'docs/api.md' in the 'main' branch.\" Benefit: Keeps documentation synchronized with the latest codebase, reducing manual effort and errors. Merge Request Automation for Code Review: Scenario: After a developer completes a task, the Agent can automatically create a merge request for code review. Tools Used: create_pull_request Example Instruction: \"Use the 'create_pull_request' tool to create a merge request from branch 'feature-branch-name' to 'develop' branch with the title 'Feature Branch Review' and description 'Please review the changes for the new feature.'\" Benefit: Automates the merge request process, facilitating timely code reviews and improving code quality. Listing Branches for Project Overview: Scenario: A project manager wants a quick overview of all active branches in the repository. Tools Used: list_branches_in_repo Example Instruction: \"Use the 'list_branches_in_repo' tool to list all branches in the repository and present them to the user.\" Benefit: Provides easy access to branch information for project management and monitoring. Setting Active Branch for Focused Operations: Scenario: Before performing a series of file operations, ensure the Agent is working on the correct branch. Tools Used: set_active_branch Example Instruction: \"First, use 'set_active_branch' to set the active branch to 'develop'. Then, use 'read_file' to read 'config.json' from the active branch.\" Benefit: Ensures operations are performed in the intended branch context, reducing errors and improving workflow reliability. Automated Logging with File Appending: Scenario: In automated workflows, append execution logs to a designated log file in the repository for audit trails and debugging purposes. Tools Used: append_file Example Instruction: \"Use the 'append_file' tool to append the text '[log_message]' to the file 'workflow.log' in the 'main' branch.\" Benefit: Enables automated logging within workflows, providing a persistent record of workflow executions, facilitating debugging, auditing, and monitoring of automated processes. Contextual Code Review Feedback with Change Comments: Scenario: During code reviews, allow Agents to automatically add comments to specific lines of code within merge requests to provide targeted feedback or suggestions. Tools Used: create_pr_change_comment Example Instruction: \"Use the 'create_pr_change_comment' tool to add a comment to merge request [mr_id] at file '[file_path]', line [line_number], with the text '[comment_text]'.\" Benefit: Facilitates more precise and actionable code review feedback by allowing comments to be directly associated with specific code changes, improving the clarity and effectiveness of the review process. Retrieving Merge Request Changes for Analysis: Scenario: Automate analysis of code changes introduced in a merge request to identify potential security vulnerabilities or code quality issues before merging. Tools Used: get_pr_changes Example Instruction: \"Use the 'get_pr_changes' tool to get the changes for merge request [mr_id]. Analyze the changes for potential security risks and report any findings.\" Benefit: Enables automated code analysis and security checks within merge request workflows, improving code quality and security posture by proactively identifying potential issues before code integration.","title":"Use Cases"},{"location":"how-tos/agents-toolkits/gitlab_toolkit/#troubleshooting-and-support","text":"","title":"Troubleshooting and Support"},{"location":"how-tos/agents-toolkits/gitlab_toolkit/#troubleshooting-common-issues","text":"Connection Errors: Problem: ELITEA Agent fails to connect to GitLab, resulting in errors during toolkit execution. Troubleshooting Steps: Verify GitLab URL: Double-check that the GitLab URL field in the toolkit configuration is correctly set to your GitLab instance URL (e.g., https://gitlab.com or your self-hosted instance URL). Ensure it includes https:// or http:// . Check Personal Access Token: Ensure that the Personal Access Token you provided is correct, has not expired, and is valid for your GitLab account and repository. Carefully re-enter or copy-paste the token to rule out typos. Verify Token Scopes: Review the scopes/permissions granted to your Personal Access Token in GitLab. Ensure it has the necessary scopes (e.g., api , read_repository , write_repository , read_user ) for the GitLab tools your Agent is trying to use. Insufficient scopes are a common cause of connection and permission errors. Network Connectivity: Confirm that both your ELITEA environment and the GitLab instance are connected to the internet and that there are no network connectivity issues, firewalls, or proxies blocking the integration. Test network connectivity to your GitLab URL from your ELITEA environment if possible. Authorization Errors (Permission Denied/Unauthorized): Problem: Agent execution fails with \"Permission Denied\" or \"Unauthorized\" errors when trying to access or modify GitLab resources. Troubleshooting Steps: Re-verify Token Scopes: Double-check the scopes/permissions granted to your GitLab Personal Access Token with extreme care. Ensure it grants sufficient access for the specific GitLab actions your Agent is trying to perform (e.g., write_repository scope for creating files or branches). Repository Access Permissions: Confirm that the GitLab account associated with the Personal Access Token has the required access to the specified repository. Verify that the account is a member of the project or group that owns the repository and has the necessary roles or permissions (e.g., Maintainer or Developer role for write access). Check project/group settings in GitLab to confirm access levels. Token Revocation or Expiration: Ensure that the Personal Access Token has not been accidentally revoked in GitLab settings or that it has not reached its expiration date if you set one. Generate a new token if necessary. Incorrect Repository or Branch Names: Problem: Agent tools fail to operate on the intended repository or branch, often resulting in \"Repository not found\" or \"Branch not found\" errors. Troubleshooting Steps: Double-Check Repository Name: Carefully verify that you have entered the correct GitLab Repository name in the toolkit configuration within ELITEA, using the format group_or_username/repository_name . Pay attention to capitalization and spelling. For group repositories, ensure you are using the group's path , not just the group name. Verify Branch Name: Ensure that you are using the correct branch name (e.g., main , develop , feature-branch ) in your Agent's instructions when specifying branch-related parameters for GitLab tools. Branch names are case-sensitive in Git. Double-check the spelling and capitalization of branch names against your repository in GitLab. Branch Existence: Confirm that the specified branch actually exists in your GitLab repository. It's possible the branch name is correct but the branch was deleted or renamed.","title":"Troubleshooting Common Issues"},{"location":"how-tos/agents-toolkits/gitlab_toolkit/#faqs","text":"Q: Can I use my regular GitLab password for the ELITEA integration? A: No, it is strongly recommended to use a GitLab Personal Access Token instead of your main account password for security reasons. Personal Access Tokens provide a more secure and controlled way to grant access to external applications like ELITEA. Q: What scopes/permissions should I grant to the GitLab Personal Access Token? A: Grant only the minimum necessary scopes required for your ELITEA Agent's intended interactions with GitLab. For typical integration, api scope (or granular read_api , read_repository , write_repository ), and potentially read_user , read_issue , write_issue , read_merge_requests , write_merge_requests scopes are commonly needed depending on the tools you enable. Avoid granting \"sudo\" or unnecessary permissions. Q: What is the correct format for the GitLab Repository name in the toolkit configuration? A: The Repository name should be entered in the format group_or_username/repository_name (e.g., my-group/my-project-repo or your-username/personal-repo ). Ensure you include both the group path or username and the repository name, separated by a forward slash / . For group repositories, use the group's path , not just the group name. Q: Why is my Agent getting \"Permission Denied\" errors even though I think I have configured everything correctly? A: Double-check the scopes/permissions granted to your GitLab Personal Access Token. Ensure that the token has the specific scopes required for the GitLab tools your Agent is trying to use (e.g., write_repository scope for creating files or branches). Also, verify that the GitLab account associated with the token has the necessary access to the target repository and project/group.","title":"FAQs"},{"location":"how-tos/agents-toolkits/gitlab_toolkit/#support-and-contact-information","text":"If you encounter any issues, have questions, or require further assistance beyond what is covered in this guide regarding the GitLab integration or ELITEA Agents in general, please do not hesitate to contact our dedicated ELITEA Support Team. We are here to help you resolve any problems quickly and efficiently and ensure you have a smooth and productive experience with ELITEA. How to Reach ELITEA Support: Email: SupportAlita@epam.com Best Practices for Effective Support Requests: To help us understand and resolve your issue as quickly as possible, please ensure you provide the following information in your support email: ELITEA Environment: Clearly specify the ELITEA environment you are using (e.g., \"Nexus,\" \"Alita Lab,\" \"EYE\"). Project Details: Indicate the Project Name and whether you are working in your Private workspace or a Team project. Detailed Issue Description: Provide a clear, concise, and detailed description of the problem you are encountering. Explain what you were trying to do, what you expected to happen, and what actually occurred. Relevant Configuration Information: To help us diagnose the issue, please include relevant configuration details, such as: Agent Instructions (Screenshot or Text): If the issue is with an Agent, provide a screenshot or copy the text of your Agent's \"Instructions\" field. Toolkit Configurations (Screenshots): If the issue involves the GitLab toolkit or other toolkits, include screenshots of the toolkit configuration settings within your Agent. Error Messages (Full Error Text): If you are encountering an error message, please provide the complete error text . In the Chat window, expand the error details and copy the full error message. This detailed error information is crucial for diagnosis. Your Query/Prompt (Exact Text): If the issue is related to Agent execution, provide the exact query or prompt you used to trigger the issue. Before Contacting Support: We encourage you to first explore the resources available within this guide and the broader ELITEA documentation. You may find answers to common questions or solutions to known issues in the documentation.","title":"Support and Contact Information"},{"location":"how-tos/agents-toolkits/gitlab_toolkit/#useful-links","text":"To further enhance your understanding and skills in integrating GitLab with ELITEA, here are some helpful resources: GitLab Website : Access the main GitLab platform to create an account or log in. GitLab Login Page : Directly access the login page for GitLab. ELITEA Secrets Management : Learn how to securely store your GitLab Personal Access Token using ELITEA's Secrets management feature for enhanced security. ELITEA Agents Configuration : Find out more about creating and configuring Agents in ELITEA, where you integrate the GitLab toolkit to automate your workflows. ELITEA Support Email : Contact the ELITEA support team for direct assistance with GitLab integration or any other questions and issues you may encounter.","title":"Useful Links"},{"location":"how-tos/agents-toolkits/jira_toolkit/","text":"ELITEA Toolkit Guide: Jira Integration Introduction Purpose of this Guide This guide is your definitive resource for integrating and effectively utilizing the Jira toolkit within ELITEA. It provides a detailed, step-by-step walkthrough, from setting up your Jira API token to configuring the toolkit in ELITEA and seamlessly incorporating it into your Agents. By following this guide, you will unlock the power of automated issue tracking, streamlined project management workflows, and enhanced team collaboration, all directly within the ELITEA platform. This integration empowers you to leverage AI-driven automation to optimize your Jira-driven workflows, enhance team productivity, and improve project visibility within your organization. Brief Overview of Jira Jira, by Atlassian, is a leading project management and issue tracking platform widely used by software development teams and various business teams for planning, tracking, and managing work. It serves as a central hub for teams to collaborate on projects, manage tasks, track bugs, and streamline workflows. Jira offers a wide array of functionalities, including: Robust Issue Tracking: Jira provides a powerful and customizable issue tracking system that allows teams to capture, organize, and track all types of work items, including bugs, tasks, user stories, and feature requests, ensuring comprehensive issue management throughout the project lifecycle. Agile Project Management: Jira is designed to support Agile methodologies like Scrum and Kanban, offering features such as Scrum boards, Kanban boards, sprint planning tools, and backlog management, enabling teams to effectively plan, execute, and track agile projects. Customizable Workflows: Jira allows for the creation of highly customizable workflows to match specific project needs and team processes. Workflows can be tailored to reflect different stages of work items, approval processes, and automated transitions, streamlining project workflows and improving efficiency. Comprehensive Reporting and Analytics: Jira provides a wide range of reporting and analytics features, offering real-time insights into project progress, team performance, issue resolution times, and other key metrics, enabling data-driven decision-making and continuous improvement. Seamless Integration Ecosystem: Jira integrates seamlessly with a vast ecosystem of Atlassian tools and third-party applications, including Confluence, Bitbucket, and various development and collaboration tools, creating a unified and connected DevOps environment. Integrating Jira with ELITEA brings these powerful project management and issue tracking capabilities directly into your AI-driven workflows. Your ELITEA Agents can then intelligently interact with your Jira projects and issues to automate task management, enhance project tracking, improve team collaboration, and leverage AI to optimize your entire project management lifecycle within Jira. Toolkit's Account Setup and Configuration in Jira Account Setup If you do not yet have a Jira account, please follow these steps to create one: Visit Atlassian Website: Open your web browser and navigate to the official Atlassian website: https://www.atlassian.com/software/jira . Sign Up for Jira: Click on the \"Try Jira free\" or \"Get it free\" button to start the sign-up process for Jira. Create an Atlassian Account: Follow the prompts to create an Atlassian account. You can sign up using your email address, Google account, or Apple account. For professional use, it's recommended to use your company email address. Choose a Workspace/Site Name: During the signup process, you will be asked to choose a workspace or site name for your Jira instance. Enter a suitable name for your workspace. Set Up Your Project: Follow the remaining onboarding steps to set up your first Jira project. You will be prompted to choose a project template (e.g., Scrum, Kanban) and provide a project name. Explore Jira Features: Once your Jira board is ready, explore the onboarding tips and familiarize yourself with Jira features, projects, boards, and navigation. Token/API Key Generation: Creating an API Token in Jira For secure integration with ELITEA, it is essential to use a Jira API token for authentication. This method is more secure than using your primary Jira account password directly and allows you to control access permissions. Follow these steps to generate an API token in Jira: Log in to Jira: Access your Jira workspace by navigating to your Jira URL (e.g., your-workspace.atlassian.net ) and logging in with your credentials. Access Account Settings: Click on your profile avatar in the top right corner of the Jira interface. From the dropdown menu, select \"Manage account\" . Navigate to Security Settings: In the Atlassian account settings page, navigate to the \"Security\" section in the left-hand sidebar. Access API Tokens: Within the \"Security\" settings, locate the \"API tokens\" section and click on \"Create and manage API tokens\" . Create API Token: On the \"API tokens\" page, click the \"Create API token\" button. Name Your Token: In the \"Create API token\" dialog, enter a descriptive Label for your token, such as \"ELITEA Integration Token\" or \"ELITEA Agent Access.\" This label will help you identify the purpose of this token later. Create Token: Click the \"Create\" button to generate the API token. Securely Copy and Store Your API Token: Immediately copy the generated API token that is displayed in the pop-up window. This is the only time you will see the full token value. Store it securely in a password manager or, preferably, ELITEA's built-in Secrets feature for enhanced security within ELITEA. You will need this API token to configure the Jira toolkit in ELITEA. System Integration with ELITEA Agent Creation/Configuration To integrate Jira functionalities into your workflows, you will need to configure the Jira toolkit within an ELITEA Agent. You can either create a new Agent specifically for Jira interactions or modify an existing Agent to incorporate Jira tools. Navigate to Agents Menu: In ELITEA, go to the Agents menu from the main navigation panel. Create or Edit Agent: Create a New Agent: Click on the \"+ Agent\" button to initiate the creation of a new Agent. Follow the on-screen prompts to define essential Agent attributes such as Agent name, a descriptive Agent description, the desired Agent type, and initial instructions for the Agent. Edit an Existing Agent: Select the Agent you intend to integrate with Jira from your list of Agents. Click on the Agent's name to open its configuration settings for editing. Access Tools Section: Within the Agent configuration interface, scroll down until you locate the \"Tools\" section. This section is where you will add and configure toolkits, including the Jira toolkit. Toolkit Configuration This section provides detailed instructions on how to configure the Jira toolkit within your ELITEA Agent. Add Toolkit: In the \"Tools\" section of the Agent configuration, click on the \"+\" icon . This action will display a dropdown list of available toolkits that can be integrated with your Agent. Select Jira Toolkit: From the dropdown list of available toolkits, choose \"Jira\" . Selecting \"Jira\" will open the \"New Jira tool\" configuration panel, where you will specify the settings for your Jira integration. Configure Jira Toolkit Settings: Carefully fill in the following configuration fields within the \"New Jira tool\" section: Name: Enter a descriptive Name for your Jira toolkit instance. Choose a name that is easily recognizable and helps you identify its purpose within your Agent's instructions (e.g., \"ProjectJira\", \"IssueTrackerAccess\", \"JiraIntegration\"). Description: Provide a concise Description for the toolkit. This description should clarify the toolkit's purpose or the specific Jira project it is intended to access (e.g., \"Toolkit for accessing and managing issues in Jira\", \"Integration for Jira Project 'Project Alpha'\"). URL: Enter the base URL of your Jira instance. Ensure you use the correct format , including https:// or http:// and the full workspace URL (e.g., https://your-workspace.atlassian.net/jira or https://your-company.atlassian.net ). For Epam Jira, use https://jira.epam.com/jira/ . Username: Enter the Username associated with your Jira account for which you generated the API token. This is typically your email address used for Jira login. Authentication Options - API Key: Select the \"API Key\" authentication option. Password/Secret: Choose \"Password\" and paste the API token you generated in Jira (during the \"Software-Specific Setup\" section of this guide) into the \"Password\" field. Enhanced Security with Secrets (Recommended): For enhanced security, it is strongly recommended to use ELITEA's Secrets Management feature to store your Jira API token securely. Instead of directly pasting the token into the \"Password\" field, select the \"Secret\" option and choose the pre-configured secret containing your Jira API token from the dropdown list. This prevents hardcoding sensitive credentials in your toolkit configuration. Hosting Option: Select the appropriate \"Hosting option\" for your Jira instance: Cloud: Select \"Cloud\" if you are using Jira Cloud (e.g., accessed via atlassian.net ). Server: Select \"Server\" if you are using a self-hosted Jira Server or Data Center instance. Note: When connecting to an Epam Jira instance, ensure you select \"Server\" as the Hosting option. Advanced Settings: Adjust the advanced settings to fine-tune the toolkit's operation: Additional Fields : Enumeration of custom fields which can be used (e.g. customfield_100450 ). Enter a comma-separated list of custom field IDs that you want to be accessible within the toolkit. This allows you to interact with custom fields specific to your Jira projects. Verify SSL : Check this box to enable SSL verification for secure connections to your Jira instance. It is generally recommended to keep SSL verification enabled for enhanced security. Enable Desired Tools: In the \"Tools\" section within the Jira toolkit configuration panel, select the checkboxes next to the specific Jira tools that you want to enable for your Agent. It is crucial to enable only the tools that your Agent will actually need to use to adhere to the principle of least privilege and minimize potential security risks. Available tools include: Search using JQL - Allows searching for Jira issues using Jira Query Language (JQL). Create issue - Enables the Agent to create new Jira issues. Update issue - Allows the Agent to update existing Jira issues. List comments - Enables the Agent to list comments for a specific Jira issue. Add comments - Allows the Agent to add new comments to a Jira issue. Get attachments content - Enables the Agent to retrieve the content of attachments from a Jira issue. List projects - Allows the Agent to list all projects in the Jira instance. Set issue status - Allows the Agent to change the status of a Jira issue. Get specific field info - Enables the Agent to retrieve information from a specific field of a Jira issue. Get remote links - Allows the Agent to retrieve remote links associated with a Jira issue. Link issues - Enables the Agent to create links between Jira issues. Modify labels - Allows the Agent to add or remove labels from a Jira issue. Generic request - Allows to send custom HTTP requests to Jira API. Complete Setup: After configuring all the necessary settings and enabling the desired tools, click the arrow icon (typically located at the top right of the toolkit configuration section) to finalize the Jira toolkit setup and return to the main Agent configuration menu. Click Save in the Agent configuration to save all changes and activate the Jira toolkit integration for your Agent. Tool Overview: Jira Toolkit Functionalities Once the Jira toolkit is successfully configured and added to your Agent, you can leverage the following tools within your Agent's instructions to enable intelligent interaction with your Jira projects and issues: Search using JQL: Tool Name: search_using_jql Functionality: Allows Agents to search for Jira issues using Jira Query Language (JQL) queries. Returns a list of Jira issues matching the JQL query. Purpose: Enables advanced and flexible issue searching based on complex criteria defined using JQL, allowing Agents to retrieve specific sets of issues for reporting, analysis, or workflow automation based on Jira data. Create issue: Tool Name: create_issue Functionality: Automates the creation of new Jira issues within a specified Jira project. Requires parameters such as Summary, Description, Issue Type, and Priority. Purpose: Streamlines issue reporting and task management by enabling Agents to automatically create new Jira issues directly from ELITEA workflows, based on user input, workflow triggers, or automated analysis, ensuring timely and consistent issue logging. Update issue: Tool Name: update_issue Functionality: Allows Agents to modify and update fields of existing Jira issues. Requires the Issue Key and a JSON object containing the fields to update and their new values. Purpose: Enables automated issue lifecycle management by allowing Agents to update issue statuses, assignees, priorities, custom fields, or any other issue attributes based on workflow progress, user actions, or external events, ensuring Jira issues are always up-to-date and accurately reflect project status. List comments: Tool Name: list_comments Functionality: Retrieves a list of comments associated with a specific Jira issue, identified by its Issue Key. Returns a list of comment texts and author information. Purpose: Enables Agents to access and summarize discussions and feedback related to specific Jira issues, facilitating efficient review of issue communication history, providing context for issue analysis, and enabling automated reporting on issue discussions. Add comments: Tool Name: add_comments Functionality: Adds a new comment to a specific Jira issue. Requires the Issue Key and the comment text as parameters. Purpose: Automates communication and updates within Jira issue tracking workflows by allowing Agents to add comments to Jira issues directly from ELITEA. Streamlines providing status updates, asking for clarifications, notifying stakeholders, or logging automated actions related to specific issues. Get attachments content: Tool Name: get_attachments_content Functionality: Retrieves the content of attachments from a specific Jira issue. Requires the Issue Key as a parameter. Purpose: Enables Agents to access and process attachments associated with Jira issues, allowing for automated analysis of attached files, extraction of data from attachments, or integration of attachment content into ELITEA workflows, enhancing data accessibility and processing for issue-related information. List projects: Tool Name: list_projects Functionality: Retrieves a list of all projects available in the connected Jira instance. Returns a list of project names and keys. Purpose: Enables Agents to dynamically discover and list available Jira projects, allowing for dynamic project selection in workflows, automated reporting across projects, or providing users with a list of projects to choose from within ELITEA. Set issue status: Tool Name: set_issue_status Functionality: Updates the status of a specific Jira issue. Requires the Issue Key and the desired Status name (e.g., \"In Progress\", \"Done\") as parameters. Purpose: Automates issue lifecycle management by allowing Agents to automatically transition Jira issues to different statuses based on workflow progress, events, or user actions, ensuring issue statuses are always aligned with the current state of work and streamlining issue workflow management. Get specific field info: Tool Name: get_specific_field_info Functionality: Retrieves information from a specific field of a Jira issue. Requires the Issue Key and the Field Name (or Field ID) as parameters. Purpose: Enables Agents to extract specific data points from Jira issues, allowing for targeted retrieval of information from particular fields, facilitating data extraction for reporting, analysis, or integration with other systems, and providing access to granular issue data. Get remote links: Tool Name: get_remote_links Functionality: Retrieves remote links associated with a specific Jira issue. Returns a list of URLs and link titles. Purpose: Enables Agents to access and utilize external web links associated with Jira issues, allowing for retrieval of related documentation, external resources, or linked information, providing a comprehensive view of issue context and related resources. Link issues: Tool Name: link_issues Functionality: Creates a link between two Jira issues. Requires the keys of the inward and outward issues and the Link Type (e.g., \"Relates to\", \"Blocks\"). Purpose: Automates the process of linking related Jira issues, establishing relationships between tasks, bugs, user stories, or other work items, improving issue traceability, dependency management, and providing a clear view of issue relationships within ELITEA workflows. Modify labels: Tool Name: modify_labels Functionality: Adds or removes labels from a specific Jira issue. Requires the Issue Key and lists of labels to add and remove. Purpose: Enables automated categorization and tagging of Jira issues through label management, improving issue organization, searchability, and filtering based on labels, streamlining issue classification and enhancing issue discoverability. Generic request: Tool Name: generic_request Functionality: Allows sending custom HTTP requests to the Jira API endpoint. Provides advanced users with the flexibility to interact with the Jira API directly for actions not covered by other pre-built tools. Purpose: Enables advanced and customized interactions with the Jira API, allowing experienced users to extend the toolkit's capabilities, access specific Jira API endpoints, and perform actions beyond the scope of the standard Jira tools, providing maximum flexibility for complex or specialized Jira integrations. Instructions and Prompts for Using the Jira Toolkit To effectively utilize the Jira toolkit within your ELITEA Agents, you need to provide clear and precise instructions within the Agent's \"Instructions\" field, telling the Agent how and when to use these tools. General Instruction Structure: When instructing your Agent to use a Jira tool, you will typically follow this pattern: Use the \"[tool_name]\" tool to [describe the action you want to perform] in Jira. Provide the following parameters: - Parameter 1: <value or description of value> - Parameter 2: <value or description of value> - ... Example Agent Instructions for Jira Toolkit Tools: Agent Instructions for Searching Issues using JQL: Use the \"search_using_jql\" tool to search for Jira issues using a JQL query. Provide the following parameters: - JQL Query: \"project = 'Project Alpha' AND status = 'In Progress' AND assignee = currentUser()\" Agent Instructions for Creating a New Issue: Use the \"create_issue\" tool to create a new Bug issue in Jira. Provide the following parameters: - Summary: \"User login failing after recent update\" - Description: \"Users are reporting login failures on both web and mobile platforms after the latest update. Password reset does not resolve the issue.\" - Issue Type: \"Bug\" - Priority: \"High\" Agent Instructions for Updating an Existing Issue: Use the \"update_issue\" tool to update the description of an existing Jira issue. Provide the following parameters: - Issue Key: \"PA-123\" - Fields to Update: { \"description\": \"Updated description: After further investigation, the login issue seems to be related to a database connection problem.\" } Important Considerations for Agent Instructions: Tool Name Accuracy: Ensure you use the correct Tool Name (e.g., \"search_using_jql\" , \"create_issue\" , \"update_issue\" ) as listed in the \"Tool Overview\" section. Typos or incorrect tool names will prevent the Agent from using the toolkit correctly. Parameter Clarity: Clearly specify the parameters required for each tool and provide instructions on where the Agent should obtain the values for these parameters (e.g., from user input, from previous steps in the workflow, or hardcoded values). Context and Examples: Provide sufficient context and examples within your Agent's \"Instructions\" to guide the LLM in understanding when and how to use the Jira toolkit tools effectively within your desired workflow. Jira Field Names and Values: Ensure that you use the correct Jira Field Names (e.g., \"Summary\", \"Description\", \"Status\", custom field IDs) and valid values for those fields as defined in your Jira project configuration. Incorrect field names or invalid values will cause errors during tool execution. Best Practices and Use Cases for Jira Integration Best Practices for Efficient Integration Test Integration Thoroughly: After setting up the Jira toolkit and incorporating it into your Agents, thoroughly test each tool you intend to use to ensure seamless connectivity, correct authentication, and accurate execution of Jira actions. Monitor Agent Performance and Usage: Regularly monitor the performance of Agents utilizing Jira toolkits. Track metrics such as task completion success rate, execution time, and error rates to identify any potential issues or areas for optimization in Agent instructions or toolkit configurations. Follow Security Best Practices: Use API Tokens: Always use Jira API tokens instead of your main account password for integrations. Grant Least Privilege: Grant only the minimum necessary scopes/permissions to the API token to limit potential security risks. While Jira API tokens have limited scope control, ensure you are generating tokens specifically for ELITEA integration and not reusing tokens with broader access. Securely Store Credentials: Utilize ELITEA's Secrets Management feature to securely store and manage your Jira API tokens instead of hardcoding them directly in Agent configurations. Provide Clear Instructions and Prompts: Craft clear and unambiguous instructions within your ELITEA Agents to guide them in using the Jira toolkit effectively. Use the prompt examples provided in this guide as a starting point and adapt them to your specific use cases. Start with Simple Use Cases: Begin by implementing Jira integration for simpler automation tasks, such as retrieving issue lists or updating issue statuses, and gradually progress to more complex workflows as you gain experience and confidence with the toolkit. Leverage Advanced Settings for Custom Fields: Utilize the \"Advanced Settings\" in the toolkit configuration, specifically the \"Additional Fields\" option, to ensure your Agent can interact with and manage custom fields specific to your Jira projects, extending the toolkit's functionality to meet your unique Jira configurations. Use Cases for Jira Toolkit Integration The Jira toolkit opens up a wide range of automation possibilities for project management, issue tracking, and workflow automation within ELITEA. Here are some compelling use cases: Automated Issue Reporting and Bug Logging: Scenario: When automated tests within ELITEA workflows detect a bug or failure, automatically create a new Bug issue in Jira, pre-populated with detailed error information, logs, and environment details, streamlining bug reporting and ensuring timely issue logging. Tools Used: create_issue Example Instruction: \"Use the 'create_issue' tool to create a new 'Bug' issue in Jira with the summary 'Automated Test Failure Detected' and description containing the full error logs and test execution details. Set priority to 'High'.\" Benefit: Streamlines bug reporting and issue tracking by automating issue creation directly from ELITEA workflows, reducing manual effort for developers and testers, ensuring consistent and structured bug reports, and accelerating the bug triage process. Dynamic Task Prioritization Based on Real-time Data: Scenario: ELITEA Agents can dynamically reprioritize Jira issues based on real-time data from external monitoring systems, customer feedback, or changing business priorities, ensuring teams are always working on the most critical tasks. Tools Used: search_using_jql , update_issue , generic_request (for external data retrieval) Example Instruction: \"Use the 'generic_request' tool to retrieve the latest customer support ticket volume from the support dashboard API. Use 'search_using_jql' to find all open 'Bug' issues in Jira. Analyze the support ticket volume and reprioritize 'Bug' issues related to areas with high ticket volume to 'Highest' priority using 'update_issue' tool.\" Benefit: Enables dynamic and data-driven task prioritization in Jira, ensuring development efforts are aligned with real-time business needs and customer feedback, improving responsiveness and resource allocation. Automated Issue Status Updates and Workflow Management: Scenario: As tasks progress through ELITEA workflows, automatically update the status of linked Jira issues to reflect the current progress, keeping Jira project boards and dashboards up-to-date in real-time. Tools Used: update_issue , set_issue_status Example Instruction: \"Use the 'update_issue' tool to update the 'Status' field of Jira issue with key [issue_key] to 'In Progress' when the ELITEA workflow reaches the 'Development' stage. When the workflow completes successfully, use 'set_issue_status' to set the issue status to 'Done'.\" Benefit: Automates issue lifecycle management, ensuring Jira issue statuses are always synchronized with the actual project progress. Reduces manual status updates, improves issue tracking accuracy, and provides real-time visibility into project workflow status. Intelligent Issue Commenting and Notifications: Scenario: ELITEA Agents can automatically add comments to Jira issues to provide status updates to stakeholders, notify assignees of new tasks, or request clarification on issue details, streamlining communication and collaboration within Jira. Tools Used: add_comments , get_specific_field_info Example Instruction: \"Use the 'add_comments' tool to add a comment to Jira issue with key [issue_key] with the text 'Automated status update: Workflow execution completed successfully. Please proceed with testing.' Also, use 'get_specific_field_info' to retrieve the 'Assignee' field value for the issue and send a notification to the assignee via ELITEA chat about the status update.\" Benefit: Streamlines communication and collaboration within Jira issue tracking by automating updates and notifications directly within Jira issues. Keeps all stakeholders informed of progress, reduces manual communication overhead, and ensures timely notifications for task assignments and status changes. Automated Issue Linking for Dependency Management: Scenario: When creating new Jira issues for sub-tasks or related features, automatically link them to parent issues or related user stories to establish clear dependencies and relationships between work items. Tools Used: create_issue , link_issues Example Instruction: \"Use the 'create_issue' tool to create a new 'Sub-task' issue for user story [user_story_key]. After creating the sub-task, use the 'link_issues' tool to link the new sub-task issue to the parent user story issue using the 'Sub-task' link type.\" Benefit: Enhances issue traceability and project management by automating the creation of links between related Jira issues, providing a clear view of dependencies and relationships between tasks, user stories, and features, improving project planning and dependency tracking. Troubleshooting and Support Troubleshooting Common Issues Connection Errors: Problem: ELITEA Agent fails to connect to Jira, resulting in errors during toolkit execution. Possible Solutions: Verify Jira URL: Double-check that you have entered the correct Jira workspace URL in the toolkit configuration, including https:// or http:// and the full workspace URL (e.g., https://your-workspace.atlassian.net/jira or https://your-company.atlassian.net ). For Epam Jira, use https://jira.epam.com/jira/ . Check Username and API Token: Ensure that the Username and API Token you provided are correct and valid for your Jira account and workspace. Carefully re-enter or copy-paste these credentials to rule out typos. Verify Hosting Option: Double-check that you have selected the correct Hosting option (Cloud or Server) in the Jira toolkit configuration, especially when connecting to Epam's Jira (use \"Server\"). Network Connectivity: Confirm that both your ELITEA environment and your Jira instance are connected to the internet and that there are no network connectivity issues blocking the integration. Authorization Errors (Permission Denied/Unauthorized): Problem: Agent execution fails with \"Permission Denied\" or \"Unauthorized\" errors when trying to access or modify Jira resources. Possible Solutions: Verify API Token Validity: Ensure that the Jira API token you are using is still valid and has not been revoked in your Atlassian account settings. Generate a new token if necessary. Check Jira Permissions: Confirm that the Jira account associated with the Username and API Token has the necessary permissions within Jira to access and modify the specific projects and issues your Agent is trying to interact with. Verify project and issue permissions within Jira project settings. Hosting Option Mismatch: Double-check that you have selected the correct \"Hosting option\" (Cloud or Server) in the Jira toolkit configuration. Using the wrong hosting option can lead to authentication and connection errors. Tool-Specific Parameter Errors: Problem: Agent execution fails for specific Jira tools due to incorrect parameter values or formats. Troubleshooting Steps: Verify Project Keys: Ensure that you are using the correct Jira Project Keys in your Agent's instructions and toolkit configuration. Project Keys are case-sensitive and must exactly match the project keys in your Jira instance. Use the \"List projects\" tool to verify project keys if needed. Verify Issue Keys: Double-check that you are using the correct Jira Issue Keys when referencing specific issues in your Agent's instructions. Issue Keys are case-sensitive and must match the issue keys in Jira exactly (e.g., \"PA-123\", \"PROJECT-456\"). Parameter Format: Verify that you are providing parameters in the correct format expected by each Jira tool (e.g., string values for names, numerical values for IDs, JSON format for issue updates). Refer to the \"Instructions and Prompts for Using the Toolkit\" section for parameter details and examples. Custom Fields: If you are using custom fields in your Agent instructions, ensure that you have added the correct Additional Fields IDs in the toolkit's \"Advanced Settings\" and that you are using the correct custom field IDs and values in your Agent instructions. Use the \"Get specific field info\" tool to verify custom field IDs and values if needed. FAQs Q: Can I use my regular Jira password for the ELITEA integration? A: No, it is strongly recommended to use a Jira API token instead of your main account password for security reasons. API tokens provide a more secure and controlled way to grant access to external applications like ELITEA. Q: What permissions should I grant to the Jira API Token? A: Jira API tokens have a fixed scope (access to Jira REST API). You don't need to select specific scopes when generating the token. However, ensure that the Jira account associated with the API token has the necessary permissions within Jira to access and modify the projects and issues your Agent will be interacting with. Q: What is the correct format for the Jira URL in the toolkit configuration? A: The Jira URL should be entered in the full format, including https:// or http:// and the complete workspace URL (e.g., https://your-workspace.atlassian.net/jira or https://your-company.atlassian.net ). Ensure there are no typos or missing parts in the URL. For Epam Jira, use https://jira.epam.com/jira/ . Q: Why is my Agent getting \"Permission Denied\" errors even though I think I have configured everything correctly? A: Double-check the following: API Token Validity: Ensure that the API token is valid and has not been revoked. Jira Account Permissions: Verify that the Jira account associated with the API token has the necessary permissions to access the specific projects and issues your Agent is trying to interact with. Hosting Option: Double-check that you have selected the correct \"Hosting option\" (Cloud or Server) in the Jira toolkit configuration, especially for self-hosted or Epam Jira instances. Verify SSL Setting: If you are connecting to a Jira Server instance, try toggling the \"Verify SSL\" setting in the \"Advanced Settings\" of the toolkit configuration, as SSL verification issues can sometimes cause connection problems. Support and Contact Information If you encounter any issues, have questions, or require further assistance beyond what is covered in this guide regarding the Jira integration or ELITEA Agents in general, please do not hesitate to contact our dedicated ELITEA Support Team. We are here to help you resolve any problems quickly and efficiently and ensure you have a smooth and productive experience with ELITEA. How to Reach ELITEA Support: Email: SupportAlita@epam.com Best Practices for Effective Support Requests: To help us understand and resolve your issue as quickly as possible, please ensure you provide the following information in your support email: ELITEA Environment: Clearly specify the ELITEA environment you are using (e.g., \"Nexus,\" \"Alita Lab,\" \"EYE\"). Project Details: Indicate the Project Name and whether you are working in your Private workspace or a Team project. Detailed Issue Description: Provide a clear, concise, and detailed description of the problem you are encountering. Explain what you were trying to do, what you expected to happen, and what actually occurred. Relevant Configuration Information: To help us diagnose the issue, please include relevant configuration details, such as: Agent Instructions (Screenshot or Text): If the issue is with an Agent, provide a screenshot or copy the text of your Agent's \"Instructions\" field. Toolkit Configurations (Screenshots): If the issue involves the Jira toolkit or other toolkits, include screenshots of the toolkit configuration settings within your Agent. Error Messages (Full Error Text): If you are encountering an error message, please provide the complete error text . In the Chat window, expand the error details and copy the full error message. This detailed error information is crucial for diagnosis. Your Query/Prompt (Exact Text): If the issue is related to Agent execution, provide the exact query or prompt you used to trigger the issue. Before Contacting Support: We encourage you to first explore the resources available within this guide and the broader ELITEA documentation. You may find answers to common questions or solutions to known issues in the documentation. Useful Links To further enhance your understanding and skills in integrating Jira with ELITEA, here are some helpful resources: Atlassian Jira Website : Access the main Jira product website for product information and documentation. Atlassian Account Settings : Access your Atlassian account settings to manage your profile and API tokens. Jira Query Language (JQL) Documentation : Learn more about Jira Query Language (JQL) and how to construct advanced search queries in Jira. ELITEA Secrets Management : Learn how to securely store your Jira API Token using ELITEA's Secrets management feature for enhanced security. ELITEA Agents Configuration : Find out more about creating and configuring Agents in ELITEA, where you integrate the Jira toolkit to automate your workflows. ELITEA Support Email : Contact the ELITEA support team for direct assistance with Jira integration or any other questions and issues you may encounter.","title":"Jira Integration"},{"location":"how-tos/agents-toolkits/jira_toolkit/#elitea-toolkit-guide-jira-integration","text":"","title":"ELITEA Toolkit Guide: Jira Integration"},{"location":"how-tos/agents-toolkits/jira_toolkit/#introduction","text":"","title":"Introduction"},{"location":"how-tos/agents-toolkits/jira_toolkit/#purpose-of-this-guide","text":"This guide is your definitive resource for integrating and effectively utilizing the Jira toolkit within ELITEA. It provides a detailed, step-by-step walkthrough, from setting up your Jira API token to configuring the toolkit in ELITEA and seamlessly incorporating it into your Agents. By following this guide, you will unlock the power of automated issue tracking, streamlined project management workflows, and enhanced team collaboration, all directly within the ELITEA platform. This integration empowers you to leverage AI-driven automation to optimize your Jira-driven workflows, enhance team productivity, and improve project visibility within your organization.","title":"Purpose of this Guide"},{"location":"how-tos/agents-toolkits/jira_toolkit/#brief-overview-of-jira","text":"Jira, by Atlassian, is a leading project management and issue tracking platform widely used by software development teams and various business teams for planning, tracking, and managing work. It serves as a central hub for teams to collaborate on projects, manage tasks, track bugs, and streamline workflows. Jira offers a wide array of functionalities, including: Robust Issue Tracking: Jira provides a powerful and customizable issue tracking system that allows teams to capture, organize, and track all types of work items, including bugs, tasks, user stories, and feature requests, ensuring comprehensive issue management throughout the project lifecycle. Agile Project Management: Jira is designed to support Agile methodologies like Scrum and Kanban, offering features such as Scrum boards, Kanban boards, sprint planning tools, and backlog management, enabling teams to effectively plan, execute, and track agile projects. Customizable Workflows: Jira allows for the creation of highly customizable workflows to match specific project needs and team processes. Workflows can be tailored to reflect different stages of work items, approval processes, and automated transitions, streamlining project workflows and improving efficiency. Comprehensive Reporting and Analytics: Jira provides a wide range of reporting and analytics features, offering real-time insights into project progress, team performance, issue resolution times, and other key metrics, enabling data-driven decision-making and continuous improvement. Seamless Integration Ecosystem: Jira integrates seamlessly with a vast ecosystem of Atlassian tools and third-party applications, including Confluence, Bitbucket, and various development and collaboration tools, creating a unified and connected DevOps environment. Integrating Jira with ELITEA brings these powerful project management and issue tracking capabilities directly into your AI-driven workflows. Your ELITEA Agents can then intelligently interact with your Jira projects and issues to automate task management, enhance project tracking, improve team collaboration, and leverage AI to optimize your entire project management lifecycle within Jira.","title":"Brief Overview of Jira"},{"location":"how-tos/agents-toolkits/jira_toolkit/#toolkits-account-setup-and-configuration-in-jira","text":"","title":"Toolkit's Account Setup and Configuration in Jira"},{"location":"how-tos/agents-toolkits/jira_toolkit/#account-setup","text":"If you do not yet have a Jira account, please follow these steps to create one: Visit Atlassian Website: Open your web browser and navigate to the official Atlassian website: https://www.atlassian.com/software/jira . Sign Up for Jira: Click on the \"Try Jira free\" or \"Get it free\" button to start the sign-up process for Jira. Create an Atlassian Account: Follow the prompts to create an Atlassian account. You can sign up using your email address, Google account, or Apple account. For professional use, it's recommended to use your company email address. Choose a Workspace/Site Name: During the signup process, you will be asked to choose a workspace or site name for your Jira instance. Enter a suitable name for your workspace. Set Up Your Project: Follow the remaining onboarding steps to set up your first Jira project. You will be prompted to choose a project template (e.g., Scrum, Kanban) and provide a project name. Explore Jira Features: Once your Jira board is ready, explore the onboarding tips and familiarize yourself with Jira features, projects, boards, and navigation.","title":"Account Setup"},{"location":"how-tos/agents-toolkits/jira_toolkit/#tokenapi-key-generation-creating-an-api-token-in-jira","text":"For secure integration with ELITEA, it is essential to use a Jira API token for authentication. This method is more secure than using your primary Jira account password directly and allows you to control access permissions. Follow these steps to generate an API token in Jira: Log in to Jira: Access your Jira workspace by navigating to your Jira URL (e.g., your-workspace.atlassian.net ) and logging in with your credentials. Access Account Settings: Click on your profile avatar in the top right corner of the Jira interface. From the dropdown menu, select \"Manage account\" . Navigate to Security Settings: In the Atlassian account settings page, navigate to the \"Security\" section in the left-hand sidebar. Access API Tokens: Within the \"Security\" settings, locate the \"API tokens\" section and click on \"Create and manage API tokens\" . Create API Token: On the \"API tokens\" page, click the \"Create API token\" button. Name Your Token: In the \"Create API token\" dialog, enter a descriptive Label for your token, such as \"ELITEA Integration Token\" or \"ELITEA Agent Access.\" This label will help you identify the purpose of this token later. Create Token: Click the \"Create\" button to generate the API token. Securely Copy and Store Your API Token: Immediately copy the generated API token that is displayed in the pop-up window. This is the only time you will see the full token value. Store it securely in a password manager or, preferably, ELITEA's built-in Secrets feature for enhanced security within ELITEA. You will need this API token to configure the Jira toolkit in ELITEA.","title":"Token/API Key Generation: Creating an API Token in Jira"},{"location":"how-tos/agents-toolkits/jira_toolkit/#system-integration-with-elitea","text":"","title":"System Integration with ELITEA"},{"location":"how-tos/agents-toolkits/jira_toolkit/#agent-creationconfiguration","text":"To integrate Jira functionalities into your workflows, you will need to configure the Jira toolkit within an ELITEA Agent. You can either create a new Agent specifically for Jira interactions or modify an existing Agent to incorporate Jira tools. Navigate to Agents Menu: In ELITEA, go to the Agents menu from the main navigation panel. Create or Edit Agent: Create a New Agent: Click on the \"+ Agent\" button to initiate the creation of a new Agent. Follow the on-screen prompts to define essential Agent attributes such as Agent name, a descriptive Agent description, the desired Agent type, and initial instructions for the Agent. Edit an Existing Agent: Select the Agent you intend to integrate with Jira from your list of Agents. Click on the Agent's name to open its configuration settings for editing. Access Tools Section: Within the Agent configuration interface, scroll down until you locate the \"Tools\" section. This section is where you will add and configure toolkits, including the Jira toolkit.","title":"Agent Creation/Configuration"},{"location":"how-tos/agents-toolkits/jira_toolkit/#toolkit-configuration","text":"This section provides detailed instructions on how to configure the Jira toolkit within your ELITEA Agent. Add Toolkit: In the \"Tools\" section of the Agent configuration, click on the \"+\" icon . This action will display a dropdown list of available toolkits that can be integrated with your Agent. Select Jira Toolkit: From the dropdown list of available toolkits, choose \"Jira\" . Selecting \"Jira\" will open the \"New Jira tool\" configuration panel, where you will specify the settings for your Jira integration. Configure Jira Toolkit Settings: Carefully fill in the following configuration fields within the \"New Jira tool\" section: Name: Enter a descriptive Name for your Jira toolkit instance. Choose a name that is easily recognizable and helps you identify its purpose within your Agent's instructions (e.g., \"ProjectJira\", \"IssueTrackerAccess\", \"JiraIntegration\"). Description: Provide a concise Description for the toolkit. This description should clarify the toolkit's purpose or the specific Jira project it is intended to access (e.g., \"Toolkit for accessing and managing issues in Jira\", \"Integration for Jira Project 'Project Alpha'\"). URL: Enter the base URL of your Jira instance. Ensure you use the correct format , including https:// or http:// and the full workspace URL (e.g., https://your-workspace.atlassian.net/jira or https://your-company.atlassian.net ). For Epam Jira, use https://jira.epam.com/jira/ . Username: Enter the Username associated with your Jira account for which you generated the API token. This is typically your email address used for Jira login. Authentication Options - API Key: Select the \"API Key\" authentication option. Password/Secret: Choose \"Password\" and paste the API token you generated in Jira (during the \"Software-Specific Setup\" section of this guide) into the \"Password\" field. Enhanced Security with Secrets (Recommended): For enhanced security, it is strongly recommended to use ELITEA's Secrets Management feature to store your Jira API token securely. Instead of directly pasting the token into the \"Password\" field, select the \"Secret\" option and choose the pre-configured secret containing your Jira API token from the dropdown list. This prevents hardcoding sensitive credentials in your toolkit configuration. Hosting Option: Select the appropriate \"Hosting option\" for your Jira instance: Cloud: Select \"Cloud\" if you are using Jira Cloud (e.g., accessed via atlassian.net ). Server: Select \"Server\" if you are using a self-hosted Jira Server or Data Center instance. Note: When connecting to an Epam Jira instance, ensure you select \"Server\" as the Hosting option. Advanced Settings: Adjust the advanced settings to fine-tune the toolkit's operation: Additional Fields : Enumeration of custom fields which can be used (e.g. customfield_100450 ). Enter a comma-separated list of custom field IDs that you want to be accessible within the toolkit. This allows you to interact with custom fields specific to your Jira projects. Verify SSL : Check this box to enable SSL verification for secure connections to your Jira instance. It is generally recommended to keep SSL verification enabled for enhanced security. Enable Desired Tools: In the \"Tools\" section within the Jira toolkit configuration panel, select the checkboxes next to the specific Jira tools that you want to enable for your Agent. It is crucial to enable only the tools that your Agent will actually need to use to adhere to the principle of least privilege and minimize potential security risks. Available tools include: Search using JQL - Allows searching for Jira issues using Jira Query Language (JQL). Create issue - Enables the Agent to create new Jira issues. Update issue - Allows the Agent to update existing Jira issues. List comments - Enables the Agent to list comments for a specific Jira issue. Add comments - Allows the Agent to add new comments to a Jira issue. Get attachments content - Enables the Agent to retrieve the content of attachments from a Jira issue. List projects - Allows the Agent to list all projects in the Jira instance. Set issue status - Allows the Agent to change the status of a Jira issue. Get specific field info - Enables the Agent to retrieve information from a specific field of a Jira issue. Get remote links - Allows the Agent to retrieve remote links associated with a Jira issue. Link issues - Enables the Agent to create links between Jira issues. Modify labels - Allows the Agent to add or remove labels from a Jira issue. Generic request - Allows to send custom HTTP requests to Jira API. Complete Setup: After configuring all the necessary settings and enabling the desired tools, click the arrow icon (typically located at the top right of the toolkit configuration section) to finalize the Jira toolkit setup and return to the main Agent configuration menu. Click Save in the Agent configuration to save all changes and activate the Jira toolkit integration for your Agent.","title":"Toolkit Configuration"},{"location":"how-tos/agents-toolkits/jira_toolkit/#tool-overview-jira-toolkit-functionalities","text":"Once the Jira toolkit is successfully configured and added to your Agent, you can leverage the following tools within your Agent's instructions to enable intelligent interaction with your Jira projects and issues: Search using JQL: Tool Name: search_using_jql Functionality: Allows Agents to search for Jira issues using Jira Query Language (JQL) queries. Returns a list of Jira issues matching the JQL query. Purpose: Enables advanced and flexible issue searching based on complex criteria defined using JQL, allowing Agents to retrieve specific sets of issues for reporting, analysis, or workflow automation based on Jira data. Create issue: Tool Name: create_issue Functionality: Automates the creation of new Jira issues within a specified Jira project. Requires parameters such as Summary, Description, Issue Type, and Priority. Purpose: Streamlines issue reporting and task management by enabling Agents to automatically create new Jira issues directly from ELITEA workflows, based on user input, workflow triggers, or automated analysis, ensuring timely and consistent issue logging. Update issue: Tool Name: update_issue Functionality: Allows Agents to modify and update fields of existing Jira issues. Requires the Issue Key and a JSON object containing the fields to update and their new values. Purpose: Enables automated issue lifecycle management by allowing Agents to update issue statuses, assignees, priorities, custom fields, or any other issue attributes based on workflow progress, user actions, or external events, ensuring Jira issues are always up-to-date and accurately reflect project status. List comments: Tool Name: list_comments Functionality: Retrieves a list of comments associated with a specific Jira issue, identified by its Issue Key. Returns a list of comment texts and author information. Purpose: Enables Agents to access and summarize discussions and feedback related to specific Jira issues, facilitating efficient review of issue communication history, providing context for issue analysis, and enabling automated reporting on issue discussions. Add comments: Tool Name: add_comments Functionality: Adds a new comment to a specific Jira issue. Requires the Issue Key and the comment text as parameters. Purpose: Automates communication and updates within Jira issue tracking workflows by allowing Agents to add comments to Jira issues directly from ELITEA. Streamlines providing status updates, asking for clarifications, notifying stakeholders, or logging automated actions related to specific issues. Get attachments content: Tool Name: get_attachments_content Functionality: Retrieves the content of attachments from a specific Jira issue. Requires the Issue Key as a parameter. Purpose: Enables Agents to access and process attachments associated with Jira issues, allowing for automated analysis of attached files, extraction of data from attachments, or integration of attachment content into ELITEA workflows, enhancing data accessibility and processing for issue-related information. List projects: Tool Name: list_projects Functionality: Retrieves a list of all projects available in the connected Jira instance. Returns a list of project names and keys. Purpose: Enables Agents to dynamically discover and list available Jira projects, allowing for dynamic project selection in workflows, automated reporting across projects, or providing users with a list of projects to choose from within ELITEA. Set issue status: Tool Name: set_issue_status Functionality: Updates the status of a specific Jira issue. Requires the Issue Key and the desired Status name (e.g., \"In Progress\", \"Done\") as parameters. Purpose: Automates issue lifecycle management by allowing Agents to automatically transition Jira issues to different statuses based on workflow progress, events, or user actions, ensuring issue statuses are always aligned with the current state of work and streamlining issue workflow management. Get specific field info: Tool Name: get_specific_field_info Functionality: Retrieves information from a specific field of a Jira issue. Requires the Issue Key and the Field Name (or Field ID) as parameters. Purpose: Enables Agents to extract specific data points from Jira issues, allowing for targeted retrieval of information from particular fields, facilitating data extraction for reporting, analysis, or integration with other systems, and providing access to granular issue data. Get remote links: Tool Name: get_remote_links Functionality: Retrieves remote links associated with a specific Jira issue. Returns a list of URLs and link titles. Purpose: Enables Agents to access and utilize external web links associated with Jira issues, allowing for retrieval of related documentation, external resources, or linked information, providing a comprehensive view of issue context and related resources. Link issues: Tool Name: link_issues Functionality: Creates a link between two Jira issues. Requires the keys of the inward and outward issues and the Link Type (e.g., \"Relates to\", \"Blocks\"). Purpose: Automates the process of linking related Jira issues, establishing relationships between tasks, bugs, user stories, or other work items, improving issue traceability, dependency management, and providing a clear view of issue relationships within ELITEA workflows. Modify labels: Tool Name: modify_labels Functionality: Adds or removes labels from a specific Jira issue. Requires the Issue Key and lists of labels to add and remove. Purpose: Enables automated categorization and tagging of Jira issues through label management, improving issue organization, searchability, and filtering based on labels, streamlining issue classification and enhancing issue discoverability. Generic request: Tool Name: generic_request Functionality: Allows sending custom HTTP requests to the Jira API endpoint. Provides advanced users with the flexibility to interact with the Jira API directly for actions not covered by other pre-built tools. Purpose: Enables advanced and customized interactions with the Jira API, allowing experienced users to extend the toolkit's capabilities, access specific Jira API endpoints, and perform actions beyond the scope of the standard Jira tools, providing maximum flexibility for complex or specialized Jira integrations.","title":"Tool Overview: Jira Toolkit Functionalities"},{"location":"how-tos/agents-toolkits/jira_toolkit/#instructions-and-prompts-for-using-the-jira-toolkit","text":"To effectively utilize the Jira toolkit within your ELITEA Agents, you need to provide clear and precise instructions within the Agent's \"Instructions\" field, telling the Agent how and when to use these tools. General Instruction Structure: When instructing your Agent to use a Jira tool, you will typically follow this pattern: Use the \"[tool_name]\" tool to [describe the action you want to perform] in Jira. Provide the following parameters: - Parameter 1: <value or description of value> - Parameter 2: <value or description of value> - ... Example Agent Instructions for Jira Toolkit Tools: Agent Instructions for Searching Issues using JQL: Use the \"search_using_jql\" tool to search for Jira issues using a JQL query. Provide the following parameters: - JQL Query: \"project = 'Project Alpha' AND status = 'In Progress' AND assignee = currentUser()\" Agent Instructions for Creating a New Issue: Use the \"create_issue\" tool to create a new Bug issue in Jira. Provide the following parameters: - Summary: \"User login failing after recent update\" - Description: \"Users are reporting login failures on both web and mobile platforms after the latest update. Password reset does not resolve the issue.\" - Issue Type: \"Bug\" - Priority: \"High\" Agent Instructions for Updating an Existing Issue: Use the \"update_issue\" tool to update the description of an existing Jira issue. Provide the following parameters: - Issue Key: \"PA-123\" - Fields to Update: { \"description\": \"Updated description: After further investigation, the login issue seems to be related to a database connection problem.\" } Important Considerations for Agent Instructions: Tool Name Accuracy: Ensure you use the correct Tool Name (e.g., \"search_using_jql\" , \"create_issue\" , \"update_issue\" ) as listed in the \"Tool Overview\" section. Typos or incorrect tool names will prevent the Agent from using the toolkit correctly. Parameter Clarity: Clearly specify the parameters required for each tool and provide instructions on where the Agent should obtain the values for these parameters (e.g., from user input, from previous steps in the workflow, or hardcoded values). Context and Examples: Provide sufficient context and examples within your Agent's \"Instructions\" to guide the LLM in understanding when and how to use the Jira toolkit tools effectively within your desired workflow. Jira Field Names and Values: Ensure that you use the correct Jira Field Names (e.g., \"Summary\", \"Description\", \"Status\", custom field IDs) and valid values for those fields as defined in your Jira project configuration. Incorrect field names or invalid values will cause errors during tool execution.","title":"Instructions and Prompts for Using the Jira Toolkit"},{"location":"how-tos/agents-toolkits/jira_toolkit/#best-practices-and-use-cases-for-jira-integration","text":"","title":"Best Practices and Use Cases for Jira Integration"},{"location":"how-tos/agents-toolkits/jira_toolkit/#best-practices-for-efficient-integration","text":"Test Integration Thoroughly: After setting up the Jira toolkit and incorporating it into your Agents, thoroughly test each tool you intend to use to ensure seamless connectivity, correct authentication, and accurate execution of Jira actions. Monitor Agent Performance and Usage: Regularly monitor the performance of Agents utilizing Jira toolkits. Track metrics such as task completion success rate, execution time, and error rates to identify any potential issues or areas for optimization in Agent instructions or toolkit configurations. Follow Security Best Practices: Use API Tokens: Always use Jira API tokens instead of your main account password for integrations. Grant Least Privilege: Grant only the minimum necessary scopes/permissions to the API token to limit potential security risks. While Jira API tokens have limited scope control, ensure you are generating tokens specifically for ELITEA integration and not reusing tokens with broader access. Securely Store Credentials: Utilize ELITEA's Secrets Management feature to securely store and manage your Jira API tokens instead of hardcoding them directly in Agent configurations. Provide Clear Instructions and Prompts: Craft clear and unambiguous instructions within your ELITEA Agents to guide them in using the Jira toolkit effectively. Use the prompt examples provided in this guide as a starting point and adapt them to your specific use cases. Start with Simple Use Cases: Begin by implementing Jira integration for simpler automation tasks, such as retrieving issue lists or updating issue statuses, and gradually progress to more complex workflows as you gain experience and confidence with the toolkit. Leverage Advanced Settings for Custom Fields: Utilize the \"Advanced Settings\" in the toolkit configuration, specifically the \"Additional Fields\" option, to ensure your Agent can interact with and manage custom fields specific to your Jira projects, extending the toolkit's functionality to meet your unique Jira configurations.","title":"Best Practices for Efficient Integration"},{"location":"how-tos/agents-toolkits/jira_toolkit/#use-cases-for-jira-toolkit-integration","text":"The Jira toolkit opens up a wide range of automation possibilities for project management, issue tracking, and workflow automation within ELITEA. Here are some compelling use cases: Automated Issue Reporting and Bug Logging: Scenario: When automated tests within ELITEA workflows detect a bug or failure, automatically create a new Bug issue in Jira, pre-populated with detailed error information, logs, and environment details, streamlining bug reporting and ensuring timely issue logging. Tools Used: create_issue Example Instruction: \"Use the 'create_issue' tool to create a new 'Bug' issue in Jira with the summary 'Automated Test Failure Detected' and description containing the full error logs and test execution details. Set priority to 'High'.\" Benefit: Streamlines bug reporting and issue tracking by automating issue creation directly from ELITEA workflows, reducing manual effort for developers and testers, ensuring consistent and structured bug reports, and accelerating the bug triage process. Dynamic Task Prioritization Based on Real-time Data: Scenario: ELITEA Agents can dynamically reprioritize Jira issues based on real-time data from external monitoring systems, customer feedback, or changing business priorities, ensuring teams are always working on the most critical tasks. Tools Used: search_using_jql , update_issue , generic_request (for external data retrieval) Example Instruction: \"Use the 'generic_request' tool to retrieve the latest customer support ticket volume from the support dashboard API. Use 'search_using_jql' to find all open 'Bug' issues in Jira. Analyze the support ticket volume and reprioritize 'Bug' issues related to areas with high ticket volume to 'Highest' priority using 'update_issue' tool.\" Benefit: Enables dynamic and data-driven task prioritization in Jira, ensuring development efforts are aligned with real-time business needs and customer feedback, improving responsiveness and resource allocation. Automated Issue Status Updates and Workflow Management: Scenario: As tasks progress through ELITEA workflows, automatically update the status of linked Jira issues to reflect the current progress, keeping Jira project boards and dashboards up-to-date in real-time. Tools Used: update_issue , set_issue_status Example Instruction: \"Use the 'update_issue' tool to update the 'Status' field of Jira issue with key [issue_key] to 'In Progress' when the ELITEA workflow reaches the 'Development' stage. When the workflow completes successfully, use 'set_issue_status' to set the issue status to 'Done'.\" Benefit: Automates issue lifecycle management, ensuring Jira issue statuses are always synchronized with the actual project progress. Reduces manual status updates, improves issue tracking accuracy, and provides real-time visibility into project workflow status. Intelligent Issue Commenting and Notifications: Scenario: ELITEA Agents can automatically add comments to Jira issues to provide status updates to stakeholders, notify assignees of new tasks, or request clarification on issue details, streamlining communication and collaboration within Jira. Tools Used: add_comments , get_specific_field_info Example Instruction: \"Use the 'add_comments' tool to add a comment to Jira issue with key [issue_key] with the text 'Automated status update: Workflow execution completed successfully. Please proceed with testing.' Also, use 'get_specific_field_info' to retrieve the 'Assignee' field value for the issue and send a notification to the assignee via ELITEA chat about the status update.\" Benefit: Streamlines communication and collaboration within Jira issue tracking by automating updates and notifications directly within Jira issues. Keeps all stakeholders informed of progress, reduces manual communication overhead, and ensures timely notifications for task assignments and status changes. Automated Issue Linking for Dependency Management: Scenario: When creating new Jira issues for sub-tasks or related features, automatically link them to parent issues or related user stories to establish clear dependencies and relationships between work items. Tools Used: create_issue , link_issues Example Instruction: \"Use the 'create_issue' tool to create a new 'Sub-task' issue for user story [user_story_key]. After creating the sub-task, use the 'link_issues' tool to link the new sub-task issue to the parent user story issue using the 'Sub-task' link type.\" Benefit: Enhances issue traceability and project management by automating the creation of links between related Jira issues, providing a clear view of dependencies and relationships between tasks, user stories, and features, improving project planning and dependency tracking.","title":"Use Cases for Jira Toolkit Integration"},{"location":"how-tos/agents-toolkits/jira_toolkit/#troubleshooting-and-support","text":"","title":"Troubleshooting and Support"},{"location":"how-tos/agents-toolkits/jira_toolkit/#troubleshooting-common-issues","text":"Connection Errors: Problem: ELITEA Agent fails to connect to Jira, resulting in errors during toolkit execution. Possible Solutions: Verify Jira URL: Double-check that you have entered the correct Jira workspace URL in the toolkit configuration, including https:// or http:// and the full workspace URL (e.g., https://your-workspace.atlassian.net/jira or https://your-company.atlassian.net ). For Epam Jira, use https://jira.epam.com/jira/ . Check Username and API Token: Ensure that the Username and API Token you provided are correct and valid for your Jira account and workspace. Carefully re-enter or copy-paste these credentials to rule out typos. Verify Hosting Option: Double-check that you have selected the correct Hosting option (Cloud or Server) in the Jira toolkit configuration, especially when connecting to Epam's Jira (use \"Server\"). Network Connectivity: Confirm that both your ELITEA environment and your Jira instance are connected to the internet and that there are no network connectivity issues blocking the integration. Authorization Errors (Permission Denied/Unauthorized): Problem: Agent execution fails with \"Permission Denied\" or \"Unauthorized\" errors when trying to access or modify Jira resources. Possible Solutions: Verify API Token Validity: Ensure that the Jira API token you are using is still valid and has not been revoked in your Atlassian account settings. Generate a new token if necessary. Check Jira Permissions: Confirm that the Jira account associated with the Username and API Token has the necessary permissions within Jira to access and modify the specific projects and issues your Agent is trying to interact with. Verify project and issue permissions within Jira project settings. Hosting Option Mismatch: Double-check that you have selected the correct \"Hosting option\" (Cloud or Server) in the Jira toolkit configuration. Using the wrong hosting option can lead to authentication and connection errors. Tool-Specific Parameter Errors: Problem: Agent execution fails for specific Jira tools due to incorrect parameter values or formats. Troubleshooting Steps: Verify Project Keys: Ensure that you are using the correct Jira Project Keys in your Agent's instructions and toolkit configuration. Project Keys are case-sensitive and must exactly match the project keys in your Jira instance. Use the \"List projects\" tool to verify project keys if needed. Verify Issue Keys: Double-check that you are using the correct Jira Issue Keys when referencing specific issues in your Agent's instructions. Issue Keys are case-sensitive and must match the issue keys in Jira exactly (e.g., \"PA-123\", \"PROJECT-456\"). Parameter Format: Verify that you are providing parameters in the correct format expected by each Jira tool (e.g., string values for names, numerical values for IDs, JSON format for issue updates). Refer to the \"Instructions and Prompts for Using the Toolkit\" section for parameter details and examples. Custom Fields: If you are using custom fields in your Agent instructions, ensure that you have added the correct Additional Fields IDs in the toolkit's \"Advanced Settings\" and that you are using the correct custom field IDs and values in your Agent instructions. Use the \"Get specific field info\" tool to verify custom field IDs and values if needed.","title":"Troubleshooting Common Issues"},{"location":"how-tos/agents-toolkits/jira_toolkit/#faqs","text":"Q: Can I use my regular Jira password for the ELITEA integration? A: No, it is strongly recommended to use a Jira API token instead of your main account password for security reasons. API tokens provide a more secure and controlled way to grant access to external applications like ELITEA. Q: What permissions should I grant to the Jira API Token? A: Jira API tokens have a fixed scope (access to Jira REST API). You don't need to select specific scopes when generating the token. However, ensure that the Jira account associated with the API token has the necessary permissions within Jira to access and modify the projects and issues your Agent will be interacting with. Q: What is the correct format for the Jira URL in the toolkit configuration? A: The Jira URL should be entered in the full format, including https:// or http:// and the complete workspace URL (e.g., https://your-workspace.atlassian.net/jira or https://your-company.atlassian.net ). Ensure there are no typos or missing parts in the URL. For Epam Jira, use https://jira.epam.com/jira/ . Q: Why is my Agent getting \"Permission Denied\" errors even though I think I have configured everything correctly? A: Double-check the following: API Token Validity: Ensure that the API token is valid and has not been revoked. Jira Account Permissions: Verify that the Jira account associated with the API token has the necessary permissions to access the specific projects and issues your Agent is trying to interact with. Hosting Option: Double-check that you have selected the correct \"Hosting option\" (Cloud or Server) in the Jira toolkit configuration, especially for self-hosted or Epam Jira instances. Verify SSL Setting: If you are connecting to a Jira Server instance, try toggling the \"Verify SSL\" setting in the \"Advanced Settings\" of the toolkit configuration, as SSL verification issues can sometimes cause connection problems.","title":"FAQs"},{"location":"how-tos/agents-toolkits/jira_toolkit/#support-and-contact-information","text":"If you encounter any issues, have questions, or require further assistance beyond what is covered in this guide regarding the Jira integration or ELITEA Agents in general, please do not hesitate to contact our dedicated ELITEA Support Team. We are here to help you resolve any problems quickly and efficiently and ensure you have a smooth and productive experience with ELITEA. How to Reach ELITEA Support: Email: SupportAlita@epam.com Best Practices for Effective Support Requests: To help us understand and resolve your issue as quickly as possible, please ensure you provide the following information in your support email: ELITEA Environment: Clearly specify the ELITEA environment you are using (e.g., \"Nexus,\" \"Alita Lab,\" \"EYE\"). Project Details: Indicate the Project Name and whether you are working in your Private workspace or a Team project. Detailed Issue Description: Provide a clear, concise, and detailed description of the problem you are encountering. Explain what you were trying to do, what you expected to happen, and what actually occurred. Relevant Configuration Information: To help us diagnose the issue, please include relevant configuration details, such as: Agent Instructions (Screenshot or Text): If the issue is with an Agent, provide a screenshot or copy the text of your Agent's \"Instructions\" field. Toolkit Configurations (Screenshots): If the issue involves the Jira toolkit or other toolkits, include screenshots of the toolkit configuration settings within your Agent. Error Messages (Full Error Text): If you are encountering an error message, please provide the complete error text . In the Chat window, expand the error details and copy the full error message. This detailed error information is crucial for diagnosis. Your Query/Prompt (Exact Text): If the issue is related to Agent execution, provide the exact query or prompt you used to trigger the issue. Before Contacting Support: We encourage you to first explore the resources available within this guide and the broader ELITEA documentation. You may find answers to common questions or solutions to known issues in the documentation.","title":"Support and Contact Information"},{"location":"how-tos/agents-toolkits/jira_toolkit/#useful-links","text":"To further enhance your understanding and skills in integrating Jira with ELITEA, here are some helpful resources: Atlassian Jira Website : Access the main Jira product website for product information and documentation. Atlassian Account Settings : Access your Atlassian account settings to manage your profile and API tokens. Jira Query Language (JQL) Documentation : Learn more about Jira Query Language (JQL) and how to construct advanced search queries in Jira. ELITEA Secrets Management : Learn how to securely store your Jira API Token using ELITEA's Secrets management feature for enhanced security. ELITEA Agents Configuration : Find out more about creating and configuring Agents in ELITEA, where you integrate the Jira toolkit to automate your workflows. ELITEA Support Email : Contact the ELITEA support team for direct assistance with Jira integration or any other questions and issues you may encounter.","title":"Useful Links"},{"location":"how-tos/agents-toolkits/openapi_toolkit/","text":"ELITEA Toolkit Guide: OpenAPI Integration Introduction Purpose of this Guide This guide is your comprehensive resource for integrating and effectively utilizing the OpenAPI toolkit within ELITEA. It provides a detailed, step-by-step walkthrough, from obtaining your OpenAPI specification file to configuring the toolkit in ELITEA and seamlessly incorporating it into your Agents. By following this guide, you will unlock the power of universal API integration, streamlined workflows, and enhanced data accessibility, all directly within the ELITEA platform. This integration empowers you to leverage AI-driven automation to interact with virtually any API, optimize data retrieval, and extend ELITEA's capabilities across diverse services. Brief Overview of OpenAPI The OpenAPI Toolkit is a powerful toolkit of ELITEA, providing a universal interface for seamless integration with a vast range of APIs. By utilizing OpenAPI specifications, this toolkit allows ELITEA agents to understand and interact with diverse API endpoints, unlocking the potential to automate tasks and extend ELITEA's functionality across different platforms and services. Toolkit Data Setup and Configuration Data Requirements To use the OpenAPI toolkit, you need an OpenAPI specification file in JSON format for the API you wish to integrate. Obtain OpenAPI Specification (JSON): Conversion from YAML (if needed): If you have a YAML OpenAPI specification, convert it to JSON format. You can use online tools like Swagger Editor or other OpenAPI specification converters. Validation: Ensure the JSON file is valid and adheres to OpenAPI specifications. This file defines the API's endpoints, parameters, request bodies, and security schemes, enabling ELITEA to understand how to interact with the API. Important Considerations for OpenAPI Specification Comprehensive Definition: The OpenAPI file should be as complete as possible, including descriptions, parameter types, required fields, and security schemes. This ensures the Large Language Model (LLM) powering ELITEA agents has sufficient information to construct correct API requests. Security Schemas: Properly define security schemes (API Key, OAuth, etc.) in your OpenAPI file. This is crucial for configuring authentication within ELITEA. Toolkit Limits: While the OpenAPI toolkit is powerful, extremely large OpenAPI definitions with hundreds of endpoints might encounter processing limitations. If you experience issues, consider using a more focused OpenAPI definition or contact support. Integration with ELITEA OpenAPI Toolkit Configuration Navigate to Alitea Agents: Navigate to the Agents page within your ELITEA instance. Configure a New Agent (or Edit Existing): Create a new agent or modify an existing one. Define the Agent Name , Description , and relevant Instructions that guide the agent's behavior when using the OpenAPI toolkit. Select the appropriate Agent Type (e.g., consider an \"OpenAI Agent\" type for general API interaction, or a more specialized type if applicable within Alitea). Agent Instructions Guidance Clarity is Key: Provide clear and specific instructions to the agent. Instruct the agent on what API actions to perform and how to use the available tools (actions defined in your OpenAPI spec). Parameter Handling: If your API has specific requirements for parameter formats (e.g., numeric values as strings, specific date formats, required properties), explicitly mention these in the instructions. This helps the LLM generate valid requests. Example Instructions: ... 1. To create a new task, use the \"CreateTask\" tool. Ensure you include a 'title' and 'description' for the task. 2. To get details of a task, use the \"GetTaskById\" tool, providing the 'taskId' as input. 3. If the user asks to update a task, use the \"UpdateTask\" tool. You will need the 'taskId' and the fields to update (e.g., 'status', 'dueDate'). ..... rest of the instructions Create an OpenAPI Toolkit Tool: Within the Agent configuration, create a new tool and select the \"OpenAPI Toolkit\" type. Tool Configuration: Tool Name: Enter a descriptive name for your OpenAPI toolkit tool (e.g., \"Task Management API\", \"Pet Store API\"). Description (Schema): This is where you provide the OpenAPI specification: Copy and Paste: Copy the entire JSON content of your OpenAPI specification file and paste it into the \"Schema\" field. Drag and Drop: Drag and drop your OpenAPI JSON file directly into the \"Schema\" field. Choose File Link/Button: Click the \"Choose File\" button and select your OpenAPI JSON file from your local system. Actions Table Verification: Once a valid OpenAPI schema is provided, the \"Actions\" table below the schema field will be populated. This table lists all the API endpoints (actions) defined in your OpenAPI specification. Authentication Configuration: Navigate to the \"Authentication\" section of the toolkit configuration. Choose the appropriate authentication method based on your API's requirements: None: Select \"None\" if the API does not require authentication (rare for production APIs). API Key: API Key Field: Enter your API key directly or, for enhanced security, select \"From Secrets\" to reference a securely stored secret within Alitea. Auth Type: Choose the API Key authentication type from the dropdown: Basic Auth: For APIs using Basic Authentication. Bearer: For APIs using Bearer tokens (e.g., JWT). Custom Header: For APIs requiring an API key in a custom header. If selected, an additional field will appear to enter the Header Name (e.g., X-API-Key ). OAuth: Select \"OAuth\" if your API uses OAuth 2.0. You will need to fill in the OAuth-specific fields according to your API's OAuth configuration (e.g., Client ID, Client Secret, Token URL, Authorization URL, Scopes, Token exchange method). Consult your API's documentation for the required OAuth settings. Save Toolkit: Click the \"Save\" button to save the OpenAPI toolkit configuration. Tools of the OpenAPI Toolkit After successfully loading your OpenAPI specification, the \"Actions\" table displays the available API operations as \"tools\" that your ELITEA agent can utilize. Name: This column shows the name of each action, typically derived from the operationId in your OpenAPI specification. These names are how you refer to specific API endpoints in your agent instructions and user messages. Description: Provides a brief description of the action, taken from the description field of the corresponding operation in your OpenAPI specification. Method: Indicates the HTTP method (GET, POST, PUT, DELETE, etc.) for the API endpoint. Path: Shows the API endpoint path. Using Actions in Instructions and Messages To instruct your agent to use a specific API endpoint, refer to the Name from the Actions table as a \"tool\" in your agent instructions or in user messages. Example: If the Actions table lists an action named \"AddPet\" (from a Pet Store API), you can instruct the agent like this: \"Use the AddPet tool to create a new pet with the following properties: ...\". The LLM will then identify the \"AddPet\" action from the OpenAPI toolkit and attempt to use the corresponding API endpoint based on the provided OpenAPI specification and your instructions. Use Cases The use cases for the OpenAPI toolkit are virtually limitless, constrained only by the capabilities of the integrated API and the LLM's ability to interact with it. Here are some common use cases: Data Retrieval and Analysis: Scenario: Agents can fetch data from a wide range of external services like databases, CRM systems, weather APIs, financial APIs, and more. This retrieved data can then be analyzed, summarized, or used to generate reports within ELITEA. Tools Used: API actions (defined in your OpenAPI spec) that perform GET requests to retrieve data. Examples include actions to list records, get details, search data, etc. Example Instruction: \"Fetch the latest sales data from the CRM API using the 'getSalesData' tool and summarize the key trends for the past quarter.\" (Assuming 'getSalesData' is defined in your CRM API's OpenAPI spec). Benefit: Empowers agents to leverage external data sources for informed decision-making, insightful reporting, and data-driven task completion, enhancing the intelligence and utility of ELITEA workflows. Resource Management: Scenario: Agents can automate the creation, updating, and deletion of resources in external systems. This includes managing tasks in project management tools, customer records in CRM systems, controlling smart devices, and managing cloud infrastructure resources. Tools Used: API actions (defined in your OpenAPI spec) that perform POST, PUT, PATCH, and DELETE requests to manage resources. Examples include actions to create tasks, update records, start/stop services, etc. Example Instruction: \"Create a new task in the project management system using the 'createTask' tool with the following details: task name 'Implement User Authentication', project 'Project Alpha', due date 'Next Friday'.\" (Assuming 'createTask' is defined in your Project Management API's OpenAPI spec). Benefit: Streamlines operations by automating resource management tasks across various systems, reducing manual effort, improving efficiency, and ensuring consistent resource states. Workflow Automation and Orchestration: Scenario: Agents can orchestrate complex workflows by interacting with multiple APIs in a sequence. This allows for automating end-to-end processes that span across different services and platforms, creating powerful and integrated automation solutions. Tools Used: Combinations of API actions from different OpenAPI specifications or from a single OpenAPI spec with multiple related actions. Agents can use sequences of tool calls to perform multi-step workflows. Example Instruction: \"First, use the 'getNewOrders' tool from the Order Management API. Then, for each new order, use the 'updateInventory' tool from the Inventory API and the 'sendOrderConfirmationEmail' tool from the Email API.\" (Assuming these actions are defined in relevant OpenAPI specs). Benefit: Enables sophisticated automation of complex business processes by connecting different systems and automating multi-step workflows, significantly enhancing efficiency and reducing manual intervention. Reporting and Visualization Generation: Scenario: Agents can generate reports and visualizations based on data retrieved from APIs. This can involve creating summaries, charts, graphs, or dashboards using data from external services, potentially leveraging tools within ELITEA or external visualization services. Tools Used: API actions for data retrieval (GET requests), potentially combined with actions to trigger report generation or visualization creation in external services (if the API offers such actions). Agents might also use ELITEA's capabilities or external tools to process and visualize retrieved data. Example Instruction: \"Retrieve website traffic data for the last month using the 'getWebsiteTraffic' tool from the Analytics API. Generate a report summarizing the key metrics and create a chart visualizing the traffic trends.\" (Assuming 'getWebsiteTraffic' is defined in your Analytics API's OpenAPI spec, and ELITEA or external tools can handle report generation and visualization). Benefit: Transforms raw API data into actionable insights through automated report generation and visualization, providing users with clear and understandable summaries of complex information. Testing and Validation Automation: Scenario: Agents can interact with APIs to perform automated testing and validation of external systems. This can involve sending test requests, validating API responses against expected outcomes, and ensuring the reliability and functionality of external services. Tools Used: API actions for sending requests (GET, POST, PUT, DELETE) and actions for retrieving data to validate responses. Agents can use assertions and logic within ELITEA to perform validation checks. Example Instruction: \"Use the 'createAsset' tool from the User API to create a new test user. Then, use the 'getAsset' tool to get the asset.Validate if the asset details are ...\" (Assuming 'getAsset' and 'createAsset' are defined in your User API's OpenAPI spec). Benefit: Automates API smoke testing and validation processes, improving software quality, reducing manual testing effort, and ensuring the robustness and reliability of integrated systems. Troubleshooting and Support Troubleshooting \"Description of schema is required\" Error During Save: Problem: ELITEA displays a \"Description of schema is required\" error in red when attempting to save the OpenAPI Toolkit configuration. Troubleshooting Steps: Invalid JSON: The OpenAPI schema you pasted or uploaded is not valid JSON. Verify the JSON syntax using a JSON validator tool online. Missing Description (Misleading Error): While the error message suggests a missing description, it often indicates a more general parsing error due to an invalid OpenAPI structure. Double-check your OpenAPI JSON file against the OpenAPI specification standards. \"JSON Schema cannot be parsed\" Error During Tool Execution: Problem: When executing an agent that uses the OpenAPI toolkit, you receive an error message indicating \"JSON Schema cannot be parsed.\" Troubleshooting Steps: Invalid JSON (Again!): Even if the schema was initially accepted during toolkit creation, there might be subtle JSON errors that only surface during runtime parsing. Re-validate your JSON schema meticulously. YAML Instead of JSON: Ensure you are providing a JSON file, and not a YAML file. The ELITEA OpenAPI Toolkit primarily supports JSON. Authentication Errors (403 Forbidden, 401 Unauthorized): Problem: API requests consistently fail with \"403 Forbidden\" or \"401 Unauthorized\" errors. Troubleshooting Steps: Incorrect Credentials: Double-check your API key, OAuth tokens, or other authentication credentials. Ensure they are entered correctly in the toolkit configuration. Expired Tokens: OAuth tokens have expiration dates. Ensure your tokens are still valid and refresh them if necessary (depending on your OAuth flow). Incorrect Authentication Type: Verify that the authentication type configured in ELITEA (API Key, OAuth, etc.) precisely matches the API's authentication requirements as documented in the API's documentation and OpenAPI specification. Missing Headers: Some APIs require specific headers beyond basic authentication. Review the API documentation to see if you need to configure custom headers in ELITEA (Note: Custom header configuration for authentication might have limitations; contact support for advanced header needs). API Request Errors (400 Bad Request, 500 Internal Server Error, etc.): Problem: API requests are sent, but the API returns errors like \"400 Bad Request,\" \"500 Internal Server Error,\" or other HTTP error codes indicating issues with the request itself. Troubleshooting Steps: Incorrect Parameters/Request Body: The LLM might be generating API requests with incorrect parameters or request body formats. Thoroughly review the API documentation for the specific endpoint being used. Refine your agent instructions to explicitly guide the LLM to construct requests that precisely match the API's requirements (e.g., specify data types, required fields, allowed values, example values). API Service Issues: The external API itself might be temporarily experiencing issues, outages, or errors. Test the API endpoint directly using API testing tools like Postman or curl outside of ELITEA to isolate whether the problem originates from ELITEA's integration or the external API service. \"Definition contains too many actions (endpoints)\" Error: Problem: When attempting to execute a request, you receive an error message stating \"The definition contains too many actions (endpoints). Please reduce the amount of endpoints so that they can be able to handle them.\" Troubleshooting Steps: Reduce Endpoints in Schema: The ELITEA OpenAPI Toolkit has a limitation on the number of endpoints it can process within a single OpenAPI specification. Currently, this limit is 128 endpoints. Your OpenAPI definition exceeds this limit (e.g., your file contains 216 endpoints). You will need to reduce the number of endpoints in your OpenAPI specification. Create Focused Schemas: If possible, create smaller, more focused OpenAPI specifications that only include the specific API endpoints your agent needs to use for a particular workflow. Instead of using one large schema for an entire API, break it down into smaller schemas focused on specific functional areas. Contact Support for Large Schemas: If you have a legitimate need to use a very large OpenAPI schema and cannot reduce the endpoint count below the limit, contact ELITEA support to discuss potential solutions or optimizations. Unexpected or Empty Data from Agent: Problem: The integration appears to be working without errors, but the agent returns unexpected data, incomplete data, or empty responses when interacting with the API. Troubleshooting Steps: Incorrect Instructions: Carefully review your agent instructions. Are they sufficiently clear, precise, and detailed for the LLM to accurately understand which API actions to use and how to use them to achieve the desired data retrieval or action? Ambiguous instructions can lead to the LLM making incorrect API calls or misinterpreting API responses. API Behavior Verification: The external API itself might be returning empty or unexpected data, even for requests that are technically valid. Directly verify the API's behavior using tools like Postman by sending the same API requests that your agent intends to send. This helps determine if the issue lies with ELITEA's integration or the external API's response patterns. Parameter Data Type and Mismatches: Double-check that the parameters and data the LLM is providing to the API tools are of the exact data type, format, and structure that the API endpoint expects . Even subtle data type mismatches (e.g., sending a number as a string when the API expects an integer) can lead to API errors or unexpected responses. Refer to the API documentation for precise parameter requirements. \"Description is required\" Error During Agent Execution: Problem: When executing an agent that utilizes the OpenAPI toolkit, you encounter an error message indicating \"Action description is required.\" Troubleshooting Steps: Add Descriptions to OpenAPI Specification: This error indicates that your OpenAPI specification is missing descriptions for one or more API endpoints (actions). LLMs rely on these descriptions to understand the purpose and functionality of each API endpoint. Review OpenAPI Definition: Carefully review your OpenAPI specification file (JSON). Ensure that every endpoint (path and method combination) within your paths section has a description field provided within its operation definition (e.g., under get: , post: , etc.). Add Missing Descriptions: For any endpoint lacking a description , add a concise and informative description explaining what that API endpoint does. Update Toolkit Schema: After adding descriptions to your OpenAPI specification, re-upload or re-paste the updated schema into the OpenAPI Toolkit configuration within ELITEA and save the toolkit. Re-run Agent: Try executing your agent again after updating the OpenAPI schema with descriptions. FAQs Q: Can I use OpenAPI specifications in YAML or JSON format? A: The ELITEA OpenAPI Toolkit primarily supports OpenAPI specifications in JSON format . While YAML might be accepted in some limited cases, JSON is the recommended and most reliable format for optimal compatibility and parsing robustness within ELITEA. Q: How do I find the OpenAPI specification for an API? A: API providers often publish their OpenAPI specifications (also sometimes called Swagger files) within their API documentation. Look for sections typically labeled \"API Reference,\" \"Developer Documentation,\" or \"Integration Guides.\" The specification file is usually linked for download as a swagger.json , openapi.json , swagger.yaml , or openapi.yaml file. If the OpenAPI specification is not publicly available in the API documentation, you may need to request it directly from the API provider or generate it from the API's codebase if you have access to the API implementation. Q: How do I determine which \"action name\" to use in my agent instructions? A: The \"action names\" (tool names) presented in the OpenAPI Toolkit are automatically derived from the operationId values defined within your OpenAPI specification file. When you successfully upload and parse your OpenAPI schema into the toolkit, the \"Actions table\" in the toolkit configuration interface will populate, listing these action names. Use these names directly and precisely in your agent instructions to refer to specific API endpoints. If the operationId is not explicitly defined in the OpenAPI specification for a particular endpoint, the \"Name\" column in the Actions table might be empty or auto-generated based on the HTTP method and path. Support Contact If you encounter persistent issues, have questions not covered in this guide, or require further assistance with the OpenAPI Toolkit or ELITEA Agents, please do not hesitate to contact the dedicated ELITEA Support Team. Email: SupportAlita@epam.com To ensure efficient and effective support, please include the following details in your support request: ELITEA Environment: (e.g., \"Nexus,\" \"Alita Lab,\" \"EYE\") Project Details: Project Name, Private or Team project. Detailed Issue Description: Provide a clear, concise, and detailed description of the problem you are encountering. Explain what you were trying to do, what you expected to happen, and what actually occurred. Relevant Configuration Information: Agent Instructions (Screenshot or Text): If the issue is related to an Agent, please provide a screenshot or copy the text of your Agent's \"Instructions\" field. OpenAPI Toolkit Configuration (Screenshots): If the issue involves the OpenAPI toolkit, please include screenshots of the toolkit configuration settings within your Agent, especially the \"Schema\" and \"Authentication\" sections. Error Messages (Full Error Text): If you are encountering an error message, please provide the complete error text. In the Chat window, expand the error details and copy the full error message. This detailed error information is crucial for diagnosis. Your Query/Prompt: If the issue is related to Agent execution, provide the exact query or prompt you used to trigger the issue. OpenAPI Specification (if applicable and safe to share): If you suspect the issue might be related to your OpenAPI schema itself, providing your OpenAPI specification file (or a sanitized version if it contains sensitive information) can be exceptionally helpful for diagnosing schema-related problems. Before Contacting Support: We encourage you to first explore the resources available within this guide and the broader ELITEA documentation. You may find answers to common questions or solutions to known issues in the documentation. Useful Links To further enhance your understanding and skills in using the OpenAPI Toolkit with ELITEA, here are some helpful external resources: OpenAPI Specification Official Website: https://swagger.io/specification/ - The official source for the OpenAPI Specification documentation, versions, and updates, providing in-depth information on the OpenAPI standard. Swagger Editor: https://editor.swagger.io/ - Swagger Editor is a valuable online tool for creating, validating, and visualizing OpenAPI specifications in both JSON and YAML formats. It's highly useful for crafting and debugging your OpenAPI schemas before integrating them into ELITEA. Swagger UI: https://swagger.io/tools/swagger-ui/ - Swagger UI is a powerful tool for visually exploring and interacting with APIs that are defined by OpenAPI specifications. It allows you to examine API endpoints, understand API structure, and even make test calls to APIs directly from your browser, aiding in API comprehension and testing.","title":"OpenAPI Integration"},{"location":"how-tos/agents-toolkits/openapi_toolkit/#elitea-toolkit-guide-openapi-integration","text":"","title":"ELITEA Toolkit Guide: OpenAPI Integration"},{"location":"how-tos/agents-toolkits/openapi_toolkit/#introduction","text":"","title":"Introduction"},{"location":"how-tos/agents-toolkits/openapi_toolkit/#purpose-of-this-guide","text":"This guide is your comprehensive resource for integrating and effectively utilizing the OpenAPI toolkit within ELITEA. It provides a detailed, step-by-step walkthrough, from obtaining your OpenAPI specification file to configuring the toolkit in ELITEA and seamlessly incorporating it into your Agents. By following this guide, you will unlock the power of universal API integration, streamlined workflows, and enhanced data accessibility, all directly within the ELITEA platform. This integration empowers you to leverage AI-driven automation to interact with virtually any API, optimize data retrieval, and extend ELITEA's capabilities across diverse services.","title":"Purpose of this Guide"},{"location":"how-tos/agents-toolkits/openapi_toolkit/#brief-overview-of-openapi","text":"The OpenAPI Toolkit is a powerful toolkit of ELITEA, providing a universal interface for seamless integration with a vast range of APIs. By utilizing OpenAPI specifications, this toolkit allows ELITEA agents to understand and interact with diverse API endpoints, unlocking the potential to automate tasks and extend ELITEA's functionality across different platforms and services.","title":"Brief Overview of OpenAPI"},{"location":"how-tos/agents-toolkits/openapi_toolkit/#toolkit-data-setup-and-configuration","text":"","title":"Toolkit Data Setup and Configuration"},{"location":"how-tos/agents-toolkits/openapi_toolkit/#data-requirements","text":"To use the OpenAPI toolkit, you need an OpenAPI specification file in JSON format for the API you wish to integrate. Obtain OpenAPI Specification (JSON): Conversion from YAML (if needed): If you have a YAML OpenAPI specification, convert it to JSON format. You can use online tools like Swagger Editor or other OpenAPI specification converters. Validation: Ensure the JSON file is valid and adheres to OpenAPI specifications. This file defines the API's endpoints, parameters, request bodies, and security schemes, enabling ELITEA to understand how to interact with the API.","title":"Data Requirements"},{"location":"how-tos/agents-toolkits/openapi_toolkit/#important-considerations-for-openapi-specification","text":"Comprehensive Definition: The OpenAPI file should be as complete as possible, including descriptions, parameter types, required fields, and security schemes. This ensures the Large Language Model (LLM) powering ELITEA agents has sufficient information to construct correct API requests. Security Schemas: Properly define security schemes (API Key, OAuth, etc.) in your OpenAPI file. This is crucial for configuring authentication within ELITEA. Toolkit Limits: While the OpenAPI toolkit is powerful, extremely large OpenAPI definitions with hundreds of endpoints might encounter processing limitations. If you experience issues, consider using a more focused OpenAPI definition or contact support.","title":"Important Considerations for OpenAPI Specification"},{"location":"how-tos/agents-toolkits/openapi_toolkit/#integration-with-elitea","text":"","title":"Integration with ELITEA"},{"location":"how-tos/agents-toolkits/openapi_toolkit/#openapi-toolkit-configuration","text":"Navigate to Alitea Agents: Navigate to the Agents page within your ELITEA instance. Configure a New Agent (or Edit Existing): Create a new agent or modify an existing one. Define the Agent Name , Description , and relevant Instructions that guide the agent's behavior when using the OpenAPI toolkit. Select the appropriate Agent Type (e.g., consider an \"OpenAI Agent\" type for general API interaction, or a more specialized type if applicable within Alitea).","title":"OpenAPI Toolkit Configuration"},{"location":"how-tos/agents-toolkits/openapi_toolkit/#agent-instructions-guidance","text":"Clarity is Key: Provide clear and specific instructions to the agent. Instruct the agent on what API actions to perform and how to use the available tools (actions defined in your OpenAPI spec). Parameter Handling: If your API has specific requirements for parameter formats (e.g., numeric values as strings, specific date formats, required properties), explicitly mention these in the instructions. This helps the LLM generate valid requests. Example Instructions: ... 1. To create a new task, use the \"CreateTask\" tool. Ensure you include a 'title' and 'description' for the task. 2. To get details of a task, use the \"GetTaskById\" tool, providing the 'taskId' as input. 3. If the user asks to update a task, use the \"UpdateTask\" tool. You will need the 'taskId' and the fields to update (e.g., 'status', 'dueDate'). ..... rest of the instructions Create an OpenAPI Toolkit Tool: Within the Agent configuration, create a new tool and select the \"OpenAPI Toolkit\" type. Tool Configuration: Tool Name: Enter a descriptive name for your OpenAPI toolkit tool (e.g., \"Task Management API\", \"Pet Store API\"). Description (Schema): This is where you provide the OpenAPI specification: Copy and Paste: Copy the entire JSON content of your OpenAPI specification file and paste it into the \"Schema\" field. Drag and Drop: Drag and drop your OpenAPI JSON file directly into the \"Schema\" field. Choose File Link/Button: Click the \"Choose File\" button and select your OpenAPI JSON file from your local system. Actions Table Verification: Once a valid OpenAPI schema is provided, the \"Actions\" table below the schema field will be populated. This table lists all the API endpoints (actions) defined in your OpenAPI specification. Authentication Configuration: Navigate to the \"Authentication\" section of the toolkit configuration. Choose the appropriate authentication method based on your API's requirements: None: Select \"None\" if the API does not require authentication (rare for production APIs). API Key: API Key Field: Enter your API key directly or, for enhanced security, select \"From Secrets\" to reference a securely stored secret within Alitea. Auth Type: Choose the API Key authentication type from the dropdown: Basic Auth: For APIs using Basic Authentication. Bearer: For APIs using Bearer tokens (e.g., JWT). Custom Header: For APIs requiring an API key in a custom header. If selected, an additional field will appear to enter the Header Name (e.g., X-API-Key ). OAuth: Select \"OAuth\" if your API uses OAuth 2.0. You will need to fill in the OAuth-specific fields according to your API's OAuth configuration (e.g., Client ID, Client Secret, Token URL, Authorization URL, Scopes, Token exchange method). Consult your API's documentation for the required OAuth settings. Save Toolkit: Click the \"Save\" button to save the OpenAPI toolkit configuration.","title":"Agent Instructions Guidance"},{"location":"how-tos/agents-toolkits/openapi_toolkit/#tools-of-the-openapi-toolkit","text":"After successfully loading your OpenAPI specification, the \"Actions\" table displays the available API operations as \"tools\" that your ELITEA agent can utilize. Name: This column shows the name of each action, typically derived from the operationId in your OpenAPI specification. These names are how you refer to specific API endpoints in your agent instructions and user messages. Description: Provides a brief description of the action, taken from the description field of the corresponding operation in your OpenAPI specification. Method: Indicates the HTTP method (GET, POST, PUT, DELETE, etc.) for the API endpoint. Path: Shows the API endpoint path.","title":"Tools of the OpenAPI Toolkit"},{"location":"how-tos/agents-toolkits/openapi_toolkit/#using-actions-in-instructions-and-messages","text":"To instruct your agent to use a specific API endpoint, refer to the Name from the Actions table as a \"tool\" in your agent instructions or in user messages. Example: If the Actions table lists an action named \"AddPet\" (from a Pet Store API), you can instruct the agent like this: \"Use the AddPet tool to create a new pet with the following properties: ...\". The LLM will then identify the \"AddPet\" action from the OpenAPI toolkit and attempt to use the corresponding API endpoint based on the provided OpenAPI specification and your instructions.","title":"Using Actions in Instructions and Messages"},{"location":"how-tos/agents-toolkits/openapi_toolkit/#use-cases","text":"The use cases for the OpenAPI toolkit are virtually limitless, constrained only by the capabilities of the integrated API and the LLM's ability to interact with it. Here are some common use cases: Data Retrieval and Analysis: Scenario: Agents can fetch data from a wide range of external services like databases, CRM systems, weather APIs, financial APIs, and more. This retrieved data can then be analyzed, summarized, or used to generate reports within ELITEA. Tools Used: API actions (defined in your OpenAPI spec) that perform GET requests to retrieve data. Examples include actions to list records, get details, search data, etc. Example Instruction: \"Fetch the latest sales data from the CRM API using the 'getSalesData' tool and summarize the key trends for the past quarter.\" (Assuming 'getSalesData' is defined in your CRM API's OpenAPI spec). Benefit: Empowers agents to leverage external data sources for informed decision-making, insightful reporting, and data-driven task completion, enhancing the intelligence and utility of ELITEA workflows. Resource Management: Scenario: Agents can automate the creation, updating, and deletion of resources in external systems. This includes managing tasks in project management tools, customer records in CRM systems, controlling smart devices, and managing cloud infrastructure resources. Tools Used: API actions (defined in your OpenAPI spec) that perform POST, PUT, PATCH, and DELETE requests to manage resources. Examples include actions to create tasks, update records, start/stop services, etc. Example Instruction: \"Create a new task in the project management system using the 'createTask' tool with the following details: task name 'Implement User Authentication', project 'Project Alpha', due date 'Next Friday'.\" (Assuming 'createTask' is defined in your Project Management API's OpenAPI spec). Benefit: Streamlines operations by automating resource management tasks across various systems, reducing manual effort, improving efficiency, and ensuring consistent resource states. Workflow Automation and Orchestration: Scenario: Agents can orchestrate complex workflows by interacting with multiple APIs in a sequence. This allows for automating end-to-end processes that span across different services and platforms, creating powerful and integrated automation solutions. Tools Used: Combinations of API actions from different OpenAPI specifications or from a single OpenAPI spec with multiple related actions. Agents can use sequences of tool calls to perform multi-step workflows. Example Instruction: \"First, use the 'getNewOrders' tool from the Order Management API. Then, for each new order, use the 'updateInventory' tool from the Inventory API and the 'sendOrderConfirmationEmail' tool from the Email API.\" (Assuming these actions are defined in relevant OpenAPI specs). Benefit: Enables sophisticated automation of complex business processes by connecting different systems and automating multi-step workflows, significantly enhancing efficiency and reducing manual intervention. Reporting and Visualization Generation: Scenario: Agents can generate reports and visualizations based on data retrieved from APIs. This can involve creating summaries, charts, graphs, or dashboards using data from external services, potentially leveraging tools within ELITEA or external visualization services. Tools Used: API actions for data retrieval (GET requests), potentially combined with actions to trigger report generation or visualization creation in external services (if the API offers such actions). Agents might also use ELITEA's capabilities or external tools to process and visualize retrieved data. Example Instruction: \"Retrieve website traffic data for the last month using the 'getWebsiteTraffic' tool from the Analytics API. Generate a report summarizing the key metrics and create a chart visualizing the traffic trends.\" (Assuming 'getWebsiteTraffic' is defined in your Analytics API's OpenAPI spec, and ELITEA or external tools can handle report generation and visualization). Benefit: Transforms raw API data into actionable insights through automated report generation and visualization, providing users with clear and understandable summaries of complex information. Testing and Validation Automation: Scenario: Agents can interact with APIs to perform automated testing and validation of external systems. This can involve sending test requests, validating API responses against expected outcomes, and ensuring the reliability and functionality of external services. Tools Used: API actions for sending requests (GET, POST, PUT, DELETE) and actions for retrieving data to validate responses. Agents can use assertions and logic within ELITEA to perform validation checks. Example Instruction: \"Use the 'createAsset' tool from the User API to create a new test user. Then, use the 'getAsset' tool to get the asset.Validate if the asset details are ...\" (Assuming 'getAsset' and 'createAsset' are defined in your User API's OpenAPI spec). Benefit: Automates API smoke testing and validation processes, improving software quality, reducing manual testing effort, and ensuring the robustness and reliability of integrated systems.","title":"Use Cases"},{"location":"how-tos/agents-toolkits/openapi_toolkit/#troubleshooting-and-support","text":"","title":"Troubleshooting and Support"},{"location":"how-tos/agents-toolkits/openapi_toolkit/#troubleshooting","text":"\"Description of schema is required\" Error During Save: Problem: ELITEA displays a \"Description of schema is required\" error in red when attempting to save the OpenAPI Toolkit configuration. Troubleshooting Steps: Invalid JSON: The OpenAPI schema you pasted or uploaded is not valid JSON. Verify the JSON syntax using a JSON validator tool online. Missing Description (Misleading Error): While the error message suggests a missing description, it often indicates a more general parsing error due to an invalid OpenAPI structure. Double-check your OpenAPI JSON file against the OpenAPI specification standards. \"JSON Schema cannot be parsed\" Error During Tool Execution: Problem: When executing an agent that uses the OpenAPI toolkit, you receive an error message indicating \"JSON Schema cannot be parsed.\" Troubleshooting Steps: Invalid JSON (Again!): Even if the schema was initially accepted during toolkit creation, there might be subtle JSON errors that only surface during runtime parsing. Re-validate your JSON schema meticulously. YAML Instead of JSON: Ensure you are providing a JSON file, and not a YAML file. The ELITEA OpenAPI Toolkit primarily supports JSON. Authentication Errors (403 Forbidden, 401 Unauthorized): Problem: API requests consistently fail with \"403 Forbidden\" or \"401 Unauthorized\" errors. Troubleshooting Steps: Incorrect Credentials: Double-check your API key, OAuth tokens, or other authentication credentials. Ensure they are entered correctly in the toolkit configuration. Expired Tokens: OAuth tokens have expiration dates. Ensure your tokens are still valid and refresh them if necessary (depending on your OAuth flow). Incorrect Authentication Type: Verify that the authentication type configured in ELITEA (API Key, OAuth, etc.) precisely matches the API's authentication requirements as documented in the API's documentation and OpenAPI specification. Missing Headers: Some APIs require specific headers beyond basic authentication. Review the API documentation to see if you need to configure custom headers in ELITEA (Note: Custom header configuration for authentication might have limitations; contact support for advanced header needs). API Request Errors (400 Bad Request, 500 Internal Server Error, etc.): Problem: API requests are sent, but the API returns errors like \"400 Bad Request,\" \"500 Internal Server Error,\" or other HTTP error codes indicating issues with the request itself. Troubleshooting Steps: Incorrect Parameters/Request Body: The LLM might be generating API requests with incorrect parameters or request body formats. Thoroughly review the API documentation for the specific endpoint being used. Refine your agent instructions to explicitly guide the LLM to construct requests that precisely match the API's requirements (e.g., specify data types, required fields, allowed values, example values). API Service Issues: The external API itself might be temporarily experiencing issues, outages, or errors. Test the API endpoint directly using API testing tools like Postman or curl outside of ELITEA to isolate whether the problem originates from ELITEA's integration or the external API service. \"Definition contains too many actions (endpoints)\" Error: Problem: When attempting to execute a request, you receive an error message stating \"The definition contains too many actions (endpoints). Please reduce the amount of endpoints so that they can be able to handle them.\" Troubleshooting Steps: Reduce Endpoints in Schema: The ELITEA OpenAPI Toolkit has a limitation on the number of endpoints it can process within a single OpenAPI specification. Currently, this limit is 128 endpoints. Your OpenAPI definition exceeds this limit (e.g., your file contains 216 endpoints). You will need to reduce the number of endpoints in your OpenAPI specification. Create Focused Schemas: If possible, create smaller, more focused OpenAPI specifications that only include the specific API endpoints your agent needs to use for a particular workflow. Instead of using one large schema for an entire API, break it down into smaller schemas focused on specific functional areas. Contact Support for Large Schemas: If you have a legitimate need to use a very large OpenAPI schema and cannot reduce the endpoint count below the limit, contact ELITEA support to discuss potential solutions or optimizations. Unexpected or Empty Data from Agent: Problem: The integration appears to be working without errors, but the agent returns unexpected data, incomplete data, or empty responses when interacting with the API. Troubleshooting Steps: Incorrect Instructions: Carefully review your agent instructions. Are they sufficiently clear, precise, and detailed for the LLM to accurately understand which API actions to use and how to use them to achieve the desired data retrieval or action? Ambiguous instructions can lead to the LLM making incorrect API calls or misinterpreting API responses. API Behavior Verification: The external API itself might be returning empty or unexpected data, even for requests that are technically valid. Directly verify the API's behavior using tools like Postman by sending the same API requests that your agent intends to send. This helps determine if the issue lies with ELITEA's integration or the external API's response patterns. Parameter Data Type and Mismatches: Double-check that the parameters and data the LLM is providing to the API tools are of the exact data type, format, and structure that the API endpoint expects . Even subtle data type mismatches (e.g., sending a number as a string when the API expects an integer) can lead to API errors or unexpected responses. Refer to the API documentation for precise parameter requirements. \"Description is required\" Error During Agent Execution: Problem: When executing an agent that utilizes the OpenAPI toolkit, you encounter an error message indicating \"Action description is required.\" Troubleshooting Steps: Add Descriptions to OpenAPI Specification: This error indicates that your OpenAPI specification is missing descriptions for one or more API endpoints (actions). LLMs rely on these descriptions to understand the purpose and functionality of each API endpoint. Review OpenAPI Definition: Carefully review your OpenAPI specification file (JSON). Ensure that every endpoint (path and method combination) within your paths section has a description field provided within its operation definition (e.g., under get: , post: , etc.). Add Missing Descriptions: For any endpoint lacking a description , add a concise and informative description explaining what that API endpoint does. Update Toolkit Schema: After adding descriptions to your OpenAPI specification, re-upload or re-paste the updated schema into the OpenAPI Toolkit configuration within ELITEA and save the toolkit. Re-run Agent: Try executing your agent again after updating the OpenAPI schema with descriptions.","title":"Troubleshooting"},{"location":"how-tos/agents-toolkits/openapi_toolkit/#faqs","text":"Q: Can I use OpenAPI specifications in YAML or JSON format? A: The ELITEA OpenAPI Toolkit primarily supports OpenAPI specifications in JSON format . While YAML might be accepted in some limited cases, JSON is the recommended and most reliable format for optimal compatibility and parsing robustness within ELITEA. Q: How do I find the OpenAPI specification for an API? A: API providers often publish their OpenAPI specifications (also sometimes called Swagger files) within their API documentation. Look for sections typically labeled \"API Reference,\" \"Developer Documentation,\" or \"Integration Guides.\" The specification file is usually linked for download as a swagger.json , openapi.json , swagger.yaml , or openapi.yaml file. If the OpenAPI specification is not publicly available in the API documentation, you may need to request it directly from the API provider or generate it from the API's codebase if you have access to the API implementation. Q: How do I determine which \"action name\" to use in my agent instructions? A: The \"action names\" (tool names) presented in the OpenAPI Toolkit are automatically derived from the operationId values defined within your OpenAPI specification file. When you successfully upload and parse your OpenAPI schema into the toolkit, the \"Actions table\" in the toolkit configuration interface will populate, listing these action names. Use these names directly and precisely in your agent instructions to refer to specific API endpoints. If the operationId is not explicitly defined in the OpenAPI specification for a particular endpoint, the \"Name\" column in the Actions table might be empty or auto-generated based on the HTTP method and path.","title":"FAQs"},{"location":"how-tos/agents-toolkits/openapi_toolkit/#support-contact","text":"If you encounter persistent issues, have questions not covered in this guide, or require further assistance with the OpenAPI Toolkit or ELITEA Agents, please do not hesitate to contact the dedicated ELITEA Support Team. Email: SupportAlita@epam.com To ensure efficient and effective support, please include the following details in your support request: ELITEA Environment: (e.g., \"Nexus,\" \"Alita Lab,\" \"EYE\") Project Details: Project Name, Private or Team project. Detailed Issue Description: Provide a clear, concise, and detailed description of the problem you are encountering. Explain what you were trying to do, what you expected to happen, and what actually occurred. Relevant Configuration Information: Agent Instructions (Screenshot or Text): If the issue is related to an Agent, please provide a screenshot or copy the text of your Agent's \"Instructions\" field. OpenAPI Toolkit Configuration (Screenshots): If the issue involves the OpenAPI toolkit, please include screenshots of the toolkit configuration settings within your Agent, especially the \"Schema\" and \"Authentication\" sections. Error Messages (Full Error Text): If you are encountering an error message, please provide the complete error text. In the Chat window, expand the error details and copy the full error message. This detailed error information is crucial for diagnosis. Your Query/Prompt: If the issue is related to Agent execution, provide the exact query or prompt you used to trigger the issue. OpenAPI Specification (if applicable and safe to share): If you suspect the issue might be related to your OpenAPI schema itself, providing your OpenAPI specification file (or a sanitized version if it contains sensitive information) can be exceptionally helpful for diagnosing schema-related problems. Before Contacting Support: We encourage you to first explore the resources available within this guide and the broader ELITEA documentation. You may find answers to common questions or solutions to known issues in the documentation.","title":"Support Contact"},{"location":"how-tos/agents-toolkits/openapi_toolkit/#useful-links","text":"To further enhance your understanding and skills in using the OpenAPI Toolkit with ELITEA, here are some helpful external resources: OpenAPI Specification Official Website: https://swagger.io/specification/ - The official source for the OpenAPI Specification documentation, versions, and updates, providing in-depth information on the OpenAPI standard. Swagger Editor: https://editor.swagger.io/ - Swagger Editor is a valuable online tool for creating, validating, and visualizing OpenAPI specifications in both JSON and YAML formats. It's highly useful for crafting and debugging your OpenAPI schemas before integrating them into ELITEA. Swagger UI: https://swagger.io/tools/swagger-ui/ - Swagger UI is a powerful tool for visually exploring and interacting with APIs that are defined by OpenAPI specifications. It allows you to examine API endpoints, understand API structure, and even make test calls to APIs directly from your browser, aiding in API comprehension and testing.","title":"Useful Links"},{"location":"how-tos/agents-toolkits/pipeline-agent-framework/","text":"Pipeline Agent Framework User Guide for ELITEA Welcome to the Pipeline Agent Framework guide for ELITEA! This guide will help you understand how to create your own intelligent agents within ELITEA, even if you don't have a background in coding. Think of these agents as helpful assistants that can guide users through tasks, answer questions, and automate processes. The Pipeline Agent Framework is specifically designed for creating the instructions that your agents will follow. Pipeline Agents are based on the LangChain backend and work with Azure OpenAI Service integrations. Pipeline agents are designed for orchestrating the work of various entities together like prompts, agents, and datasources. This agent type must be selected when you are writing instructions for so-called 'master' agents. What is the Pipeline Agent Framework? Imagine you're building a process step-by-step. The Pipeline Agent Framework allows you to define these steps and how they connect in a clear and organized way. It's like creating a flowchart for your AI agent. You define individual actions (like asking a question or using a tool) and then connect them to create a smooth flow. This framework uses a simple configuration language YAML to define how your agent works. YAML is designed to be easy to read and understand, making it perfect for describing the steps your agent will take. You'll write instructions in YAML that tell ELITEA how your agent should behave. Core Concepts: The Building Blocks of Your Pipeline Agent Let's understand the key parts that make up your intelligent agent : State : Represents the agent's memory defined by user, storing information gathered and used throughout its execution. The state allows the agent to retain context and use previously acquired information in subsequent steps. It can include default information like messages (conversation history) and custom data defined by the user. Entry Point : Specifies the starting node of the agent's execution, defining where the agent begins its workflow. This is the initial step from which the agent's journey begins. Interruptions : Provide mechanisms to pause the agent's execution at specific points, allowing for user intervention or inspection. Interruptions can be set to occur before or after a particular node's execution. Nodes : The fundamental building blocks representing individual actions or steps the agent can take. These are the verbs of your agent's workflow, defining what the agent does at each stage. Different node types allow for various actions, such as interacting with the user, calling external tools, or performing specific functions. Transitions : Define the flow and connections between nodes, dictating the sequence of actions the agent follows. Transitions specify which node the agent should move to after completing the current node's task. They create the directed path through the agent's workflow. Conditions : Allow for conditional transitions between nodes, where the next step depends on whether a specific rule or condition is met. Conditions introduce logic into the agent's workflow, enabling it to react differently based on data or user input. Decisions : Enable the agent to make choices and branch its execution path based on available information or the outcome of a node. Decision points allow for more dynamic and intelligent agent behavior. The agent can evaluate different conditions and select the appropriate next step. State The state is the agent's memory, defined by you, the user. It stores information that the agent gathers and uses throughout its execution. The default state includes messages (the conversation history). You can also define custom states to store other relevant information. Data types for custom states: str , int , list , dict Important Note about Agent Memory (State): When you define the state for your Pipeline Agent, you'll encounter two important terms related to user input and conversation history: input and messages . It's crucial to understand the difference between them: input - The Latest User Message: Think of input as the agent's short-term memory of what the user just said or entered. It always holds the most recent message from the user. If the user types something new, the value of input is updated to reflect that new message. messages - The Entire Conversation History: messages , on the other hand, is like the agent's long-term memory of the entire conversation. It's a list that keeps track of every message exchanged between the user and the agent from the beginning of the interaction. This includes both the user's messages and the agent's responses. messages: list - Always Include in Custom State: If you define a state section in your agent's YAML instructions, you must always include messages: list within it. This is essential for your agent to properly track and maintain the conversation history. Without messages: list in your custom state , the agent will not be able to remember the ongoing conversation, which is crucial for most interactive agents. If you don't need to define any other custom state variables, you can simply omit the entire state section, and the agent will automatically use the default messages state. Example 1: State Definition state: jira_project_id: str epic_id: str us_title: str description: str input: str messages: list filtered_sumarized_info: str draft_us: str info_from_datasource: str enhanced_us: str Explanation: This state definition indicates that the agent will store information related to: jira_project_id : Jira project ID (string) epic_id : Epic ID (string) us_title : User story title (string) description : User story description (string) input : The latest user input (string) messages : The entire conversation history as a list of messages ( list ) filtered_sumarized_info : Summarized information (string) draft_us : Draft user story (string) info_from_datasource : Information from a data source (string) enhanced_us : Enhanced user story (string) Note : If you only need the default messages state, you can omit the state section entirely from your YAML instructions. Entry Point The entry_point is defined at the top level of your YAML instructions and specifies the id of the first node that will be executed when the agent starts. This node serves as the starting point of your agent's workflow and the beginning of its journey. Important Note: The entry_point can be any type of node , including llm , function , tool , loop , or loop_tool , depending on the desired starting behavior of your agent. Example 1: llm node as Entry Point entry_point: Conversation Partner nodes: - id: Conversation Partner type: llm input: [input] prompt: type: string value: | Hello! I am your User Story creation assistant. To get started, please tell me the Jira Project ID for your user story. output: [jira_project_id] transition: Get Epic ID # Define the next step after this node # ... rest of your agent's instructions ... Explanation: This entry_point: Conversation Partner definition tells the agent to start its execution from the llm node with the id \"Conversation Partner\". The YAML code snippet also shows the definition of the \"Conversation Partner\" node itself. As the first node, it's an llm type, designed to initiate the conversation by greeting the user and asking for the Jira Project ID. Example 2: function node as Entry Point entry_point: Data Initialization nodes: - id: Data Initialization type: function output: [current_date, system_version] input_mapping: # Assuming 'get_system_info' is a function that returns date and version function_call: type: fixed value: get_system_info transition: Main Workflow # Define the next step after this node # ... rest of your agent's instructions ... Explanation: In this example, entry_point: Data Initialization sets the starting node to be a function node named \"Data Initialization\". This node, defined as a function type, is designed to perform an initial setup task. Here, it's configured to call a hypothetical function get_system_info (via input_mapping) to retrieve the current date and system version and store them in the state as current_date and system_version. The agent then transitions to the \"Main Workflow\" node to begin the core logic. Example 3: loop node as Entry Point entry_point: Process Files nodes: - id: Process Files type: loop task: \"Generate a list of file paths from a predefined list: file1.txt, file2.txt, file3.txt. Format each as input: {\\\"file_path\\\": \\\"<file_path>\\\"}\" tool: FileProcessor # Assuming 'FileProcessor' is an agent or prompt to process files transition: END # End after processing all files # ... rest of your agent's instructions ... Explanation: Here, entry_point: Process Files designates a loop node named \"Process Files\" as the starting point. This example demonstrates starting the agent execution directly with a loop. The loop node is set up to process a predefined list of files. The task instruction defines how to create input for each file, and the tool: FileProcessor will be executed for each file in the list. After processing all files in the loop, the agent transitions to END, completing its execution. Note: These examples illustrate that the entry_point provides flexibility in defining how your Pipeline Agent begins its execution, allowing you to start with user interaction (llm), initial data processing (function), or even directly with a looping mechanism (loop). Interruptions Interruptions are optional attributes you can add at the top level of your YAML file to pause the agent's execution and give control back to the user at specific points during its workflow. This allows for manual review, adjustments, or user-driven decision-making within an automated agent process. You can define two types of interruptions : interrupt_before : Pauses the agent's execution immediately before a specific node is executed. This is useful when you want to review the inputs or confirm the action before the agent proceeds with a particular step. interrupt_after : Pauses the agent's execution immediately after a specific node has finished executing. This is helpful for reviewing the output of a node, providing feedback, or making decisions based on the results of that step before the agent continues to the next node. Key Features of Interruptions: Multiple Interruptions Allowed: You can define multiple interrupt_before and interrupt_after points within a single agent. This allows for fine-grained control and review at various stages of a complex workflow. Combined Interrupt Types: You can even use both interrupt_before and interrupt_after interruptions within the same agent. This provides maximum flexibility in designing review and control points in your agent's execution. Important Note: When you use interrupt_before or interrupt_after in your agent's instructions, it is crucial to ensure that your agent's logic still includes a clear path to the END node. This ensures that even with manual interruptions, the agent's execution can be logically completed and doesn't get stuck in a paused state indefinitely. Example 1: interrupt_before - Review before Content Aggregation entry_point: Conversation Partner interrupt_before: # Define interruptions at the top level - Unified Content Aggregator # Interrupt BEFORE 'Unified Content Aggregator' node nodes: # Node definitions - id: Conversation Partner type: llm # ... (rest of Conversation Partner node definition) transition: Unified Content Aggregator - id: Unified Content Aggregator # Interruption will occur BEFORE this node starts type: function # ... (rest of Unified Content Aggregator node definition) transition: Draft User Story Creator # ... rest of your agent's instructions ... Explanation: In this example, interrupt_before: - Unified Content Aggregator is defined at the top level. This means that before the agent starts executing the Unified Content Aggregator node (identified by id: Unified Content Aggregator within the nodes section), the execution will pause, and control will be given back to the user. The user can then review the current state of the agent, potentially make adjustments, and then manually resume the agent's execution. Example 2: interrupt_after - Review User Feedback entry_point: Conversation Partner interrupt_after: # Define interruptions at the top level - Conversation Partner # Interrupt AFTER 'Conversation Partner' node nodes: # Node definitions - id: Conversation Partner # Interruption will occur AFTER this node finishes type: llm # ... (rest of Conversation Partner node definition) transition: Unified Content Aggregator - id: Unified Content Aggregator type: function # ... (rest of Unified Content Aggregator node definition) transition: Draft User Story Creator # ... rest of your agent's instructions ... Explanation: Here, interrupt_after: - Conversation Partner is defined. This will cause the agent to pause immediately after it has finished executing the Conversation Partner node. After the \"Conversation Partner\" node completes its task (likely interacting with the user), the agent will pause, allowing the user to review the interaction, the agent's response, and the updated state before the agent proceeds to the \"Unified Content Aggregator\" node. Example 3: Using Both interrupt_before and interrupt_after entry_point: Conversation Partner interrupt_before: # Define 'interrupt_before' - User Story Publisher # Interrupt BEFORE 'User Story Publisher' interrupt_after: # Define 'interrupt_after' - User Feedback and Approval # Interrupt AFTER 'User Feedback and Approval' nodes: # Node definitions - id: Conversation Partner type: llm # ... (rest of Conversation Partner node definition) transition: User Feedback and Approval - id: User Feedback and Approval # Interruption will occur AFTER this node finishes type: llm # ... (rest of User Feedback and Approval node definition) transition: User Story Publisher - id: User Story Publisher # Interruption will occur BEFORE this node starts type: function # ... (rest of User Story Publisher node definition) transition: END Explanation: This example demonstrates using both types of interruptions in a single agent. interrupt_after: - User Feedback and Approval : The agent will pause after the \"User Feedback and Approval\" node, allowing review of user feedback and the enhanced user story. interrupt_before: - User Story Publisher : The agent will pause before the \"User Story Publisher\" node, allowing a final check before the user story is published to Jira. By strategically placing interrupt_before and interrupt_after points, you can create Pipeline Agents that offer a balance between automation and user control, ensuring critical steps are reviewed and validated as needed. Nodes Nodes are the individual actions or steps your agent can take. Each node performs a specific task. Think of them as verbs \u2013 what your agent does . The following Node types are available: llm : Enables the agent to interact with users using natural language, powered by AI models. Used for asking questions, providing information, and engaging in conversational exchanges. tool : Allows the agent to utilize pre-built entities (prompts, agents and datasources) in ELITEA. Facilitates actions like retrieving data, triggering other agents, or using specific prompts and datasources. function : Provides a mechanism for the agent to directly call and execute specific ELITEA functionalities with precise control over input mapping. Offers a more advanced and potentially efficient way to interact with ELITEA's internal capabilities. loop : Enables the agent to repeatedly execute a specific task or action, often iterating over a list of items or until a condition is met. Useful for processing collections of data or performing repetitive operations. loop_tool : Allows the agent to iterate through a list of inputs generated by another ELITEA agent, executing a specified tool or function for each item. Facilitates workflows where the input for a repetitive task is dynamically generated by another entity. Common Node Attributes Nodes have the following common attributes: id : A unique name for this specific step. This helps you refer to this node later in your instructions for transitions, conditions, or decisions. type : Specifies the kind of action this node will perform (e.g., llm , tool , function , loop , loop_tool ). input (optional) : A list of information the node needs to perform its task. This information is retrieved from the agent's state . output (optional) : A list of names for the information the node produces after completing its task. This information is then stored back in the agent's state and can be used by subsequent nodes. transition : Specifies the id of the next node the agent should move to after this node is finished. If the value is END , the agent's execution will stop, logically completing the agent's workflow. condition (optional) : Allows the agent to conditionally transition to different nodes based on specific rules defined using Jinja2 templating. decision (optional) : Allows the agent to choose the next node from a predefined list based on available information or the result of the current node's action. Node types in Detail Here are the different types of nodes you can use to build your agent, with detailed explanations and examples: Node type: llm The llm node allows your agent to communicate with the user using the power of Large Language Models (LLMs). You provide a prompt (a question or instruction), and the LLM generates a response. Purpose: To engage in natural language interactions with the user, such as: Asking questions to gather information. Providing information or explanations. Getting user feedback or approval. Common Attributes for llm Nodes: id : A unique name for this llm node (e.g., Conversation Partner , User Feedback ). type : Always set this to llm . prompt : Defines the instruction or question for the LLM. type : Specifies the format of the prompt. Must be either string or fstring . string : A simple text prompt without any variables. fstring : A formatted string prompt that includes variables from the agent's state within the instructions. value : The actual text of the question or instruction. Use | to define multiline prompts. input (optional) : A list of state variables that the prompt might need. For Entry Point llm Nodes: If this llm node is the entry_point of your agent, input: [input] is valid and refers to the initial user input. For Subsequent llm Nodes: input can include any state variables that have been populated as output variables in previous nodes (e.g., input: [input1, input2, messages] ). If using fstring prompts, input becomes mandatory to list the variables used in the prompt. output (optional) : A list of names for the information you expect to extract from the LLM's response. This information will be stored back in the agent's state and can be used by subsequent nodes. Example: output: [description, jira_project_id, epic_id, us_title] structured_output (optional) : Set to true if you expect the LLM's response to be in a structured format (like JSON) that makes it easier to extract the output values. Defaults to false . The effectiveness of structured_output: true depends on the capabilities of the selected LLM model. messages : This attribute is implicitly managed by the framework and represents the 'chat_history'. You don't need to define it explicitly in input or output unless you want to explicitly pass the entire chat history as input to the prompt for context. Example 1: llm node - Simple Text Prompt - id: Conversation Partner type: llm input: [input] # Optional, but included here as the prompt refers to user input (entry point node) prompt: type: string value: | To create a new User Story, I need some information from you. Could you please provide the following details in the specified format? - **Jira Project ID**: (e.g., PLAN) - **EPIC ID**: (e.g., PLAN-128) - **Title**: (e.g., Checkout functionality) - **Description**: (e.g., \"The informative description of future US.\") Once you provide this information, I will ask for your approval (should be 'approved' word) to start the User Story creation process. Make your instructions to user highlighted by using markdown highlight for text. output: [description, jira_project_id, epic_id, us_title] structured_output: true transition: Confluence Extractor # Define the next step here Explanation: id: Conversation Partner : Names this node \"Conversation Partner\". type: llm : Specifies that this is an llm node. input: [input] : Takes the user's initial input as input to the prompt (valid for entry point node). prompt : type: string : Indicates a simple text prompt. value : The actual instruction for the LLM, asking the user for user story details. output: [description, jira_project_id, epic_id, us_title] : Specifies that the agent expects to extract these pieces of information from the user's response and store them in the state . structured_output: true : Indicates that the agent expects a structured response to facilitate information extraction. Example 2: llm node - Parametrized Prompt ( fstring ) - id: User Feedback and Approval type: llm input: [input, enhanced_us, info_from_datasource] # Mandatory because of fstring prompt output: [enhanced_us] # Mandatory because of fstring prompt prompt: type: fstring value: | When reviewing and updating a user story, ensure its structure and format remain consistent with the original, unless the user specifically requests changes. Present the updated user story in its entirety, enriched with any necessary information, clearly and concisely for user feedback. Use the following variables to guide the process: - **Current User Input:** {input} - **Information from Data Source:** {info_from_datasource} - **Enhanced User Story:** {enhanced_us} Users can provide feedback through free form queries, which will be controlled by the \"Current User Input\" value. If the query contains \"datasource:\", access and incorporate specific data from the identified sources into the enhanced user story via \"Information from Data Source\". Present the full \"Enhanced User Story\" to the user, ensuring that the structure and format remain unchanged. Approval of the enhanced user story can be given by typing \"approved,\" which will publish it to Jira. If no further changes or publication is desired, the user can type \"finish\" to conclude the session. transition: User Story Publisher # Define the next step here Explanation: id: User Feedback and Approval : Names this node \"User Feedback and Approval\". type: llm : Specifies that this is an llm node. input: [input, enhanced_us, info_from_datasource] : Mandatory because the prompt is an fstring and uses these variables. It takes the user's current input, the enhanced user story, and information from a data source from the agent's state . prompt : type: fstring : Indicates a formatted string prompt using variables. value : The instruction for the LLM, using placeholders like {input} , {info_from_datasource} , and {enhanced_us} to insert values from the agent's state . output: [enhanced_us] : Mandatory because the prompt is an fstring . Specifies that the agent expects the LLM to potentially modify or confirm the enhanced_us . Node type: tool The tool node allows your agent to utilize pre-built entities within ELITEA, specifically: prompts, agents, and datasources. The tool node is a simpler way to use these entities compared to the function node, but it might be less efficient in terms of token usage and expensive. Purpose: To leverage existing ELITEA entities to perform specific tasks, such as: Executing a pre-defined prompt. Triggering another ELITEA agent. Querying a datasource to retrieve information. Common Attributes for tool nodes: id : A unique name for this tool node (e.g., Draft User Story Creator , Data Retriever ). type : Always set this to tool . tool : The name of the specific ELITEA entity (prompt, agent, or datasource) you want to use. input (optional) : A list of state variables that might be used as input for the tool. output (optional) : A list of names for the information expected as output from the tool. structured_output (optional) : Indicates if the tool's output is expected to be structured. Defaults to false . transition : The id of the next node to execute after the tool finishes. Example 1: tool node - Using a Prompt - id: Draft User Story Creator type: tool tool: User Story Draft Prompt # Assuming 'User Story Draft Prompt' is a defined prompt in ELITEA transition: User Story Enhance Aggregator Explanation: id: Draft User Story Creator : Names this node \"Draft User Story Creator\". type: tool : Specifies that this is a tool node. tool: User Story Draft Prompt : Specifies that this node will use the ELITEA prompt named \"User Story Draft Prompt\". transition: User Story Enhance Aggregator : Defines the next node to be \"User Story Enhance Aggregator\". Important Note: When using a tool node, the framework will use an LLM in the background to prepare the input data for the specified tool. This can increase token usage and potentially make the execution slower compared to using a function node with explicit input mapping. Node type: function The function node provides a more advanced and efficient way to interact with ELITEA entities (prompts, agents, datasources, and other functionalities). It allows you to directly call and execute specific ELITEA functionalities, but requires you to explicitly define how the inputs for that functionality are prepared using input_mapping . This explicit control over input mapping can lead to better token efficiency and faster execution compared to the tool node. Purpose: To directly utilize specific ELITEA functionalities with precise control over input preparation. Common Attributes for function nodes: id : A unique name for this function node (e.g., Summarize User Story , Publish to Jira ). type : Always set this to function . input : A list of state variables that will be used to prepare the input for the ELITEA entity. This is mandatory. output : A list of names for the information that will be returned by the ELITEA entity. This is mandatory. input_mapping : Defines how the input variables from the agent's state are mapped to the input parameters of the ELITEA entity being called. For Agent as Function: If calling an ELITEA agent as a function node, input_mapping typically includes: input_mapping : task : # 'task' is a common input parameter for agents type : # variable, fstring, string, fixed value : # state variable, formatted string, text, constant value chat_history : # 'chat_history' is another common input parameter for agents type : # variable, fixed value : # 'messages' state variable, [] for empty history task : Represents the main instruction or task for the agent being called. type: string : Provides instructions directly as a string without using state variables. type: fstring : Provides parametrized instructions using variables from the agent's state . type: variable : Uses the value of a state variable as the task instruction. type: fixed : Uses a constant, hardcoded value as the task instruction. chat_history : Defines how chat history is passed to the agent being called. type: fixed : value: [] - Passes an empty chat history, effectively starting a new conversation with the child agent. type: variable : value: messages - Passes the entire current chat history to the child agent. For Prompt as Function: If calling an ELITEA prompt as a function node, input_mapping might look like: yaml input_mapping: input: # 'input' is a common input parameter for prompts (for prompts without variables) type: variable value: <state_variable_name> # The state variable containing the input for the prompt variable_name: # 'variable_name' - Use this if the prompt has variables, replace 'variable_name' with the actual variable name in the prompt type: variable value: <state_variable_name> # The state variable providing value for the prompt's variable input : Used when calling a prompt that doesn't use variables in its instructions. type: variable : Uses a state variable as input to the prompt. variable_name : Used when calling a prompt that does use variables in its instructions. Replace variable_name with the actual name of the variable used in the prompt. type: variable : Uses a state variable to provide the value for the prompt's variable. type: fixed : Uses a fixed, constant value for the prompt's variable. Useful when a variable's value is not crucial and can be a default value (e.g., \"n/a\"). For Datasource as Function: If calling an ELITEA datasource as a function node, input_mapping typically includes: yaml input_mapping: query: # 'query' is a common input parameter for datasources type: <type> # variable, string, fstring, fixed value: <value> # state variable, formatted query string, query text, constant query query : Defines the query to be executed against the datasource. type: variable : Uses a state variable as the query. type: string : Provides the query directly as a string. type: fstring : Creates a dynamic query using variables from the agent's state . type: fixed : Uses a constant, hardcoded query. Important Note: When using a datasource as a function node, remember to specify the correct tool name in your YAML instructions. Use [ToolNamewithoutspacesPredict] for prediction datasources and [ToolNamewithoutspacesSearch] for search datasources (replace ToolNamewithoutspaces with the actual tool name without spaces). transition : The id of the next node to execute after the function call. Example 1: function node - Calling an Agent (variable input mapping) - id: Draft User Story Creator type: function input: [filtered_sumarized_info] output: [draft_us] input_mapping: task: # Input mapping for 'task' parameter of the agent type: variable value: filtered_sumarized_info # Use 'filtered_sumarized_info' state variable as task transition: User Story Enhance Aggregator Explanation: input_mapping: task : Maps the input for the task parameter of the agent being called. type: variable : Specifies that the value for task will be taken from a state variable. value: filtered_sumarized_info : Indicates that the value of the filtered_sumarized_info state variable will be used as the task . Example 2: function node - Calling an Agent ( fstring input mapping) - id: User Story Enhance Aggregator input: [draft_us] output: [enhanced_us] input_mapping: task: # Input mapping for 'task' parameter of the agent type: fstring value: | Enhance the Narrative, Description and Scenarios with AC's for the given draft User Story: {draft_us} # Formatted task instruction chat_history: # Input mapping for 'chat_history' parameter of the agent type: fixed value: [] # Use empty chat history type: function transition: User Feedback and Approval Explanation: input_mapping: task : Maps the input for the task parameter of the agent being called. type: fstring : Specifies that the value for task will be created using a formatted string. value : Defines the formatted string instruction, including the {draft_us} variable from the agent's state . input_mapping: chat_history : Maps the input for the chat_history parameter. type: fixed : Specifies a fixed value for chat_history . value: [] : Sets the chat_history to an empty list, meaning the child agent will start with no prior conversation history. Node type: loop The loop node allows you to execute a specific task repeatedly, creating a loop within your agent's workflow. You define instructions on how to create the input for each iteration of the loop. Purpose: To perform the same action multiple times, typically for each item in a list or until a certain condition is met. Useful for: Processing a list of items (e.g., files, user stories). Repeating an action until a desired outcome is achieved. Common Attributes for loop nodes: id : A unique name for this loop node (e.g., Documentor , Process User Stories ). type : Always set this to loop . task : (Mandatory) Instructions on how to formulate the input for each iteration of the loop. This is usually a text instruction that tells the agent how to extract or create input data from the current state or chat_history . tool : The name of the ELITEA entity (agent, prompt, or other tool) that will be executed in each iteration of the loop. Recommendation: Use an ELITEA agent as the tool for more complex loop logic. input (optional) : A list of state variables that might be used as input for the llm node (if an LLM is used internally to prepare loop inputs based on the task instruction). Providing input can be more token-efficient than relying solely on chat_history . output (optional) : A list of names for the information produced by the entire loop node after all iterations are complete. If you want to collect and use the results of all loop iterations in subsequent nodes, define output . transition : The id of the next node to execute after the loop finishes all iterations. Example 1: loop node - Documenting Code Files - id: Documentor type: loop task: \"Formulate ALL file paths from chat_history as a list of inputs.\" tool: Code Documentation # Assuming 'Code Documentation' is a defined prompt or agent in ELITEA transition: END Explanation: task : Provides instructions to the agent on how to create input for each loop iteration. In this case, it instructs the agent to: Extract all file paths mentioned in the chat_history . Format each file path into a dictionary with keys \"task\" (containing the file path) and \"chat_history\" (containing the entire chat_history ). tool: Code Documentation : Specifies that in each iteration of the loop, the ELITEA entity named \"Code Documentation\" will be executed. This could be an agent or a prompt designed to generate documentation for a given file path. Node type: loop_tool The loop_tool node is a more advanced loop type that gets the list of inputs for the loop from the output of another ELITEA entity (typically an agent). This is useful when you need to dynamically generate the items to be processed in the loop. Purpose: To iterate through a list of items generated by another ELITEA entity and perform a specific action on each item. Common Attributes for loop_tool nodes: id : A unique name for this loop_tool node (e.g., Process Pages , Generate Documentation ). type : Always set this to loop_tool . tool : The name of the ELITEA entity (agent, prompt, or datasource) that will be executed first to generate the list of inputs for the loop. loop_tool : The name of the ELITEA entity (agent, prompt, or other tool) that will be executed for each item in the list generated by the tool . Recommendation: Use an ELITEA agent as the loop_tool for more complex processing within the loop. variables_mapping : (Mandatory) Defines how to map the variables from the output of the tool (which generates the input list) to the required input parameters of the loop_tool (which processes each item in the list). For Agent loop_tool : If the loop_tool is an agent, variables_mapping typically includes mapping to task and chat_history input parameters of the agent. For Other loop_tool Types : If the loop_tool is a prompt or another type of tool, you need to map the output variables of the tool to the input parameters expected by the specific loop_tool . Refer to the documentation of the loop_tool to understand its required input parameters. input (optional) : A list of state variables that might be needed as input for the tool (the entity that generates the input list). output (optional) : A list of names for the information produced by the loop_tool in each iteration. structured_output (optional) : Indicates whether the output of the loop_tool is expected to be structured. Defaults to false . Example 1: loop_tool node - Processing Confluence Pages - id: listpages type: loop_tool tool: list_pages_with_label # Assuming 'list_pages_with_label' is a Confluence toolkit's tool that returns a list of pages structured_output: true # Expect structured output from 'list_pages_with_label' loop_tool: Confluence helper # Assuming 'Confluence helper' is an ELITEA agent to process each Confluence page variables_mapping: id: task # Map 'id' output variable from 'list_pages_with_label' to 'task' input of 'Confluence helper' messages: chat_history # Map 'messages' (likely page content) to 'chat_history' input of 'Confluence helper' transition: END Example 2: loop_tool node - Documenting Files from Directory - id: Documentor type: loop_tool tool: alita-sdk_get_files_from_directory # Assuming 'get_files_from_directory' is an GitHub tolkit's tool to get files from a 'alita-sdk' github repositary variables_mapping: file_path: task # Map 'file_path' output variable from 'alita-sdk_get_files_from_directory' to 'task' input of 'Code Documentation' messages: chat_history # Map 'messages' to 'chat_history' input of 'Code Documentation' structured_output: true # Expect structured output from 'alita-sdk_get_files_from_directory' loop_tool: Code Documentation # Assuming 'Code Documentation' is an ELITEA agent to document each file transition: END Transitions Transitions are the connections that define how your agent moves from one node to the next, establishing the sequential flow of its workflow. They dictate the order in which your agent performs actions. Within each node definition in your YAML instructions, the transition attribute is used to specify what happens after the current node finishes its execution. You use the transition attribute to tell the agent which node to go to next or to end the agent's execution. There are two primary ways to use the transition attribute: transition: <node_id> : This is used to move the agent's execution to another node within your pipeline. You replace <node_id> with the id of the node you want the agent to execute next. This creates a link in your workflow, connecting one step to another. transition: END : This special value signifies the logical end of your agent's workflow. When a node's transition is set to END , it indicates that after this node completes, the agent's execution should stop gracefully. It is crucial to ensure that all logical paths in your agent's instructions eventually lead to a node with transition: END to prevent unexpected behavior or potential issues with chat history management. Example 1: Transitioning between llm and function nodes nodes: - id: Get User Input # Define an 'llm' node to get user input type: llm prompt: type: string value: \"Please enter the Epic ID for the User Story you want to create.\" output: [epic_id] transition: Extract Epic Details # Transition to 'Extract Epic Details' node after getting user input - id: Extract Epic Details # Define a 'function' node to process the Epic ID type: function input: [epic_id] output: [filtered_epic_info] input_mapping: task: type: fstring value: \"Extract key details for Epic ID: {epic_id}\" chat_history: type: fixed value: [] transition: Draft User Story Creator # Transition to 'Draft User Story Creator' node after extracting details - id: Draft User Story Creator type: function # ... (rest of Draft User Story Creator node definition) ... transition: END # End agent execution after Draft User Story Creator completes Explanation: In this example, we see transitions connecting three nodes: Get User Input (llm node): After the agent gets the epic_id from the user, the transition: Extract Epic Details line ensures that the agent will next execute the node with the id \"Extract Epic Details\". Extract Epic Details (function node): Once the \"Extract Epic Details\" node finishes processing the epic_id , the transition: Draft User Story Creator line directs the agent to the \"Draft User Story Creator\" node. Draft User Story Creator (function node): Finally, after the \"Draft User Story Creator\" node completes its task, the transition: END line signals that this is the end of the workflow, and the agent's execution should terminate. Example 2: Linear Transition with tool node and END nodes: - id: Search Datasource # Define a 'tool' node to search a datasource type: tool tool: MyDatasourceSearch # Assuming 'MyDatasourceSearch' is a defined datasource tool in ELITEA input: [user_query] output: [search_results] transition: Display Results # Transition to 'Display Results' node after searching - id: Display Results # Define an 'llm' node to display search results to the user type: llm input: [search_results] prompt: type: fstring value: \"Here are the search results I found: {search_results}\" transition: END # End agent execution after displaying results Explanation: This example demonstrates a simpler linear flow: Search Datasource (tool node): After the tool node, which searches a datasource, completes its search and retrieves search_results , the transition: Display Results line ensures the agent moves to the \"Display Results\" node. Display Results (llm node): Once the \"Display Results\" node has presented the search_results to the user, the transition: END line is used to terminate the agent's execution, as this is the final step in this particular workflow. These examples illustrate how the transition attribute is fundamental for defining the sequential flow of actions within your Pipeline Agent, allowing you to create workflows that move from one node to the next in a controlled and logical manner, ultimately leading to the desired END state. Conditions The condition attribute allows a node to conditionally transition to different next nodes based on whether a specific rule or condition evaluates to true or false. Conditions are defined using Jinja2 templating language, providing powerful logic capabilities within your agent workflow. Common Attributes for condition : condition : Indicates that the transition from this node is conditional. condition_input : (Optional, but strongly recommended) A list of state variables that will be used as input to evaluate the condition. Providing condition_input makes your conditions more readable and efficient by limiting the scope of data Jinja2 needs to access. If omitted, Jinja2 might have access to the entire state or even chat_history , potentially increasing processing overhead. condition_definition : (Mandatory) The actual rule or condition to be evaluated, written using Jinja2 templating syntax. Jinja2 Templating in condition_definition : Use {% if <condition> %} to start a conditional block. Use {% elif <condition> %} for \"else if\" conditions (optional, you can have multiple elif blocks). Use {% else %} for the \"else\" case (optional). Use {% endif %} to close the conditional block. Within the Jinja2 template, you can access state variables listed in condition_input or, if condition_input is omitted, potentially access the entire state or messages . Use Jinja2 filters like |lower to modify data (e.g., input|lower converts user input to lowercase for case-insensitive comparisons). Example 1: condition within an llm node - User Approval Check - id: Get User Story Details type: llm input: [input] prompt: type: string value: \"Please provide the description, Jira Project ID, EPIC ID, and User Story Title.\" output: [description, jira_project_id, epic_id, us_title] structured_output: true condition: condition_input: [description, jira_project_id, epic_id, us_title, input] # Input variables for condition condition_definition: | {% if 'approved' in input|lower and description and jira_project_id and epic_id and us_title %} # Condition logic using Jinja2 Unified Content Aggregator # Node to transition to if condition is true {% else %} Conversation Partner # Node to transition to if condition is false {% endif %} Explanation: condition_input: [description, jira_project_id, epic_id, us_title, input] : Specifies that these state variables will be used in the condition evaluation. condition_definition : Defines the condition using Jinja2: {% if 'approved' in input|lower and description and jira_project_id and epic_id and us_title %} : Checks if the user's input (converted to lowercase) contains \"approved\" AND if description , jira_project_id , epic_id , and us_title state variables have values (are not empty). If the condition is true, the agent transitions to the node with id: Unified Content Aggregator . {% else %} : If the condition is false. The agent transitions to the node with id: Conversation Partner . {% endif %} : Closes the conditional block. Example 2: condition with elif - Multiple Conditional Branches condition: condition_input: [input] condition_definition: | {% if 'approved' in input|lower %} User Story Publisher # Transition to 'User Story Publisher' if user types 'approved' {% elif 'datasource:' in input|lower %} Special # Transition to 'Special' if user types 'datasource:' {% elif 'finish' in input|lower %} END # Transition to 'END' if user types 'finish' {% else %} User Feedback and Approval # Default transition if none of the above conditions are met {% endif %} Explanation: This example demonstrates using elif to create multiple conditional branches based on user input. The agent checks for different keywords in the input and transitions to different nodes accordingly. Decisions The decision attribute empowers a node to act as a branching point in your agent's workflow. It allows the agent to dynamically choose which node to execute next from a set of predefined options, based on the information it has gathered or the outcome of its current action. This introduces intelligent branching and conditional paths into your agent's behavior, making it more flexible and responsive. Common Attributes for decision : decision : This is the main attribute that signals that a node will make a decision about the next step in the workflow. It's a container for the decision-making configuration. nodes : (Mandatory) This is a list of node id s representing the possible nodes that the agent can transition to from this decision point. These are the potential \"next steps\" the agent can take. You must list at least one node ID here. description : (Optional) A brief textual explanation of the decision being made at this point. This is purely for documentation purposes and helps in understanding the agent's logic, especially in complex workflows. It's good practice to include a description for clarity. decisional_inputs : (Optional, but strongly recommended) A list of state variables that will be used as input for the decision-making process . These are the pieces of information the agent will consider when choosing the next node. While technically optional in the YAML structure, providing decisional_inputs is highly recommended for making your decision logic clear, maintainable, and efficient. It explicitly tells the agent what information to focus on when making the decision. default_output : (Mandatory) The id of the node to transition to if none of the specific decision conditions are met (or if the decision logic cannot determine a specific next node). This acts as a fallback path , ensuring that the agent always has a direction to proceed, even if the decision criteria are not explicitly satisfied. You must provide a valid node id as the default_output . Example 1: decision within an llm node - Handling User Feedback - id: User Feedback type: llm input: [enhanced_us, input] prompt: type: fstring value: | Please review the enhanced user story: --- {enhanced_us} --- Provide your feedback. Type \"Publish\" to publish the story, \"Edit\" to request changes, or \"Finish\" to end. output: [user_feedback] decision: nodes: [\"Publish Story\", \"Request Clarification\", \"END\", \"User Feedback\"] # Possible next nodes (including looping back to itself) description: \"Decide next step based on user feedback keywords: Publish, Edit, Finish.\" # Description of the decision decisional_inputs: [\"input\"] # Input for decision making: user's latest input default_output: \"User Feedback\" # Default: loop back to 'User Feedback' if input doesn't match keywords Explanation: In this enhanced example, the decision attribute is used within the \"User Feedback\" llm node to determine the agent's next action based on the user's response to the user story review prompt. nodes: [\"Publish Story\", \"Request Clarification\", \"END\", \"User Feedback\"] : This list defines the possible nodes the agent can transition to: \"Publish Story\" : To publish the user story. \"Request Clarification\" : To ask the user for more details or clarification if they request edits. \"END\" : To terminate the agent's execution if the user is finished. \"User Feedback\" : Importantly, it also includes the node itself ( \"User Feedback\" ). This allows the agent to loop back to the same node if the user's input doesn't clearly indicate one of the other options. description: \"Decide next step based on user feedback keywords: Publish, Edit, Finish.\" : This provides a human-readable description of the decision logic, stating that the agent will look for keywords in the user's feedback to decide the next step. decisional_inputs: [\"input\"] : This specifies that the decision will be based on the input state variable, which holds the user's latest message (their feedback in this case). default_output: \"User Feedback\" : This is the fallback option. If the agent's decision logic (defined in the background code, not in YAML) cannot clearly determine if the user wants to \"Publish\", \"Edit\", or \"Finish\" based on their input , the agent will default to transitioning back to the \"User Feedback\" node itself. This effectively re-prompts the user for clearer instructions, ensuring the agent doesn't get stuck or proceed incorrectly if the user input is ambiguous. In summary, the decision attribute provides a powerful mechanism for creating dynamic and intelligent agents that can adapt their workflow based on user input, data analysis, or the outcomes of previous steps. By carefully defining the nodes , decisional_inputs , and default_output , you can build agents that make informed choices and follow branching paths to achieve complex goals. Creating Your First Pipeline Agent in ELITEA Ready to build your own agent? Here's a step-by-step instructions to creating a Pipeline Agent in ELITEA: Start a New Agent: Look for the \"+ Agent\" button, located in the top right corner of the ELITEA interface. Click this button to begin creating a new agent. This action will open the Configuration tab for your new agent, where you'll define its settings and behavior. Name and Describe Your Agent: In the Configuration tab, you'll see fields for Name and Description . Name: Give your agent a clear and descriptive name. This name will help you easily identify your agent in ELITEA. For example, \"User Story Creator\" or \"Code Documentor\". Description: Write a brief description of what your agent does. This helps you and others understand the agent's purpose at a glance. For example, \"Agent to guide users through creating user stories in Jira.\" Add Tags (Optional): The Tags input box allows you to categorize your agent using keywords or labels. You can either type in a new tag name and press Enter, or select from a list of tags you've used before. Tags are helpful for organizing and searching for your agents later, especially if you create many of them. Choose the Agent Type: Locate the Agent type dropdown menu in the Configuration tab. Select \"Pipeline\" from the dropdown. This tells ELITEA that you want to create a Pipeline Agent, which uses the YAML-based framework we're discussing in this guide. Provide YAML Instructions: This is the heart of creating a Pipeline Agent! In the Instructions field, you will write the YAML code that defines your agent's workflow. Refer to the previous sections of this guide to understand how to write YAML instructions, define nodes, transitions, conditions, and more. Important: Make sure your YAML is correctly formatted, especially the indentation. You can use the YAML Indentation Corrector prompt mentioned in the Troubleshooting section if needed. Add and Set Up Toolkits: Scroll down to the Toolkits section in the agent configuration. Toolkits provide your agent with access to various functionalities within ELITEA. Click \"Add Toolkit\" and choose the toolkits your agent needs to perform its tasks. For example, you might need a Jira toolkit to interact with Jira, or a data source toolkit to access external information. Remember to add all agents, datasources and prompts involved in the YAML instructions, as well as other toolkits (if required). After adding a toolkit, you may need to configure it. This might involve, selecting correct version of the toolkit (agent, prompt), selecting corresponding tool (datasource) providing API keys, connection details, or other settings specific to the toolkit. Follow the instructions provided for each toolkit you add. Configure Conversation Starter and Welcome Message (Optional): These optional settings allow you to customize the initial interaction with your agent. Conversation Starter: This is a predefined set of questions or prompts that are suggested to the user when they first start a conversation with your agent. It can help guide users on how to interact with the agent. Welcome Message: This is a message that your agent automatically sends to the user when a conversation begins. It can be used to greet the user, explain what the agent can do, or provide initial instructions. You can configure these in the Conversation Starter and Welcome Message sections of the agent configuration. Save Your Agent: Once you have filled in the necessary information, provided your YAML instructions, and added toolkits, click the \"Save\" button (usually located at the bottom or top of the configuration page). Saving your agent makes your configuration live and ready to use. Best Practices and Use Cases Start with a clear goal: Define what you want your agent to achieve before you start building. Break down complex tasks: Divide large tasks into smaller, manageable nodes. Use descriptive node IDs: Choose names that clearly indicate the purpose of each node. Plan your transitions carefully: Ensure a logical flow between nodes. Test your agent thoroughly: Run your agent through different scenarios to identify and fix any issues. Utilize conditions and decisions for dynamic behavior: Make your agent more intelligent by allowing it to adapt based on user input and data. Leverage the function node for efficiency: When interacting with ELITEA entities, consider using the function node for more direct and potentially token-saving interactions. For Simplicity and Quick Setup, Choose tool nodes: If you are new to Pipeline Agents or prioritize ease of use and rapid agent creation over advanced configuration and token optimization, the tool node is an excellent starting point. tool nodes offer a simpler way to integrate ELITEA entities (prompts, agents, datasources) into your workflow with less configuration, making them ideal for quickly building functional agents, especially for users who are not yet comfortable with the more detailed input mapping required by function nodes. Use Cases: Pipeline Agents in ELITEA are particularly powerful for creating \"master\" agents. These master agents are designed for orchestration, meaning they manage and direct the flow between various other agents and ELITEA entities to achieve complex goals. Let's explore some detailed use cases: Use Case 1: User Story Creation Workflow Manager Scenario: This agent guides a user through the entire process of creating a well-defined user story in Jira, from gathering initial requirements to publishing the final version. Solution: This agent uses a combination of llm nodes for interacting with the user and function nodes to process information and interact with Jira. The condition node is used for decision-making based on user input. YAML Instructions: state: jira_project_id: str epic_id: str us_title: str description: str input: str messages: list filtered_sumarized_info: str draft_us: str info_from_datasource: str enhanced_us: str entry_point: Conversation Partner interrupt_after: - Conversation Partner - User Feedback and Approval nodes: - id: Conversation Partner type: llm input: [input] prompt: type: string value: | To create a new User Story, I need some information from you. Could you please provide the following details in the specified format? - **Jira Project ID**: (e.g., PAYMENTS) - **EPIC ID**: (e.g., PAYMENTS-128) - **Title**: (e.g., Checkout functionality) - **Description**: (e.g., \"The informative description of future US.\") Once you provide this information, I will ask for your approval (should be 'approved' word) to start the User Story creation process. Make your instructions to user highlighted by using markdown highlight for text. output: [description, jira_project_id, epic_id, us_title] structured_output: true condition: condition_input: [description, jira_project_id, epic_id, us_title, input] condition_definition: | {% if 'approved' in input|lower and description and jira_project_id and epic_id and us_title %} Unified Content Aggregator {% else %} Conversation Partner {% endif %} - id: Unified Content Aggregator type: function input: [epic_id, description] output: [filtered_sumarized_info] input_mapping: task: type: fstring value: | Epic ID: {epic_id}. Description: {description} chat_history: type: fixed value: [] type: function transition: Draft User Story Creator - id: Draft User Story Creator type: function input: [filtered_sumarized_info] output: [draft_us] input_mapping: input: type: variable value: filtered_sumarized_info transition: User Story Enhance Aggregator - id: User Story Enhance Aggregator type: function input: [draft_us] output: [enhanced_us] input_mapping: task: type: fstring value: | Enhance the Narrative, Description and Scenarios with AC's for the given draft User Story: {draft_us} chat_history: type: fixed value: [] type: function transition: User Feedback and Approval - id: User Feedback and Approval type: llm input: [input, enhanced_us, info_from_datasource] output: [enhanced_us] prompt: type: fstring value: | When reviewing and updating a user story, ensure its structure and format remain consistent with the original, unless the user specifically requests changes. Present the updated user story in its entirety, enriched with any necessary information, clearly and concisely for user feedback. Use the following variables to guide the process: - **Current User Input:** {input} - **Information from Data Source:** {info_from_datasource} - **Enhanced User Story:** {enhanced_us} Users can provide feedback through free form queries, which will be controlled by the \"Current User Input\" value. If the query contains \"datasource:\", access and incorporate specific data from the identified sources into the enhanced user story via \"Information from Data Source\". Present the full \"Enhanced User Story\" to the user, ensuring that the structure and format remain unchanged. Approval of the enhanced user story can be given by typing \"approved,\" which will publish it to Jira. If no further changes or publication is desired, the user can type \"finish\" to conclude the session. condition: condition_input: [input] condition_definition: | {% if 'approved' in input|lower %} User Story Publisher {% elif 'datasource:' in input|lower %} Special {% elif 'finish' in input|lower %} END {% else %} User Feedback and Approval {% endif %} - id: Special type: function input: [input] output: [info_from_datasource] input_mapping: task: type: variable value: input chat_history: type: fixed value: [] type: function transition: User Feedback and Approval - id: User Story Publisher type: function input: [jira_project_id, epic_id, enhanced_us] input_mapping: task: type: fstring value: | Create User Story in Jira using the following details: Project Id: {jira_project_id} Parent Jira Issue ID: {epic_id} User Story content: {enhanced_us} chat_history: type: fixed value: [] type: function transition: END Detailed Explanation: state : Defines the information the agent will remember, such as Jira details, user input, and the evolving user story. entry_point: Conversation Partner : The agent starts by engaging the user with the \"Conversation Partner\" node. interrupt_after : Specifies points where the agent will pause and allow user intervention after the \"Conversation Partner\" and \"User Feedback and Approval\" nodes. nodes : Conversation Partner ( llm node) : Purpose : Gathers initial information (Jira Project ID, Epic ID, Title, Description) from the user using a prompt. input: [input] : Takes the user's latest input. prompt : Instructs the user on what information to provide and in what format. output: [description, jira_project_id, epic_id, us_title] : Extracts the provided information and stores it in the agent's state . condition : Checks if the user has provided all necessary information and typed 'approved'. If so, it moves to \"Unified Content Aggregator\"; otherwise, it loops back to \"Conversation Partner\". Unified Content Aggregator ( function node) : Purpose : Prepares input for the next step by combining the Epic ID and Description. input: [epic_id, description] : Uses the Epic ID and Description from the state . output: [filtered_sumarized_info] : Stores the combined information. input_mapping : Creates a formatted string ( fstring ) with the Epic ID and Description. transition: Draft User Story Creator : Moves to the next step. Draft User Story Creator ( function node) : Purpose : Creates a draft user story. This would likely call an internal ELITEA function or another agent. input: [filtered_sumarized_info] : Uses the combined information from the previous step. output: [draft_us] : Stores the generated draft user story. input_mapping : Passes the filtered_sumarized_info as input. transition: User Story Enhance Aggregator : Proceeds to the enhancement phase. User Story Enhance Aggregator ( function node) : Purpose : Enhances the draft user story with narratives, descriptions, and acceptance criteria. input: [draft_us] : Takes the draft user story as input. output: [enhanced_us] : Stores the enhanced user story. input_mapping : Uses an fstring to instruct the enhancement process. transition: User Feedback and Approval : Moves to get user feedback. User Feedback and Approval ( llm node) : Purpose : Presents the enhanced user story to the user for review and gathers feedback. input: [input, enhanced_us, info_from_datasource] : Uses the current user input, the enhanced user story, and any information from external data sources. prompt : Provides instructions to the user on how to provide feedback, request data, approve, or finish. output: [enhanced_us] : Updates the enhanced user story based on feedback. condition : Directs the flow based on user input: approved : Moves to \"User Story Publisher\". datasource: : Moves to \"Special\" to fetch data. finish : Ends the agent execution. Other input: Loops back to \"User Feedback and Approval\". Special ( function node) : Purpose : Handles requests for incorporating data from external sources. input: [input] : Takes the user's input containing the datasource request. output: [info_from_datasource] : Stores the fetched data. input_mapping : Passes the user's input as the task. transition: User Feedback and Approval : Returns to the feedback stage. User Story Publisher ( function node) : Purpose : Publishes the approved user story to Jira. input: [jira_project_id, epic_id, enhanced_us] : Uses the Jira details and the final user story. input_mapping : Creates a formatted string with the Jira details and user story content for publishing. transition: END : Completes the agent execution. Use Case 2: User Story Review Workflow Manager Scenario: This agent assists in reviewing and updating existing user stories in Jira. Solution: Similar to the creation workflow, this agent uses llm for user interaction and function nodes to read and update Jira. condition manages the flow based on user input. YAML Instructions: entry_point: Conversation Partner interrupt_after: - Conversation Partner - User Feedback and Approval nodes: - id: Conversation Partner type: llm prompt: type: string value: | To review and update User Story, I need some information from you. Could you please provide the following details in the specified format? - **JIRA Ticket ID**: (e.g., US-128) Once you provide this information, I will ask for your approval (should be 'approved' word) to start the US review process. Make your instructions to user highlighted by using markdown highlight for text. condition: condition_input: [messages] condition_definition: | {% if 'approved' in messages[-1]['content']|lower %} Jira_Read {% else %} Conversation Partner {% endif %} - id: Jira_Read type: function transition: User Feedback and Approval - id: User Feedback and Approval type: llm prompt: type: string value: | Ensure that after each review and update, the structure and format of the updated User Story remain consistent with the original, unless the user explicitly requests changes. Present the user story for user review and approval. - **Free format instructions** to make changes. - **Type 'datasource:'** followed by instructions to enhance using datasources. - **Type 'approved'** to publish the enhanced User Story to Jira. - **Type 'finish'** if you don't want to publish the enhanced User Story to Jira or make further changes. condition: condition_input: [messages] condition_definition: | {% if 'approved' in messages[-1]['content']|lower %} Jira_Update {% elif 'datasource:' in messages[-1]['content']|lower %} Special {% elif 'finish' in messages[-1]['content']|lower %} END {% else %} User Feedback and Approval {% endif %} - id: Special type: function transition: User Feedback and Approval - id: Jira_Update type: function transition: END Detailed Explanation: entry_point: Conversation Partner : The agent starts by asking for the Jira Ticket ID. interrupt_after : Allows user intervention after the initial information gathering and feedback stages. nodes : Conversation Partner ( llm node) : Purpose : Gets the Jira Ticket ID from the user. prompt : Asks for the Jira Ticket ID and approval to start the review. condition : Checks if the last message contains 'approved' (case-insensitive). If yes, moves to \"Jira_Read\"; otherwise, stays at \"Conversation Partner\". Jira_Read ( function node) : Purpose : Reads the user story details from Jira using the provided Ticket ID. transition: User Feedback and Approval : Proceeds to the feedback stage. User Feedback and Approval ( llm node) : Purpose : Presents the user story for review and gathers feedback. prompt : Provides instructions on how to provide feedback, request data, approve, or finish. condition : Directs the flow based on the last message content: approved : Moves to \"Jira_Update\". datasource: : Moves to \"Special\". finish : Ends the execution. Other input: Loops back to \"User Feedback and Approval\". Special ( function node) : Purpose : Handles requests for incorporating data from external sources (implementation details would be similar to the previous use case). transition: User Feedback and Approval : Returns to the feedback stage. Jira_Update ( function node) : Purpose : Updates the user story in Jira with the reviewed content. transition: END : Completes the agent execution. Use Case 3: Code Documentation Scenario: This agent automates the process of generating technical documentation for code files. Solution: This agent uses a tool node to get a list of files and a loop node to iterate through each file and generate documentation. YAML Instructions: entry_point: File List Extractor nodes: - id: File List Extractor type: tool transition: Documentor - id: Documentor type: loop task: \"Formulate ALL file paths from chat_history as a list of inputs.\" tool: Code Documentation transition: END Detailed Explanation: entry_point: File List Extractor : The agent starts by extracting a list of files. nodes : File List Extractor ( tool node) : Purpose : Uses a pre-built tool (likely within ELITEA) to get a list of relevant files. transition: Documentor : Moves to the documentation generation phase. Documentor ( loop node) : Purpose : Iterates through the list of files and generates documentation for each. task : Defines how to format the input for the \"Code Documentation\" tool for each file. It instructs the agent to take file paths from the chat_history and format them. tool: Code Documentation : This refers to an ELITEA entity (likely a prompt or another agent) responsible for generating documentation for a given file path. transition: END : Completes the agent execution after processing all files. Use Case 4: Orchestrating US Creation and Test Case Generation Scenario: This master agent orchestrates the creation of a user story followed by the generation of test cases for that user story. Solution: This agent uses tool nodes to trigger other specialized agents for user story creation and test case generation. YAML Instructions: entry_point: BA Agent - Create User Stories nodes: - id: BA Agent - Create User Stories type: tool transition: QA Agent - Create Test Cases - id: QA Agent - Create Test Cases type: tool transition: END Detailed Explanation: entry_point: BA Agent - Create User Stories : The agent starts by triggering the \"BA Agent - Create User Stories\". nodes : BA Agent - Create User Stories ( tool node) : Purpose : Triggers another ELITEA agent specifically designed for user story creation. transition: QA Agent - Create Test Cases : Once the user story is created, it moves to the test case generation phase. QA Agent - Create Test Cases ( tool node) : Purpose : Triggers another ELITEA agent responsible for generating test cases for the newly created user story. transition: END : Completes the agent execution after test cases are generated. This use case highlights the power of Pipeline Agents for orchestration. The master agent doesn't perform the detailed tasks itself but delegates them to specialized agents, creating a modular and efficient workflow. Use Case 5: Master - Bulk User Story Creation Workflow Manager Scenario: This agent acts as a central hub for creating multiple user stories at once and then publishing them either to Jira or Confluence, depending on the user's provided information. Solution: This agent utilizes an llm node for initial input, a tool node to extract relevant information, a tool node to handle the bulk creation, another llm node to prepare data for publishing, and a decision node to route to the appropriate publishing function ( tool nodes for Jira and Confluence). YAML Instructions: entry_point: User Input nodes: - id: User Input type: llm prompt: type: string value: | Act as a router and route the user query to the appropriate node using the provided user input. transition: Jira Epic Extractor - id: Jira Epic Extractor type: tool transition: Bulk User Stories Creator - id: Bulk User Stories Creator type: tool transition: Story Creator - id: Story Creator type: llm prompt: type: string value: | For publishing, provide the Project and EPIC if using the \"Jira Bulk US Publisher\" node. Provide the Confluence Space Key and Confluence Parent Page ID if using the \"Confluence Bulk US Publisher\" node. Use the created bulk User Stories from the chat history and pass them unchanged to the next node. Carefully prepare the data for the next node including the initial provided by user input (first message in the chat history). decision: nodes: - Confluence Bulk US Publisher - Jira Bulk US Publisher description: | Select \"Confluence Bulk US Publisher\" if a Confluence Parent Page ID is provided in the user input. If not, select \"Jira Bulk US Publisher.\" Ensure publishing occurs in only one node based on the presence of the Confluence Parent Page ID. - id: Confluence Bulk US Publisher type: tool transition: END - id: Jira Bulk US Publisher type: tool transition: END Detailed Explanation: entry_point: User Input : The agent begins by receiving user input in the \"User Input\" node. nodes : User Input ( llm node) : Purpose : Acts as an initial entry point, receiving the user's request for bulk user story creation. While the prompt itself is simple, in a real-world scenario, this node might contain more elaborate instructions to guide the user on providing the necessary information for bulk creation. prompt : The prompt instructs the LLM to act as a router, preparing to send the user's query to the next appropriate node. transition: Jira Epic Extractor : The agent proceeds to the \"Jira Epic Extractor\" node. Note that the naming of this transition might be slightly misleading as the agent intends to handle both Jira and Confluence publishing. A more generic name like \"Extract Information\" might be more accurate. Jira Epic Extractor ( tool node) : Purpose : This node is intended to extract relevant information from the user's input, such as the Jira Epic under which the user stories should be created. transition: Bulk User Stories Creator : After extracting the necessary information (presumably the Jira Epic), the agent moves to the \"Bulk User Stories Creator\" node. Bulk User Stories Creator ( tool node) : Purpose : This node utilizes a pre-built tool within ELITEA to handle the actual creation of multiple user stories. The specifics of this tool (e.g., how it receives the user story data) are not detailed in the YAML. transition: Story Creator : Once the bulk user stories are created, the agent transitions to the \"Story Creator\" node to prepare them for publishing. Story Creator ( llm node) : Purpose : This node prepares the created user stories and gathers necessary publishing information from the user. prompt : The prompt instructs the user to provide either Jira Project and EPIC details or Confluence Space Key and Confluence Parent Page ID, depending on where they want to publish the stories. It also emphasizes passing the created bulk User Stories from the chat history to the next node. decision : This attribute defines the logic for choosing the appropriate publishing node. nodes : Lists the possible next nodes: \"Confluence Bulk US Publisher\" and \"Jira Bulk US Publisher\". description : Explains the decision-making process: if a Confluence Parent Page ID is present in the user input, route to the Confluence publisher; otherwise, route to the Jira publisher. This ensures that the publishing happens in only one of the nodes. Confluence Bulk US Publisher ( tool node) : Purpose : This node utilizes a function within ELITEA to publish the bulk user stories to Confluence. transition: END : After publishing to Confluence, the agent's execution is complete. Jira Bulk US Publisher ( tool node) : Purpose : This node utilizes a function within ELITEA to publish the bulk user stories to Jira. transition: END : After publishing to Jira, the agent's execution is complete. This use case demonstrates a more complex orchestration scenario where the Pipeline Agent acts as a smart router, guiding the user through bulk operations and making decisions based on the provided information to ensure the user stories are published to the correct platform. Use Case 6: Automated GitHub Code Documentation Use Case Title: GitHub Code Documentation Generator Scenario: This agent automates the process of generating technical documentation for code files directly from a GitHub repository. It retrieves a list of code files from a specified GitHub repository, generates documentation for each file, and then publishes the generated documentation back to a dedicated documentation branch within the same repository. Solution: This agent leverages the loop_tool node for efficient processing of multiple files. It uses a function node as the initial tool in loop_tool to get the list of code files from GitHub. Then, for each file, it uses a loop_tool (Code Documentation agent - assumed to be pre-existing in ELITEA) to generate the documentation. Finally, it would ideally include a node (not shown in the provided YAML, but conceptually needed) to publish the documentation back to the GitHub repository. YAML Instructions: state: messages: list input: str file_listing: str entry_point: File List Extractor nodes: - id: File List Extractor type: function input: [input] output: [file_listing] input_mapping: task: type: variable value: input chat_history: type: fixed value: [] transition: Documentor - id: Documentor type: loop input: [file_listing] # Corrected input to be file_listing task: \"Formulate ALL file paths from file_listing as a list of inputs. The input values should be of format \\\"{\\\"task\\\": \\\"<file path from file_listing>\\\", \\\"chat_history\\\": [<actual chat history>]}\\\"\" # Improved task instruction tool: Code Documentation # Assuming 'Code Documentation' is an ELITEA agent transition: END Detailed Explanation: state : Defines the agent's memory, including: messages : Conversation history. input : User input. file_listing : Will store the list of files retrieved from GitHub. entry_point: File List Extractor : The agent starts by executing the \"File List Extractor\" node. nodes : File List Extractor ( function node) : Purpose : Retrieves a list of code files from a GitHub repository. This node is designed to call an ELITEA function (or potentially an agent or tool) that interacts with the GitHub API to get the file listing. type: function : Specifies this is a function node. input: [input] : Takes user input (likely containing GitHub repository details) as input. output: [file_listing] : Stores the retrieved list of files in the file_listing state variable. input_mapping : Defines how input is prepared for the function call: task : Maps the input state variable to the task parameter of the function. It assumes the function expects the repository details as the 'task'. chat_history : Sets chat_history to an empty list, as chat history is likely not relevant for fetching file lists. transition: Documentor : After retrieving the file list, the agent moves to the \"Documentor\" node. Documentor ( loop node) : Purpose : Iterates through the file_listing and generates documentation for each file. type: loop : Specifies this is a loop node. input: [file_listing] : Takes the file_listing (list of files) as input for the loop. task : Provides instructions on how to create input for each loop iteration. It instructs the agent to: Formulate file paths from the file_listing (corrected to use file_listing instead of chat_history as in the initial prompt). Format each file path as input in the specified JSON format. tool: Code Documentation : Specifies that for each file in the loop, the ELITEA entity named \"Code Documentation\" will be executed to generate documentation. This is assumed to be a pre-existing agent or prompt in ELITEA designed for code documentation. transition: END : After documenting all files in the list, the agent's execution completes. Note: This YAML provides the core logic for fetching files and looping through them for documentation. A complete solution would likely require: A specific ELITEA function or agent to be called in \"File List Extractor\" that can interact with the GitHub API to retrieve file lists based on user input (e.g., repository URL, branch). A \"Code Documentation\" ELITEA agent or prompt that can generate documentation from a given file path. Potentially, additional nodes to handle publishing the generated documentation back to GitHub, which is not included in this YAML snippet. Use Case 7: Confluence Page Data Extraction to CSV Use Case Title: Confluence Page Metadata to CSV Exporter Scenario: This agent gathers metadata (title, description, page ID) from a list of Confluence pages (identified by labels) and saves this information into a CSV file. This is useful for creating reports, backups, or analyzing Confluence content. Solution: This agent utilizes the loop_tool node for efficient iteration over Confluence pages. It directly calls a Confluence toolkit's tool ( list_pages_with_label ) as the tool in loop_tool to get the list of pages. Then, for each page (implicitly within the loop_tool 's logic), it extracts the required metadata. Finally, it would require an additional node (not shown) to format and save the extracted data as a CSV file. YAML Instructions: entry_point: listpages nodes: - id: listpages type: loop_tool tool: list_pages_with_label # Direct call to Confluence toolkit's 'list_pages_with_label' tool structured_output: true # Expect structured output from the Confluence tool loop_tool: Confluence helper # While 'Confluence helper' is listed, it might not be strictly needed for *just* data extraction in this simplified example. A more direct approach might be possible depending on the 'list_pages_with_label' tool's output. variables_mapping: id: task # Map 'id' output variable from 'list_pages_with_label' to 'task' input (though 'Confluence helper' might not need 'task' in this context) messages: chat_history # Map 'messages' to 'chat_history' (likely not used in this data extraction scenario) transition: END Detailed Explanation: entry_point: listpages : The agent execution starts at the \"listpages\" node. nodes : listpages ( loop_tool node) : Purpose : Retrieves a list of Confluence pages that have a specific label and extracts their metadata. type: loop_tool : Specifies this is a loop_tool node. tool: list_pages_with_label : Directly calls a tool from the Confluence toolkit named list_pages_with_label . This assumes that the Confluence toolkit is added to the agent and that list_pages_with_label is a valid tool within that toolkit that can retrieve a list of Confluence pages based on labels. structured_output: true : Indicates that the output from the list_pages_with_label tool is expected to be in a structured format (likely a list of dictionaries or JSON objects), making it easier to map variables. loop_tool: Confluence helper : While Confluence helper is listed as loop_tool , in this simplified example focused on data extraction, it might not be strictly necessary. The list_pages_with_label tool itself might be sufficient to retrieve the required metadata for each page. A more efficient approach could potentially directly process the output of list_pages_with_label without needing a separate loop_tool . However, if further processing per page was needed (beyond just listing metadata), then Confluence helper (presumably an agent designed for Confluence page operations) would be relevant as the loop_tool . variables_mapping : Defines how to map variables from the output of list_pages_with_label to the input of Confluence helper (though Confluence helper 's role is questionable in this data extraction context): id: task : Maps the id output variable from list_pages_with_label to the task input parameter. The purpose of this mapping is unclear in this data extraction scenario, as Confluence helper might not need a 'task' for simple metadata extraction. messages: chat_history : Maps the messages output variable to chat_history . This mapping is likely not relevant or used in this data extraction scenario. transition: END : After processing all pages (or after the list_pages_with_label tool completes its task), the agent execution ends. Note: This YAML provides a basic structure for extracting Confluence page metadata. A fully functional agent would likely require: The Confluence toolkit to be added and properly configured in the agent settings. A clear understanding of the output structure of the list_pages_with_label tool to ensure correct variables_mapping . Okay, I have thoroughly reviewed the \"Troubleshooting\" section of the Pipeline Agent Framework guide, considering the entire guide content and aiming for enhanced clarity, comprehensiveness, and user-friendliness. Here's the improved \"Troubleshooting\" section: Troubleshooting Your Pipeline Agents Building intelligent agents can sometimes involve a bit of debugging! This section is designed to be your go-to guide for diagnosing and resolving common issues you might encounter while creating and running Pipeline Agents in ELITEA. The First Step: Pay Attention to Error Messages! Whenever your agent encounters a problem during execution, ELITEA will display error messages directly in the Chat window. These error messages are your most valuable first clue! Carefully read and understand these messages, as they often pinpoint the exact location and nature of the issue in your YAML instructions. Here's a breakdown of common problems and step-by-step solutions: YAML Syntax Errors: The Foundation is Key Problem: Your agent fails to load or starts with errors due to fundamental mistakes in the YAML structure itself. Solution: YAML is strict about syntax. Double-check these basics: Correct Key-Value Pairs: Ensure every line follows the key: value format. Consistent Indentation (Spaces, Not Tabs!): YAML uses indentation to define hierarchy. Always use spaces for indentation, and be consistent with the number of spaces at each level. Incorrect indentation is a very common cause of YAML errors. Proper List Formatting: List items must start with a hyphen (-) . Valid Data Types: Be mindful of the expected data types (e.g., str , int , list , dict ) when defining your state and node attributes. No Tabs Allowed: Never use tabs for indentation in YAML. Only spaces are permitted. YAML Indentation Issues: The Invisible Enemy Problem: Your agent's behavior is unpredictable, or it fails to load because of subtle indentation errors in your YAML. Solution: YAML indentation is crucial! Even if you think your indentation is correct, use the YAML Indentation Corrector prompt within ELITEA. This prompt automatically analyzes your YAML code and corrects any indentation problems, saving you significant debugging time. Agent Won't Start: Entry Point Check Problem: You expect your agent to begin, but nothing happens. Solution: The entry_point is the agent's starting instruction. Verify that the entry_point value in your YAML file exactly matches the id of the node you intend to be the first step. Typos or incorrect capitalization will prevent the agent from finding its starting point. Unexpected Transitions: Wrong Turn in the Workflow Problem: The agent moves to a node that is not the one you intended after a specific step. Solution: Trace the transition from the node where the unexpected jump occurs. Carefully examine: transition Attribute: For simple transitions, ensure the node_id specified in the transition attribute is spelled correctly and matches the id of the intended next node. condition Attribute: If the transition is controlled by a condition , meticulously analyze: condition_input : Are you providing the correct state variables as input to your condition? condition_definition (Jinja2 Logic): Is your Jinja2 condition logic correct? Are you using the right variables, operators, and syntax? Test your condition logic step-by-step. decision Attribute: If the transition is based on a decision , review: decisional_inputs : Are you feeding the correct state variables to the decision-making process? default_output : Is the default_output node correctly specified for cases where none of the decision criteria are met? Node Name Mismatches: Spelling Matters! Problem: The agent reports errors indicating it cannot find a specific node. Solution: Node id s are case-sensitive and must be spelled exactly the same way throughout your YAML: Verify Node id s: Double-check the spelling and capitalization of all id values you've assigned to your nodes. Ensure consistency in how you refer to these id s in transition , condition , and decision attributes. ELITEA Toolkit Names (for tool nodes): If you are using tool nodes to call ELITEA entities (prompts, agents, datasources), the tool name in your YAML must perfectly match the name of the toolkit entity in ELITEA. Toolkit names are also case-sensitive. llm Node Referencing Errors: ID Consistency Problem: Transitions, conditions, or decisions are not working correctly when referencing an llm node. Solution: It's easy to make mistakes when referencing node IDs. Carefully confirm that the id you assigned to your llm node is accurate and that you are using that exact id in all transition , condition , or decision attributes that are supposed to point to your llm node. Incorrect Data in state : Agent Memory Issues Problem: Your agent is using or displaying wrong or outdated information. Solution: The state is your agent's memory. To debug state issues: Strategic Interruptions: Use interrupt_before and interrupt_after in your YAML to pause the agent at key points in its workflow. Inspect the state : When the agent pauses due to an interruption, examine the current state (the agent's memory). Check the values of your state variables to see if they are being populated correctly, updated as expected, and contain the right data at each step. This helps you track data flow and identify where information might be going wrong. condition Logic Errors: Jinja2 Debugging Problem: Conditions are not behaving as you expect, leading to the agent taking the wrong path. Solution: Conditions use Jinja2 templating. Review your condition_definition with extra care: Jinja2 Syntax: Ensure you are using correct Jinja2 syntax ( {% if %} , {% elif %} , {% else %} , {% endif %} ). Variable References: Double-check that you are correctly referencing the state variables you intended to use within the Jinja2 template (especially those listed in condition_input ). Logical Operators and Comparisons: Verify that your logical operators ( and , or , not ) and comparison operators ( == , != , > , < , >= , <= , in ) are used correctly to express your condition. function Node Input/Output Mapping Problems: Data Flow Breakdown Problem: A function node fails to execute correctly, or the ELITEA entity it's calling doesn't receive the right input. Solution: function nodes rely on precise input_mapping . Scrutinize these attributes: input List: Ensure the input list in your function node correctly names the state variables that are supposed to provide data to the function. output List: Verify that the output list specifies the correct names for the state variables where the function's results should be stored. input_mapping Details: This is critical! For each parameter you are mapping in input_mapping (like task , query , input , or custom parameters), confirm: type : Is the type ( variable , fstring , fixed , string ) appropriate for how you want to provide the input value? value : Is the value correctly specified? If type: variable , is it the correct state variable name? If type: fstring , is the formatted string template correct, and are the variables within it spelled right? If type: fixed or type: string , is the hardcoded value what you intended? Toolkit Configuration Issues: ELITEA Setup Problem: tool or function nodes that rely on ELITEA toolkits (like Jira, Confluence, Datasources, Agents, Prompts) are not working. Solution: Crucially, ensure that you have added and correctly configured all necessary toolkits in your Agent's Configuration tab in ELITEA. Add Toolkits: In the Agent's Configuration, go to the \"Toolkits\" section and click \"Add Toolkit.\" Select all the toolkits (Jira, Confluence, Datasources, Agents, Prompts, etc.) that your Pipeline Agent uses in its YAML instructions. Configure Toolkits: After adding toolkits, you often need to configure them. This might involve: Selecting the correct Toolkit Version: For Agents and Prompts, ensure you select the correct version from the dropdown. Selecting the Right Tool (Datasource): For Datasource toolkits, choose the specific datasource tool you intend to use. Providing Credentials: For Jira, Confluence, and other external services, you'll likely need to provide API keys, usernames, passwords, or connection details as required by the toolkit. Incorrect or missing toolkit configuration is a very common reason for agents to fail. Debugging Complex Pipelines: Step-by-Step Approach Problem: Troubleshooting becomes challenging in agents with many nodes, conditions, and decisions. Solution: Adopt a systematic debugging strategy: Isolate the Problem: Try to narrow down the issue to a specific node or section of your pipeline. Comment out parts of your YAML temporarily to isolate the area of concern. Step-by-Step Execution Analysis: Mentally walk through your agent's workflow step by step, node by node. Strategic Interruptions (Again!): Use interrupt_before and interrupt_after liberally to pause the agent at multiple points and inspect the state at each stage. This helps you track data flow and pinpoint where logic might be breaking down. Detailed Error Message Review: Re-examine the error messages in the Chat window. Even if they seem cryptic at first, they often contain valuable clues about the location and type of error. By following these troubleshooting steps and systematically checking for common issues, you'll be well-equipped to diagnose and fix problems in your Pipeline Agents, allowing you to build robust and effective intelligent assistants in ELITEA! Useful Links and Materials To further enhance your understanding and skills in building Pipeline Agents, here are some helpful resources: ELITEA Agents Configuration : Learn more about configuring and managing agents within ELITEA. Public Agents in Nexus : Discover and study real-world examples of Pipeline Agents created by the ELITEA community. This is a great source of inspiration and practical learning. Alita SDK GitHub Repository : Explore the codebase behind the Pipeline Agent Framework and its nodes. This is a valuable resource for understanding the inner workings and extending its capabilities. YAML Specification : Gain a comprehensive understanding of YAML syntax and structure. Jinja Templating Engine Documentation Master the syntax and features of Jinja2, the templating language used for defining conditions in Pipeline Agents.","title":"Pipeline Agent Framework"},{"location":"how-tos/agents-toolkits/pipeline-agent-framework/#pipeline-agent-framework-user-guide-for-elitea","text":"Welcome to the Pipeline Agent Framework guide for ELITEA! This guide will help you understand how to create your own intelligent agents within ELITEA, even if you don't have a background in coding. Think of these agents as helpful assistants that can guide users through tasks, answer questions, and automate processes. The Pipeline Agent Framework is specifically designed for creating the instructions that your agents will follow. Pipeline Agents are based on the LangChain backend and work with Azure OpenAI Service integrations. Pipeline agents are designed for orchestrating the work of various entities together like prompts, agents, and datasources. This agent type must be selected when you are writing instructions for so-called 'master' agents.","title":"Pipeline Agent Framework User Guide for ELITEA"},{"location":"how-tos/agents-toolkits/pipeline-agent-framework/#what-is-the-pipeline-agent-framework","text":"Imagine you're building a process step-by-step. The Pipeline Agent Framework allows you to define these steps and how they connect in a clear and organized way. It's like creating a flowchart for your AI agent. You define individual actions (like asking a question or using a tool) and then connect them to create a smooth flow. This framework uses a simple configuration language YAML to define how your agent works. YAML is designed to be easy to read and understand, making it perfect for describing the steps your agent will take. You'll write instructions in YAML that tell ELITEA how your agent should behave.","title":"What is the Pipeline Agent Framework?"},{"location":"how-tos/agents-toolkits/pipeline-agent-framework/#core-concepts-the-building-blocks-of-your-pipeline-agent","text":"Let's understand the key parts that make up your intelligent agent : State : Represents the agent's memory defined by user, storing information gathered and used throughout its execution. The state allows the agent to retain context and use previously acquired information in subsequent steps. It can include default information like messages (conversation history) and custom data defined by the user. Entry Point : Specifies the starting node of the agent's execution, defining where the agent begins its workflow. This is the initial step from which the agent's journey begins. Interruptions : Provide mechanisms to pause the agent's execution at specific points, allowing for user intervention or inspection. Interruptions can be set to occur before or after a particular node's execution. Nodes : The fundamental building blocks representing individual actions or steps the agent can take. These are the verbs of your agent's workflow, defining what the agent does at each stage. Different node types allow for various actions, such as interacting with the user, calling external tools, or performing specific functions. Transitions : Define the flow and connections between nodes, dictating the sequence of actions the agent follows. Transitions specify which node the agent should move to after completing the current node's task. They create the directed path through the agent's workflow. Conditions : Allow for conditional transitions between nodes, where the next step depends on whether a specific rule or condition is met. Conditions introduce logic into the agent's workflow, enabling it to react differently based on data or user input. Decisions : Enable the agent to make choices and branch its execution path based on available information or the outcome of a node. Decision points allow for more dynamic and intelligent agent behavior. The agent can evaluate different conditions and select the appropriate next step.","title":"Core Concepts: The Building Blocks of Your Pipeline Agent"},{"location":"how-tos/agents-toolkits/pipeline-agent-framework/#state","text":"The state is the agent's memory, defined by you, the user. It stores information that the agent gathers and uses throughout its execution. The default state includes messages (the conversation history). You can also define custom states to store other relevant information. Data types for custom states: str , int , list , dict Important Note about Agent Memory (State): When you define the state for your Pipeline Agent, you'll encounter two important terms related to user input and conversation history: input and messages . It's crucial to understand the difference between them: input - The Latest User Message: Think of input as the agent's short-term memory of what the user just said or entered. It always holds the most recent message from the user. If the user types something new, the value of input is updated to reflect that new message. messages - The Entire Conversation History: messages , on the other hand, is like the agent's long-term memory of the entire conversation. It's a list that keeps track of every message exchanged between the user and the agent from the beginning of the interaction. This includes both the user's messages and the agent's responses. messages: list - Always Include in Custom State: If you define a state section in your agent's YAML instructions, you must always include messages: list within it. This is essential for your agent to properly track and maintain the conversation history. Without messages: list in your custom state , the agent will not be able to remember the ongoing conversation, which is crucial for most interactive agents. If you don't need to define any other custom state variables, you can simply omit the entire state section, and the agent will automatically use the default messages state. Example 1: State Definition state: jira_project_id: str epic_id: str us_title: str description: str input: str messages: list filtered_sumarized_info: str draft_us: str info_from_datasource: str enhanced_us: str Explanation: This state definition indicates that the agent will store information related to: jira_project_id : Jira project ID (string) epic_id : Epic ID (string) us_title : User story title (string) description : User story description (string) input : The latest user input (string) messages : The entire conversation history as a list of messages ( list ) filtered_sumarized_info : Summarized information (string) draft_us : Draft user story (string) info_from_datasource : Information from a data source (string) enhanced_us : Enhanced user story (string) Note : If you only need the default messages state, you can omit the state section entirely from your YAML instructions.","title":"State"},{"location":"how-tos/agents-toolkits/pipeline-agent-framework/#entry-point","text":"The entry_point is defined at the top level of your YAML instructions and specifies the id of the first node that will be executed when the agent starts. This node serves as the starting point of your agent's workflow and the beginning of its journey. Important Note: The entry_point can be any type of node , including llm , function , tool , loop , or loop_tool , depending on the desired starting behavior of your agent. Example 1: llm node as Entry Point entry_point: Conversation Partner nodes: - id: Conversation Partner type: llm input: [input] prompt: type: string value: | Hello! I am your User Story creation assistant. To get started, please tell me the Jira Project ID for your user story. output: [jira_project_id] transition: Get Epic ID # Define the next step after this node # ... rest of your agent's instructions ... Explanation: This entry_point: Conversation Partner definition tells the agent to start its execution from the llm node with the id \"Conversation Partner\". The YAML code snippet also shows the definition of the \"Conversation Partner\" node itself. As the first node, it's an llm type, designed to initiate the conversation by greeting the user and asking for the Jira Project ID. Example 2: function node as Entry Point entry_point: Data Initialization nodes: - id: Data Initialization type: function output: [current_date, system_version] input_mapping: # Assuming 'get_system_info' is a function that returns date and version function_call: type: fixed value: get_system_info transition: Main Workflow # Define the next step after this node # ... rest of your agent's instructions ... Explanation: In this example, entry_point: Data Initialization sets the starting node to be a function node named \"Data Initialization\". This node, defined as a function type, is designed to perform an initial setup task. Here, it's configured to call a hypothetical function get_system_info (via input_mapping) to retrieve the current date and system version and store them in the state as current_date and system_version. The agent then transitions to the \"Main Workflow\" node to begin the core logic. Example 3: loop node as Entry Point entry_point: Process Files nodes: - id: Process Files type: loop task: \"Generate a list of file paths from a predefined list: file1.txt, file2.txt, file3.txt. Format each as input: {\\\"file_path\\\": \\\"<file_path>\\\"}\" tool: FileProcessor # Assuming 'FileProcessor' is an agent or prompt to process files transition: END # End after processing all files # ... rest of your agent's instructions ... Explanation: Here, entry_point: Process Files designates a loop node named \"Process Files\" as the starting point. This example demonstrates starting the agent execution directly with a loop. The loop node is set up to process a predefined list of files. The task instruction defines how to create input for each file, and the tool: FileProcessor will be executed for each file in the list. After processing all files in the loop, the agent transitions to END, completing its execution. Note: These examples illustrate that the entry_point provides flexibility in defining how your Pipeline Agent begins its execution, allowing you to start with user interaction (llm), initial data processing (function), or even directly with a looping mechanism (loop).","title":"Entry Point"},{"location":"how-tos/agents-toolkits/pipeline-agent-framework/#interruptions","text":"Interruptions are optional attributes you can add at the top level of your YAML file to pause the agent's execution and give control back to the user at specific points during its workflow. This allows for manual review, adjustments, or user-driven decision-making within an automated agent process. You can define two types of interruptions : interrupt_before : Pauses the agent's execution immediately before a specific node is executed. This is useful when you want to review the inputs or confirm the action before the agent proceeds with a particular step. interrupt_after : Pauses the agent's execution immediately after a specific node has finished executing. This is helpful for reviewing the output of a node, providing feedback, or making decisions based on the results of that step before the agent continues to the next node. Key Features of Interruptions: Multiple Interruptions Allowed: You can define multiple interrupt_before and interrupt_after points within a single agent. This allows for fine-grained control and review at various stages of a complex workflow. Combined Interrupt Types: You can even use both interrupt_before and interrupt_after interruptions within the same agent. This provides maximum flexibility in designing review and control points in your agent's execution. Important Note: When you use interrupt_before or interrupt_after in your agent's instructions, it is crucial to ensure that your agent's logic still includes a clear path to the END node. This ensures that even with manual interruptions, the agent's execution can be logically completed and doesn't get stuck in a paused state indefinitely. Example 1: interrupt_before - Review before Content Aggregation entry_point: Conversation Partner interrupt_before: # Define interruptions at the top level - Unified Content Aggregator # Interrupt BEFORE 'Unified Content Aggregator' node nodes: # Node definitions - id: Conversation Partner type: llm # ... (rest of Conversation Partner node definition) transition: Unified Content Aggregator - id: Unified Content Aggregator # Interruption will occur BEFORE this node starts type: function # ... (rest of Unified Content Aggregator node definition) transition: Draft User Story Creator # ... rest of your agent's instructions ... Explanation: In this example, interrupt_before: - Unified Content Aggregator is defined at the top level. This means that before the agent starts executing the Unified Content Aggregator node (identified by id: Unified Content Aggregator within the nodes section), the execution will pause, and control will be given back to the user. The user can then review the current state of the agent, potentially make adjustments, and then manually resume the agent's execution. Example 2: interrupt_after - Review User Feedback entry_point: Conversation Partner interrupt_after: # Define interruptions at the top level - Conversation Partner # Interrupt AFTER 'Conversation Partner' node nodes: # Node definitions - id: Conversation Partner # Interruption will occur AFTER this node finishes type: llm # ... (rest of Conversation Partner node definition) transition: Unified Content Aggregator - id: Unified Content Aggregator type: function # ... (rest of Unified Content Aggregator node definition) transition: Draft User Story Creator # ... rest of your agent's instructions ... Explanation: Here, interrupt_after: - Conversation Partner is defined. This will cause the agent to pause immediately after it has finished executing the Conversation Partner node. After the \"Conversation Partner\" node completes its task (likely interacting with the user), the agent will pause, allowing the user to review the interaction, the agent's response, and the updated state before the agent proceeds to the \"Unified Content Aggregator\" node. Example 3: Using Both interrupt_before and interrupt_after entry_point: Conversation Partner interrupt_before: # Define 'interrupt_before' - User Story Publisher # Interrupt BEFORE 'User Story Publisher' interrupt_after: # Define 'interrupt_after' - User Feedback and Approval # Interrupt AFTER 'User Feedback and Approval' nodes: # Node definitions - id: Conversation Partner type: llm # ... (rest of Conversation Partner node definition) transition: User Feedback and Approval - id: User Feedback and Approval # Interruption will occur AFTER this node finishes type: llm # ... (rest of User Feedback and Approval node definition) transition: User Story Publisher - id: User Story Publisher # Interruption will occur BEFORE this node starts type: function # ... (rest of User Story Publisher node definition) transition: END Explanation: This example demonstrates using both types of interruptions in a single agent. interrupt_after: - User Feedback and Approval : The agent will pause after the \"User Feedback and Approval\" node, allowing review of user feedback and the enhanced user story. interrupt_before: - User Story Publisher : The agent will pause before the \"User Story Publisher\" node, allowing a final check before the user story is published to Jira. By strategically placing interrupt_before and interrupt_after points, you can create Pipeline Agents that offer a balance between automation and user control, ensuring critical steps are reviewed and validated as needed.","title":"Interruptions"},{"location":"how-tos/agents-toolkits/pipeline-agent-framework/#nodes","text":"Nodes are the individual actions or steps your agent can take. Each node performs a specific task. Think of them as verbs \u2013 what your agent does . The following Node types are available: llm : Enables the agent to interact with users using natural language, powered by AI models. Used for asking questions, providing information, and engaging in conversational exchanges. tool : Allows the agent to utilize pre-built entities (prompts, agents and datasources) in ELITEA. Facilitates actions like retrieving data, triggering other agents, or using specific prompts and datasources. function : Provides a mechanism for the agent to directly call and execute specific ELITEA functionalities with precise control over input mapping. Offers a more advanced and potentially efficient way to interact with ELITEA's internal capabilities. loop : Enables the agent to repeatedly execute a specific task or action, often iterating over a list of items or until a condition is met. Useful for processing collections of data or performing repetitive operations. loop_tool : Allows the agent to iterate through a list of inputs generated by another ELITEA agent, executing a specified tool or function for each item. Facilitates workflows where the input for a repetitive task is dynamically generated by another entity.","title":"Nodes"},{"location":"how-tos/agents-toolkits/pipeline-agent-framework/#common-node-attributes","text":"Nodes have the following common attributes: id : A unique name for this specific step. This helps you refer to this node later in your instructions for transitions, conditions, or decisions. type : Specifies the kind of action this node will perform (e.g., llm , tool , function , loop , loop_tool ). input (optional) : A list of information the node needs to perform its task. This information is retrieved from the agent's state . output (optional) : A list of names for the information the node produces after completing its task. This information is then stored back in the agent's state and can be used by subsequent nodes. transition : Specifies the id of the next node the agent should move to after this node is finished. If the value is END , the agent's execution will stop, logically completing the agent's workflow. condition (optional) : Allows the agent to conditionally transition to different nodes based on specific rules defined using Jinja2 templating. decision (optional) : Allows the agent to choose the next node from a predefined list based on available information or the result of the current node's action. Node types in Detail Here are the different types of nodes you can use to build your agent, with detailed explanations and examples:","title":"Common Node Attributes"},{"location":"how-tos/agents-toolkits/pipeline-agent-framework/#node-type-llm","text":"The llm node allows your agent to communicate with the user using the power of Large Language Models (LLMs). You provide a prompt (a question or instruction), and the LLM generates a response. Purpose: To engage in natural language interactions with the user, such as: Asking questions to gather information. Providing information or explanations. Getting user feedback or approval. Common Attributes for llm Nodes: id : A unique name for this llm node (e.g., Conversation Partner , User Feedback ). type : Always set this to llm . prompt : Defines the instruction or question for the LLM. type : Specifies the format of the prompt. Must be either string or fstring . string : A simple text prompt without any variables. fstring : A formatted string prompt that includes variables from the agent's state within the instructions. value : The actual text of the question or instruction. Use | to define multiline prompts. input (optional) : A list of state variables that the prompt might need. For Entry Point llm Nodes: If this llm node is the entry_point of your agent, input: [input] is valid and refers to the initial user input. For Subsequent llm Nodes: input can include any state variables that have been populated as output variables in previous nodes (e.g., input: [input1, input2, messages] ). If using fstring prompts, input becomes mandatory to list the variables used in the prompt. output (optional) : A list of names for the information you expect to extract from the LLM's response. This information will be stored back in the agent's state and can be used by subsequent nodes. Example: output: [description, jira_project_id, epic_id, us_title] structured_output (optional) : Set to true if you expect the LLM's response to be in a structured format (like JSON) that makes it easier to extract the output values. Defaults to false . The effectiveness of structured_output: true depends on the capabilities of the selected LLM model. messages : This attribute is implicitly managed by the framework and represents the 'chat_history'. You don't need to define it explicitly in input or output unless you want to explicitly pass the entire chat history as input to the prompt for context. Example 1: llm node - Simple Text Prompt - id: Conversation Partner type: llm input: [input] # Optional, but included here as the prompt refers to user input (entry point node) prompt: type: string value: | To create a new User Story, I need some information from you. Could you please provide the following details in the specified format? - **Jira Project ID**: (e.g., PLAN) - **EPIC ID**: (e.g., PLAN-128) - **Title**: (e.g., Checkout functionality) - **Description**: (e.g., \"The informative description of future US.\") Once you provide this information, I will ask for your approval (should be 'approved' word) to start the User Story creation process. Make your instructions to user highlighted by using markdown highlight for text. output: [description, jira_project_id, epic_id, us_title] structured_output: true transition: Confluence Extractor # Define the next step here Explanation: id: Conversation Partner : Names this node \"Conversation Partner\". type: llm : Specifies that this is an llm node. input: [input] : Takes the user's initial input as input to the prompt (valid for entry point node). prompt : type: string : Indicates a simple text prompt. value : The actual instruction for the LLM, asking the user for user story details. output: [description, jira_project_id, epic_id, us_title] : Specifies that the agent expects to extract these pieces of information from the user's response and store them in the state . structured_output: true : Indicates that the agent expects a structured response to facilitate information extraction. Example 2: llm node - Parametrized Prompt ( fstring ) - id: User Feedback and Approval type: llm input: [input, enhanced_us, info_from_datasource] # Mandatory because of fstring prompt output: [enhanced_us] # Mandatory because of fstring prompt prompt: type: fstring value: | When reviewing and updating a user story, ensure its structure and format remain consistent with the original, unless the user specifically requests changes. Present the updated user story in its entirety, enriched with any necessary information, clearly and concisely for user feedback. Use the following variables to guide the process: - **Current User Input:** {input} - **Information from Data Source:** {info_from_datasource} - **Enhanced User Story:** {enhanced_us} Users can provide feedback through free form queries, which will be controlled by the \"Current User Input\" value. If the query contains \"datasource:\", access and incorporate specific data from the identified sources into the enhanced user story via \"Information from Data Source\". Present the full \"Enhanced User Story\" to the user, ensuring that the structure and format remain unchanged. Approval of the enhanced user story can be given by typing \"approved,\" which will publish it to Jira. If no further changes or publication is desired, the user can type \"finish\" to conclude the session. transition: User Story Publisher # Define the next step here Explanation: id: User Feedback and Approval : Names this node \"User Feedback and Approval\". type: llm : Specifies that this is an llm node. input: [input, enhanced_us, info_from_datasource] : Mandatory because the prompt is an fstring and uses these variables. It takes the user's current input, the enhanced user story, and information from a data source from the agent's state . prompt : type: fstring : Indicates a formatted string prompt using variables. value : The instruction for the LLM, using placeholders like {input} , {info_from_datasource} , and {enhanced_us} to insert values from the agent's state . output: [enhanced_us] : Mandatory because the prompt is an fstring . Specifies that the agent expects the LLM to potentially modify or confirm the enhanced_us .","title":"Node type: llm"},{"location":"how-tos/agents-toolkits/pipeline-agent-framework/#node-type-tool","text":"The tool node allows your agent to utilize pre-built entities within ELITEA, specifically: prompts, agents, and datasources. The tool node is a simpler way to use these entities compared to the function node, but it might be less efficient in terms of token usage and expensive. Purpose: To leverage existing ELITEA entities to perform specific tasks, such as: Executing a pre-defined prompt. Triggering another ELITEA agent. Querying a datasource to retrieve information. Common Attributes for tool nodes: id : A unique name for this tool node (e.g., Draft User Story Creator , Data Retriever ). type : Always set this to tool . tool : The name of the specific ELITEA entity (prompt, agent, or datasource) you want to use. input (optional) : A list of state variables that might be used as input for the tool. output (optional) : A list of names for the information expected as output from the tool. structured_output (optional) : Indicates if the tool's output is expected to be structured. Defaults to false . transition : The id of the next node to execute after the tool finishes. Example 1: tool node - Using a Prompt - id: Draft User Story Creator type: tool tool: User Story Draft Prompt # Assuming 'User Story Draft Prompt' is a defined prompt in ELITEA transition: User Story Enhance Aggregator Explanation: id: Draft User Story Creator : Names this node \"Draft User Story Creator\". type: tool : Specifies that this is a tool node. tool: User Story Draft Prompt : Specifies that this node will use the ELITEA prompt named \"User Story Draft Prompt\". transition: User Story Enhance Aggregator : Defines the next node to be \"User Story Enhance Aggregator\". Important Note: When using a tool node, the framework will use an LLM in the background to prepare the input data for the specified tool. This can increase token usage and potentially make the execution slower compared to using a function node with explicit input mapping.","title":"Node type: tool"},{"location":"how-tos/agents-toolkits/pipeline-agent-framework/#node-type-function","text":"The function node provides a more advanced and efficient way to interact with ELITEA entities (prompts, agents, datasources, and other functionalities). It allows you to directly call and execute specific ELITEA functionalities, but requires you to explicitly define how the inputs for that functionality are prepared using input_mapping . This explicit control over input mapping can lead to better token efficiency and faster execution compared to the tool node. Purpose: To directly utilize specific ELITEA functionalities with precise control over input preparation. Common Attributes for function nodes: id : A unique name for this function node (e.g., Summarize User Story , Publish to Jira ). type : Always set this to function . input : A list of state variables that will be used to prepare the input for the ELITEA entity. This is mandatory. output : A list of names for the information that will be returned by the ELITEA entity. This is mandatory. input_mapping : Defines how the input variables from the agent's state are mapped to the input parameters of the ELITEA entity being called. For Agent as Function: If calling an ELITEA agent as a function node, input_mapping typically includes: input_mapping : task : # 'task' is a common input parameter for agents type : # variable, fstring, string, fixed value : # state variable, formatted string, text, constant value chat_history : # 'chat_history' is another common input parameter for agents type : # variable, fixed value : # 'messages' state variable, [] for empty history task : Represents the main instruction or task for the agent being called. type: string : Provides instructions directly as a string without using state variables. type: fstring : Provides parametrized instructions using variables from the agent's state . type: variable : Uses the value of a state variable as the task instruction. type: fixed : Uses a constant, hardcoded value as the task instruction. chat_history : Defines how chat history is passed to the agent being called. type: fixed : value: [] - Passes an empty chat history, effectively starting a new conversation with the child agent. type: variable : value: messages - Passes the entire current chat history to the child agent. For Prompt as Function: If calling an ELITEA prompt as a function node, input_mapping might look like: yaml input_mapping: input: # 'input' is a common input parameter for prompts (for prompts without variables) type: variable value: <state_variable_name> # The state variable containing the input for the prompt variable_name: # 'variable_name' - Use this if the prompt has variables, replace 'variable_name' with the actual variable name in the prompt type: variable value: <state_variable_name> # The state variable providing value for the prompt's variable input : Used when calling a prompt that doesn't use variables in its instructions. type: variable : Uses a state variable as input to the prompt. variable_name : Used when calling a prompt that does use variables in its instructions. Replace variable_name with the actual name of the variable used in the prompt. type: variable : Uses a state variable to provide the value for the prompt's variable. type: fixed : Uses a fixed, constant value for the prompt's variable. Useful when a variable's value is not crucial and can be a default value (e.g., \"n/a\"). For Datasource as Function: If calling an ELITEA datasource as a function node, input_mapping typically includes: yaml input_mapping: query: # 'query' is a common input parameter for datasources type: <type> # variable, string, fstring, fixed value: <value> # state variable, formatted query string, query text, constant query query : Defines the query to be executed against the datasource. type: variable : Uses a state variable as the query. type: string : Provides the query directly as a string. type: fstring : Creates a dynamic query using variables from the agent's state . type: fixed : Uses a constant, hardcoded query. Important Note: When using a datasource as a function node, remember to specify the correct tool name in your YAML instructions. Use [ToolNamewithoutspacesPredict] for prediction datasources and [ToolNamewithoutspacesSearch] for search datasources (replace ToolNamewithoutspaces with the actual tool name without spaces). transition : The id of the next node to execute after the function call. Example 1: function node - Calling an Agent (variable input mapping) - id: Draft User Story Creator type: function input: [filtered_sumarized_info] output: [draft_us] input_mapping: task: # Input mapping for 'task' parameter of the agent type: variable value: filtered_sumarized_info # Use 'filtered_sumarized_info' state variable as task transition: User Story Enhance Aggregator Explanation: input_mapping: task : Maps the input for the task parameter of the agent being called. type: variable : Specifies that the value for task will be taken from a state variable. value: filtered_sumarized_info : Indicates that the value of the filtered_sumarized_info state variable will be used as the task . Example 2: function node - Calling an Agent ( fstring input mapping) - id: User Story Enhance Aggregator input: [draft_us] output: [enhanced_us] input_mapping: task: # Input mapping for 'task' parameter of the agent type: fstring value: | Enhance the Narrative, Description and Scenarios with AC's for the given draft User Story: {draft_us} # Formatted task instruction chat_history: # Input mapping for 'chat_history' parameter of the agent type: fixed value: [] # Use empty chat history type: function transition: User Feedback and Approval Explanation: input_mapping: task : Maps the input for the task parameter of the agent being called. type: fstring : Specifies that the value for task will be created using a formatted string. value : Defines the formatted string instruction, including the {draft_us} variable from the agent's state . input_mapping: chat_history : Maps the input for the chat_history parameter. type: fixed : Specifies a fixed value for chat_history . value: [] : Sets the chat_history to an empty list, meaning the child agent will start with no prior conversation history.","title":"Node type: function"},{"location":"how-tos/agents-toolkits/pipeline-agent-framework/#node-type-loop","text":"The loop node allows you to execute a specific task repeatedly, creating a loop within your agent's workflow. You define instructions on how to create the input for each iteration of the loop. Purpose: To perform the same action multiple times, typically for each item in a list or until a certain condition is met. Useful for: Processing a list of items (e.g., files, user stories). Repeating an action until a desired outcome is achieved. Common Attributes for loop nodes: id : A unique name for this loop node (e.g., Documentor , Process User Stories ). type : Always set this to loop . task : (Mandatory) Instructions on how to formulate the input for each iteration of the loop. This is usually a text instruction that tells the agent how to extract or create input data from the current state or chat_history . tool : The name of the ELITEA entity (agent, prompt, or other tool) that will be executed in each iteration of the loop. Recommendation: Use an ELITEA agent as the tool for more complex loop logic. input (optional) : A list of state variables that might be used as input for the llm node (if an LLM is used internally to prepare loop inputs based on the task instruction). Providing input can be more token-efficient than relying solely on chat_history . output (optional) : A list of names for the information produced by the entire loop node after all iterations are complete. If you want to collect and use the results of all loop iterations in subsequent nodes, define output . transition : The id of the next node to execute after the loop finishes all iterations. Example 1: loop node - Documenting Code Files - id: Documentor type: loop task: \"Formulate ALL file paths from chat_history as a list of inputs.\" tool: Code Documentation # Assuming 'Code Documentation' is a defined prompt or agent in ELITEA transition: END Explanation: task : Provides instructions to the agent on how to create input for each loop iteration. In this case, it instructs the agent to: Extract all file paths mentioned in the chat_history . Format each file path into a dictionary with keys \"task\" (containing the file path) and \"chat_history\" (containing the entire chat_history ). tool: Code Documentation : Specifies that in each iteration of the loop, the ELITEA entity named \"Code Documentation\" will be executed. This could be an agent or a prompt designed to generate documentation for a given file path.","title":"Node type: loop"},{"location":"how-tos/agents-toolkits/pipeline-agent-framework/#node-type-loop_tool","text":"The loop_tool node is a more advanced loop type that gets the list of inputs for the loop from the output of another ELITEA entity (typically an agent). This is useful when you need to dynamically generate the items to be processed in the loop. Purpose: To iterate through a list of items generated by another ELITEA entity and perform a specific action on each item. Common Attributes for loop_tool nodes: id : A unique name for this loop_tool node (e.g., Process Pages , Generate Documentation ). type : Always set this to loop_tool . tool : The name of the ELITEA entity (agent, prompt, or datasource) that will be executed first to generate the list of inputs for the loop. loop_tool : The name of the ELITEA entity (agent, prompt, or other tool) that will be executed for each item in the list generated by the tool . Recommendation: Use an ELITEA agent as the loop_tool for more complex processing within the loop. variables_mapping : (Mandatory) Defines how to map the variables from the output of the tool (which generates the input list) to the required input parameters of the loop_tool (which processes each item in the list). For Agent loop_tool : If the loop_tool is an agent, variables_mapping typically includes mapping to task and chat_history input parameters of the agent. For Other loop_tool Types : If the loop_tool is a prompt or another type of tool, you need to map the output variables of the tool to the input parameters expected by the specific loop_tool . Refer to the documentation of the loop_tool to understand its required input parameters. input (optional) : A list of state variables that might be needed as input for the tool (the entity that generates the input list). output (optional) : A list of names for the information produced by the loop_tool in each iteration. structured_output (optional) : Indicates whether the output of the loop_tool is expected to be structured. Defaults to false . Example 1: loop_tool node - Processing Confluence Pages - id: listpages type: loop_tool tool: list_pages_with_label # Assuming 'list_pages_with_label' is a Confluence toolkit's tool that returns a list of pages structured_output: true # Expect structured output from 'list_pages_with_label' loop_tool: Confluence helper # Assuming 'Confluence helper' is an ELITEA agent to process each Confluence page variables_mapping: id: task # Map 'id' output variable from 'list_pages_with_label' to 'task' input of 'Confluence helper' messages: chat_history # Map 'messages' (likely page content) to 'chat_history' input of 'Confluence helper' transition: END Example 2: loop_tool node - Documenting Files from Directory - id: Documentor type: loop_tool tool: alita-sdk_get_files_from_directory # Assuming 'get_files_from_directory' is an GitHub tolkit's tool to get files from a 'alita-sdk' github repositary variables_mapping: file_path: task # Map 'file_path' output variable from 'alita-sdk_get_files_from_directory' to 'task' input of 'Code Documentation' messages: chat_history # Map 'messages' to 'chat_history' input of 'Code Documentation' structured_output: true # Expect structured output from 'alita-sdk_get_files_from_directory' loop_tool: Code Documentation # Assuming 'Code Documentation' is an ELITEA agent to document each file transition: END","title":"Node type: loop_tool"},{"location":"how-tos/agents-toolkits/pipeline-agent-framework/#transitions","text":"Transitions are the connections that define how your agent moves from one node to the next, establishing the sequential flow of its workflow. They dictate the order in which your agent performs actions. Within each node definition in your YAML instructions, the transition attribute is used to specify what happens after the current node finishes its execution. You use the transition attribute to tell the agent which node to go to next or to end the agent's execution. There are two primary ways to use the transition attribute: transition: <node_id> : This is used to move the agent's execution to another node within your pipeline. You replace <node_id> with the id of the node you want the agent to execute next. This creates a link in your workflow, connecting one step to another. transition: END : This special value signifies the logical end of your agent's workflow. When a node's transition is set to END , it indicates that after this node completes, the agent's execution should stop gracefully. It is crucial to ensure that all logical paths in your agent's instructions eventually lead to a node with transition: END to prevent unexpected behavior or potential issues with chat history management. Example 1: Transitioning between llm and function nodes nodes: - id: Get User Input # Define an 'llm' node to get user input type: llm prompt: type: string value: \"Please enter the Epic ID for the User Story you want to create.\" output: [epic_id] transition: Extract Epic Details # Transition to 'Extract Epic Details' node after getting user input - id: Extract Epic Details # Define a 'function' node to process the Epic ID type: function input: [epic_id] output: [filtered_epic_info] input_mapping: task: type: fstring value: \"Extract key details for Epic ID: {epic_id}\" chat_history: type: fixed value: [] transition: Draft User Story Creator # Transition to 'Draft User Story Creator' node after extracting details - id: Draft User Story Creator type: function # ... (rest of Draft User Story Creator node definition) ... transition: END # End agent execution after Draft User Story Creator completes Explanation: In this example, we see transitions connecting three nodes: Get User Input (llm node): After the agent gets the epic_id from the user, the transition: Extract Epic Details line ensures that the agent will next execute the node with the id \"Extract Epic Details\". Extract Epic Details (function node): Once the \"Extract Epic Details\" node finishes processing the epic_id , the transition: Draft User Story Creator line directs the agent to the \"Draft User Story Creator\" node. Draft User Story Creator (function node): Finally, after the \"Draft User Story Creator\" node completes its task, the transition: END line signals that this is the end of the workflow, and the agent's execution should terminate. Example 2: Linear Transition with tool node and END nodes: - id: Search Datasource # Define a 'tool' node to search a datasource type: tool tool: MyDatasourceSearch # Assuming 'MyDatasourceSearch' is a defined datasource tool in ELITEA input: [user_query] output: [search_results] transition: Display Results # Transition to 'Display Results' node after searching - id: Display Results # Define an 'llm' node to display search results to the user type: llm input: [search_results] prompt: type: fstring value: \"Here are the search results I found: {search_results}\" transition: END # End agent execution after displaying results Explanation: This example demonstrates a simpler linear flow: Search Datasource (tool node): After the tool node, which searches a datasource, completes its search and retrieves search_results , the transition: Display Results line ensures the agent moves to the \"Display Results\" node. Display Results (llm node): Once the \"Display Results\" node has presented the search_results to the user, the transition: END line is used to terminate the agent's execution, as this is the final step in this particular workflow. These examples illustrate how the transition attribute is fundamental for defining the sequential flow of actions within your Pipeline Agent, allowing you to create workflows that move from one node to the next in a controlled and logical manner, ultimately leading to the desired END state.","title":"Transitions"},{"location":"how-tos/agents-toolkits/pipeline-agent-framework/#conditions","text":"The condition attribute allows a node to conditionally transition to different next nodes based on whether a specific rule or condition evaluates to true or false. Conditions are defined using Jinja2 templating language, providing powerful logic capabilities within your agent workflow. Common Attributes for condition : condition : Indicates that the transition from this node is conditional. condition_input : (Optional, but strongly recommended) A list of state variables that will be used as input to evaluate the condition. Providing condition_input makes your conditions more readable and efficient by limiting the scope of data Jinja2 needs to access. If omitted, Jinja2 might have access to the entire state or even chat_history , potentially increasing processing overhead. condition_definition : (Mandatory) The actual rule or condition to be evaluated, written using Jinja2 templating syntax. Jinja2 Templating in condition_definition : Use {% if <condition> %} to start a conditional block. Use {% elif <condition> %} for \"else if\" conditions (optional, you can have multiple elif blocks). Use {% else %} for the \"else\" case (optional). Use {% endif %} to close the conditional block. Within the Jinja2 template, you can access state variables listed in condition_input or, if condition_input is omitted, potentially access the entire state or messages . Use Jinja2 filters like |lower to modify data (e.g., input|lower converts user input to lowercase for case-insensitive comparisons). Example 1: condition within an llm node - User Approval Check - id: Get User Story Details type: llm input: [input] prompt: type: string value: \"Please provide the description, Jira Project ID, EPIC ID, and User Story Title.\" output: [description, jira_project_id, epic_id, us_title] structured_output: true condition: condition_input: [description, jira_project_id, epic_id, us_title, input] # Input variables for condition condition_definition: | {% if 'approved' in input|lower and description and jira_project_id and epic_id and us_title %} # Condition logic using Jinja2 Unified Content Aggregator # Node to transition to if condition is true {% else %} Conversation Partner # Node to transition to if condition is false {% endif %} Explanation: condition_input: [description, jira_project_id, epic_id, us_title, input] : Specifies that these state variables will be used in the condition evaluation. condition_definition : Defines the condition using Jinja2: {% if 'approved' in input|lower and description and jira_project_id and epic_id and us_title %} : Checks if the user's input (converted to lowercase) contains \"approved\" AND if description , jira_project_id , epic_id , and us_title state variables have values (are not empty). If the condition is true, the agent transitions to the node with id: Unified Content Aggregator . {% else %} : If the condition is false. The agent transitions to the node with id: Conversation Partner . {% endif %} : Closes the conditional block. Example 2: condition with elif - Multiple Conditional Branches condition: condition_input: [input] condition_definition: | {% if 'approved' in input|lower %} User Story Publisher # Transition to 'User Story Publisher' if user types 'approved' {% elif 'datasource:' in input|lower %} Special # Transition to 'Special' if user types 'datasource:' {% elif 'finish' in input|lower %} END # Transition to 'END' if user types 'finish' {% else %} User Feedback and Approval # Default transition if none of the above conditions are met {% endif %} Explanation: This example demonstrates using elif to create multiple conditional branches based on user input. The agent checks for different keywords in the input and transitions to different nodes accordingly.","title":"Conditions"},{"location":"how-tos/agents-toolkits/pipeline-agent-framework/#decisions","text":"The decision attribute empowers a node to act as a branching point in your agent's workflow. It allows the agent to dynamically choose which node to execute next from a set of predefined options, based on the information it has gathered or the outcome of its current action. This introduces intelligent branching and conditional paths into your agent's behavior, making it more flexible and responsive. Common Attributes for decision : decision : This is the main attribute that signals that a node will make a decision about the next step in the workflow. It's a container for the decision-making configuration. nodes : (Mandatory) This is a list of node id s representing the possible nodes that the agent can transition to from this decision point. These are the potential \"next steps\" the agent can take. You must list at least one node ID here. description : (Optional) A brief textual explanation of the decision being made at this point. This is purely for documentation purposes and helps in understanding the agent's logic, especially in complex workflows. It's good practice to include a description for clarity. decisional_inputs : (Optional, but strongly recommended) A list of state variables that will be used as input for the decision-making process . These are the pieces of information the agent will consider when choosing the next node. While technically optional in the YAML structure, providing decisional_inputs is highly recommended for making your decision logic clear, maintainable, and efficient. It explicitly tells the agent what information to focus on when making the decision. default_output : (Mandatory) The id of the node to transition to if none of the specific decision conditions are met (or if the decision logic cannot determine a specific next node). This acts as a fallback path , ensuring that the agent always has a direction to proceed, even if the decision criteria are not explicitly satisfied. You must provide a valid node id as the default_output . Example 1: decision within an llm node - Handling User Feedback - id: User Feedback type: llm input: [enhanced_us, input] prompt: type: fstring value: | Please review the enhanced user story: --- {enhanced_us} --- Provide your feedback. Type \"Publish\" to publish the story, \"Edit\" to request changes, or \"Finish\" to end. output: [user_feedback] decision: nodes: [\"Publish Story\", \"Request Clarification\", \"END\", \"User Feedback\"] # Possible next nodes (including looping back to itself) description: \"Decide next step based on user feedback keywords: Publish, Edit, Finish.\" # Description of the decision decisional_inputs: [\"input\"] # Input for decision making: user's latest input default_output: \"User Feedback\" # Default: loop back to 'User Feedback' if input doesn't match keywords Explanation: In this enhanced example, the decision attribute is used within the \"User Feedback\" llm node to determine the agent's next action based on the user's response to the user story review prompt. nodes: [\"Publish Story\", \"Request Clarification\", \"END\", \"User Feedback\"] : This list defines the possible nodes the agent can transition to: \"Publish Story\" : To publish the user story. \"Request Clarification\" : To ask the user for more details or clarification if they request edits. \"END\" : To terminate the agent's execution if the user is finished. \"User Feedback\" : Importantly, it also includes the node itself ( \"User Feedback\" ). This allows the agent to loop back to the same node if the user's input doesn't clearly indicate one of the other options. description: \"Decide next step based on user feedback keywords: Publish, Edit, Finish.\" : This provides a human-readable description of the decision logic, stating that the agent will look for keywords in the user's feedback to decide the next step. decisional_inputs: [\"input\"] : This specifies that the decision will be based on the input state variable, which holds the user's latest message (their feedback in this case). default_output: \"User Feedback\" : This is the fallback option. If the agent's decision logic (defined in the background code, not in YAML) cannot clearly determine if the user wants to \"Publish\", \"Edit\", or \"Finish\" based on their input , the agent will default to transitioning back to the \"User Feedback\" node itself. This effectively re-prompts the user for clearer instructions, ensuring the agent doesn't get stuck or proceed incorrectly if the user input is ambiguous. In summary, the decision attribute provides a powerful mechanism for creating dynamic and intelligent agents that can adapt their workflow based on user input, data analysis, or the outcomes of previous steps. By carefully defining the nodes , decisional_inputs , and default_output , you can build agents that make informed choices and follow branching paths to achieve complex goals.","title":"Decisions"},{"location":"how-tos/agents-toolkits/pipeline-agent-framework/#creating-your-first-pipeline-agent-in-elitea","text":"Ready to build your own agent? Here's a step-by-step instructions to creating a Pipeline Agent in ELITEA: Start a New Agent: Look for the \"+ Agent\" button, located in the top right corner of the ELITEA interface. Click this button to begin creating a new agent. This action will open the Configuration tab for your new agent, where you'll define its settings and behavior. Name and Describe Your Agent: In the Configuration tab, you'll see fields for Name and Description . Name: Give your agent a clear and descriptive name. This name will help you easily identify your agent in ELITEA. For example, \"User Story Creator\" or \"Code Documentor\". Description: Write a brief description of what your agent does. This helps you and others understand the agent's purpose at a glance. For example, \"Agent to guide users through creating user stories in Jira.\" Add Tags (Optional): The Tags input box allows you to categorize your agent using keywords or labels. You can either type in a new tag name and press Enter, or select from a list of tags you've used before. Tags are helpful for organizing and searching for your agents later, especially if you create many of them. Choose the Agent Type: Locate the Agent type dropdown menu in the Configuration tab. Select \"Pipeline\" from the dropdown. This tells ELITEA that you want to create a Pipeline Agent, which uses the YAML-based framework we're discussing in this guide. Provide YAML Instructions: This is the heart of creating a Pipeline Agent! In the Instructions field, you will write the YAML code that defines your agent's workflow. Refer to the previous sections of this guide to understand how to write YAML instructions, define nodes, transitions, conditions, and more. Important: Make sure your YAML is correctly formatted, especially the indentation. You can use the YAML Indentation Corrector prompt mentioned in the Troubleshooting section if needed. Add and Set Up Toolkits: Scroll down to the Toolkits section in the agent configuration. Toolkits provide your agent with access to various functionalities within ELITEA. Click \"Add Toolkit\" and choose the toolkits your agent needs to perform its tasks. For example, you might need a Jira toolkit to interact with Jira, or a data source toolkit to access external information. Remember to add all agents, datasources and prompts involved in the YAML instructions, as well as other toolkits (if required). After adding a toolkit, you may need to configure it. This might involve, selecting correct version of the toolkit (agent, prompt), selecting corresponding tool (datasource) providing API keys, connection details, or other settings specific to the toolkit. Follow the instructions provided for each toolkit you add. Configure Conversation Starter and Welcome Message (Optional): These optional settings allow you to customize the initial interaction with your agent. Conversation Starter: This is a predefined set of questions or prompts that are suggested to the user when they first start a conversation with your agent. It can help guide users on how to interact with the agent. Welcome Message: This is a message that your agent automatically sends to the user when a conversation begins. It can be used to greet the user, explain what the agent can do, or provide initial instructions. You can configure these in the Conversation Starter and Welcome Message sections of the agent configuration. Save Your Agent: Once you have filled in the necessary information, provided your YAML instructions, and added toolkits, click the \"Save\" button (usually located at the bottom or top of the configuration page). Saving your agent makes your configuration live and ready to use.","title":"Creating Your First Pipeline Agent in ELITEA"},{"location":"how-tos/agents-toolkits/pipeline-agent-framework/#best-practices-and-use-cases","text":"Start with a clear goal: Define what you want your agent to achieve before you start building. Break down complex tasks: Divide large tasks into smaller, manageable nodes. Use descriptive node IDs: Choose names that clearly indicate the purpose of each node. Plan your transitions carefully: Ensure a logical flow between nodes. Test your agent thoroughly: Run your agent through different scenarios to identify and fix any issues. Utilize conditions and decisions for dynamic behavior: Make your agent more intelligent by allowing it to adapt based on user input and data. Leverage the function node for efficiency: When interacting with ELITEA entities, consider using the function node for more direct and potentially token-saving interactions. For Simplicity and Quick Setup, Choose tool nodes: If you are new to Pipeline Agents or prioritize ease of use and rapid agent creation over advanced configuration and token optimization, the tool node is an excellent starting point. tool nodes offer a simpler way to integrate ELITEA entities (prompts, agents, datasources) into your workflow with less configuration, making them ideal for quickly building functional agents, especially for users who are not yet comfortable with the more detailed input mapping required by function nodes. Use Cases: Pipeline Agents in ELITEA are particularly powerful for creating \"master\" agents. These master agents are designed for orchestration, meaning they manage and direct the flow between various other agents and ELITEA entities to achieve complex goals. Let's explore some detailed use cases:","title":"Best Practices and Use Cases"},{"location":"how-tos/agents-toolkits/pipeline-agent-framework/#use-case-1-user-story-creation-workflow-manager","text":"Scenario: This agent guides a user through the entire process of creating a well-defined user story in Jira, from gathering initial requirements to publishing the final version. Solution: This agent uses a combination of llm nodes for interacting with the user and function nodes to process information and interact with Jira. The condition node is used for decision-making based on user input. YAML Instructions: state: jira_project_id: str epic_id: str us_title: str description: str input: str messages: list filtered_sumarized_info: str draft_us: str info_from_datasource: str enhanced_us: str entry_point: Conversation Partner interrupt_after: - Conversation Partner - User Feedback and Approval nodes: - id: Conversation Partner type: llm input: [input] prompt: type: string value: | To create a new User Story, I need some information from you. Could you please provide the following details in the specified format? - **Jira Project ID**: (e.g., PAYMENTS) - **EPIC ID**: (e.g., PAYMENTS-128) - **Title**: (e.g., Checkout functionality) - **Description**: (e.g., \"The informative description of future US.\") Once you provide this information, I will ask for your approval (should be 'approved' word) to start the User Story creation process. Make your instructions to user highlighted by using markdown highlight for text. output: [description, jira_project_id, epic_id, us_title] structured_output: true condition: condition_input: [description, jira_project_id, epic_id, us_title, input] condition_definition: | {% if 'approved' in input|lower and description and jira_project_id and epic_id and us_title %} Unified Content Aggregator {% else %} Conversation Partner {% endif %} - id: Unified Content Aggregator type: function input: [epic_id, description] output: [filtered_sumarized_info] input_mapping: task: type: fstring value: | Epic ID: {epic_id}. Description: {description} chat_history: type: fixed value: [] type: function transition: Draft User Story Creator - id: Draft User Story Creator type: function input: [filtered_sumarized_info] output: [draft_us] input_mapping: input: type: variable value: filtered_sumarized_info transition: User Story Enhance Aggregator - id: User Story Enhance Aggregator type: function input: [draft_us] output: [enhanced_us] input_mapping: task: type: fstring value: | Enhance the Narrative, Description and Scenarios with AC's for the given draft User Story: {draft_us} chat_history: type: fixed value: [] type: function transition: User Feedback and Approval - id: User Feedback and Approval type: llm input: [input, enhanced_us, info_from_datasource] output: [enhanced_us] prompt: type: fstring value: | When reviewing and updating a user story, ensure its structure and format remain consistent with the original, unless the user specifically requests changes. Present the updated user story in its entirety, enriched with any necessary information, clearly and concisely for user feedback. Use the following variables to guide the process: - **Current User Input:** {input} - **Information from Data Source:** {info_from_datasource} - **Enhanced User Story:** {enhanced_us} Users can provide feedback through free form queries, which will be controlled by the \"Current User Input\" value. If the query contains \"datasource:\", access and incorporate specific data from the identified sources into the enhanced user story via \"Information from Data Source\". Present the full \"Enhanced User Story\" to the user, ensuring that the structure and format remain unchanged. Approval of the enhanced user story can be given by typing \"approved,\" which will publish it to Jira. If no further changes or publication is desired, the user can type \"finish\" to conclude the session. condition: condition_input: [input] condition_definition: | {% if 'approved' in input|lower %} User Story Publisher {% elif 'datasource:' in input|lower %} Special {% elif 'finish' in input|lower %} END {% else %} User Feedback and Approval {% endif %} - id: Special type: function input: [input] output: [info_from_datasource] input_mapping: task: type: variable value: input chat_history: type: fixed value: [] type: function transition: User Feedback and Approval - id: User Story Publisher type: function input: [jira_project_id, epic_id, enhanced_us] input_mapping: task: type: fstring value: | Create User Story in Jira using the following details: Project Id: {jira_project_id} Parent Jira Issue ID: {epic_id} User Story content: {enhanced_us} chat_history: type: fixed value: [] type: function transition: END Detailed Explanation: state : Defines the information the agent will remember, such as Jira details, user input, and the evolving user story. entry_point: Conversation Partner : The agent starts by engaging the user with the \"Conversation Partner\" node. interrupt_after : Specifies points where the agent will pause and allow user intervention after the \"Conversation Partner\" and \"User Feedback and Approval\" nodes. nodes : Conversation Partner ( llm node) : Purpose : Gathers initial information (Jira Project ID, Epic ID, Title, Description) from the user using a prompt. input: [input] : Takes the user's latest input. prompt : Instructs the user on what information to provide and in what format. output: [description, jira_project_id, epic_id, us_title] : Extracts the provided information and stores it in the agent's state . condition : Checks if the user has provided all necessary information and typed 'approved'. If so, it moves to \"Unified Content Aggregator\"; otherwise, it loops back to \"Conversation Partner\". Unified Content Aggregator ( function node) : Purpose : Prepares input for the next step by combining the Epic ID and Description. input: [epic_id, description] : Uses the Epic ID and Description from the state . output: [filtered_sumarized_info] : Stores the combined information. input_mapping : Creates a formatted string ( fstring ) with the Epic ID and Description. transition: Draft User Story Creator : Moves to the next step. Draft User Story Creator ( function node) : Purpose : Creates a draft user story. This would likely call an internal ELITEA function or another agent. input: [filtered_sumarized_info] : Uses the combined information from the previous step. output: [draft_us] : Stores the generated draft user story. input_mapping : Passes the filtered_sumarized_info as input. transition: User Story Enhance Aggregator : Proceeds to the enhancement phase. User Story Enhance Aggregator ( function node) : Purpose : Enhances the draft user story with narratives, descriptions, and acceptance criteria. input: [draft_us] : Takes the draft user story as input. output: [enhanced_us] : Stores the enhanced user story. input_mapping : Uses an fstring to instruct the enhancement process. transition: User Feedback and Approval : Moves to get user feedback. User Feedback and Approval ( llm node) : Purpose : Presents the enhanced user story to the user for review and gathers feedback. input: [input, enhanced_us, info_from_datasource] : Uses the current user input, the enhanced user story, and any information from external data sources. prompt : Provides instructions to the user on how to provide feedback, request data, approve, or finish. output: [enhanced_us] : Updates the enhanced user story based on feedback. condition : Directs the flow based on user input: approved : Moves to \"User Story Publisher\". datasource: : Moves to \"Special\" to fetch data. finish : Ends the agent execution. Other input: Loops back to \"User Feedback and Approval\". Special ( function node) : Purpose : Handles requests for incorporating data from external sources. input: [input] : Takes the user's input containing the datasource request. output: [info_from_datasource] : Stores the fetched data. input_mapping : Passes the user's input as the task. transition: User Feedback and Approval : Returns to the feedback stage. User Story Publisher ( function node) : Purpose : Publishes the approved user story to Jira. input: [jira_project_id, epic_id, enhanced_us] : Uses the Jira details and the final user story. input_mapping : Creates a formatted string with the Jira details and user story content for publishing. transition: END : Completes the agent execution.","title":"Use Case 1: User Story Creation Workflow Manager"},{"location":"how-tos/agents-toolkits/pipeline-agent-framework/#use-case-2-user-story-review-workflow-manager","text":"Scenario: This agent assists in reviewing and updating existing user stories in Jira. Solution: Similar to the creation workflow, this agent uses llm for user interaction and function nodes to read and update Jira. condition manages the flow based on user input. YAML Instructions: entry_point: Conversation Partner interrupt_after: - Conversation Partner - User Feedback and Approval nodes: - id: Conversation Partner type: llm prompt: type: string value: | To review and update User Story, I need some information from you. Could you please provide the following details in the specified format? - **JIRA Ticket ID**: (e.g., US-128) Once you provide this information, I will ask for your approval (should be 'approved' word) to start the US review process. Make your instructions to user highlighted by using markdown highlight for text. condition: condition_input: [messages] condition_definition: | {% if 'approved' in messages[-1]['content']|lower %} Jira_Read {% else %} Conversation Partner {% endif %} - id: Jira_Read type: function transition: User Feedback and Approval - id: User Feedback and Approval type: llm prompt: type: string value: | Ensure that after each review and update, the structure and format of the updated User Story remain consistent with the original, unless the user explicitly requests changes. Present the user story for user review and approval. - **Free format instructions** to make changes. - **Type 'datasource:'** followed by instructions to enhance using datasources. - **Type 'approved'** to publish the enhanced User Story to Jira. - **Type 'finish'** if you don't want to publish the enhanced User Story to Jira or make further changes. condition: condition_input: [messages] condition_definition: | {% if 'approved' in messages[-1]['content']|lower %} Jira_Update {% elif 'datasource:' in messages[-1]['content']|lower %} Special {% elif 'finish' in messages[-1]['content']|lower %} END {% else %} User Feedback and Approval {% endif %} - id: Special type: function transition: User Feedback and Approval - id: Jira_Update type: function transition: END Detailed Explanation: entry_point: Conversation Partner : The agent starts by asking for the Jira Ticket ID. interrupt_after : Allows user intervention after the initial information gathering and feedback stages. nodes : Conversation Partner ( llm node) : Purpose : Gets the Jira Ticket ID from the user. prompt : Asks for the Jira Ticket ID and approval to start the review. condition : Checks if the last message contains 'approved' (case-insensitive). If yes, moves to \"Jira_Read\"; otherwise, stays at \"Conversation Partner\". Jira_Read ( function node) : Purpose : Reads the user story details from Jira using the provided Ticket ID. transition: User Feedback and Approval : Proceeds to the feedback stage. User Feedback and Approval ( llm node) : Purpose : Presents the user story for review and gathers feedback. prompt : Provides instructions on how to provide feedback, request data, approve, or finish. condition : Directs the flow based on the last message content: approved : Moves to \"Jira_Update\". datasource: : Moves to \"Special\". finish : Ends the execution. Other input: Loops back to \"User Feedback and Approval\". Special ( function node) : Purpose : Handles requests for incorporating data from external sources (implementation details would be similar to the previous use case). transition: User Feedback and Approval : Returns to the feedback stage. Jira_Update ( function node) : Purpose : Updates the user story in Jira with the reviewed content. transition: END : Completes the agent execution.","title":"Use Case 2: User Story Review Workflow Manager"},{"location":"how-tos/agents-toolkits/pipeline-agent-framework/#use-case-3-code-documentation","text":"Scenario: This agent automates the process of generating technical documentation for code files. Solution: This agent uses a tool node to get a list of files and a loop node to iterate through each file and generate documentation. YAML Instructions: entry_point: File List Extractor nodes: - id: File List Extractor type: tool transition: Documentor - id: Documentor type: loop task: \"Formulate ALL file paths from chat_history as a list of inputs.\" tool: Code Documentation transition: END Detailed Explanation: entry_point: File List Extractor : The agent starts by extracting a list of files. nodes : File List Extractor ( tool node) : Purpose : Uses a pre-built tool (likely within ELITEA) to get a list of relevant files. transition: Documentor : Moves to the documentation generation phase. Documentor ( loop node) : Purpose : Iterates through the list of files and generates documentation for each. task : Defines how to format the input for the \"Code Documentation\" tool for each file. It instructs the agent to take file paths from the chat_history and format them. tool: Code Documentation : This refers to an ELITEA entity (likely a prompt or another agent) responsible for generating documentation for a given file path. transition: END : Completes the agent execution after processing all files.","title":"Use Case 3: Code Documentation"},{"location":"how-tos/agents-toolkits/pipeline-agent-framework/#use-case-4-orchestrating-us-creation-and-test-case-generation","text":"Scenario: This master agent orchestrates the creation of a user story followed by the generation of test cases for that user story. Solution: This agent uses tool nodes to trigger other specialized agents for user story creation and test case generation. YAML Instructions: entry_point: BA Agent - Create User Stories nodes: - id: BA Agent - Create User Stories type: tool transition: QA Agent - Create Test Cases - id: QA Agent - Create Test Cases type: tool transition: END Detailed Explanation: entry_point: BA Agent - Create User Stories : The agent starts by triggering the \"BA Agent - Create User Stories\". nodes : BA Agent - Create User Stories ( tool node) : Purpose : Triggers another ELITEA agent specifically designed for user story creation. transition: QA Agent - Create Test Cases : Once the user story is created, it moves to the test case generation phase. QA Agent - Create Test Cases ( tool node) : Purpose : Triggers another ELITEA agent responsible for generating test cases for the newly created user story. transition: END : Completes the agent execution after test cases are generated. This use case highlights the power of Pipeline Agents for orchestration. The master agent doesn't perform the detailed tasks itself but delegates them to specialized agents, creating a modular and efficient workflow.","title":"Use Case 4: Orchestrating US Creation and Test Case Generation"},{"location":"how-tos/agents-toolkits/pipeline-agent-framework/#use-case-5-master-bulk-user-story-creation-workflow-manager","text":"Scenario: This agent acts as a central hub for creating multiple user stories at once and then publishing them either to Jira or Confluence, depending on the user's provided information. Solution: This agent utilizes an llm node for initial input, a tool node to extract relevant information, a tool node to handle the bulk creation, another llm node to prepare data for publishing, and a decision node to route to the appropriate publishing function ( tool nodes for Jira and Confluence). YAML Instructions: entry_point: User Input nodes: - id: User Input type: llm prompt: type: string value: | Act as a router and route the user query to the appropriate node using the provided user input. transition: Jira Epic Extractor - id: Jira Epic Extractor type: tool transition: Bulk User Stories Creator - id: Bulk User Stories Creator type: tool transition: Story Creator - id: Story Creator type: llm prompt: type: string value: | For publishing, provide the Project and EPIC if using the \"Jira Bulk US Publisher\" node. Provide the Confluence Space Key and Confluence Parent Page ID if using the \"Confluence Bulk US Publisher\" node. Use the created bulk User Stories from the chat history and pass them unchanged to the next node. Carefully prepare the data for the next node including the initial provided by user input (first message in the chat history). decision: nodes: - Confluence Bulk US Publisher - Jira Bulk US Publisher description: | Select \"Confluence Bulk US Publisher\" if a Confluence Parent Page ID is provided in the user input. If not, select \"Jira Bulk US Publisher.\" Ensure publishing occurs in only one node based on the presence of the Confluence Parent Page ID. - id: Confluence Bulk US Publisher type: tool transition: END - id: Jira Bulk US Publisher type: tool transition: END Detailed Explanation: entry_point: User Input : The agent begins by receiving user input in the \"User Input\" node. nodes : User Input ( llm node) : Purpose : Acts as an initial entry point, receiving the user's request for bulk user story creation. While the prompt itself is simple, in a real-world scenario, this node might contain more elaborate instructions to guide the user on providing the necessary information for bulk creation. prompt : The prompt instructs the LLM to act as a router, preparing to send the user's query to the next appropriate node. transition: Jira Epic Extractor : The agent proceeds to the \"Jira Epic Extractor\" node. Note that the naming of this transition might be slightly misleading as the agent intends to handle both Jira and Confluence publishing. A more generic name like \"Extract Information\" might be more accurate. Jira Epic Extractor ( tool node) : Purpose : This node is intended to extract relevant information from the user's input, such as the Jira Epic under which the user stories should be created. transition: Bulk User Stories Creator : After extracting the necessary information (presumably the Jira Epic), the agent moves to the \"Bulk User Stories Creator\" node. Bulk User Stories Creator ( tool node) : Purpose : This node utilizes a pre-built tool within ELITEA to handle the actual creation of multiple user stories. The specifics of this tool (e.g., how it receives the user story data) are not detailed in the YAML. transition: Story Creator : Once the bulk user stories are created, the agent transitions to the \"Story Creator\" node to prepare them for publishing. Story Creator ( llm node) : Purpose : This node prepares the created user stories and gathers necessary publishing information from the user. prompt : The prompt instructs the user to provide either Jira Project and EPIC details or Confluence Space Key and Confluence Parent Page ID, depending on where they want to publish the stories. It also emphasizes passing the created bulk User Stories from the chat history to the next node. decision : This attribute defines the logic for choosing the appropriate publishing node. nodes : Lists the possible next nodes: \"Confluence Bulk US Publisher\" and \"Jira Bulk US Publisher\". description : Explains the decision-making process: if a Confluence Parent Page ID is present in the user input, route to the Confluence publisher; otherwise, route to the Jira publisher. This ensures that the publishing happens in only one of the nodes. Confluence Bulk US Publisher ( tool node) : Purpose : This node utilizes a function within ELITEA to publish the bulk user stories to Confluence. transition: END : After publishing to Confluence, the agent's execution is complete. Jira Bulk US Publisher ( tool node) : Purpose : This node utilizes a function within ELITEA to publish the bulk user stories to Jira. transition: END : After publishing to Jira, the agent's execution is complete. This use case demonstrates a more complex orchestration scenario where the Pipeline Agent acts as a smart router, guiding the user through bulk operations and making decisions based on the provided information to ensure the user stories are published to the correct platform.","title":"Use Case 5: Master - Bulk User Story Creation Workflow Manager"},{"location":"how-tos/agents-toolkits/pipeline-agent-framework/#use-case-6-automated-github-code-documentation","text":"Use Case Title: GitHub Code Documentation Generator Scenario: This agent automates the process of generating technical documentation for code files directly from a GitHub repository. It retrieves a list of code files from a specified GitHub repository, generates documentation for each file, and then publishes the generated documentation back to a dedicated documentation branch within the same repository. Solution: This agent leverages the loop_tool node for efficient processing of multiple files. It uses a function node as the initial tool in loop_tool to get the list of code files from GitHub. Then, for each file, it uses a loop_tool (Code Documentation agent - assumed to be pre-existing in ELITEA) to generate the documentation. Finally, it would ideally include a node (not shown in the provided YAML, but conceptually needed) to publish the documentation back to the GitHub repository. YAML Instructions: state: messages: list input: str file_listing: str entry_point: File List Extractor nodes: - id: File List Extractor type: function input: [input] output: [file_listing] input_mapping: task: type: variable value: input chat_history: type: fixed value: [] transition: Documentor - id: Documentor type: loop input: [file_listing] # Corrected input to be file_listing task: \"Formulate ALL file paths from file_listing as a list of inputs. The input values should be of format \\\"{\\\"task\\\": \\\"<file path from file_listing>\\\", \\\"chat_history\\\": [<actual chat history>]}\\\"\" # Improved task instruction tool: Code Documentation # Assuming 'Code Documentation' is an ELITEA agent transition: END Detailed Explanation: state : Defines the agent's memory, including: messages : Conversation history. input : User input. file_listing : Will store the list of files retrieved from GitHub. entry_point: File List Extractor : The agent starts by executing the \"File List Extractor\" node. nodes : File List Extractor ( function node) : Purpose : Retrieves a list of code files from a GitHub repository. This node is designed to call an ELITEA function (or potentially an agent or tool) that interacts with the GitHub API to get the file listing. type: function : Specifies this is a function node. input: [input] : Takes user input (likely containing GitHub repository details) as input. output: [file_listing] : Stores the retrieved list of files in the file_listing state variable. input_mapping : Defines how input is prepared for the function call: task : Maps the input state variable to the task parameter of the function. It assumes the function expects the repository details as the 'task'. chat_history : Sets chat_history to an empty list, as chat history is likely not relevant for fetching file lists. transition: Documentor : After retrieving the file list, the agent moves to the \"Documentor\" node. Documentor ( loop node) : Purpose : Iterates through the file_listing and generates documentation for each file. type: loop : Specifies this is a loop node. input: [file_listing] : Takes the file_listing (list of files) as input for the loop. task : Provides instructions on how to create input for each loop iteration. It instructs the agent to: Formulate file paths from the file_listing (corrected to use file_listing instead of chat_history as in the initial prompt). Format each file path as input in the specified JSON format. tool: Code Documentation : Specifies that for each file in the loop, the ELITEA entity named \"Code Documentation\" will be executed to generate documentation. This is assumed to be a pre-existing agent or prompt in ELITEA designed for code documentation. transition: END : After documenting all files in the list, the agent's execution completes. Note: This YAML provides the core logic for fetching files and looping through them for documentation. A complete solution would likely require: A specific ELITEA function or agent to be called in \"File List Extractor\" that can interact with the GitHub API to retrieve file lists based on user input (e.g., repository URL, branch). A \"Code Documentation\" ELITEA agent or prompt that can generate documentation from a given file path. Potentially, additional nodes to handle publishing the generated documentation back to GitHub, which is not included in this YAML snippet.","title":"Use Case 6: Automated GitHub Code Documentation"},{"location":"how-tos/agents-toolkits/pipeline-agent-framework/#use-case-7-confluence-page-data-extraction-to-csv","text":"Use Case Title: Confluence Page Metadata to CSV Exporter Scenario: This agent gathers metadata (title, description, page ID) from a list of Confluence pages (identified by labels) and saves this information into a CSV file. This is useful for creating reports, backups, or analyzing Confluence content. Solution: This agent utilizes the loop_tool node for efficient iteration over Confluence pages. It directly calls a Confluence toolkit's tool ( list_pages_with_label ) as the tool in loop_tool to get the list of pages. Then, for each page (implicitly within the loop_tool 's logic), it extracts the required metadata. Finally, it would require an additional node (not shown) to format and save the extracted data as a CSV file. YAML Instructions: entry_point: listpages nodes: - id: listpages type: loop_tool tool: list_pages_with_label # Direct call to Confluence toolkit's 'list_pages_with_label' tool structured_output: true # Expect structured output from the Confluence tool loop_tool: Confluence helper # While 'Confluence helper' is listed, it might not be strictly needed for *just* data extraction in this simplified example. A more direct approach might be possible depending on the 'list_pages_with_label' tool's output. variables_mapping: id: task # Map 'id' output variable from 'list_pages_with_label' to 'task' input (though 'Confluence helper' might not need 'task' in this context) messages: chat_history # Map 'messages' to 'chat_history' (likely not used in this data extraction scenario) transition: END Detailed Explanation: entry_point: listpages : The agent execution starts at the \"listpages\" node. nodes : listpages ( loop_tool node) : Purpose : Retrieves a list of Confluence pages that have a specific label and extracts their metadata. type: loop_tool : Specifies this is a loop_tool node. tool: list_pages_with_label : Directly calls a tool from the Confluence toolkit named list_pages_with_label . This assumes that the Confluence toolkit is added to the agent and that list_pages_with_label is a valid tool within that toolkit that can retrieve a list of Confluence pages based on labels. structured_output: true : Indicates that the output from the list_pages_with_label tool is expected to be in a structured format (likely a list of dictionaries or JSON objects), making it easier to map variables. loop_tool: Confluence helper : While Confluence helper is listed as loop_tool , in this simplified example focused on data extraction, it might not be strictly necessary. The list_pages_with_label tool itself might be sufficient to retrieve the required metadata for each page. A more efficient approach could potentially directly process the output of list_pages_with_label without needing a separate loop_tool . However, if further processing per page was needed (beyond just listing metadata), then Confluence helper (presumably an agent designed for Confluence page operations) would be relevant as the loop_tool . variables_mapping : Defines how to map variables from the output of list_pages_with_label to the input of Confluence helper (though Confluence helper 's role is questionable in this data extraction context): id: task : Maps the id output variable from list_pages_with_label to the task input parameter. The purpose of this mapping is unclear in this data extraction scenario, as Confluence helper might not need a 'task' for simple metadata extraction. messages: chat_history : Maps the messages output variable to chat_history . This mapping is likely not relevant or used in this data extraction scenario. transition: END : After processing all pages (or after the list_pages_with_label tool completes its task), the agent execution ends. Note: This YAML provides a basic structure for extracting Confluence page metadata. A fully functional agent would likely require: The Confluence toolkit to be added and properly configured in the agent settings. A clear understanding of the output structure of the list_pages_with_label tool to ensure correct variables_mapping . Okay, I have thoroughly reviewed the \"Troubleshooting\" section of the Pipeline Agent Framework guide, considering the entire guide content and aiming for enhanced clarity, comprehensiveness, and user-friendliness. Here's the improved \"Troubleshooting\" section:","title":"Use Case 7: Confluence Page Data Extraction to CSV"},{"location":"how-tos/agents-toolkits/pipeline-agent-framework/#troubleshooting-your-pipeline-agents","text":"Building intelligent agents can sometimes involve a bit of debugging! This section is designed to be your go-to guide for diagnosing and resolving common issues you might encounter while creating and running Pipeline Agents in ELITEA. The First Step: Pay Attention to Error Messages! Whenever your agent encounters a problem during execution, ELITEA will display error messages directly in the Chat window. These error messages are your most valuable first clue! Carefully read and understand these messages, as they often pinpoint the exact location and nature of the issue in your YAML instructions. Here's a breakdown of common problems and step-by-step solutions: YAML Syntax Errors: The Foundation is Key Problem: Your agent fails to load or starts with errors due to fundamental mistakes in the YAML structure itself. Solution: YAML is strict about syntax. Double-check these basics: Correct Key-Value Pairs: Ensure every line follows the key: value format. Consistent Indentation (Spaces, Not Tabs!): YAML uses indentation to define hierarchy. Always use spaces for indentation, and be consistent with the number of spaces at each level. Incorrect indentation is a very common cause of YAML errors. Proper List Formatting: List items must start with a hyphen (-) . Valid Data Types: Be mindful of the expected data types (e.g., str , int , list , dict ) when defining your state and node attributes. No Tabs Allowed: Never use tabs for indentation in YAML. Only spaces are permitted. YAML Indentation Issues: The Invisible Enemy Problem: Your agent's behavior is unpredictable, or it fails to load because of subtle indentation errors in your YAML. Solution: YAML indentation is crucial! Even if you think your indentation is correct, use the YAML Indentation Corrector prompt within ELITEA. This prompt automatically analyzes your YAML code and corrects any indentation problems, saving you significant debugging time. Agent Won't Start: Entry Point Check Problem: You expect your agent to begin, but nothing happens. Solution: The entry_point is the agent's starting instruction. Verify that the entry_point value in your YAML file exactly matches the id of the node you intend to be the first step. Typos or incorrect capitalization will prevent the agent from finding its starting point. Unexpected Transitions: Wrong Turn in the Workflow Problem: The agent moves to a node that is not the one you intended after a specific step. Solution: Trace the transition from the node where the unexpected jump occurs. Carefully examine: transition Attribute: For simple transitions, ensure the node_id specified in the transition attribute is spelled correctly and matches the id of the intended next node. condition Attribute: If the transition is controlled by a condition , meticulously analyze: condition_input : Are you providing the correct state variables as input to your condition? condition_definition (Jinja2 Logic): Is your Jinja2 condition logic correct? Are you using the right variables, operators, and syntax? Test your condition logic step-by-step. decision Attribute: If the transition is based on a decision , review: decisional_inputs : Are you feeding the correct state variables to the decision-making process? default_output : Is the default_output node correctly specified for cases where none of the decision criteria are met? Node Name Mismatches: Spelling Matters! Problem: The agent reports errors indicating it cannot find a specific node. Solution: Node id s are case-sensitive and must be spelled exactly the same way throughout your YAML: Verify Node id s: Double-check the spelling and capitalization of all id values you've assigned to your nodes. Ensure consistency in how you refer to these id s in transition , condition , and decision attributes. ELITEA Toolkit Names (for tool nodes): If you are using tool nodes to call ELITEA entities (prompts, agents, datasources), the tool name in your YAML must perfectly match the name of the toolkit entity in ELITEA. Toolkit names are also case-sensitive. llm Node Referencing Errors: ID Consistency Problem: Transitions, conditions, or decisions are not working correctly when referencing an llm node. Solution: It's easy to make mistakes when referencing node IDs. Carefully confirm that the id you assigned to your llm node is accurate and that you are using that exact id in all transition , condition , or decision attributes that are supposed to point to your llm node. Incorrect Data in state : Agent Memory Issues Problem: Your agent is using or displaying wrong or outdated information. Solution: The state is your agent's memory. To debug state issues: Strategic Interruptions: Use interrupt_before and interrupt_after in your YAML to pause the agent at key points in its workflow. Inspect the state : When the agent pauses due to an interruption, examine the current state (the agent's memory). Check the values of your state variables to see if they are being populated correctly, updated as expected, and contain the right data at each step. This helps you track data flow and identify where information might be going wrong. condition Logic Errors: Jinja2 Debugging Problem: Conditions are not behaving as you expect, leading to the agent taking the wrong path. Solution: Conditions use Jinja2 templating. Review your condition_definition with extra care: Jinja2 Syntax: Ensure you are using correct Jinja2 syntax ( {% if %} , {% elif %} , {% else %} , {% endif %} ). Variable References: Double-check that you are correctly referencing the state variables you intended to use within the Jinja2 template (especially those listed in condition_input ). Logical Operators and Comparisons: Verify that your logical operators ( and , or , not ) and comparison operators ( == , != , > , < , >= , <= , in ) are used correctly to express your condition. function Node Input/Output Mapping Problems: Data Flow Breakdown Problem: A function node fails to execute correctly, or the ELITEA entity it's calling doesn't receive the right input. Solution: function nodes rely on precise input_mapping . Scrutinize these attributes: input List: Ensure the input list in your function node correctly names the state variables that are supposed to provide data to the function. output List: Verify that the output list specifies the correct names for the state variables where the function's results should be stored. input_mapping Details: This is critical! For each parameter you are mapping in input_mapping (like task , query , input , or custom parameters), confirm: type : Is the type ( variable , fstring , fixed , string ) appropriate for how you want to provide the input value? value : Is the value correctly specified? If type: variable , is it the correct state variable name? If type: fstring , is the formatted string template correct, and are the variables within it spelled right? If type: fixed or type: string , is the hardcoded value what you intended? Toolkit Configuration Issues: ELITEA Setup Problem: tool or function nodes that rely on ELITEA toolkits (like Jira, Confluence, Datasources, Agents, Prompts) are not working. Solution: Crucially, ensure that you have added and correctly configured all necessary toolkits in your Agent's Configuration tab in ELITEA. Add Toolkits: In the Agent's Configuration, go to the \"Toolkits\" section and click \"Add Toolkit.\" Select all the toolkits (Jira, Confluence, Datasources, Agents, Prompts, etc.) that your Pipeline Agent uses in its YAML instructions. Configure Toolkits: After adding toolkits, you often need to configure them. This might involve: Selecting the correct Toolkit Version: For Agents and Prompts, ensure you select the correct version from the dropdown. Selecting the Right Tool (Datasource): For Datasource toolkits, choose the specific datasource tool you intend to use. Providing Credentials: For Jira, Confluence, and other external services, you'll likely need to provide API keys, usernames, passwords, or connection details as required by the toolkit. Incorrect or missing toolkit configuration is a very common reason for agents to fail. Debugging Complex Pipelines: Step-by-Step Approach Problem: Troubleshooting becomes challenging in agents with many nodes, conditions, and decisions. Solution: Adopt a systematic debugging strategy: Isolate the Problem: Try to narrow down the issue to a specific node or section of your pipeline. Comment out parts of your YAML temporarily to isolate the area of concern. Step-by-Step Execution Analysis: Mentally walk through your agent's workflow step by step, node by node. Strategic Interruptions (Again!): Use interrupt_before and interrupt_after liberally to pause the agent at multiple points and inspect the state at each stage. This helps you track data flow and pinpoint where logic might be breaking down. Detailed Error Message Review: Re-examine the error messages in the Chat window. Even if they seem cryptic at first, they often contain valuable clues about the location and type of error. By following these troubleshooting steps and systematically checking for common issues, you'll be well-equipped to diagnose and fix problems in your Pipeline Agents, allowing you to build robust and effective intelligent assistants in ELITEA!","title":"Troubleshooting Your Pipeline Agents"},{"location":"how-tos/agents-toolkits/pipeline-agent-framework/#useful-links-and-materials","text":"To further enhance your understanding and skills in building Pipeline Agents, here are some helpful resources: ELITEA Agents Configuration : Learn more about configuring and managing agents within ELITEA. Public Agents in Nexus : Discover and study real-world examples of Pipeline Agents created by the ELITEA community. This is a great source of inspiration and practical learning. Alita SDK GitHub Repository : Explore the codebase behind the Pipeline Agent Framework and its nodes. This is a valuable resource for understanding the inner workings and extending its capabilities. YAML Specification : Gain a comprehensive understanding of YAML syntax and structure. Jinja Templating Engine Documentation Master the syntax and features of Jinja2, the templating language used for defining conditions in Pipeline Agents.","title":"Useful Links and Materials"},{"location":"how-tos/agents-toolkits/qtest_toolkit/","text":"ELITEA Toolkit Guide: qTest Integration Introduction Purpose of this Guide This guide is your definitive resource for integrating and effectively utilizing the qTest toolkit within ELITEA. It provides a detailed, step-by-step walkthrough, from setting up your qTest API token to configuring the toolkit in ELITEA and seamlessly incorporating it into your Agents. By following this guide, you will unlock the power of automated test management, streamlined QA workflows, and enhanced collaboration between development and testing teams, all directly within the ELITEA platform. This integration empowers you to leverage AI-driven automation to optimize your qTest-driven workflows, enhance QA productivity, and improve software quality within your projects. Brief Overview of qTest qTest, by Tricentis, is a leading cloud-based test management platform designed to centralize and streamline all aspects of software testing. It is widely used by QA teams to manage test cases, execute test runs, track defects, and generate comprehensive reports. qTest offers a wide array of functionalities, including: Centralized Test Case Management: qTest provides a centralized repository for creating, organizing, and managing test cases, ensuring a structured and easily accessible test library for your QA team. Efficient Test Execution and Tracking: Enables efficient test execution and real-time tracking of test runs, allowing QA teams to monitor progress, identify bottlenecks, and ensure timely test completion. Requirement and Defect Traceability: qTest facilitates traceability by linking test cases to requirements and defects, providing a clear audit trail and ensuring comprehensive test coverage and issue tracking throughout the testing lifecycle. Comprehensive Reporting and Analytics: Offers robust reporting and analytics capabilities, allowing QA teams to generate detailed reports on testing progress, quality metrics, defect trends, and test coverage, providing valuable insights for decision-making and continuous improvement. Agile and DevOps Integration: qTest is designed to integrate seamlessly with Agile and DevOps workflows, supporting iterative testing, continuous testing practices, and integration with CI/CD pipelines and development tools, enabling efficient and agile QA processes. Integrating qTest with ELITEA brings these powerful test management capabilities directly into your AI-driven workflows. Your ELITEA Agents can then intelligently interact with your qTest projects and test assets to automate test management tasks, enhance QA processes, improve test coverage, and leverage AI to optimize your entire software testing lifecycle within qTest. Toolkit's Account Setup and Configuration in qTest Account Setup qTest is a commercial test management tool and is available as a trial version for a limited period. To create a qTest account, follow these steps: Visit Tricentis Website: Open your web browser and navigate to the official Tricentis qTest website: https://www.tricentis.com/ . Navigate to Trials & Demos: Click on \"Trials & demos\" in the main navigation menu to begin the trial registration process. Find qTest and Start Free Trial: On the \"Trials & demos\" page, locate the qTest section and click the \"Free trial\" button. Fill in Registration Form: The \"Start your free 14-day Tricentis qTest Trial\" message should be displayed, and a registration form will appear on the right side of the page. Provide the following basic information in the registration form: Business email address: Enter your business email address (preferably your company email). QTest typically provides free trials for business email IDs. First Name: Enter your first name. Last Name: Enter your last name. Country: Select your country from the dropdown menu. Phone: Enter your phone number. Job Title: Enter your job title. Submit Registration Form: After filling out the registration form, click the \"Next Page\" button to submit the form. Create QTest Web Address and Account Details: A new window will open, prompting you to fill in the details to create your new qTest web address and account credentials: Username: Your username is prefilled based on your account registration. You can modify it if needed. Create Your QTest Web Address: Enter a unique subdomain name in the field provided (e.g., alitatest ). This subdomain will be used as part of your unique QTest web address to access your qTest trial account (e.g., alitatest.qtestnet.com ). Password: Create a strong password for your QTest account. Use a combination of uppercase letters, lowercase letters, numbers, and special characters to create a secure password. Confirm Password: Re-enter the same password to confirm it. qTest Data Storage Location: Select a preferred data storage location from the dropdown menu. Choose a location that complies with your organization's data storage and compliance requirements (e.g., United States, Europe). Privacy Policy Review: Read the note regarding the data center location and compliance with jurisdictional laws. Review the Privacy Policy if necessary. Start My Trial: Once all fields are correctly filled, click the orange \"Start My Trial\" button to proceed and create your qTest trial account. Check Your Email for Confirmation: After submitting the form, you should receive a confirmation email from Tricentis qTest. This email may include a link to set up your qTest account and verify your email address. Follow the instructions in the email to complete the registration and activate your free trial. Access qTest: After verifying your email, you will be directed to the qTest platform. Log in using the username, password, and QTest web address you provided during registration. Token/API Key Generation: Finding API Token in qTest To securely integrate ELITEA with qTest, you need to obtain your qTest API token. This token will be used by ELITEA to authenticate and access your qTest projects and test data. Follow these steps to find your API token in qTest: Log in to qTest: Access your qTest instance by navigating to your qTest web address (e.g., alitatest.qtestnet.com ) and logging in with your qTest credentials. Access API & Webhooks Settings: Once logged in, navigate to your user profile settings. The exact location may vary slightly depending on your qTest version, but it is typically found under your profile menu or user settings. Look for options like \"Integration Settings\" , \"API Access\" , or \"Webhooks\" . In newer versions of qTest, you can find it under \"Manager\" -> \"API & SDK\" . Locate API Key/Token: In the \"API & SDK\" settings, you should find your Token or Bearer Token. It may be labeled as \"Token\" , or \"Brstrt Token\" . Copy and Store Your API Token: Copy the API token displayed on the page. Store it securely in a password manager or, preferably, ELITEA's built-in Secrets feature for enhanced security within ELITEA. You will need this API token to configure the qTest toolkit in ELITEA. System Integration with ELITEA Agent Creation/Configuration To integrate qTest functionalities into your workflows, you will need to configure the qTest toolkit within an ELITEA Agent. You can either create a new Agent specifically for qTest interactions or modify an existing Agent to incorporate qTest tools. Navigate to Agents Menu: In ELITEA, go to the Agents menu from the main navigation panel. Create or Edit Agent: Create a New Agent: Click on the \"+ Agent\" button to create a new Agent. Follow the on-screen prompts to define essential Agent attributes such as Agent name, a descriptive Agent description, the desired Agent type, and initial instructions for the Agent. Edit an Existing Agent: Select the Agent you intend to integrate with qTest from your list of Agents. Click on the Agent's name to open its configuration settings for editing. Access Tools Section: Within the Agent configuration interface, scroll down until you locate the \"Tools\" section. This section is where you will add and configure toolkits, including the qTest toolkit. Toolkit Configuration This section provides detailed instructions on how to configure the qTest toolkit within your ELITEA Agent. Add Toolkit: In the \"Tools\" section of the Agent configuration, click on the \"+\" icon . This action will display a dropdown list of available toolkits that can be integrated with your Agent. Select qTest Toolkit: From the dropdown list of available toolkits, choose \"qTest\" . Selecting \"qTest\" will open the \"New qTest tool\" configuration panel, where you will specify the settings for your qTest integration. Configure qTest Toolkit Settings: Carefully fill in the following configuration fields within the \"New qTest tool\" section: Name: Enter a descriptive Name for your qTest toolkit instance. Choose a name that is easily recognizable and helps you identify its purpose within your Agent's instructions (e.g., \"ProjectQTest\", \"TestManagementAccess\", \"QTestIntegration\"). Description: Provide a concise Description for the toolkit. This description should clarify the toolkit's purpose or the specific qTest project it is intended to access (e.g., \"Toolkit for accessing and managing test cases in qTest\", \"Integration for qTest Project 'Project Alpha'\"). Base URL: Enter the base URL of your qTest instance API endpoint. Ensure you use the correct format : https://qtest.example.com (Replace qtest.example.com with your actual qTest subdomain). Project ID: Enter the Project ID of the specific qTest project you want to connect to with this toolkit. The Project ID is a numerical identifier for your qTest project. You can typically find the Project ID in your qTest project settings or in the URL when you are within your qTest project. Authentication Options - API Token: Select the \"API Token\" authentication option. Password/Secret: Choose \"Password\" and paste the Bearer token you obtained from qTest (during the \"Software-Specific Setup\" section of this guide) into the \"Password\" field. Enhanced Security with Secrets (Recommended): For enhanced security, it is strongly recommended to use ELITEA's Secrets Management feature to store your qTest API token securely. Instead of directly pasting the token into the \"Password\" field, select the \"Secret\" option and choose the pre-configured secret containing your qTest API token from the dropdown list. This prevents hardcoding sensitive credentials in your toolkit configuration. Enable Desired Tools: In the \"Tools\" section within the qTest toolkit configuration panel, select the checkboxes next to the specific qTest tools that you want to enable for your Agent. It is crucial to enable only the tools that your Agent will actually need to use to adhere to the principle of least privilege and minimize potential security risks. Available tools include: Search by DQL - Allows searching for test cases using qTest DQL queries. Create test cases - Enables the Agent to create new test cases in qTest. Update test case - Allows the Agent to update existing test cases in qTest. Find test case by ID - Enables the Agent to retrieve a specific test case by its ID. Delete test case - Allows the Agent to delete test cases from qTest. Complete Setup: After configuring all the necessary settings and enabling the desired tools, click the arrow icon (located at the top right of the toolkit configuration section) to finalize the qTest toolkit setup and return to the main Agent configuration menu. Click Save in the Agent configuration to save all changes and activate the qTest toolkit integration for your Agent. Tool Overview: qTest Toolkit Functionalities Once the qTest toolkit is successfully configured and added to your Agent, you can leverage the following tools within your Agent's instructions to enable intelligent interaction with your qTest projects and test assets: Search by DQL: Tool Name: search_by_dql Functionality: Allows Agents to search for test cases in qTest using Data Query Language (DQL) queries. Returns a list of test cases matching the DQL query. Purpose: Enables advanced and flexible test case searching based on complex criteria defined using DQL, allowing Agents to retrieve specific sets of test cases for reporting, analysis, test planning, or workflow automation based on qTest data. Create test cases: Tool Name: create_test_cases Functionality: Automates the creation of new test cases in qTest within a specified project and test suite. Allows for bulk creation of test cases using a list of test case details. Purpose: Streamlines test case authoring and test plan creation by enabling Agents to automatically generate new test cases in qTest directly from ELITEA workflows, based on requirements, user stories, or automated test generation processes, improving test coverage and reducing manual test case creation effort. Update test case: Tool Name: update_test_case Functionality: Allows Agents to modify and update fields of existing test cases in qTest. Requires the Test Case ID and a JSON object containing the fields to update and their new values. Purpose: Enables automated test case maintenance, allowing Agents to update test case steps, expected results, statuses, custom fields, or any other test case attributes based on changing requirements, test feedback, or workflow progress, ensuring test cases are always up-to-date and accurately reflect current testing needs. Find test case by ID: Tool Name: find_test_case_by_id Functionality: Retrieves detailed information about a specific test case from qTest using its unique Test Case ID. Returns comprehensive test case details, including steps, parameters, and custom fields. Purpose: Provides Agents with a quick and precise way to access detailed information for specific test cases, enabling efficient retrieval of test case details for test execution guidance, reporting, analysis, or incorporating test case information into ELITEA workflows. Delete test case: Tool Name: delete_test_case Functionality: Automates the deletion of a specific test case from qTest, identified by its Test Case ID. Purpose: Enables automated test case cleanup and test data management by allowing Agents to delete obsolete or redundant test cases from qTest, helping maintain a clean, organized, and efficient test case repository and reducing test data clutter. Instructions and Prompts for Using the qTest Toolkit To effectively utilize the qTest toolkit within your ELITEA Agents, you need to provide clear and precise instructions within the Agent's \"Instructions\" field, telling the Agent how and when to use these tools. General Instruction Structure: When instructing your Agent to use a qTest tool, you will typically follow this pattern: Use the \"[tool_name]\" tool to [describe the action you want to perform] in qTest. Provide the following parameters: - Parameter 1: <value or description of value> - Parameter 2: <value or description of value> - ... Example Agent Instructions for qTest Toolkit Tools: Agent Instructions for Searching Test Cases using DQL: Use the \"search_by_dql\" tool to search for test cases in qTest using a DQL query. Provide the following parameters: - DQL Query: \"Project = 'Project Alpha' AND Status = 'Ready for Automation' AND Priority = 'High'\" Agent Instructions for Creating New Test Cases: Use the \"create_test_cases\" tool to create new test cases in qTest. Provide the following parameters: - Project ID: \"12345\" - Test Suite ID: \"67890\" - Test Cases Data (JSON Array): [ { \"Name\": \"Test Login Functionality - Positive Case\", \"Description\": \"Verify user login with valid credentials.\", \"Steps\": \"1. Open Login Page\\n2. Enter valid username\\n3. Enter valid password\\n4. Click Login\", \"Expected Result\": \"User should be logged in successfully.\" }, { \"Name\": \"Test Login Functionality - Negative Case\", \"Description\": \"Verify user login with invalid credentials.\", \"Steps\": \"1. Open Login Page\\n2. Enter invalid username\\n3. Enter invalid password\\n4. Click Login\", \"Expected Result\": \"Error message should be displayed.\" } ] Agent Instructions for Updating an Existing Test Case: Use the \"update_test_case\" tool to update the description and status of an existing test case in qTest. Provide the following parameters: - Test Case ID: \"7\" - Fields to Update (JSON): { \"description\": \"Updated description: Added more detailed steps for test execution.\", \"properties\": { \"Status\": \"Ready for Review\" } } Important Considerations for Agent Instructions: Tool Name Accuracy: Ensure you use the correct Tool Name (e.g., \"search_by_dql\" , \"create_test_cases\" , \"update_test_case\" ) as listed in the \"Tool Overview\" section. Typos or incorrect tool names will prevent the Agent from using the toolkit correctly. Parameter Clarity: Clearly specify the parameters required for each tool and provide instructions on where the Agent should obtain the values for these parameters (e.g., from user input, from previous steps in the workflow, or hardcoded values). Context and Examples: Provide sufficient context and examples within your Agent's \"Instructions\" to guide the LLM in understanding when and how to use the qTest toolkit tools effectively within your desired workflow. qTest IDs and Names: Ensure that you use the correct Project IDs, Test Suite IDs, Test Case IDs, Field Names, and other identifiers that accurately correspond to your qTest project and test assets. Incorrect IDs or names will lead to errors or incorrect tool execution. DQL Query Syntax: When using the \"Search by DQL\" tool, ensure that you provide valid Data Query Language (DQL) query strings that adhere to qTest DQL syntax. Incorrect DQL syntax will result in search errors. Refer to qTest documentation for DQL syntax details. Use DWL to pre-filter data retrieved from qTest before it is processed by ELITEA Agents. Enter a valid DQL query string to filter test cases based on specific criteria. This ensures that only relevant data is fetched and processed, improving efficiency and reducing noise. Leave this field empty if no pre-filtering is needed. Best Practices and Use Cases for qTest Integration Best Practices for Efficient Integration Test Integration Thoroughly: After setting up the qTest toolkit and incorporating it into your Agents, thoroughly test each tool you intend to use to ensure seamless connectivity, correct authentication, and accurate execution of qTest actions. Monitor Agent Performance and Usage: Regularly monitor the performance of Agents utilizing qTest toolkits. Track metrics such as task completion success rate, execution time, and error rates to identify any potential issues or areas for optimization in Agent instructions or toolkit configurations. Follow Security Best Practices: Use API Tokens: Always use qTest API tokens instead of your main account password for integrations. Grant Least Privilege: While qTest API tokens have limited scope control, ensure you are generating tokens specifically for ELITEA integration and not reusing tokens with broader access. Securely Store Credentials: Utilize ELITEA's Secrets Management feature to securely store and manage your qTest API tokens instead of hardcoding them directly in Agent configurations. Provide Clear Instructions and Prompts: Craft clear and unambiguous instructions within your ELITEA Agents to guide them in using the qTest toolkit effectively. Use the prompt examples provided in this guide as a starting point and adapt them to your specific use cases. Start with Simple Use Cases: Begin by implementing qTest integration for simpler automation tasks, such as searching for test cases or retrieving test case details, and gradually progress to more complex workflows as you gain experience and confidence with the toolkit. Optimize Performance with Advanced Settings: Leverage the \"Advanced Settings\" in the toolkit configuration, specifically \"Test Cases per Page\" and \"DQL for qTest\", to fine-tune data fetching parameters and optimize performance, especially when working with large qTest projects or complex queries. Use Cases for qTest Toolkit Integration The qTest toolkit opens up a wide range of automation possibilities for test management, QA workflows, and reporting within ELITEA. Here are some compelling use cases: Automated Test Case Retrieval for Test Execution Guidance: Scenario: Testers can use ELITEA Agents to quickly retrieve detailed steps and expected results for specific test cases from qTest, providing them with immediate access to test execution guidance directly within ELITEA. Tools Used: find_test_case_by_id , read_file (if test data is in external files) Example Instruction: \"Use the 'find_test_case_by_id' tool to retrieve the test case with ID 'TC-12345'. Display the 'Name', 'Description', 'Steps', and 'Expected Result' fields to the tester.\" Benefit: Improves tester efficiency by providing instant access to test case details, eliminating the need to switch between ELITEA and qTest interfaces, streamlining test execution and reducing context switching. Dynamic Test Case Creation from Requirements or User Stories: Scenario: When new requirements or user stories are created in ELITEA or linked systems, automatically generate corresponding test case stubs in qTest, pre-populated with basic information extracted from the requirements, streamlining test planning and ensuring test coverage from the outset. Tools Used: create_test_cases Example Instruction: \"Use the 'create_test_cases' tool to create new test cases in qTest Project 'Project Alpha' and Test Suite 'New Feature Tests' based on the following data extracted from the new user story: [{\\\"Name\\\": \\\"Test User Story [User Story ID] - Scenario 1\\\", \\\"Description\\\": \\\"Test scenario 1 for user story [User Story ID]\\\"}, {\\\"Name\\\": \\\"Test User Story [User Story ID] - Scenario 2\\\", \\\"Description\\\": \\\"Test scenario 2 for user story [User Story ID]\\\"}] .\" Benefit: Automates test case creation, streamlining test planning and ensuring comprehensive test coverage from the initial stages of development. Reduces manual effort in test case authoring and improves alignment between requirements and test cases. Automated Test Case Updates Based on Test Feedback or Requirements Changes: Scenario: When test execution reveals issues or requirements change, ELITEA Agents can automatically update existing test cases in qTest with new steps, expected results, or status changes, ensuring test cases remain current and accurate. Tools Used: update_test_case , read_document (if updates are based on external documents) Example Instruction: \"Use the 'update_test_case' tool to update test case with ID 'TC-56789'. Update the 'Steps' field with the following new steps: '1. Open application\\n2. Navigate to updated UI element\\n3. ...' and set the 'Status' field to 'Draft' for review.\" Benefit: Automates test case maintenance, ensuring test cases are always up-to-date with the latest requirements and test feedback. Reduces manual effort in test case updates and improves test case accuracy and relevance over time. Reporting on Test Case Coverage and Status using DQL Queries: Scenario: QA managers can use ELITEA Agents to generate custom reports on test case coverage, execution status, or other test metrics by leveraging the \"Search by DQL\" tool to query qTest and extract specific test case data based on DQL queries. Tools Used: search_by_dql Example Instruction: \"Use the 'search_by_dql' tool to search for test cases in qTest using the DQL query: 'Project = 'Project Alpha' AND Test Suite = 'Regression Tests' AND Status IN ('Passed', 'Failed')'. Generate a report summarizing the number of passed and failed test cases and calculate the test pass rate.\" Benefit: Enables automated and customized test reporting and analysis, providing QA managers and stakeholders with real-time visibility into test coverage, test execution progress, and quality metrics directly within ELITEA, improving test management and reporting efficiency. Troubleshooting and Support Troubleshooting Common Issues Connection Errors: Problem: ELITEA Agent fails to connect to qTest, resulting in errors during toolkit execution. Possible Solutions: Verify qTest Base URL: Double-check that you have entered the correct qTest Base URL in the toolkit configuration, including https:// or http:// (e.g., https://qtest.example.com/ ). Check API Token: Ensure that the API Token you provided is correct and valid for your qTest account and project. Carefully re-enter or copy-paste the token to rule out typos. Verify Project ID: Double-check that you have entered the correct Project ID for your qTest project in the toolkit configuration. Ensure the Project ID is a numerical value and corresponds to an existing qTest project. Network Connectivity: Confirm that both your ELITEA environment and your qTest instance are connected to the internet and that there are no network connectivity issues blocking the integration. Authorization Errors (Permission Denied/Unauthorized): Problem: Agent execution fails with \"Permission Denied\" or \"Unauthorized\" errors when trying to access or modify qTest resources. Possible Solutions: Verify API Token Validity: Ensure that the qTest API token you are using is valid and has not been revoked in your qTest user settings. Generate a new token if necessary. Check qTest Permissions: Confirm that the qTest account associated with the API token has the necessary permissions within qTest to access and modify the specific projects and test assets your Agent is trying to interact with. Verify user roles and permissions within qTest project settings. Project ID Accuracy: Double-check that you have entered the correct Project ID in the toolkit configuration and that the API token is valid for that specific qTest project. Tool-Specific Parameter Errors: Problem: Agent execution fails for specific qTest tools due to incorrect parameter values or formats. Troubleshooting Steps: Verify Project ID: Ensure that you are using the correct qTest Project ID in your Agent's instructions when specifying project-related parameters for qTest tools. Project IDs are numerical and must match the Project ID in qTest exactly. Verify Test Suite and Test Case IDs: Double-check that you are using the correct Test Suite IDs and Test Case IDs when referencing specific test assets in your Agent's instructions. Test Suite and Test Case IDs are numerical and must match the IDs in qTest exactly. Parameter Format: Verify that you are providing parameters in the correct format expected by each qTest tool (e.g., string values for names, numerical values for IDs, JSON format for test case data). Refer to the \"Instructions and Prompts for Using the Toolkit\" section for parameter details and examples. DQL Query Syntax Errors: When using the \"Search by DQL\" tool, ensure that you provide valid DQL query strings that adhere to qTest DQL syntax. Incorrect DQL syntax will result in search errors. Refer to qTest documentation for DQL syntax details and examples. FAQs Q: Can I use my regular qTest username and password for the ELITEA integration? A: No, it is mandatory to use a qTest API token for secure integration with ELITEA. Direct password authentication is not supported. API tokens provide a more secure and controlled way to grant access to external applications like ELITEA. Q: What permissions should I grant to the qTest API Token? A: qTest API tokens, when generated through the user profile, inherently provide access based on the user's permissions within qTest. Ensure that the qTest user account associated with the API token has the necessary permissions to access and modify the specific projects and test assets your Agent will be interacting with. You do not need to configure specific scopes during token generation. Q: What is the correct format for the qTest Base URL in the toolkit configuration? A: The qTest Base URL should be entered in the format https://qtest.example.com/api/v1 . Replace qtest.example.com with your actual qTest subdomain and ensure you include the /api/v1 API endpoint path. Q: How do I find the Project ID for my qTest project? A: The Project ID is a numerical identifier for your qTest project. You can typically find the Project ID in your qTest project settings, project URL, or by inspecting the browser's address bar when you are within your qTest project. It is usually a numerical value that is unique to each project. Q: Why is my Agent getting \"Permission Denied\" errors even though I think I have configured everything correctly? A: Double-check the following: API Token Validity: Ensure that the API token is valid and has not been revoked. qTest Account Permissions: Verify that the qTest account associated with the API token has the necessary permissions to access the specific projects and test assets your Agent is trying to use. Project ID Accuracy: Double-check that you have entered the correct Project ID in the toolkit configuration and that it corresponds to the qTest project you intend to access. Base URL Accuracy: Ensure that the Base URL is correctly entered and points to the API endpoint of your qTest instance. Support and Contact Information If you encounter any issues, have questions, or require further assistance beyond what is covered in this guide regarding the qTest integration or ELITEA Agents in general, please do not hesitate to contact our dedicated ELITEA Support Team. We are here to help you resolve any problems quickly and efficiently and ensure you have a smooth and productive experience with ELITEA. How to Reach ELITEA Support: Email: SupportAlita@epam.com Best Practices for Effective Support Requests: To help us understand and resolve your issue as quickly as possible, please ensure you provide the following information in your support email: ELITEA Environment: Clearly specify the ELITEA environment you are using (e.g., \"Nexus,\" \"Alita Lab,\" \"EYE\"). Project Details: Indicate the Project Name and whether you are working in your Private workspace or a Team project. Detailed Issue Description: Provide a clear, concise, and detailed description of the problem you are encountering. Explain what you were trying to do, what you expected to happen, and what actually occurred. Relevant Configuration Information: To help us diagnose the issue, please include relevant configuration details, such as: Agent Instructions (Screenshot or Text): If the issue is with an Agent, provide a screenshot or copy the text of your Agent's \"Instructions\" field. Toolkit Configurations (Screenshots): If the issue involves the qTest toolkit or other toolkits, include screenshots of the toolkit configuration settings within your Agent. Error Messages (Full Error Text): If you are encountering an error message, please provide the complete error text . In the Chat window, expand the error details and copy the full error message. This detailed error information is crucial for diagnosis. Your Query/Prompt (Exact Text): If the issue is related to Agent execution, provide the exact query or prompt you used to trigger the issue. Before Contacting Support: We encourage you to first explore the resources available within this guide and the broader ELITEA documentation. You may find answers to common questions or solutions to known issues in the documentation. Useful Links To further enhance your understanding and skills in integrating qTest with ELITEA, here are some helpful resources: Tricentis qTest Website : Access the main Tricentis qTest product website for product information and documentation. Tricentis qTest Documentation : Explore the official qTest documentation for detailed information on qTest features, functionalities, and API. ELITEA Secrets Management : Learn how to securely store your qTest API Token using ELITEA's Secrets management feature for enhanced security. ELITEA Agents Configuration : Find out more about creating and configuring Agents in ELITEA, where you integrate the qTest toolkit to automate your workflows. ELITEA Support Email : Contact the ELITEA support team for direct assistance with qTest integration or any other questions and issues you may encounter.","title":"qTest Integration"},{"location":"how-tos/agents-toolkits/qtest_toolkit/#elitea-toolkit-guide-qtest-integration","text":"","title":"ELITEA Toolkit Guide: qTest Integration"},{"location":"how-tos/agents-toolkits/qtest_toolkit/#introduction","text":"","title":"Introduction"},{"location":"how-tos/agents-toolkits/qtest_toolkit/#purpose-of-this-guide","text":"This guide is your definitive resource for integrating and effectively utilizing the qTest toolkit within ELITEA. It provides a detailed, step-by-step walkthrough, from setting up your qTest API token to configuring the toolkit in ELITEA and seamlessly incorporating it into your Agents. By following this guide, you will unlock the power of automated test management, streamlined QA workflows, and enhanced collaboration between development and testing teams, all directly within the ELITEA platform. This integration empowers you to leverage AI-driven automation to optimize your qTest-driven workflows, enhance QA productivity, and improve software quality within your projects.","title":"Purpose of this Guide"},{"location":"how-tos/agents-toolkits/qtest_toolkit/#brief-overview-of-qtest","text":"qTest, by Tricentis, is a leading cloud-based test management platform designed to centralize and streamline all aspects of software testing. It is widely used by QA teams to manage test cases, execute test runs, track defects, and generate comprehensive reports. qTest offers a wide array of functionalities, including: Centralized Test Case Management: qTest provides a centralized repository for creating, organizing, and managing test cases, ensuring a structured and easily accessible test library for your QA team. Efficient Test Execution and Tracking: Enables efficient test execution and real-time tracking of test runs, allowing QA teams to monitor progress, identify bottlenecks, and ensure timely test completion. Requirement and Defect Traceability: qTest facilitates traceability by linking test cases to requirements and defects, providing a clear audit trail and ensuring comprehensive test coverage and issue tracking throughout the testing lifecycle. Comprehensive Reporting and Analytics: Offers robust reporting and analytics capabilities, allowing QA teams to generate detailed reports on testing progress, quality metrics, defect trends, and test coverage, providing valuable insights for decision-making and continuous improvement. Agile and DevOps Integration: qTest is designed to integrate seamlessly with Agile and DevOps workflows, supporting iterative testing, continuous testing practices, and integration with CI/CD pipelines and development tools, enabling efficient and agile QA processes. Integrating qTest with ELITEA brings these powerful test management capabilities directly into your AI-driven workflows. Your ELITEA Agents can then intelligently interact with your qTest projects and test assets to automate test management tasks, enhance QA processes, improve test coverage, and leverage AI to optimize your entire software testing lifecycle within qTest.","title":"Brief Overview of qTest"},{"location":"how-tos/agents-toolkits/qtest_toolkit/#toolkits-account-setup-and-configuration-in-qtest","text":"","title":"Toolkit's Account Setup and Configuration in qTest"},{"location":"how-tos/agents-toolkits/qtest_toolkit/#account-setup","text":"qTest is a commercial test management tool and is available as a trial version for a limited period. To create a qTest account, follow these steps: Visit Tricentis Website: Open your web browser and navigate to the official Tricentis qTest website: https://www.tricentis.com/ . Navigate to Trials & Demos: Click on \"Trials & demos\" in the main navigation menu to begin the trial registration process. Find qTest and Start Free Trial: On the \"Trials & demos\" page, locate the qTest section and click the \"Free trial\" button. Fill in Registration Form: The \"Start your free 14-day Tricentis qTest Trial\" message should be displayed, and a registration form will appear on the right side of the page. Provide the following basic information in the registration form: Business email address: Enter your business email address (preferably your company email). QTest typically provides free trials for business email IDs. First Name: Enter your first name. Last Name: Enter your last name. Country: Select your country from the dropdown menu. Phone: Enter your phone number. Job Title: Enter your job title. Submit Registration Form: After filling out the registration form, click the \"Next Page\" button to submit the form. Create QTest Web Address and Account Details: A new window will open, prompting you to fill in the details to create your new qTest web address and account credentials: Username: Your username is prefilled based on your account registration. You can modify it if needed. Create Your QTest Web Address: Enter a unique subdomain name in the field provided (e.g., alitatest ). This subdomain will be used as part of your unique QTest web address to access your qTest trial account (e.g., alitatest.qtestnet.com ). Password: Create a strong password for your QTest account. Use a combination of uppercase letters, lowercase letters, numbers, and special characters to create a secure password. Confirm Password: Re-enter the same password to confirm it. qTest Data Storage Location: Select a preferred data storage location from the dropdown menu. Choose a location that complies with your organization's data storage and compliance requirements (e.g., United States, Europe). Privacy Policy Review: Read the note regarding the data center location and compliance with jurisdictional laws. Review the Privacy Policy if necessary. Start My Trial: Once all fields are correctly filled, click the orange \"Start My Trial\" button to proceed and create your qTest trial account. Check Your Email for Confirmation: After submitting the form, you should receive a confirmation email from Tricentis qTest. This email may include a link to set up your qTest account and verify your email address. Follow the instructions in the email to complete the registration and activate your free trial. Access qTest: After verifying your email, you will be directed to the qTest platform. Log in using the username, password, and QTest web address you provided during registration.","title":"Account Setup"},{"location":"how-tos/agents-toolkits/qtest_toolkit/#tokenapi-key-generation-finding-api-token-in-qtest","text":"To securely integrate ELITEA with qTest, you need to obtain your qTest API token. This token will be used by ELITEA to authenticate and access your qTest projects and test data. Follow these steps to find your API token in qTest: Log in to qTest: Access your qTest instance by navigating to your qTest web address (e.g., alitatest.qtestnet.com ) and logging in with your qTest credentials. Access API & Webhooks Settings: Once logged in, navigate to your user profile settings. The exact location may vary slightly depending on your qTest version, but it is typically found under your profile menu or user settings. Look for options like \"Integration Settings\" , \"API Access\" , or \"Webhooks\" . In newer versions of qTest, you can find it under \"Manager\" -> \"API & SDK\" . Locate API Key/Token: In the \"API & SDK\" settings, you should find your Token or Bearer Token. It may be labeled as \"Token\" , or \"Brstrt Token\" . Copy and Store Your API Token: Copy the API token displayed on the page. Store it securely in a password manager or, preferably, ELITEA's built-in Secrets feature for enhanced security within ELITEA. You will need this API token to configure the qTest toolkit in ELITEA.","title":"Token/API Key Generation: Finding API Token in qTest"},{"location":"how-tos/agents-toolkits/qtest_toolkit/#system-integration-with-elitea","text":"","title":"System Integration with ELITEA"},{"location":"how-tos/agents-toolkits/qtest_toolkit/#agent-creationconfiguration","text":"To integrate qTest functionalities into your workflows, you will need to configure the qTest toolkit within an ELITEA Agent. You can either create a new Agent specifically for qTest interactions or modify an existing Agent to incorporate qTest tools. Navigate to Agents Menu: In ELITEA, go to the Agents menu from the main navigation panel. Create or Edit Agent: Create a New Agent: Click on the \"+ Agent\" button to create a new Agent. Follow the on-screen prompts to define essential Agent attributes such as Agent name, a descriptive Agent description, the desired Agent type, and initial instructions for the Agent. Edit an Existing Agent: Select the Agent you intend to integrate with qTest from your list of Agents. Click on the Agent's name to open its configuration settings for editing. Access Tools Section: Within the Agent configuration interface, scroll down until you locate the \"Tools\" section. This section is where you will add and configure toolkits, including the qTest toolkit.","title":"Agent Creation/Configuration"},{"location":"how-tos/agents-toolkits/qtest_toolkit/#toolkit-configuration","text":"This section provides detailed instructions on how to configure the qTest toolkit within your ELITEA Agent. Add Toolkit: In the \"Tools\" section of the Agent configuration, click on the \"+\" icon . This action will display a dropdown list of available toolkits that can be integrated with your Agent. Select qTest Toolkit: From the dropdown list of available toolkits, choose \"qTest\" . Selecting \"qTest\" will open the \"New qTest tool\" configuration panel, where you will specify the settings for your qTest integration. Configure qTest Toolkit Settings: Carefully fill in the following configuration fields within the \"New qTest tool\" section: Name: Enter a descriptive Name for your qTest toolkit instance. Choose a name that is easily recognizable and helps you identify its purpose within your Agent's instructions (e.g., \"ProjectQTest\", \"TestManagementAccess\", \"QTestIntegration\"). Description: Provide a concise Description for the toolkit. This description should clarify the toolkit's purpose or the specific qTest project it is intended to access (e.g., \"Toolkit for accessing and managing test cases in qTest\", \"Integration for qTest Project 'Project Alpha'\"). Base URL: Enter the base URL of your qTest instance API endpoint. Ensure you use the correct format : https://qtest.example.com (Replace qtest.example.com with your actual qTest subdomain). Project ID: Enter the Project ID of the specific qTest project you want to connect to with this toolkit. The Project ID is a numerical identifier for your qTest project. You can typically find the Project ID in your qTest project settings or in the URL when you are within your qTest project. Authentication Options - API Token: Select the \"API Token\" authentication option. Password/Secret: Choose \"Password\" and paste the Bearer token you obtained from qTest (during the \"Software-Specific Setup\" section of this guide) into the \"Password\" field. Enhanced Security with Secrets (Recommended): For enhanced security, it is strongly recommended to use ELITEA's Secrets Management feature to store your qTest API token securely. Instead of directly pasting the token into the \"Password\" field, select the \"Secret\" option and choose the pre-configured secret containing your qTest API token from the dropdown list. This prevents hardcoding sensitive credentials in your toolkit configuration. Enable Desired Tools: In the \"Tools\" section within the qTest toolkit configuration panel, select the checkboxes next to the specific qTest tools that you want to enable for your Agent. It is crucial to enable only the tools that your Agent will actually need to use to adhere to the principle of least privilege and minimize potential security risks. Available tools include: Search by DQL - Allows searching for test cases using qTest DQL queries. Create test cases - Enables the Agent to create new test cases in qTest. Update test case - Allows the Agent to update existing test cases in qTest. Find test case by ID - Enables the Agent to retrieve a specific test case by its ID. Delete test case - Allows the Agent to delete test cases from qTest. Complete Setup: After configuring all the necessary settings and enabling the desired tools, click the arrow icon (located at the top right of the toolkit configuration section) to finalize the qTest toolkit setup and return to the main Agent configuration menu. Click Save in the Agent configuration to save all changes and activate the qTest toolkit integration for your Agent.","title":"Toolkit Configuration"},{"location":"how-tos/agents-toolkits/qtest_toolkit/#tool-overview-qtest-toolkit-functionalities","text":"Once the qTest toolkit is successfully configured and added to your Agent, you can leverage the following tools within your Agent's instructions to enable intelligent interaction with your qTest projects and test assets: Search by DQL: Tool Name: search_by_dql Functionality: Allows Agents to search for test cases in qTest using Data Query Language (DQL) queries. Returns a list of test cases matching the DQL query. Purpose: Enables advanced and flexible test case searching based on complex criteria defined using DQL, allowing Agents to retrieve specific sets of test cases for reporting, analysis, test planning, or workflow automation based on qTest data. Create test cases: Tool Name: create_test_cases Functionality: Automates the creation of new test cases in qTest within a specified project and test suite. Allows for bulk creation of test cases using a list of test case details. Purpose: Streamlines test case authoring and test plan creation by enabling Agents to automatically generate new test cases in qTest directly from ELITEA workflows, based on requirements, user stories, or automated test generation processes, improving test coverage and reducing manual test case creation effort. Update test case: Tool Name: update_test_case Functionality: Allows Agents to modify and update fields of existing test cases in qTest. Requires the Test Case ID and a JSON object containing the fields to update and their new values. Purpose: Enables automated test case maintenance, allowing Agents to update test case steps, expected results, statuses, custom fields, or any other test case attributes based on changing requirements, test feedback, or workflow progress, ensuring test cases are always up-to-date and accurately reflect current testing needs. Find test case by ID: Tool Name: find_test_case_by_id Functionality: Retrieves detailed information about a specific test case from qTest using its unique Test Case ID. Returns comprehensive test case details, including steps, parameters, and custom fields. Purpose: Provides Agents with a quick and precise way to access detailed information for specific test cases, enabling efficient retrieval of test case details for test execution guidance, reporting, analysis, or incorporating test case information into ELITEA workflows. Delete test case: Tool Name: delete_test_case Functionality: Automates the deletion of a specific test case from qTest, identified by its Test Case ID. Purpose: Enables automated test case cleanup and test data management by allowing Agents to delete obsolete or redundant test cases from qTest, helping maintain a clean, organized, and efficient test case repository and reducing test data clutter.","title":"Tool Overview: qTest Toolkit Functionalities"},{"location":"how-tos/agents-toolkits/qtest_toolkit/#instructions-and-prompts-for-using-the-qtest-toolkit","text":"To effectively utilize the qTest toolkit within your ELITEA Agents, you need to provide clear and precise instructions within the Agent's \"Instructions\" field, telling the Agent how and when to use these tools. General Instruction Structure: When instructing your Agent to use a qTest tool, you will typically follow this pattern: Use the \"[tool_name]\" tool to [describe the action you want to perform] in qTest. Provide the following parameters: - Parameter 1: <value or description of value> - Parameter 2: <value or description of value> - ... Example Agent Instructions for qTest Toolkit Tools: Agent Instructions for Searching Test Cases using DQL: Use the \"search_by_dql\" tool to search for test cases in qTest using a DQL query. Provide the following parameters: - DQL Query: \"Project = 'Project Alpha' AND Status = 'Ready for Automation' AND Priority = 'High'\" Agent Instructions for Creating New Test Cases: Use the \"create_test_cases\" tool to create new test cases in qTest. Provide the following parameters: - Project ID: \"12345\" - Test Suite ID: \"67890\" - Test Cases Data (JSON Array): [ { \"Name\": \"Test Login Functionality - Positive Case\", \"Description\": \"Verify user login with valid credentials.\", \"Steps\": \"1. Open Login Page\\n2. Enter valid username\\n3. Enter valid password\\n4. Click Login\", \"Expected Result\": \"User should be logged in successfully.\" }, { \"Name\": \"Test Login Functionality - Negative Case\", \"Description\": \"Verify user login with invalid credentials.\", \"Steps\": \"1. Open Login Page\\n2. Enter invalid username\\n3. Enter invalid password\\n4. Click Login\", \"Expected Result\": \"Error message should be displayed.\" } ] Agent Instructions for Updating an Existing Test Case: Use the \"update_test_case\" tool to update the description and status of an existing test case in qTest. Provide the following parameters: - Test Case ID: \"7\" - Fields to Update (JSON): { \"description\": \"Updated description: Added more detailed steps for test execution.\", \"properties\": { \"Status\": \"Ready for Review\" } } Important Considerations for Agent Instructions: Tool Name Accuracy: Ensure you use the correct Tool Name (e.g., \"search_by_dql\" , \"create_test_cases\" , \"update_test_case\" ) as listed in the \"Tool Overview\" section. Typos or incorrect tool names will prevent the Agent from using the toolkit correctly. Parameter Clarity: Clearly specify the parameters required for each tool and provide instructions on where the Agent should obtain the values for these parameters (e.g., from user input, from previous steps in the workflow, or hardcoded values). Context and Examples: Provide sufficient context and examples within your Agent's \"Instructions\" to guide the LLM in understanding when and how to use the qTest toolkit tools effectively within your desired workflow. qTest IDs and Names: Ensure that you use the correct Project IDs, Test Suite IDs, Test Case IDs, Field Names, and other identifiers that accurately correspond to your qTest project and test assets. Incorrect IDs or names will lead to errors or incorrect tool execution. DQL Query Syntax: When using the \"Search by DQL\" tool, ensure that you provide valid Data Query Language (DQL) query strings that adhere to qTest DQL syntax. Incorrect DQL syntax will result in search errors. Refer to qTest documentation for DQL syntax details. Use DWL to pre-filter data retrieved from qTest before it is processed by ELITEA Agents. Enter a valid DQL query string to filter test cases based on specific criteria. This ensures that only relevant data is fetched and processed, improving efficiency and reducing noise. Leave this field empty if no pre-filtering is needed.","title":"Instructions and Prompts for Using the qTest Toolkit"},{"location":"how-tos/agents-toolkits/qtest_toolkit/#best-practices-and-use-cases-for-qtest-integration","text":"","title":"Best Practices and Use Cases for qTest Integration"},{"location":"how-tos/agents-toolkits/qtest_toolkit/#best-practices-for-efficient-integration","text":"Test Integration Thoroughly: After setting up the qTest toolkit and incorporating it into your Agents, thoroughly test each tool you intend to use to ensure seamless connectivity, correct authentication, and accurate execution of qTest actions. Monitor Agent Performance and Usage: Regularly monitor the performance of Agents utilizing qTest toolkits. Track metrics such as task completion success rate, execution time, and error rates to identify any potential issues or areas for optimization in Agent instructions or toolkit configurations. Follow Security Best Practices: Use API Tokens: Always use qTest API tokens instead of your main account password for integrations. Grant Least Privilege: While qTest API tokens have limited scope control, ensure you are generating tokens specifically for ELITEA integration and not reusing tokens with broader access. Securely Store Credentials: Utilize ELITEA's Secrets Management feature to securely store and manage your qTest API tokens instead of hardcoding them directly in Agent configurations. Provide Clear Instructions and Prompts: Craft clear and unambiguous instructions within your ELITEA Agents to guide them in using the qTest toolkit effectively. Use the prompt examples provided in this guide as a starting point and adapt them to your specific use cases. Start with Simple Use Cases: Begin by implementing qTest integration for simpler automation tasks, such as searching for test cases or retrieving test case details, and gradually progress to more complex workflows as you gain experience and confidence with the toolkit. Optimize Performance with Advanced Settings: Leverage the \"Advanced Settings\" in the toolkit configuration, specifically \"Test Cases per Page\" and \"DQL for qTest\", to fine-tune data fetching parameters and optimize performance, especially when working with large qTest projects or complex queries.","title":"Best Practices for Efficient Integration"},{"location":"how-tos/agents-toolkits/qtest_toolkit/#use-cases-for-qtest-toolkit-integration","text":"The qTest toolkit opens up a wide range of automation possibilities for test management, QA workflows, and reporting within ELITEA. Here are some compelling use cases: Automated Test Case Retrieval for Test Execution Guidance: Scenario: Testers can use ELITEA Agents to quickly retrieve detailed steps and expected results for specific test cases from qTest, providing them with immediate access to test execution guidance directly within ELITEA. Tools Used: find_test_case_by_id , read_file (if test data is in external files) Example Instruction: \"Use the 'find_test_case_by_id' tool to retrieve the test case with ID 'TC-12345'. Display the 'Name', 'Description', 'Steps', and 'Expected Result' fields to the tester.\" Benefit: Improves tester efficiency by providing instant access to test case details, eliminating the need to switch between ELITEA and qTest interfaces, streamlining test execution and reducing context switching. Dynamic Test Case Creation from Requirements or User Stories: Scenario: When new requirements or user stories are created in ELITEA or linked systems, automatically generate corresponding test case stubs in qTest, pre-populated with basic information extracted from the requirements, streamlining test planning and ensuring test coverage from the outset. Tools Used: create_test_cases Example Instruction: \"Use the 'create_test_cases' tool to create new test cases in qTest Project 'Project Alpha' and Test Suite 'New Feature Tests' based on the following data extracted from the new user story: [{\\\"Name\\\": \\\"Test User Story [User Story ID] - Scenario 1\\\", \\\"Description\\\": \\\"Test scenario 1 for user story [User Story ID]\\\"}, {\\\"Name\\\": \\\"Test User Story [User Story ID] - Scenario 2\\\", \\\"Description\\\": \\\"Test scenario 2 for user story [User Story ID]\\\"}] .\" Benefit: Automates test case creation, streamlining test planning and ensuring comprehensive test coverage from the initial stages of development. Reduces manual effort in test case authoring and improves alignment between requirements and test cases. Automated Test Case Updates Based on Test Feedback or Requirements Changes: Scenario: When test execution reveals issues or requirements change, ELITEA Agents can automatically update existing test cases in qTest with new steps, expected results, or status changes, ensuring test cases remain current and accurate. Tools Used: update_test_case , read_document (if updates are based on external documents) Example Instruction: \"Use the 'update_test_case' tool to update test case with ID 'TC-56789'. Update the 'Steps' field with the following new steps: '1. Open application\\n2. Navigate to updated UI element\\n3. ...' and set the 'Status' field to 'Draft' for review.\" Benefit: Automates test case maintenance, ensuring test cases are always up-to-date with the latest requirements and test feedback. Reduces manual effort in test case updates and improves test case accuracy and relevance over time. Reporting on Test Case Coverage and Status using DQL Queries: Scenario: QA managers can use ELITEA Agents to generate custom reports on test case coverage, execution status, or other test metrics by leveraging the \"Search by DQL\" tool to query qTest and extract specific test case data based on DQL queries. Tools Used: search_by_dql Example Instruction: \"Use the 'search_by_dql' tool to search for test cases in qTest using the DQL query: 'Project = 'Project Alpha' AND Test Suite = 'Regression Tests' AND Status IN ('Passed', 'Failed')'. Generate a report summarizing the number of passed and failed test cases and calculate the test pass rate.\" Benefit: Enables automated and customized test reporting and analysis, providing QA managers and stakeholders with real-time visibility into test coverage, test execution progress, and quality metrics directly within ELITEA, improving test management and reporting efficiency.","title":"Use Cases for qTest Toolkit Integration"},{"location":"how-tos/agents-toolkits/qtest_toolkit/#troubleshooting-and-support","text":"","title":"Troubleshooting and Support"},{"location":"how-tos/agents-toolkits/qtest_toolkit/#troubleshooting-common-issues","text":"Connection Errors: Problem: ELITEA Agent fails to connect to qTest, resulting in errors during toolkit execution. Possible Solutions: Verify qTest Base URL: Double-check that you have entered the correct qTest Base URL in the toolkit configuration, including https:// or http:// (e.g., https://qtest.example.com/ ). Check API Token: Ensure that the API Token you provided is correct and valid for your qTest account and project. Carefully re-enter or copy-paste the token to rule out typos. Verify Project ID: Double-check that you have entered the correct Project ID for your qTest project in the toolkit configuration. Ensure the Project ID is a numerical value and corresponds to an existing qTest project. Network Connectivity: Confirm that both your ELITEA environment and your qTest instance are connected to the internet and that there are no network connectivity issues blocking the integration. Authorization Errors (Permission Denied/Unauthorized): Problem: Agent execution fails with \"Permission Denied\" or \"Unauthorized\" errors when trying to access or modify qTest resources. Possible Solutions: Verify API Token Validity: Ensure that the qTest API token you are using is valid and has not been revoked in your qTest user settings. Generate a new token if necessary. Check qTest Permissions: Confirm that the qTest account associated with the API token has the necessary permissions within qTest to access and modify the specific projects and test assets your Agent is trying to interact with. Verify user roles and permissions within qTest project settings. Project ID Accuracy: Double-check that you have entered the correct Project ID in the toolkit configuration and that the API token is valid for that specific qTest project. Tool-Specific Parameter Errors: Problem: Agent execution fails for specific qTest tools due to incorrect parameter values or formats. Troubleshooting Steps: Verify Project ID: Ensure that you are using the correct qTest Project ID in your Agent's instructions when specifying project-related parameters for qTest tools. Project IDs are numerical and must match the Project ID in qTest exactly. Verify Test Suite and Test Case IDs: Double-check that you are using the correct Test Suite IDs and Test Case IDs when referencing specific test assets in your Agent's instructions. Test Suite and Test Case IDs are numerical and must match the IDs in qTest exactly. Parameter Format: Verify that you are providing parameters in the correct format expected by each qTest tool (e.g., string values for names, numerical values for IDs, JSON format for test case data). Refer to the \"Instructions and Prompts for Using the Toolkit\" section for parameter details and examples. DQL Query Syntax Errors: When using the \"Search by DQL\" tool, ensure that you provide valid DQL query strings that adhere to qTest DQL syntax. Incorrect DQL syntax will result in search errors. Refer to qTest documentation for DQL syntax details and examples.","title":"Troubleshooting Common Issues"},{"location":"how-tos/agents-toolkits/qtest_toolkit/#faqs","text":"Q: Can I use my regular qTest username and password for the ELITEA integration? A: No, it is mandatory to use a qTest API token for secure integration with ELITEA. Direct password authentication is not supported. API tokens provide a more secure and controlled way to grant access to external applications like ELITEA. Q: What permissions should I grant to the qTest API Token? A: qTest API tokens, when generated through the user profile, inherently provide access based on the user's permissions within qTest. Ensure that the qTest user account associated with the API token has the necessary permissions to access and modify the specific projects and test assets your Agent will be interacting with. You do not need to configure specific scopes during token generation. Q: What is the correct format for the qTest Base URL in the toolkit configuration? A: The qTest Base URL should be entered in the format https://qtest.example.com/api/v1 . Replace qtest.example.com with your actual qTest subdomain and ensure you include the /api/v1 API endpoint path. Q: How do I find the Project ID for my qTest project? A: The Project ID is a numerical identifier for your qTest project. You can typically find the Project ID in your qTest project settings, project URL, or by inspecting the browser's address bar when you are within your qTest project. It is usually a numerical value that is unique to each project. Q: Why is my Agent getting \"Permission Denied\" errors even though I think I have configured everything correctly? A: Double-check the following: API Token Validity: Ensure that the API token is valid and has not been revoked. qTest Account Permissions: Verify that the qTest account associated with the API token has the necessary permissions to access the specific projects and test assets your Agent is trying to use. Project ID Accuracy: Double-check that you have entered the correct Project ID in the toolkit configuration and that it corresponds to the qTest project you intend to access. Base URL Accuracy: Ensure that the Base URL is correctly entered and points to the API endpoint of your qTest instance.","title":"FAQs"},{"location":"how-tos/agents-toolkits/qtest_toolkit/#support-and-contact-information","text":"If you encounter any issues, have questions, or require further assistance beyond what is covered in this guide regarding the qTest integration or ELITEA Agents in general, please do not hesitate to contact our dedicated ELITEA Support Team. We are here to help you resolve any problems quickly and efficiently and ensure you have a smooth and productive experience with ELITEA. How to Reach ELITEA Support: Email: SupportAlita@epam.com Best Practices for Effective Support Requests: To help us understand and resolve your issue as quickly as possible, please ensure you provide the following information in your support email: ELITEA Environment: Clearly specify the ELITEA environment you are using (e.g., \"Nexus,\" \"Alita Lab,\" \"EYE\"). Project Details: Indicate the Project Name and whether you are working in your Private workspace or a Team project. Detailed Issue Description: Provide a clear, concise, and detailed description of the problem you are encountering. Explain what you were trying to do, what you expected to happen, and what actually occurred. Relevant Configuration Information: To help us diagnose the issue, please include relevant configuration details, such as: Agent Instructions (Screenshot or Text): If the issue is with an Agent, provide a screenshot or copy the text of your Agent's \"Instructions\" field. Toolkit Configurations (Screenshots): If the issue involves the qTest toolkit or other toolkits, include screenshots of the toolkit configuration settings within your Agent. Error Messages (Full Error Text): If you are encountering an error message, please provide the complete error text . In the Chat window, expand the error details and copy the full error message. This detailed error information is crucial for diagnosis. Your Query/Prompt (Exact Text): If the issue is related to Agent execution, provide the exact query or prompt you used to trigger the issue. Before Contacting Support: We encourage you to first explore the resources available within this guide and the broader ELITEA documentation. You may find answers to common questions or solutions to known issues in the documentation.","title":"Support and Contact Information"},{"location":"how-tos/agents-toolkits/qtest_toolkit/#useful-links","text":"To further enhance your understanding and skills in integrating qTest with ELITEA, here are some helpful resources: Tricentis qTest Website : Access the main Tricentis qTest product website for product information and documentation. Tricentis qTest Documentation : Explore the official qTest documentation for detailed information on qTest features, functionalities, and API. ELITEA Secrets Management : Learn how to securely store your qTest API Token using ELITEA's Secrets management feature for enhanced security. ELITEA Agents Configuration : Find out more about creating and configuring Agents in ELITEA, where you integrate the qTest toolkit to automate your workflows. ELITEA Support Email : Contact the ELITEA support team for direct assistance with qTest integration or any other questions and issues you may encounter.","title":"Useful Links"},{"location":"how-tos/agents-toolkits/rally_toolkit/","text":"Here is the enhanced User Guide for ELITEA Toolkit integration with Rally, incorporating your feedback and requirements: ELITEA Toolkit Guide: Rally Integration Introduction Purpose of this Guide This guide is your definitive resource for integrating and effectively utilizing the Rally toolkit within ELITEA. It provides a detailed, step-by-step walkthrough, from setting up your Rally API Key to configuring the toolkit in ELITEA and seamlessly incorporating it into your Agents. By following this guide, you will unlock the power of automated Agile project management, streamlined workflows, and enhanced team collaboration, all directly within the ELITEA platform. This integration empowers you to leverage AI-driven automation to optimize your Rally-driven workflows, enhance project visibility, and improve team productivity within your Agile development environment. Brief Overview of Rally Rally, by Broadcom, is a leading Agile project management platform designed to support and streamline Agile software development methodologies. It provides a comprehensive suite of tools for planning, tracking, and managing Agile projects at scale. Rally is widely used by Agile teams to: Agile Project and Portfolio Management: Rally provides robust features for managing Agile projects and portfolios, supporting various Agile frameworks like Scrum and Kanban, and enabling organizations to scale Agile practices across multiple teams and projects. Backlog and Iteration Planning: Enables efficient backlog management, sprint planning, and iteration management, allowing Agile teams to effectively plan and prioritize work, manage sprint backlogs, and track progress against sprint goals. User Story and Task Management: Facilitates the creation, management, and tracking of user stories, tasks, and other work items, providing a central repository for managing all aspects of project work and ensuring clear task ownership and accountability. Real-time Progress Tracking and Reporting: Offers real-time dashboards, customizable reports, and visual progress tracking tools, providing Agile teams and stakeholders with up-to-date visibility into project status, sprint progress, team velocity, and other key Agile metrics, enabling data-driven decision-making and continuous improvement. Collaborative Agile Environment: Rally promotes collaboration and communication within Agile teams by providing a shared platform for project planning, task management, issue tracking, and team communication, fostering transparency and alignment across the development team and stakeholders. Integrating Rally with ELITEA brings these powerful Agile project management capabilities directly into your AI-driven workflows. Your ELITEA Agents can then intelligently interact with your Rally workspaces and projects to automate Agile task management, enhance project tracking, improve team collaboration, and leverage AI to optimize your entire Agile development lifecycle within Rally. Toolkit's Account Setup and Configuration in Rally Account Setup Rally is a commercial Agile project management platform. To create a Rally account, follow these steps: Visit Broadcom Rally Website: Open your web browser and navigate to the official Broadcom Rally website (e.g., rallydev.com or your organization's specific Rally URL). Sign Up or Request Access: Click on the \"Sign Up\" , \"Free Trial\" , or \"Request Demo\" button, depending on your organization's access and trial requirements. Follow Registration Process: Follow the on-screen instructions to create an account or request access. You will typically need to provide your business email address and other required information. Email Verification and Account Setup: After submitting the registration form, you should receive a confirmation email from the Rally team. This email may include instructions on how to verify your email address and set up your Rally account. Follow the instructions in the email to complete the account creation process. Log In to Rally: Once your account is set up and verified, log in to Rally using your newly created credentials. Token/API Key Generation: Creating an API Key in Rally For secure integration with ELITEA, it is essential to use a Rally API Key for authentication. This method is more secure than using your primary Rally account password directly and allows you to control access permissions for ELITEA. Follow these steps to generate an API Key in Rally: For secure integration with ELITEA, it is essential to use a Rally API Key for authentication. This method is more secure than using your primary Rally account password directly and allows you to control access permissions for ELITEA. Follow these steps to generate an API Key in Rally: Sign in to Rally and Access Setup Icon: Begin by signing in to your Rally workspace . Once logged in, locate and click on the Setup icon (\u2699\ufe0f). This icon is typically found in the top right corner of the Rally interface and provides access to user and workspace settings. Access My Settings via Avatar: After clicking the Setup icon, click on your Avatar (your profile picture or initials), located in the top right corner of the Rally interface, next to the Setup icon. From the dropdown menu that appears, select \"My Settings\" . Locate API Keys Section in Top Banner: On the \"My Settings\" page, look for the \"API Keys\" section. This section is prominently displayed in a banner at the top of the \"My Settings\" page, making it easily accessible. Create API Key: Once you have located the \"API Keys\" section, click on the \"Create\" button. This button will initiate the generation of a new API key for your Rally account. Securely Copy and Store Your API Key: A new API Key will be generated and displayed. Immediately copy the newly generated API Key . This is the only time you will see the full API Key value. It is crucial to store it securely in a password manager or, preferably, ELITEA's built-in Secrets feature for enhanced security within ELITEA. You will need this API Key to configure the Rally toolkit in ELITEA. System Integration with ELITEA Agent Creation/Configuration To integrate Rally functionalities into your workflows, you will need to configure the Rally toolkit within an ELITEA Agent. You can either create a new Agent specifically for Rally interactions or modify an existing Agent to incorporate Rally tools. Navigate to Agents Menu: In ELITEA, go to the Agents menu from the main navigation panel. Create or Edit Agent: Create a New Agent: Click on the \"+ Agent\" button to create a new Agent. Follow the on-screen prompts to define essential Agent attributes such as Agent name, a descriptive Agent description, the desired Agent type, and initial instructions for the Agent. Edit an Existing Agent: Select the Agent you intend to integrate with Rally from your list of Agents. Click on the Agent's name to open its configuration settings for editing. Access Tools Section: Within the Agent configuration interface, scroll down until you locate the \"Tools\" section. This section is where you will add and configure toolkits, including the Rally toolkit. Toolkit Configuration This section provides detailed instructions on how to configure the Rally toolkit within your ELITEA Agent. Add Toolkit: In the \"Tools\" section of the Agent configuration, click on the \"+\" icon . This action will display a dropdown list of available toolkits that can be integrated with your Agent. Select Rally Toolkit: From the dropdown list of available toolkits, choose \"Rally\" . Selecting \"Rally\" will open the \"New Rally tool\" configuration panel, where you will specify the settings for your Rally integration. Configure Rally Toolkit Settings: Carefully fill in the following configuration fields within the \"New Rally tool\" section: Name: Enter a descriptive Name for your Rally toolkit instance. Choose a name that is easily recognizable and helps you identify its purpose within your Agent's instructions (e.g., \"ProjectRally\", \"AgileManagementAccess\", \"RallyIntegration\"). Description: Provide a concise Description for the toolkit. This description should clarify the toolkit's purpose or the specific Rally workspace or project it is intended to access (e.g., \"Toolkit for accessing and managing user stories in Rally\", \"Integration for Rally Workspace 'Project Alpha'\"). Rally Server URL: Enter the base URL of your Rally instance. Ensure you use the correct format , including https:// or http:// and the full workspace URL (e.g., https://rally1.rallydev.com ). For Epam Rally, use https://rally.epam.com . Workspace Name: Enter the Workspace Name in Rally that you want to access with this toolkit. The Workspace Name is the name of your Rally workspace (e.g., \"My Workspace\"). Project Name: Enter the Project Name within your Rally workspace that you want to access with this toolkit. The Project Name is the name of your Rally project (e.g., \"Project Alpha\"). Authentication Options - API Key: Select the \"API Key\" authentication option. Password/Secret: Choose \"Password\" and paste the API Key you generated in Rally (during the \"Software-Specific Setup\" section of this guide) into the \"Password\" field. Enhanced Security with Secrets (Recommended): For enhanced security, it is strongly recommended to use ELITEA's Secrets Management feature to store your Rally API Key securely. Instead of directly pasting the token into the \"Password\" field, select the \"Secret\" option and choose the pre-configured secret containing your Rally API Key from the dropdown list. This prevents hardcoding sensitive credentials in your toolkit configuration. Enable Desired Tools: In the \"Tools\" section within the Rally toolkit configuration panel, select the checkboxes next to the specific Rally tools that you want to enable for your Agent. It is crucial to enable only the tools that your Agent will actually need to use to adhere to the principle of least privilege and minimize potential security risks. Available tools include: Get types - Retrieves the types of artifacts available in Rally. Get entities - Fetches specific entities from Rally based on provided criteria. Create artifact - Allows the Agent to create new artifacts (e.g., user stories, tasks) in Rally. Update artifact - Enables the Agent to update existing artifacts in Rally. Get project - Allows the Agent to retrieve details of a specific project in Rally. Get workspace - Fetches information about the workspace in Rally. Get user - Retrieves user details from Rally. Get context - Provides context-specific information from Rally. Complete Setup: After configuring all the necessary settings and enabling the desired tools, click the arrow icon (typically located at the top right of the toolkit configuration section) to finalize the Rally toolkit setup and return to the main Agent configuration menu. Click Save in the Agent configuration to save all changes and activate the Rally toolkit integration for your Agent. Tool Overview: Rally Toolkit Functionalities Once the Rally toolkit is successfully configured and added to your Agent, you can leverage the following tools within your Agent's instructions to enable intelligent interaction with your Rally workspaces and projects: Get types: Tool Name: get_types Functionality: Retrieves a list of artifact types available in Rally. Returns a list of artifact type names (e.g., \"UserStory\", \"Task\", \"Defect\"). Purpose: Enables Agents to dynamically discover and list available artifact types in Rally, allowing for dynamic workflow creation, user guidance on artifact creation, or automated reporting on artifact types within a Rally project or workspace. Get entities: Tool Name: get_entities Functionality: Fetches specific entities (artifacts) from Rally based on provided criteria, such as artifact type, query parameters, and fetch parameters. Returns a list of Rally artifacts matching the specified criteria. Purpose: Enables advanced and flexible data retrieval from Rally, allowing Agents to query and retrieve specific sets of artifacts based on various filters and parameters, facilitating data extraction for reporting, analysis, or workflow automation based on Rally data. Create artifact: Tool Name: create_artifact Functionality: Automates the creation of new artifacts (e.g., User Stories, Tasks, Defects) in Rally within a specified project and workspace. Requires parameters such as Artifact Type and a JSON object containing artifact fields and values. Purpose: Streamlines artifact creation and project planning by enabling Agents to automatically generate new artifacts in Rally directly from ELITEA workflows, based on user input, workflow triggers, or automated analysis, ensuring timely and consistent artifact creation and improving project management efficiency. Update artifact: Tool Name: update_artifact Functionality: Allows Agents to modify and update fields of existing artifacts in Rally. Requires the Artifact Reference (e.g., US12345, DE56789) and a JSON object containing the fields to update and their new values. Purpose: Enables automated artifact lifecycle management by allowing Agents to update artifact statuses, priorities, assignees, custom fields, or any other artifact attributes based on workflow progress, user actions, or external events, ensuring Rally artifacts are always up-to-date and accurately reflect project status and changes. Get project: Tool Name: get_project Functionality: Retrieves detailed information about a specific project in Rally, identified by its Project Name. Returns comprehensive project details, including project description, start date, end date, and project owner. Purpose: Allows Agents to access project-level information from Rally, providing context for project-related workflows, enabling automated reporting on project details, or incorporating project information into ELITEA conversations and dashboards, facilitating project monitoring and awareness. Get workspace: Tool Name: get_workspace Functionality: Fetches information about a specific workspace in Rally, identified by its Workspace Name. Returns workspace details, including workspace description, owner, and creation date. Purpose: Enables Agents to retrieve workspace-level information from Rally, providing context for workspace-related workflows, enabling automated reporting on workspace details, or providing users with workspace information within ELITEA, facilitating workspace management and understanding. Get user: Tool Name: get_user Functionality: Retrieves user details from Rally based on a provided query (e.g., username, email address, user ID). Returns user information, including username, display name, and email address. Purpose: Allows Agents to retrieve user information from Rally, enabling user identification, automated task assignment to specific users, user-based reporting, or incorporating user details into ELITEA workflows, facilitating user-centric automation and workflow personalization. Get context: Tool Name: get_context Functionality: Retrieves context-specific information from Rally based on a provided context type and context tag. Returns context-specific data, such as iteration details, release information, or workspace context. Purpose: Enables Agents to access dynamic and context-aware information from Rally, allowing for retrieval of iteration details for sprint planning, release information for release management workflows, or workspace context for workspace-specific operations, facilitating context-aware automation and dynamic workflow execution. Instructions and Prompts for Using the Rally Toolkit To effectively utilize the Rally toolkit within your ELITEA Agents, you need to provide clear and precise instructions within the Agent's \"Instructions\" field, telling the Agent how and when to use these tools. General Instruction Structure: When instructing your Agent to use a Rally tool, you will typically follow this pattern: Use the \"[tool_name]\" tool to [describe the action you want to perform] in Rally. Provide the following parameters: - Parameter 1: <value or description of value> - Parameter 2: <value or description of value> - ... Example Agent Instructions for Rally Toolkit Tools: Agent Instructions for Getting Artifact Types: Use the \"get_types\" tool to retrieve a list of artifact types available in Rally. No parameters are needed for this tool. Agent Instructions for Getting Entities (User Stories): Use the \"get_entities\" tool to retrieve a list of User Stories from Rally Project \"Project Alpha\". Provide the following parameters: - Artifact Type: \"UserStory\" - Query: \"(Project.Name = \\\"Project Alpha\\\")\" - Fetch: \"Name,FormattedID,ScheduleState\" Agent Instructions for Creating a New User Story: Use the \"create_artifact\" tool to create a new User Story in Rally Project \"Project Alpha\". Provide the following parameters: - Artifact Type: \"UserStory\" - Fields (JSON): { \"Name\": \"Implement User Authentication Feature\", \"Description\": \"As a user, I want to be able to log in using my username and password.\", \"Project\": \"/project/123456789\" // Replace with actual Project Ref } Important Considerations for Agent Instructions: Tool Name Accuracy: Ensure you use the correct Tool Name (e.g., \"get_types\" , \"get_entities\" , \"create_artifact\" ) as listed in the \"Tool Overview\" section. Typos or incorrect tool names will prevent the Agent from using the toolkit correctly. Parameter Clarity: Clearly specify the parameters required for each tool and provide instructions on where the Agent should obtain the values for these parameters (e.g., from user input, from previous steps in the workflow, or hardcoded values). Context and Examples: Provide sufficient context and examples within your Agent's \"Instructions\" to guide the LLM in understanding when and how to use the Rally toolkit tools effectively within your desired workflow. Rally Artifact Types, Field Names, and Values: Ensure that you use the correct Rally Artifact Types (e.g., \"UserStory\", \"Task\", \"Defect\"), Field Names (e.g., \"Name\", \"Description\", \"ScheduleState\"), and valid values for those fields as defined in your Rally workspace and project configuration. Incorrect artifact types or field names will cause errors during tool execution. Rally API Query Syntax: When using the \"Get Entities\" tool with a Query parameter, ensure that you provide valid Rally API query strings that adhere to Rally's WSAPI query syntax. Incorrect query syntax will result in search errors. Refer to Rally WSAPI documentation for query syntax details and examples. Best Practices and Use Cases for Rally Integration Best Practices for Efficient Integration Test Integration Thoroughly: After setting up the Rally toolkit and incorporating it into your Agents, thoroughly test each tool you intend to use to ensure seamless connectivity, correct authentication, and accurate execution of Rally actions. Monitor Agent Performance and Usage: Regularly monitor the performance of Agents utilizing Rally toolkits. Track metrics such as task completion success rate, execution time, and error rates to identify any potential issues or areas for optimization in Agent instructions or toolkit configurations. Follow Security Best Practices: Use API Keys: Always use Rally API Keys instead of your main account password for integrations. Grant Least Privilege: While Rally API Keys have limited scope control, ensure you are generating tokens specifically for ELITEA integration and not reusing tokens with broader access. Securely Store Credentials: Utilize ELITEA's Secrets Management feature to securely store and manage your Rally API Keys instead of hardcoding them directly in Agent configurations. Provide Clear Instructions and Prompts: Craft clear and unambiguous instructions within your ELITEA Agents to guide them in using the Rally toolkit effectively. Use the prompt examples provided in this guide as a starting point and adapt them to your specific use cases. Start with Simple Use Cases: Begin by implementing Rally integration for simpler automation tasks, such as retrieving artifact lists or reading project details, and gradually progress to more complex workflows as you gain experience and confidence with the toolkit. Use Cases for Rally Toolkit Integration The Rally toolkit opens up a wide range of automation possibilities for Agile project management, workflow automation, and reporting within ELITEA. Here are some compelling use cases: Automated Backlog Analysis and Task Prioritization Suggestions: Scenario: Project managers or product owners can use ELITEA Agents to analyze the project backlog in Rally, identify high-priority user stories or tasks based on criteria like urgency, business value, or dependencies, and suggest a prioritized backlog for sprint planning. Tools Used: get_entities Example Instruction: \"Use the 'get_entities' tool to retrieve a list of User Stories from Rally Project 'Project Alpha' that are currently in 'Backlog' state. Analyze the 'Priority' and 'Blocked' fields for each user story and suggest a prioritized backlog list based on these factors.\" Benefit: Improves sprint planning efficiency by automating backlog analysis and prioritization, providing project managers and product owners with AI-driven recommendations for backlog prioritization, and ensuring sprint planning is data-driven and aligned with project goals. Dynamic Task Assignment Based on Team Capacity and Skills: Scenario: ELITEA Agents can dynamically assign new tasks or defects in Rally to team members based on their current workload, skills, availability, and project role, optimizing resource allocation and workload balancing within Agile teams. Tools Used: create_artifact , get_user , get_entities (to assess workload) Example Instruction: \"Use the 'get_user' tool to retrieve a list of available developers in Rally Project 'Project Alpha'. Analyze their current workload by retrieving their assigned 'Task' entities using 'get_entities'. Create a new 'Task' artifact using 'create_artifact' and automatically assign it to the developer with the lowest current workload and relevant skills based on user profile data.\" Benefit: Enables intelligent and automated task assignment, optimizing resource allocation, balancing workload across team members, and improving team efficiency by ensuring tasks are assigned to the most appropriate and available resources. Automated Project Status Reporting and Progress Updates: Scenario: Project managers or stakeholders can use ELITEA Agents to generate automated project status reports directly from Rally data, providing real-time visibility into project progress, sprint burndown, and key Agile metrics without manual report generation. Tools Used: get_project , get_entities Example Instruction: \"Use the 'get_project' tool to retrieve details for Rally Project 'Project Beta'. Use 'get_entities' to retrieve lists of User Stories and Tasks in the current sprint. Generate a project status report summarizing sprint progress, completed user stories, remaining tasks, and sprint burndown chart data. Send the report to project stakeholders daily.\" Benefit: Provides automated and up-to-date project status reporting, improving project visibility for stakeholders, reducing manual effort in report generation, and enabling proactive project monitoring and risk identification. Contextual Information Retrieval for User Stories and Tasks: Scenario: Developers or testers can use ELITEA Agents to quickly retrieve detailed information about specific user stories or tasks in Rally, providing them with immediate access to requirements, acceptance criteria, and related documentation directly within ELITEA. Tools Used: get_entities Example Instruction: \"Use the 'get_entities' tool to retrieve details for User Story with FormattedID 'US-98765' from Rally Project 'Project Gamma'. Display the 'Name', 'Description', 'Acceptance Criteria', and 'Tasks' associated with this user story to the user.\" Benefit: Improves team efficiency by providing instant access to relevant artifact details directly within ELITEA, streamlining information retrieval, reducing context switching, and ensuring team members have all necessary information at their fingertips for task execution and collaboration. Troubleshooting and Support Troubleshooting Common Issues Connection Errors: Problem: ELITEA Agent fails to connect to Rally, resulting in errors during toolkit execution. Possible Solutions: Verify Rally Server URL: Double-check that you have entered the correct Rally Server URL in the toolkit configuration, including https:// or http:// and the full workspace URL (e.g., https://rally1.rallydev.com or https://rally.epam.com ). Check API Key: Ensure that the API Key you provided is correct and valid for your Rally account and workspace. Carefully re-enter or copy-paste the API Key to rule out typos. Verify Workspace and Project Names: Double-check that you have entered the correct Workspace Name and Project Name in the toolkit configuration. Workspace and Project Names are case-sensitive and must exactly match the names in your Rally instance. Network Connectivity: Confirm that both your ELITEA environment and your Rally instance are connected to the internet and that there are no network connectivity issues blocking the integration. Authorization Errors (Permission Denied/Unauthorized): Problem: Agent execution fails with \"Permission Denied\" or \"Unauthorized\" errors when trying to access or modify Rally resources. Possible Solutions: Verify API Key Validity: Ensure that the Rally API Key you are using is valid and has not been revoked in your Rally user settings. Generate a new API Key if necessary. Check Rally User Permissions: Confirm that the Rally user account associated with the API Key has the necessary permissions within Rally to access and modify the specific workspaces and projects your Agent is trying to interact with. Verify user roles and permissions within Rally workspace and project settings. Workspace and Project Access: Double-check that the Workspace Name and Project Name specified in the toolkit configuration are correct and that the API Key is valid for that specific Rally workspace and project. Tool-Specific Parameter Errors: Problem: Agent execution fails for specific Rally tools due to incorrect parameter values or formats. Troubleshooting Steps: Verify Workspace and Project Names: Ensure that you are using the correct Rally Workspace Names and Project Names in your Agent's instructions when specifying workspace or project-related parameters for Rally tools. Workspace and Project Names are case-sensitive and must match the names in Rally exactly. Verify Artifact Types and Field Names: Double-check that you are using the correct Rally Artifact Types (e.g., \"UserStory\", \"Task\", \"Defect\") and Field Names (e.g., \"Name\", \"Description\", \"ScheduleState\") in your Agent's instructions. Artifact Types and Field Names are case-sensitive and must match the Rally API schema. Use the \"Get Types\" tool to verify available Artifact Types and Field Names if needed. Parameter Format: Verify that you are providing parameters in the correct format expected by each Rally tool (e.g., string values for names, JSON format for artifact fields). Refer to the \"Instructions and Prompts for Using the Toolkit\" section for parameter details and examples. WSAPI Query Syntax Errors: When using the \"Get Entities\" tool with a Query parameter, ensure that you provide valid Rally WSAPI query strings that adhere to Rally's WSAPI query syntax. Incorrect query syntax will result in search errors. Refer to Rally WSAPI documentation for query syntax details and examples. FAQs Q: Can I use my regular Rally username and password for the ELITEA integration? A: No, it is mandatory to use a Rally API Key instead of your main account password for secure integration with ELITEA. Direct password authentication is not supported. API Keys provide a more secure and controlled way to grant access to external applications like ELITEA. Q: What permissions should I grant to the Rally API Key? A: Rally API Keys, when generated through the user profile, inherently provide access based on the user's permissions within Rally. Ensure that the Rally user account associated with the API Key has the necessary permissions within Rally to access and modify the workspaces and projects your Agent will be interacting with. You do not need to configure specific scopes during API Key generation as permissions are managed through Rally user roles and project access control. Q: What is the correct format for the Rally Server URL in the toolkit configuration? A: The Rally Server URL should be entered in the full format, including https:// or http:// and the complete workspace URL (e.g., https://rally1.rallydev.com or https://rally.epam.com ). Ensure there are no typos or missing parts in the URL. Q: How do I find the Workspace Name and Project Name for my Rally project? A: The Workspace Name and Project Name are typically displayed in the Rally web interface when you are logged in and viewing your Rally project. The Workspace Name is usually visible in the top navigation bar, and the Project Name is displayed on the project dashboard or project selection menus. You can also find these names in the URL when you are within your Rally workspace or project. Q: Why is my Agent getting \"Permission Denied\" errors even though I think I have configured everything correctly? A: Double-check the following: API Key Validity: Ensure that the API Key is valid and has not been revoked in your Rally user settings. Rally Account Permissions: Verify that the Rally account associated with the API Key has the necessary permissions to access the specific workspaces and projects your Agent is trying to interact with. Workspace and Project Names Accuracy: Double-check that you have entered the correct Workspace Name and Project Name in the toolkit configuration and that they correspond to the Rally workspace and project you intend to access. Server URL Accuracy: Ensure that the Server URL is correctly entered and points to the base URL of your Rally instance. Support and Contact Information If you encounter any issues, have questions, or require further assistance beyond what is covered in this guide regarding the Rally integration or ELITEA Agents in general, please do not hesitate to contact our dedicated ELITEA Support Team. We are here to help you resolve any problems quickly and efficiently and ensure you have a smooth and productive experience with ELITEA. How to Reach ELITEA Support: Email: SupportAlita@epam.com Best Practices for Effective Support Requests: To help us understand and resolve your issue as quickly as possible, please ensure you provide the following information in your support email: ELITEA Environment: Clearly specify the ELITEA environment you are using (e.g., \"Nexus,\" \"Alita Lab,\" \"EYE\"). Project Details: Indicate the Project Name and whether you are working in your Private workspace or a Team project. Detailed Issue Description: Provide a clear, concise, and detailed description of the problem you are encountering. Explain what you were trying to do, what you expected to happen, and what actually occurred. Relevant Configuration Information: To help us diagnose the issue, please include relevant configuration details, such as: Agent Instructions (Screenshot or Text): If the issue is with an Agent, provide a screenshot or copy the text of your Agent's \"Instructions\" field. Toolkit Configurations (Screenshots): If the issue involves the Rally toolkit or other toolkits, include screenshots of the toolkit configuration settings within your Agent. Error Messages (Full Error Text): If you are encountering an error message, please provide the complete error text . In the Chat window, expand the error details and copy the full error message. This detailed error information is crucial for diagnosis. Your Query/Prompt (Exact Text): If the issue is related to Agent execution, provide the exact query or prompt you used to trigger the issue. Before Contacting Support: We encourage you to first explore the resources available within this guide and the broader ELITEA documentation. You may find answers to common questions or solutions to known issues in the documentation. Useful Links To further enhance your understanding and skills in integrating Rally with ELITEA, here are some helpful resources: Broadcom Rally Website : Access the main Broadcom Rally product website for product information and documentation. Rally Help and Documentation : Explore the official Rally documentation for detailed information on Rally features, functionalities, and API. Rally WSAPI Documentation : Refer to the Rally Web Services API (WSAPI) documentation for detailed information on Rally API endpoints, query syntax, and data models. ELITEA Secrets Management : Learn how to securely store your Rally API Key using ELITEA's Secrets management feature for enhanced security. ELITEA Agents Configuration : Find out more about creating and configuring Agents in ELITEA, where you integrate the Rally toolkit to automate your workflows. ELITEA Support Email : Contact the ELITEA support team for direct assistance with Rally integration or any other questions and issues you may encounter.","title":"Rally Integration"},{"location":"how-tos/agents-toolkits/rally_toolkit/#elitea-toolkit-guide-rally-integration","text":"","title":"ELITEA Toolkit Guide: Rally Integration"},{"location":"how-tos/agents-toolkits/rally_toolkit/#introduction","text":"","title":"Introduction"},{"location":"how-tos/agents-toolkits/rally_toolkit/#purpose-of-this-guide","text":"This guide is your definitive resource for integrating and effectively utilizing the Rally toolkit within ELITEA. It provides a detailed, step-by-step walkthrough, from setting up your Rally API Key to configuring the toolkit in ELITEA and seamlessly incorporating it into your Agents. By following this guide, you will unlock the power of automated Agile project management, streamlined workflows, and enhanced team collaboration, all directly within the ELITEA platform. This integration empowers you to leverage AI-driven automation to optimize your Rally-driven workflows, enhance project visibility, and improve team productivity within your Agile development environment.","title":"Purpose of this Guide"},{"location":"how-tos/agents-toolkits/rally_toolkit/#brief-overview-of-rally","text":"Rally, by Broadcom, is a leading Agile project management platform designed to support and streamline Agile software development methodologies. It provides a comprehensive suite of tools for planning, tracking, and managing Agile projects at scale. Rally is widely used by Agile teams to: Agile Project and Portfolio Management: Rally provides robust features for managing Agile projects and portfolios, supporting various Agile frameworks like Scrum and Kanban, and enabling organizations to scale Agile practices across multiple teams and projects. Backlog and Iteration Planning: Enables efficient backlog management, sprint planning, and iteration management, allowing Agile teams to effectively plan and prioritize work, manage sprint backlogs, and track progress against sprint goals. User Story and Task Management: Facilitates the creation, management, and tracking of user stories, tasks, and other work items, providing a central repository for managing all aspects of project work and ensuring clear task ownership and accountability. Real-time Progress Tracking and Reporting: Offers real-time dashboards, customizable reports, and visual progress tracking tools, providing Agile teams and stakeholders with up-to-date visibility into project status, sprint progress, team velocity, and other key Agile metrics, enabling data-driven decision-making and continuous improvement. Collaborative Agile Environment: Rally promotes collaboration and communication within Agile teams by providing a shared platform for project planning, task management, issue tracking, and team communication, fostering transparency and alignment across the development team and stakeholders. Integrating Rally with ELITEA brings these powerful Agile project management capabilities directly into your AI-driven workflows. Your ELITEA Agents can then intelligently interact with your Rally workspaces and projects to automate Agile task management, enhance project tracking, improve team collaboration, and leverage AI to optimize your entire Agile development lifecycle within Rally.","title":"Brief Overview of Rally"},{"location":"how-tos/agents-toolkits/rally_toolkit/#toolkits-account-setup-and-configuration-in-rally","text":"","title":"Toolkit's Account Setup and Configuration in Rally"},{"location":"how-tos/agents-toolkits/rally_toolkit/#account-setup","text":"Rally is a commercial Agile project management platform. To create a Rally account, follow these steps: Visit Broadcom Rally Website: Open your web browser and navigate to the official Broadcom Rally website (e.g., rallydev.com or your organization's specific Rally URL). Sign Up or Request Access: Click on the \"Sign Up\" , \"Free Trial\" , or \"Request Demo\" button, depending on your organization's access and trial requirements. Follow Registration Process: Follow the on-screen instructions to create an account or request access. You will typically need to provide your business email address and other required information. Email Verification and Account Setup: After submitting the registration form, you should receive a confirmation email from the Rally team. This email may include instructions on how to verify your email address and set up your Rally account. Follow the instructions in the email to complete the account creation process. Log In to Rally: Once your account is set up and verified, log in to Rally using your newly created credentials.","title":"Account Setup"},{"location":"how-tos/agents-toolkits/rally_toolkit/#tokenapi-key-generation-creating-an-api-key-in-rally","text":"For secure integration with ELITEA, it is essential to use a Rally API Key for authentication. This method is more secure than using your primary Rally account password directly and allows you to control access permissions for ELITEA. Follow these steps to generate an API Key in Rally: For secure integration with ELITEA, it is essential to use a Rally API Key for authentication. This method is more secure than using your primary Rally account password directly and allows you to control access permissions for ELITEA. Follow these steps to generate an API Key in Rally: Sign in to Rally and Access Setup Icon: Begin by signing in to your Rally workspace . Once logged in, locate and click on the Setup icon (\u2699\ufe0f). This icon is typically found in the top right corner of the Rally interface and provides access to user and workspace settings. Access My Settings via Avatar: After clicking the Setup icon, click on your Avatar (your profile picture or initials), located in the top right corner of the Rally interface, next to the Setup icon. From the dropdown menu that appears, select \"My Settings\" . Locate API Keys Section in Top Banner: On the \"My Settings\" page, look for the \"API Keys\" section. This section is prominently displayed in a banner at the top of the \"My Settings\" page, making it easily accessible. Create API Key: Once you have located the \"API Keys\" section, click on the \"Create\" button. This button will initiate the generation of a new API key for your Rally account. Securely Copy and Store Your API Key: A new API Key will be generated and displayed. Immediately copy the newly generated API Key . This is the only time you will see the full API Key value. It is crucial to store it securely in a password manager or, preferably, ELITEA's built-in Secrets feature for enhanced security within ELITEA. You will need this API Key to configure the Rally toolkit in ELITEA.","title":"Token/API Key Generation: Creating an API Key in Rally"},{"location":"how-tos/agents-toolkits/rally_toolkit/#system-integration-with-elitea","text":"","title":"System Integration with ELITEA"},{"location":"how-tos/agents-toolkits/rally_toolkit/#agent-creationconfiguration","text":"To integrate Rally functionalities into your workflows, you will need to configure the Rally toolkit within an ELITEA Agent. You can either create a new Agent specifically for Rally interactions or modify an existing Agent to incorporate Rally tools. Navigate to Agents Menu: In ELITEA, go to the Agents menu from the main navigation panel. Create or Edit Agent: Create a New Agent: Click on the \"+ Agent\" button to create a new Agent. Follow the on-screen prompts to define essential Agent attributes such as Agent name, a descriptive Agent description, the desired Agent type, and initial instructions for the Agent. Edit an Existing Agent: Select the Agent you intend to integrate with Rally from your list of Agents. Click on the Agent's name to open its configuration settings for editing. Access Tools Section: Within the Agent configuration interface, scroll down until you locate the \"Tools\" section. This section is where you will add and configure toolkits, including the Rally toolkit.","title":"Agent Creation/Configuration"},{"location":"how-tos/agents-toolkits/rally_toolkit/#toolkit-configuration","text":"This section provides detailed instructions on how to configure the Rally toolkit within your ELITEA Agent. Add Toolkit: In the \"Tools\" section of the Agent configuration, click on the \"+\" icon . This action will display a dropdown list of available toolkits that can be integrated with your Agent. Select Rally Toolkit: From the dropdown list of available toolkits, choose \"Rally\" . Selecting \"Rally\" will open the \"New Rally tool\" configuration panel, where you will specify the settings for your Rally integration. Configure Rally Toolkit Settings: Carefully fill in the following configuration fields within the \"New Rally tool\" section: Name: Enter a descriptive Name for your Rally toolkit instance. Choose a name that is easily recognizable and helps you identify its purpose within your Agent's instructions (e.g., \"ProjectRally\", \"AgileManagementAccess\", \"RallyIntegration\"). Description: Provide a concise Description for the toolkit. This description should clarify the toolkit's purpose or the specific Rally workspace or project it is intended to access (e.g., \"Toolkit for accessing and managing user stories in Rally\", \"Integration for Rally Workspace 'Project Alpha'\"). Rally Server URL: Enter the base URL of your Rally instance. Ensure you use the correct format , including https:// or http:// and the full workspace URL (e.g., https://rally1.rallydev.com ). For Epam Rally, use https://rally.epam.com . Workspace Name: Enter the Workspace Name in Rally that you want to access with this toolkit. The Workspace Name is the name of your Rally workspace (e.g., \"My Workspace\"). Project Name: Enter the Project Name within your Rally workspace that you want to access with this toolkit. The Project Name is the name of your Rally project (e.g., \"Project Alpha\"). Authentication Options - API Key: Select the \"API Key\" authentication option. Password/Secret: Choose \"Password\" and paste the API Key you generated in Rally (during the \"Software-Specific Setup\" section of this guide) into the \"Password\" field. Enhanced Security with Secrets (Recommended): For enhanced security, it is strongly recommended to use ELITEA's Secrets Management feature to store your Rally API Key securely. Instead of directly pasting the token into the \"Password\" field, select the \"Secret\" option and choose the pre-configured secret containing your Rally API Key from the dropdown list. This prevents hardcoding sensitive credentials in your toolkit configuration. Enable Desired Tools: In the \"Tools\" section within the Rally toolkit configuration panel, select the checkboxes next to the specific Rally tools that you want to enable for your Agent. It is crucial to enable only the tools that your Agent will actually need to use to adhere to the principle of least privilege and minimize potential security risks. Available tools include: Get types - Retrieves the types of artifacts available in Rally. Get entities - Fetches specific entities from Rally based on provided criteria. Create artifact - Allows the Agent to create new artifacts (e.g., user stories, tasks) in Rally. Update artifact - Enables the Agent to update existing artifacts in Rally. Get project - Allows the Agent to retrieve details of a specific project in Rally. Get workspace - Fetches information about the workspace in Rally. Get user - Retrieves user details from Rally. Get context - Provides context-specific information from Rally. Complete Setup: After configuring all the necessary settings and enabling the desired tools, click the arrow icon (typically located at the top right of the toolkit configuration section) to finalize the Rally toolkit setup and return to the main Agent configuration menu. Click Save in the Agent configuration to save all changes and activate the Rally toolkit integration for your Agent.","title":"Toolkit Configuration"},{"location":"how-tos/agents-toolkits/rally_toolkit/#tool-overview-rally-toolkit-functionalities","text":"Once the Rally toolkit is successfully configured and added to your Agent, you can leverage the following tools within your Agent's instructions to enable intelligent interaction with your Rally workspaces and projects: Get types: Tool Name: get_types Functionality: Retrieves a list of artifact types available in Rally. Returns a list of artifact type names (e.g., \"UserStory\", \"Task\", \"Defect\"). Purpose: Enables Agents to dynamically discover and list available artifact types in Rally, allowing for dynamic workflow creation, user guidance on artifact creation, or automated reporting on artifact types within a Rally project or workspace. Get entities: Tool Name: get_entities Functionality: Fetches specific entities (artifacts) from Rally based on provided criteria, such as artifact type, query parameters, and fetch parameters. Returns a list of Rally artifacts matching the specified criteria. Purpose: Enables advanced and flexible data retrieval from Rally, allowing Agents to query and retrieve specific sets of artifacts based on various filters and parameters, facilitating data extraction for reporting, analysis, or workflow automation based on Rally data. Create artifact: Tool Name: create_artifact Functionality: Automates the creation of new artifacts (e.g., User Stories, Tasks, Defects) in Rally within a specified project and workspace. Requires parameters such as Artifact Type and a JSON object containing artifact fields and values. Purpose: Streamlines artifact creation and project planning by enabling Agents to automatically generate new artifacts in Rally directly from ELITEA workflows, based on user input, workflow triggers, or automated analysis, ensuring timely and consistent artifact creation and improving project management efficiency. Update artifact: Tool Name: update_artifact Functionality: Allows Agents to modify and update fields of existing artifacts in Rally. Requires the Artifact Reference (e.g., US12345, DE56789) and a JSON object containing the fields to update and their new values. Purpose: Enables automated artifact lifecycle management by allowing Agents to update artifact statuses, priorities, assignees, custom fields, or any other artifact attributes based on workflow progress, user actions, or external events, ensuring Rally artifacts are always up-to-date and accurately reflect project status and changes. Get project: Tool Name: get_project Functionality: Retrieves detailed information about a specific project in Rally, identified by its Project Name. Returns comprehensive project details, including project description, start date, end date, and project owner. Purpose: Allows Agents to access project-level information from Rally, providing context for project-related workflows, enabling automated reporting on project details, or incorporating project information into ELITEA conversations and dashboards, facilitating project monitoring and awareness. Get workspace: Tool Name: get_workspace Functionality: Fetches information about a specific workspace in Rally, identified by its Workspace Name. Returns workspace details, including workspace description, owner, and creation date. Purpose: Enables Agents to retrieve workspace-level information from Rally, providing context for workspace-related workflows, enabling automated reporting on workspace details, or providing users with workspace information within ELITEA, facilitating workspace management and understanding. Get user: Tool Name: get_user Functionality: Retrieves user details from Rally based on a provided query (e.g., username, email address, user ID). Returns user information, including username, display name, and email address. Purpose: Allows Agents to retrieve user information from Rally, enabling user identification, automated task assignment to specific users, user-based reporting, or incorporating user details into ELITEA workflows, facilitating user-centric automation and workflow personalization. Get context: Tool Name: get_context Functionality: Retrieves context-specific information from Rally based on a provided context type and context tag. Returns context-specific data, such as iteration details, release information, or workspace context. Purpose: Enables Agents to access dynamic and context-aware information from Rally, allowing for retrieval of iteration details for sprint planning, release information for release management workflows, or workspace context for workspace-specific operations, facilitating context-aware automation and dynamic workflow execution.","title":"Tool Overview: Rally Toolkit Functionalities"},{"location":"how-tos/agents-toolkits/rally_toolkit/#instructions-and-prompts-for-using-the-rally-toolkit","text":"To effectively utilize the Rally toolkit within your ELITEA Agents, you need to provide clear and precise instructions within the Agent's \"Instructions\" field, telling the Agent how and when to use these tools. General Instruction Structure: When instructing your Agent to use a Rally tool, you will typically follow this pattern: Use the \"[tool_name]\" tool to [describe the action you want to perform] in Rally. Provide the following parameters: - Parameter 1: <value or description of value> - Parameter 2: <value or description of value> - ... Example Agent Instructions for Rally Toolkit Tools: Agent Instructions for Getting Artifact Types: Use the \"get_types\" tool to retrieve a list of artifact types available in Rally. No parameters are needed for this tool. Agent Instructions for Getting Entities (User Stories): Use the \"get_entities\" tool to retrieve a list of User Stories from Rally Project \"Project Alpha\". Provide the following parameters: - Artifact Type: \"UserStory\" - Query: \"(Project.Name = \\\"Project Alpha\\\")\" - Fetch: \"Name,FormattedID,ScheduleState\" Agent Instructions for Creating a New User Story: Use the \"create_artifact\" tool to create a new User Story in Rally Project \"Project Alpha\". Provide the following parameters: - Artifact Type: \"UserStory\" - Fields (JSON): { \"Name\": \"Implement User Authentication Feature\", \"Description\": \"As a user, I want to be able to log in using my username and password.\", \"Project\": \"/project/123456789\" // Replace with actual Project Ref } Important Considerations for Agent Instructions: Tool Name Accuracy: Ensure you use the correct Tool Name (e.g., \"get_types\" , \"get_entities\" , \"create_artifact\" ) as listed in the \"Tool Overview\" section. Typos or incorrect tool names will prevent the Agent from using the toolkit correctly. Parameter Clarity: Clearly specify the parameters required for each tool and provide instructions on where the Agent should obtain the values for these parameters (e.g., from user input, from previous steps in the workflow, or hardcoded values). Context and Examples: Provide sufficient context and examples within your Agent's \"Instructions\" to guide the LLM in understanding when and how to use the Rally toolkit tools effectively within your desired workflow. Rally Artifact Types, Field Names, and Values: Ensure that you use the correct Rally Artifact Types (e.g., \"UserStory\", \"Task\", \"Defect\"), Field Names (e.g., \"Name\", \"Description\", \"ScheduleState\"), and valid values for those fields as defined in your Rally workspace and project configuration. Incorrect artifact types or field names will cause errors during tool execution. Rally API Query Syntax: When using the \"Get Entities\" tool with a Query parameter, ensure that you provide valid Rally API query strings that adhere to Rally's WSAPI query syntax. Incorrect query syntax will result in search errors. Refer to Rally WSAPI documentation for query syntax details and examples.","title":"Instructions and Prompts for Using the Rally Toolkit"},{"location":"how-tos/agents-toolkits/rally_toolkit/#best-practices-and-use-cases-for-rally-integration","text":"","title":"Best Practices and Use Cases for Rally Integration"},{"location":"how-tos/agents-toolkits/rally_toolkit/#best-practices-for-efficient-integration","text":"Test Integration Thoroughly: After setting up the Rally toolkit and incorporating it into your Agents, thoroughly test each tool you intend to use to ensure seamless connectivity, correct authentication, and accurate execution of Rally actions. Monitor Agent Performance and Usage: Regularly monitor the performance of Agents utilizing Rally toolkits. Track metrics such as task completion success rate, execution time, and error rates to identify any potential issues or areas for optimization in Agent instructions or toolkit configurations. Follow Security Best Practices: Use API Keys: Always use Rally API Keys instead of your main account password for integrations. Grant Least Privilege: While Rally API Keys have limited scope control, ensure you are generating tokens specifically for ELITEA integration and not reusing tokens with broader access. Securely Store Credentials: Utilize ELITEA's Secrets Management feature to securely store and manage your Rally API Keys instead of hardcoding them directly in Agent configurations. Provide Clear Instructions and Prompts: Craft clear and unambiguous instructions within your ELITEA Agents to guide them in using the Rally toolkit effectively. Use the prompt examples provided in this guide as a starting point and adapt them to your specific use cases. Start with Simple Use Cases: Begin by implementing Rally integration for simpler automation tasks, such as retrieving artifact lists or reading project details, and gradually progress to more complex workflows as you gain experience and confidence with the toolkit.","title":"Best Practices for Efficient Integration"},{"location":"how-tos/agents-toolkits/rally_toolkit/#use-cases-for-rally-toolkit-integration","text":"The Rally toolkit opens up a wide range of automation possibilities for Agile project management, workflow automation, and reporting within ELITEA. Here are some compelling use cases: Automated Backlog Analysis and Task Prioritization Suggestions: Scenario: Project managers or product owners can use ELITEA Agents to analyze the project backlog in Rally, identify high-priority user stories or tasks based on criteria like urgency, business value, or dependencies, and suggest a prioritized backlog for sprint planning. Tools Used: get_entities Example Instruction: \"Use the 'get_entities' tool to retrieve a list of User Stories from Rally Project 'Project Alpha' that are currently in 'Backlog' state. Analyze the 'Priority' and 'Blocked' fields for each user story and suggest a prioritized backlog list based on these factors.\" Benefit: Improves sprint planning efficiency by automating backlog analysis and prioritization, providing project managers and product owners with AI-driven recommendations for backlog prioritization, and ensuring sprint planning is data-driven and aligned with project goals. Dynamic Task Assignment Based on Team Capacity and Skills: Scenario: ELITEA Agents can dynamically assign new tasks or defects in Rally to team members based on their current workload, skills, availability, and project role, optimizing resource allocation and workload balancing within Agile teams. Tools Used: create_artifact , get_user , get_entities (to assess workload) Example Instruction: \"Use the 'get_user' tool to retrieve a list of available developers in Rally Project 'Project Alpha'. Analyze their current workload by retrieving their assigned 'Task' entities using 'get_entities'. Create a new 'Task' artifact using 'create_artifact' and automatically assign it to the developer with the lowest current workload and relevant skills based on user profile data.\" Benefit: Enables intelligent and automated task assignment, optimizing resource allocation, balancing workload across team members, and improving team efficiency by ensuring tasks are assigned to the most appropriate and available resources. Automated Project Status Reporting and Progress Updates: Scenario: Project managers or stakeholders can use ELITEA Agents to generate automated project status reports directly from Rally data, providing real-time visibility into project progress, sprint burndown, and key Agile metrics without manual report generation. Tools Used: get_project , get_entities Example Instruction: \"Use the 'get_project' tool to retrieve details for Rally Project 'Project Beta'. Use 'get_entities' to retrieve lists of User Stories and Tasks in the current sprint. Generate a project status report summarizing sprint progress, completed user stories, remaining tasks, and sprint burndown chart data. Send the report to project stakeholders daily.\" Benefit: Provides automated and up-to-date project status reporting, improving project visibility for stakeholders, reducing manual effort in report generation, and enabling proactive project monitoring and risk identification. Contextual Information Retrieval for User Stories and Tasks: Scenario: Developers or testers can use ELITEA Agents to quickly retrieve detailed information about specific user stories or tasks in Rally, providing them with immediate access to requirements, acceptance criteria, and related documentation directly within ELITEA. Tools Used: get_entities Example Instruction: \"Use the 'get_entities' tool to retrieve details for User Story with FormattedID 'US-98765' from Rally Project 'Project Gamma'. Display the 'Name', 'Description', 'Acceptance Criteria', and 'Tasks' associated with this user story to the user.\" Benefit: Improves team efficiency by providing instant access to relevant artifact details directly within ELITEA, streamlining information retrieval, reducing context switching, and ensuring team members have all necessary information at their fingertips for task execution and collaboration.","title":"Use Cases for Rally Toolkit Integration"},{"location":"how-tos/agents-toolkits/rally_toolkit/#troubleshooting-and-support","text":"","title":"Troubleshooting and Support"},{"location":"how-tos/agents-toolkits/rally_toolkit/#troubleshooting-common-issues","text":"Connection Errors: Problem: ELITEA Agent fails to connect to Rally, resulting in errors during toolkit execution. Possible Solutions: Verify Rally Server URL: Double-check that you have entered the correct Rally Server URL in the toolkit configuration, including https:// or http:// and the full workspace URL (e.g., https://rally1.rallydev.com or https://rally.epam.com ). Check API Key: Ensure that the API Key you provided is correct and valid for your Rally account and workspace. Carefully re-enter or copy-paste the API Key to rule out typos. Verify Workspace and Project Names: Double-check that you have entered the correct Workspace Name and Project Name in the toolkit configuration. Workspace and Project Names are case-sensitive and must exactly match the names in your Rally instance. Network Connectivity: Confirm that both your ELITEA environment and your Rally instance are connected to the internet and that there are no network connectivity issues blocking the integration. Authorization Errors (Permission Denied/Unauthorized): Problem: Agent execution fails with \"Permission Denied\" or \"Unauthorized\" errors when trying to access or modify Rally resources. Possible Solutions: Verify API Key Validity: Ensure that the Rally API Key you are using is valid and has not been revoked in your Rally user settings. Generate a new API Key if necessary. Check Rally User Permissions: Confirm that the Rally user account associated with the API Key has the necessary permissions within Rally to access and modify the specific workspaces and projects your Agent is trying to interact with. Verify user roles and permissions within Rally workspace and project settings. Workspace and Project Access: Double-check that the Workspace Name and Project Name specified in the toolkit configuration are correct and that the API Key is valid for that specific Rally workspace and project. Tool-Specific Parameter Errors: Problem: Agent execution fails for specific Rally tools due to incorrect parameter values or formats. Troubleshooting Steps: Verify Workspace and Project Names: Ensure that you are using the correct Rally Workspace Names and Project Names in your Agent's instructions when specifying workspace or project-related parameters for Rally tools. Workspace and Project Names are case-sensitive and must match the names in Rally exactly. Verify Artifact Types and Field Names: Double-check that you are using the correct Rally Artifact Types (e.g., \"UserStory\", \"Task\", \"Defect\") and Field Names (e.g., \"Name\", \"Description\", \"ScheduleState\") in your Agent's instructions. Artifact Types and Field Names are case-sensitive and must match the Rally API schema. Use the \"Get Types\" tool to verify available Artifact Types and Field Names if needed. Parameter Format: Verify that you are providing parameters in the correct format expected by each Rally tool (e.g., string values for names, JSON format for artifact fields). Refer to the \"Instructions and Prompts for Using the Toolkit\" section for parameter details and examples. WSAPI Query Syntax Errors: When using the \"Get Entities\" tool with a Query parameter, ensure that you provide valid Rally WSAPI query strings that adhere to Rally's WSAPI query syntax. Incorrect query syntax will result in search errors. Refer to Rally WSAPI documentation for query syntax details and examples.","title":"Troubleshooting Common Issues"},{"location":"how-tos/agents-toolkits/rally_toolkit/#faqs","text":"Q: Can I use my regular Rally username and password for the ELITEA integration? A: No, it is mandatory to use a Rally API Key instead of your main account password for secure integration with ELITEA. Direct password authentication is not supported. API Keys provide a more secure and controlled way to grant access to external applications like ELITEA. Q: What permissions should I grant to the Rally API Key? A: Rally API Keys, when generated through the user profile, inherently provide access based on the user's permissions within Rally. Ensure that the Rally user account associated with the API Key has the necessary permissions within Rally to access and modify the workspaces and projects your Agent will be interacting with. You do not need to configure specific scopes during API Key generation as permissions are managed through Rally user roles and project access control. Q: What is the correct format for the Rally Server URL in the toolkit configuration? A: The Rally Server URL should be entered in the full format, including https:// or http:// and the complete workspace URL (e.g., https://rally1.rallydev.com or https://rally.epam.com ). Ensure there are no typos or missing parts in the URL. Q: How do I find the Workspace Name and Project Name for my Rally project? A: The Workspace Name and Project Name are typically displayed in the Rally web interface when you are logged in and viewing your Rally project. The Workspace Name is usually visible in the top navigation bar, and the Project Name is displayed on the project dashboard or project selection menus. You can also find these names in the URL when you are within your Rally workspace or project. Q: Why is my Agent getting \"Permission Denied\" errors even though I think I have configured everything correctly? A: Double-check the following: API Key Validity: Ensure that the API Key is valid and has not been revoked in your Rally user settings. Rally Account Permissions: Verify that the Rally account associated with the API Key has the necessary permissions to access the specific workspaces and projects your Agent is trying to interact with. Workspace and Project Names Accuracy: Double-check that you have entered the correct Workspace Name and Project Name in the toolkit configuration and that they correspond to the Rally workspace and project you intend to access. Server URL Accuracy: Ensure that the Server URL is correctly entered and points to the base URL of your Rally instance.","title":"FAQs"},{"location":"how-tos/agents-toolkits/rally_toolkit/#support-and-contact-information","text":"If you encounter any issues, have questions, or require further assistance beyond what is covered in this guide regarding the Rally integration or ELITEA Agents in general, please do not hesitate to contact our dedicated ELITEA Support Team. We are here to help you resolve any problems quickly and efficiently and ensure you have a smooth and productive experience with ELITEA. How to Reach ELITEA Support: Email: SupportAlita@epam.com Best Practices for Effective Support Requests: To help us understand and resolve your issue as quickly as possible, please ensure you provide the following information in your support email: ELITEA Environment: Clearly specify the ELITEA environment you are using (e.g., \"Nexus,\" \"Alita Lab,\" \"EYE\"). Project Details: Indicate the Project Name and whether you are working in your Private workspace or a Team project. Detailed Issue Description: Provide a clear, concise, and detailed description of the problem you are encountering. Explain what you were trying to do, what you expected to happen, and what actually occurred. Relevant Configuration Information: To help us diagnose the issue, please include relevant configuration details, such as: Agent Instructions (Screenshot or Text): If the issue is with an Agent, provide a screenshot or copy the text of your Agent's \"Instructions\" field. Toolkit Configurations (Screenshots): If the issue involves the Rally toolkit or other toolkits, include screenshots of the toolkit configuration settings within your Agent. Error Messages (Full Error Text): If you are encountering an error message, please provide the complete error text . In the Chat window, expand the error details and copy the full error message. This detailed error information is crucial for diagnosis. Your Query/Prompt (Exact Text): If the issue is related to Agent execution, provide the exact query or prompt you used to trigger the issue. Before Contacting Support: We encourage you to first explore the resources available within this guide and the broader ELITEA documentation. You may find answers to common questions or solutions to known issues in the documentation.","title":"Support and Contact Information"},{"location":"how-tos/agents-toolkits/rally_toolkit/#useful-links","text":"To further enhance your understanding and skills in integrating Rally with ELITEA, here are some helpful resources: Broadcom Rally Website : Access the main Broadcom Rally product website for product information and documentation. Rally Help and Documentation : Explore the official Rally documentation for detailed information on Rally features, functionalities, and API. Rally WSAPI Documentation : Refer to the Rally Web Services API (WSAPI) documentation for detailed information on Rally API endpoints, query syntax, and data models. ELITEA Secrets Management : Learn how to securely store your Rally API Key using ELITEA's Secrets management feature for enhanced security. ELITEA Agents Configuration : Find out more about creating and configuring Agents in ELITEA, where you integrate the Rally toolkit to automate your workflows. ELITEA Support Email : Contact the ELITEA support team for direct assistance with Rally integration or any other questions and issues you may encounter.","title":"Useful Links"},{"location":"how-tos/agents-toolkits/sharepoint_toolkit/","text":"ELITEA Toolkit Guide: SharePoint Integration Introduction Purpose of the Guide This guide is your definitive resource for integrating and effectively utilizing the SharePoint toolkit within ELITEA. It provides a detailed, step-by-step walkthrough, from registering your SharePoint application in Azure Active Directory to configuring the toolkit in ELITEA and seamlessly incorporating it into your Agents. By following this guide, you will unlock the power of automated document management, streamlined collaboration workflows, and enhanced information access, all directly within the ELITEA platform. This integration empowers you to leverage AI-driven automation to optimize your SharePoint-driven workflows, enhance team productivity, and improve information management within your organization. Brief Overview of Microsoft SharePoint Microsoft SharePoint is a powerful web-based collaboration and document management platform that enables organizations to create websites, document libraries, lists, and other collaborative resources. It is a cornerstone of modern digital workplaces, facilitating teamwork, information sharing, and workflow automation. Key features of SharePoint include: Centralized Document Management: SharePoint provides a central repository for storing, organizing, and managing documents, ensuring version control, secure access, and efficient document retrieval. Document libraries in SharePoint offer features like check-in/check-out, version history, and metadata tagging for robust document lifecycle management. Collaborative Workspaces and Team Sites: SharePoint enables the creation of team sites and collaboration workspaces, providing teams with a shared platform for communication, document sharing, task management, and project collaboration. Team sites facilitate teamwork and information sharing within project teams and departments. Customizable Lists and Libraries: SharePoint lists and libraries are highly customizable and can be tailored to meet specific business needs. Lists can be used to track tasks, manage contacts, or create custom data tables, while libraries can be structured to organize various types of documents and media. Workflow Automation: SharePoint supports workflow automation through Power Automate and SharePoint workflows, allowing organizations to automate business processes, streamline approvals, and automate document-centric workflows, improving efficiency and reducing manual tasks. Enterprise Search Capabilities: SharePoint offers robust enterprise search capabilities, enabling users to quickly find relevant information across SharePoint sites, document libraries, lists, and other content sources, improving information discovery and knowledge sharing. Integrating SharePoint with ELITEA brings these powerful collaboration and document management capabilities directly into your AI-driven workflows. Your ELITEA Agents can then intelligently interact with your SharePoint sites, lists, and libraries to automate document-related tasks, enhance collaboration processes, and improve information accessibility through AI-powered automation. Toolkit's Account Setup and Configuration in SharePoint Registering an App in Azure Active Directory (Azure AD) To enable secure integration between ELITEA and SharePoint, you need to register an application in Azure Active Directory (Azure AD). This app registration will represent ELITEA and allow it to authenticate and access SharePoint resources. Access Azure Portal: Open your web browser and navigate to the Azure Portal and log in using an account with sufficient permissions to register applications in Azure AD. Navigate to App Registrations: In the Azure portal, use the search bar at the top to search for \"App registrations\" and select \"App registrations\" from the search results under \"Services\". Create New Registration: On the \"App registrations\" page, click on \"+ New registration\" . Configure App Registration Details: On the \"Register an application\" page, provide the following information: Name: Enter a meaningful and descriptive name for your application registration. For example, use \"ELITEA SharePoint Integration\" or \"ELITEA Agent Access to SharePoint\". This name will help you identify the purpose of this app registration later. Supported account types: Select the appropriate account type based on your organization's requirements. In most cases, \"Accounts in this organizational directory only ([Your Organization Name] only - Single tenant)\" is the recommended option for internal organizational use. If you need to access SharePoint resources across multiple organizations, you may need to select a different option. Redirect URI (Optional): You do not need to configure a Redirect URI for this integration as ELITEA will be authenticating as an application without user interaction. Leave the \"Redirect URI\" field blank. Register Application: After providing the application details, click the \"Register\" button at the bottom of the page to create the app registration. Note Application Credentials: Once the app registration is created successfully, you will be redirected to the application's \"Overview\" page. Note down the following credentials from this page, as you will need them to configure the SharePoint toolkit in ELITEA: Application (client) ID: This is the unique identifier for your registered application. Copy and store this value securely. Directory (tenant) ID: This is the unique identifier for your Azure AD tenant (your organization's Azure AD instance). Copy and store this value securely. Configure API Permissions for the Registered App To allow ELITEA to access SharePoint resources, you need to configure API permissions for your registered application. This involves granting the application the necessary permissions to interact with Microsoft Graph and SharePoint APIs. Navigate to API Permissions: In your registered app within the Azure portal, navigate to the left-hand menu and click on \"API permissions\" . Add Permissions: On the \"API permissions\" page, click on \"+ Add a permission\" . Select API Type - Microsoft Graph: In the \"Request API permissions\" panel, select the \"Microsoft Graph\" API tile. Microsoft Graph provides access to various Microsoft 365 services, including SharePoint. Select Permission Type - Application permissions: Choose \"Application permissions\" as the permission type. Application permissions are used when the application acts without a signed-in user, which is the case for ELITEA's SharePoint integration. Add Microsoft Graph Scopes: In the \"Application permissions\" section, use the search bar to search for and select the following scopes. These scopes grant ELITEA Agents the necessary permissions to access SharePoint resources through Microsoft Graph: Sites.Read.All : Allows the application to read site collections and list all sites, lists, and libraries in all site collections without a signed-in user. Sites.ReadWrite.All : Allows the application to read and write site collections and list all sites, lists, and libraries in all site collections without a signed-in user. Note: Grant this scope only if your ELITEA Agents need to modify SharePoint content (e.g., create or update files). If you only need read-only access, only grant Sites.Read.All . Add Permissions - SharePoint API: Click \"+ Add a permission\" again to add SharePoint-specific permissions. This time, in the \"Request API permissions\" panel, select the \"SharePoint\" API tile (you may need to scroll down to find it). Select Permission Type - Application permissions: Choose \"Application permissions\" as the permission type again. Add SharePoint Scopes: In the \"Application permissions\" section for SharePoint API, use the search bar to search for and select the following scopes. These scopes grant ELITEA Agents direct SharePoint-specific access: Sites.FullControl.All : Allows the application to have full control of all site collections without a signed-in user. Important Security Note: Grant this scope with caution and only if absolutely necessary, as it provides extensive permissions. For most use cases, more granular scopes through Microsoft Graph are sufficient and recommended for better security. Add Permissions: After selecting the necessary scopes for both Microsoft Graph and SharePoint APIs, click the \"Add permissions\" button at the bottom of the \"Request API permissions\" panel to add the selected permissions to your application registration. Grant Admin Consent: On the \"API permissions\" page, you will see the newly added permissions listed. Click the \"Grant admin consent for [Your Organization Name]\" button and then click \"Yes\" to grant admin consent for these permissions. Admin consent is required for application permissions to take effect. Configure the Client Secret To securely authenticate your ELITEA Agents with SharePoint, you need to create a Client Secret for your registered application. The Client Secret acts as a password for your application when authenticating with Azure AD. Navigate to Certificates & secrets: In your registered app within the Azure portal, navigate to the left-hand menu and click on \"Certificates & secrets\" . Create New Client Secret: On the \"Certificates & secrets\" page, click on \"Client secrets\" tab (if not already selected) and then click \"+ New client secret\" . Configure Client Secret Details: In the \"Add a client secret\" panel: Description: Enter a descriptive name for your client secret. For example, use \"ELITEA Integration Client Secret\" or \"SharePoint Access Secret.\" This description will help you identify the purpose of this client secret later. Expiration: Choose an appropriate expiration period for the client secret from the \"Expires\" dropdown. For security best practices, it is recommended to set an expiration period and rotate client secrets regularly. Add Client Secret: Click the \"Add\" button at the bottom of the \"Add a client secret\" panel to create the client secret. Securely Copy and Store Client Secret Value: Immediately copy the generated Client Secret Value that is displayed in the \"Client secrets\" page. This is the only time you will see the full Client Secret Value. Important Security Note: Store the Client Secret Value securely in a password manager or, preferably, ELITEA's built-in Secrets Management feature. Do not store the Client Secret Value in plain text or in insecure locations. You will need this Client Secret Value to configure the SharePoint toolkit in ELITEA. Note: Take note of the \"Value\" column, not the \"Secret ID\" column. The \"Value\" is the actual client secret, while \"Secret ID\" is just an identifier for the secret itself. Granting Access Scope to SharePoint Site (App-Only Access) To enable ELITEA Agents to access and interact with your SharePoint site and its content, you need to grant specific access permissions to your registered application at the SharePoint site collection level. This is done using the SharePoint App-Only Access via the AppInv.aspx page in the SharePoint Admin Center. Navigate to SharePoint Site AppInv.aspx Page: Open your web browser and navigate to the following URL, replacing {your-tenant} and {site} with your actual SharePoint tenant name and site name: https://{your-tenant}.sharepoint.com/sites/{site}/_layouts/15/appinv.aspx {your-tenant} : Replace this with your SharePoint tenant name (e.g., epam in epam.sharepoint.com ). {site} : Replace this with the URL-encoded name of the specific SharePoint site collection you want to grant access to (e.g., EPAMAlitaDoc for a site named \"EPAMAlitaDoc\"). Example URL: https://epam.sharepoint.com/sites/EPAMAlitaDoc/_layouts/15/appinv.aspx Enter Client ID: On the \"App permissions request page,\" in the \"App Id\" field, enter the Application (client) ID of your registered application that you noted down in Step 1.3. Click \"Lookup\" . Verify App Information: After clicking \"Lookup,\" SharePoint will retrieve information about your registered application. Verify that the \"Title,\" \"App Domain,\" and \"Redirect URL\" fields are populated correctly based on your app registration details. Define Permissions using XML: In the \"Permission Request XML\" field, define the permissions you want to grant to your application for the SharePoint site collection. Use XML format to specify the permission scopes. Example XML Permission Request (Full Control at Site Collection Level): xml <AppPermissionRequests AllowAppOnlyPolicy=\"true\"> <AppPermissionRequest Scope=\"http://sharepoint/content/sitecollection\" Right=\"FullControl\" /> </AppPermissionRequests> Explanation of Example XML: <AppPermissionRequests AllowAppOnlyPolicy=\"true\"> : This element indicates that you are requesting app-only access, meaning the application will access SharePoint without a signed-in user context. <AppPermissionRequest Scope=\"http://sharepoint/content/sitecollection\" Right=\"FullControl\" /> : This element defines the permission scope and right: Scope=\"http://sharepoint/content/sitecollection\" : Specifies that the permission scope is the entire site collection. Right=\"FullControl\" : Grants the application Full Control permissions over the site collection. Important Security Note: Grant FullControl only if absolutely necessary. For most use cases, more limited permissions like \"Read\" or \"Write\" might be sufficient and are recommended for better security. More Granular Permission Scopes (Example - Read Only at Site Collection Level): If you only need read-only access, you can use the following XML: xml <AppPermissionRequests AllowAppOnlyPolicy=\"true\"> <AppPermissionRequest Scope=\"http://sharepoint/content/sitecollection\" Right=\"Read\" /> </AppPermissionRequests> Important Security Practice: Grant Least Privilege. Carefully consider the necessary permissions and grant only the minimum required permissions for your ELITEA Agent's intended interactions with SharePoint. Avoid granting \"FullControl\" or overly broad permissions unless absolutely necessary. Create and Grant Permissions: After entering the XML permission request, click the \"Create\" button. Trust the App: A confirmation page will appear asking if you trust the application. Click \"Trust It\" to grant the requested permissions to your registered application for the specified SharePoint site collection. System Integration with ELITEA Overview and Usage of SharePoint Integration with ELITEA The SharePoint toolkit integration in ELITEA provides a powerful bridge between your AI Agents and your Microsoft SharePoint Online environment. This integration empowers your Agents to: Access SharePoint Content: Retrieve and analyze content from SharePoint document libraries and lists, including documents, list items, and metadata. Automate Document Management Tasks: Automate routine document management tasks such as retrieving files, reading document content, and listing files within document libraries, streamlining document workflows. Enhance Collaboration Workflows: Integrate AI-powered automation into your SharePoint-based collaboration workflows, improving efficiency and information sharing within teams and projects. Extract Data from SharePoint Lists: Access and process data stored in SharePoint lists, enabling agents to utilize list data for analysis, reporting, or integration with other systems. Integration Steps: Configuring the SharePoint Toolkit in ELITEA To integrate SharePoint with ELITEA and enable your Agents to interact with your SharePoint sites, lists, and libraries, follow these configuration steps within ELITEA: Navigate to Agents Menu: In ELITEA, go to the Agents menu and either create a new Agent or edit an existing Agent that you want to integrate with SharePoint. Access Toolkits Section: Within the Agent configuration, scroll down to the \"Tools\" section. Add Toolkit: Click the \"+\" icon under the \"TOOLS\" section to add a new toolkit. Select SharePoint Toolkit: From the dropdown list of available toolkits, choose \"SharePoint\" . This will open the \"New SharePoint tool\" configuration section. Configure SharePoint Toolkit Settings: Fill in the following configuration fields in the \"New SharePoint tool\" section: Name: Enter a descriptive Name for your SharePoint toolkit instance. This name will be used to reference the toolkit within your Agent's instructions (e.g., \"MySharePointSite\", \"DocumentLibraryAccess\"). Description: Provide a brief Description of the toolkit's purpose or the specific SharePoint site it will access (e.g., \"Access to Project Marketing SharePoint Site\"). SharePoint Site URL: Enter the full URL of your SharePoint site collection that you want to access with this toolkit. Ensure you use the correct format , including https:// and the full site URL (e.g., https://your-tenant.sharepoint.com/sites/YourSiteName ). Client ID: Paste the Application (client) ID of your registered Azure AD application that you noted down in Step 1.3 (during the \"Software-Specific Setup\" section of this guide) into the \"Client Id\" field. Client Secret: Paste the Client Secret Value of your registered Azure AD application that you generated in Step 1.4 (during the \"Software-Specific Setup\" section of this guide) into the \"Client Secret\" field. Important Security Note: For enhanced security, consider using the \"Secret\" option instead and storing your Client Secret securely as a Secret within Secrets feature. Enable Desired Tools: In the \"Tools\" section within the SharePoint toolkit configuration, check the boxes next to the specific SharePoint tools you want to enable for your Agent. Select only the tools that your Agent will actually need to use to minimize unnecessary permissions and maintain security. Available tools include: Get All Files Read Document Read List Complete Setup: Click the arrow icon (located at the top right of the toolkit configuration section) to complete the SharePoint toolkit setup and return to the main Agent configuration menu. Tool Overview: SharePoint Toolkit Functionalities Once the SharePoint toolkit is configured and added to your Agent, you can leverage the following tools within your Agent's instructions to interact with your SharePoint sites, lists, and libraries: Get all files: Tool Name: get_all_files Functionality: Retrieves a list of all files from a specified SharePoint document library. Purpose: Enables Agents to access and manage documents within SharePoint document libraries directly from ELITEA, facilitating document retrieval, reporting, or automated file processing workflows. Read document: Tool Name: read_document Functionality: Reads the content of a specific document from a specified SharePoint document library. Supports various document formats including .txt , .csv , .docx , .xlsx , and .pptx . Purpose: Allows Agents to extract content from SharePoint documents for analysis, information extraction, content summarization, or to provide document content to users within ELITEA conversations, enabling AI-powered document processing and information retrieval. Read list: Tool Name: read_list Functionality: Reads items from a specified SharePoint list. Returns list items with their fields and values in JSON format. Purpose: Enables Agents to access and process data stored in SharePoint lists, allowing for data extraction, reporting, list item analysis, or integration of SharePoint list data into ELITEA workflows, facilitating data-driven automation and insights from SharePoint lists. Instructions and Prompts for Using the SharePoint Toolkit To effectively utilize the SharePoint toolkit within your ELITEA Agents, you need to provide clear instructions within the Agent's \"Instructions\" field, telling the Agent how and when to use these tools. General Instruction Structure: When instructing your Agent to use a SharePoint tool, you will typically follow this pattern: Use the \"[tool_name]\" tool to [describe the action you want to perform] in SharePoint. Provide the following parameters: - Parameter 1: <value or description of value> - Parameter 2: <value or description of value> - ... Example Agent Instructions for SharePoint Toolkit Tools: Agent Instructions for Getting All Files from a Document Library: Use the \"get_all_files\" tool to retrieve a list of all files from a SharePoint document library. Provide the following parameters: - SharePoint Site URL: \"your-sharepoint-site-url\" - Library Name: \"Marketing Documents\" Agent Instructions for Reading a Document: Use the \"read_document\" tool to read the content of a specific document from SharePoint. Provide the following parameters: - SharePoint Site URL: \"your-sharepoint-site-url\" - Library Name: \"Financial Reports\" - File Name: \"Q3 Financial Report.xlsx\" Agent Instructions for Reading a SharePoint List: Use the \"read_list\" tool to read items from a SharePoint list. Provide the following parameters: - SharePoint Site URL: \"your-sharepoint-site-url\" - List Name: \"Project Tasks\" Important Considerations for Agent Instructions: Tool Name Accuracy: Ensure you use the correct Tool Name (e.g., \"get_all_files\" , \"read_document\" , \"read_list\" ) as listed in the \"Tool Overview\" section. Typos or incorrect tool names will prevent the Agent from using the toolkit correctly. Parameter Clarity: Clearly specify the parameters required for each tool and provide instructions on where the Agent should obtain the values for these parameters (e.g., from user input, from previous steps in the workflow, or hardcoded values). Context and Examples: Provide sufficient context and examples within your Agent's \"Instructions\" to guide the LLM in understanding when and how to use the SharePoint toolkit tools effectively within your desired workflow. SharePoint Element Names: Ensure that you use the correct SharePoint Site URL, Library Name, File Name, and List Name in your Agent instructions. These names are case-sensitive and must exactly match the names in your SharePoint site. Best Practices and Use Cases for SharePoint Integration Best Practices for Efficient Integration Test Integration Regularly: After setting up the SharePoint toolkit and incorporating it into your Agents, thoroughly test the integration to ensure it is functioning as expected. Test each tool you intend to use to verify connectivity, authentication, and correct execution of SharePoint actions. Monitor Agent Performance: After deploying Agents with SharePoint integration, monitor their performance regularly. Track metrics like task completion success rate, execution time, and error rates to identify any potential issues or areas for optimization in your Agent's instructions or toolkit configurations. Follow Security Best Practices: Use App Registration and Client Secrets: Always use Azure AD App Registrations and Client Secrets for secure authentication instead of user credentials. Grant Least Privilege: Grant only the minimum necessary scopes/permissions to the App Registration to limit potential security risks. Securely Store Credentials: Utilize ELITEA's Secrets Management feature to securely store and manage your SharePoint Client IDs and Client Secrets instead of hardcoding them directly in Agent configurations. Provide Clear Instructions and Prompts: Craft clear and unambiguous instructions within your ELITEA Agents to guide them in using the SharePoint toolkit effectively. Use the prompt examples provided in this guide as a starting point and adapt them to your specific use cases. Start with Simple Use Cases: Begin by implementing SharePoint integration for simpler automation tasks, such as retrieving document lists or reading document content, and gradually progress to more complex workflows as you gain experience and confidence with the toolkit. Use Cases The SharePoint toolkit unlocks numerous automation possibilities for document management, collaboration, and information retrieval workflows within ELITEA. Here are some compelling use cases, demonstrating how each tool can be applied, formatted to match the Bitbucket and GitHub guide style: Automated Document Library File Listing and Reporting: Scenario: Project managers need regular reports on the project documentation stored in SharePoint, including summaries of document types and sizes within specific libraries. Tools Used: get_all_files Example Instruction: \"Use the 'get_all_files' tool to retrieve a list of all files from the 'Project Documentation' library in SharePoint. Generate a summary report showing the count of each document type (e.g., .docx, .pdf, .xlsx) and the total size of documents in the library. Send the report to the project manager weekly.\" Benefit: Provides project managers with automated, regular visibility into project documentation stored in SharePoint, improving document management oversight, enabling proactive monitoring of document storage, and facilitating better resource planning. AI-Powered Document Content Extraction and Summarization: Scenario: Stakeholders need a quick summary of key information from lengthy project proposals or reports stored as documents in SharePoint, such as project goals, timelines, and budget. Tools Used: read_document Example Instruction: \"Use the 'read_document' tool to read the content of the 'Project Proposal.docx' document from the 'Financial Reports' library in SharePoint. Extract key information related to project goals, timelines, and budget. Summarize this information into a concise report for stakeholders.\" Benefit: Enables AI-powered document analysis and information extraction from SharePoint documents, providing valuable insights and summaries directly within ELITEA workflows. Improves efficiency by automating information extraction, speeds up decision-making, and enhances stakeholder communication with readily available document summaries. Automated Project Task Progress Reporting from SharePoint Lists: Scenario: Project teams require regular progress reports on project tasks managed within SharePoint lists for team meetings and status updates. Tools Used: read_list Example Instruction: \"Use the 'read_list' tool to retrieve items from the 'Project Tasks' list in SharePoint. Analyze the 'Status', 'Due Date', and 'Assigned To' fields for each task. Generate a project task progress report summarizing tasks by status, highlighting overdue tasks, and listing tasks assigned to each team member. Send the report to the project team before each weekly meeting.\" Benefit: Provides automated reporting and analysis of SharePoint list data, enabling project managers and teams to track progress, identify potential bottlenecks, and improve task management directly within ELITEA. Reduces manual effort in report generation, ensures timely and accurate progress updates, and facilitates data-driven project management. Troubleshooting and Support Troubleshooting Common Issues Connection Errors: Problem: ELITEA Agent fails to connect to SharePoint, resulting in errors during toolkit execution. Possible Solutions: Verify SharePoint Site URL: Double-check that you have entered the correct SharePoint Site URL in the toolkit configuration, including https:// and the full site URL (e.g., https://your-tenant.sharepoint.com/sites/YourSiteName ). Check Client ID and Client Secret: Ensure that the Client ID and Client Secret you provided are correct and valid for your registered Azure AD application. Carefully re-enter or copy-paste these credentials to rule out typos. Verify App Registration Permissions: Review the API permissions configured for your registered Azure AD application. Ensure it has the necessary permissions (e.g., Sites.Read.All , Sites.ReadWrite.All ) for the SharePoint tools your Agent is trying to use. Network Connectivity: Confirm that both your ELITEA environment and your SharePoint Online instance are connected to the internet and that there are no network connectivity issues blocking the integration. Authorization Errors (Permission Denied/Unauthorized): Problem: Agent execution fails with \"Permission Denied\" or \"Unauthorized\" errors when trying to access or modify SharePoint resources. Possible Solutions: Verify App Registration Permissions: Double-check the API permissions granted to your registered Azure AD application. Ensure it has the necessary scopes for the specific SharePoint actions your Agent is trying to perform (e.g., Sites.ReadWrite.All for modifying documents). SharePoint Site Collection Permissions: Confirm that the registered Azure AD application has been granted access to the specific SharePoint site collection using the AppInv.aspx page and that the granted permissions are sufficient for the actions your Agent is trying to perform. Client ID and Client Secret Validity: Ensure that the Client ID and Client Secret you are using are still valid and have not expired or been revoked in Azure AD. Incorrect SharePoint Element Names: Problem: Agent tools fail to operate on the intended SharePoint document library or list. Possible Solutions: Double-Check Library Name: Carefully verify that you have entered the correct SharePoint Document Library Name in your Agent's instructions, ensuring it exactly matches the library name in SharePoint. Library names are case-sensitive. Verify List Name: Ensure that you are using the correct SharePoint List Name in your Agent's instructions. List names are also case-sensitive and must match the list name in SharePoint exactly. SharePoint Site URL Accuracy: Double-check that the SharePoint Site URL in the toolkit configuration is correct and points to the root site collection where your target libraries and lists are located. FAQs Q: Can I use my regular SharePoint username and password for the ELITEA integration? A: No, it is strongly recommended to use Azure AD App Registration and Client Secrets instead of user credentials for secure integration. App registration provides a more secure and controlled way to grant access to external applications like ELITEA without exposing user accounts. Q: What permissions should I grant to the Azure AD App Registration for SharePoint integration? A: Grant only the minimum necessary scopes required for your ELITEA Agent's intended interactions with SharePoint. For read-only access, Sites.Read.All scope in Microsoft Graph might be sufficient. If your Agent needs to modify SharePoint content, you might need to grant Sites.ReadWrite.All in Microsoft Graph or more granular SharePoint-specific permissions via AppInv.aspx . Avoid granting \"FullControl\" or unnecessary permissions. Q: What is the correct format for the SharePoint Site URL in the toolkit configuration? A: The SharePoint Site URL should be entered in the full format, including https:// and the complete site URL (e.g., https://your-tenant.sharepoint.com/sites/YourSiteName ). Ensure there are no typos or missing parts in the URL. Q: Why is my Agent getting \"Permission Denied\" errors even though I think I have configured everything correctly? A: Double-check the following: App Registration Permissions: Verify that the API permissions granted to your Azure AD App Registration include the necessary scopes for the SharePoint tools your Agent is trying to use (e.g., Sites.ReadWrite.All for modifying documents). SharePoint Site Collection Permissions: Ensure that you have granted access to your registered App for the specific SharePoint site collection using AppInv.aspx and that the granted permissions are sufficient. Client ID and Client Secret Validity: Double-check that the Client ID and Client Secret are correct, valid, and have not expired or been revoked in Azure AD. Support and Contact Information If you encounter any issues, have questions, or require further assistance beyond what is covered in this guide regarding the SharePoint integration or ELITEA Agents in general, please do not hesitate to contact our dedicated ELITEA Support Team. We are here to help you resolve any problems quickly and efficiently and ensure you have a smooth and productive experience with ELITEA. How to Reach ELITEA Support: Email: SupportAlita@epam.com Best Practices for Effective Support Requests: To help us understand and resolve your issue as quickly as possible, please ensure you provide the following information in your support email: ELITEA Environment: Clearly specify the ELITEA environment you are using (e.g., \"Nexus,\" \"Alita Lab,\" \"EYE\"). Project Details: Indicate the Project Name and whether you are working in your Private workspace or a Team project. Detailed Issue Description: Provide a clear, concise, and detailed description of the problem you are encountering. Explain what you were trying to do, what you expected to happen, and what actually occurred. Relevant Configuration Information: To help us diagnose the issue, please include relevant configuration details, such as: Agent Instructions (Screenshot or Text): If the issue is with an Agent, provide a screenshot or copy the text of your Agent's \"Instructions\" field. Toolkit Configurations (Screenshots): If the issue involves the SharePoint toolkit or other toolkits, include screenshots of the toolkit configuration settings within your Agent. Error Messages (Full Error Text): If you are encountering an error message, please provide the complete error text . In the Chat window, expand the error details and copy the full error message. This detailed error information is crucial for diagnosis. Your Query/Prompt (Exact Text): If the issue is related to Agent execution, provide the exact query or prompt you used to trigger the issue. Before Contacting Support: We encourage you to first explore the resources available within this guide and the broader ELITEA documentation. You may find answers to common questions or solutions to known issues in the documentation. Useful Links To further enhance your understanding and skills in integrating SharePoint with ELITEA, here are some helpful resources: Microsoft SharePoint Website : Access the main Microsoft SharePoint website for product information and documentation. Azure Portal : Access the Azure portal to manage your Azure AD App Registrations and configure API permissions. ELITEA Secrets Management : Learn how to securely store your SharePoint Client ID and Client Secret using ELITEA's Secrets management feature for enhanced security. ELITEA Agents Configuration : Find out more about creating and configuring Agents in ELITEA, where you integrate the SharePoint toolkit to automate your workflows. ELITEA Support Email : Contact the ELITEA support team for direct assistance with SharePoint integration or any other questions and issues you may encounter.","title":"SharePoint Integration"},{"location":"how-tos/agents-toolkits/sharepoint_toolkit/#elitea-toolkit-guide-sharepoint-integration","text":"","title":"ELITEA Toolkit Guide: SharePoint Integration"},{"location":"how-tos/agents-toolkits/sharepoint_toolkit/#introduction","text":"","title":"Introduction"},{"location":"how-tos/agents-toolkits/sharepoint_toolkit/#purpose-of-the-guide","text":"This guide is your definitive resource for integrating and effectively utilizing the SharePoint toolkit within ELITEA. It provides a detailed, step-by-step walkthrough, from registering your SharePoint application in Azure Active Directory to configuring the toolkit in ELITEA and seamlessly incorporating it into your Agents. By following this guide, you will unlock the power of automated document management, streamlined collaboration workflows, and enhanced information access, all directly within the ELITEA platform. This integration empowers you to leverage AI-driven automation to optimize your SharePoint-driven workflows, enhance team productivity, and improve information management within your organization.","title":"Purpose of the Guide"},{"location":"how-tos/agents-toolkits/sharepoint_toolkit/#brief-overview-of-microsoft-sharepoint","text":"Microsoft SharePoint is a powerful web-based collaboration and document management platform that enables organizations to create websites, document libraries, lists, and other collaborative resources. It is a cornerstone of modern digital workplaces, facilitating teamwork, information sharing, and workflow automation. Key features of SharePoint include: Centralized Document Management: SharePoint provides a central repository for storing, organizing, and managing documents, ensuring version control, secure access, and efficient document retrieval. Document libraries in SharePoint offer features like check-in/check-out, version history, and metadata tagging for robust document lifecycle management. Collaborative Workspaces and Team Sites: SharePoint enables the creation of team sites and collaboration workspaces, providing teams with a shared platform for communication, document sharing, task management, and project collaboration. Team sites facilitate teamwork and information sharing within project teams and departments. Customizable Lists and Libraries: SharePoint lists and libraries are highly customizable and can be tailored to meet specific business needs. Lists can be used to track tasks, manage contacts, or create custom data tables, while libraries can be structured to organize various types of documents and media. Workflow Automation: SharePoint supports workflow automation through Power Automate and SharePoint workflows, allowing organizations to automate business processes, streamline approvals, and automate document-centric workflows, improving efficiency and reducing manual tasks. Enterprise Search Capabilities: SharePoint offers robust enterprise search capabilities, enabling users to quickly find relevant information across SharePoint sites, document libraries, lists, and other content sources, improving information discovery and knowledge sharing. Integrating SharePoint with ELITEA brings these powerful collaboration and document management capabilities directly into your AI-driven workflows. Your ELITEA Agents can then intelligently interact with your SharePoint sites, lists, and libraries to automate document-related tasks, enhance collaboration processes, and improve information accessibility through AI-powered automation.","title":"Brief Overview of Microsoft SharePoint"},{"location":"how-tos/agents-toolkits/sharepoint_toolkit/#toolkits-account-setup-and-configuration-in-sharepoint","text":"","title":"Toolkit's Account Setup and Configuration in SharePoint"},{"location":"how-tos/agents-toolkits/sharepoint_toolkit/#registering-an-app-in-azure-active-directory-azure-ad","text":"To enable secure integration between ELITEA and SharePoint, you need to register an application in Azure Active Directory (Azure AD). This app registration will represent ELITEA and allow it to authenticate and access SharePoint resources. Access Azure Portal: Open your web browser and navigate to the Azure Portal and log in using an account with sufficient permissions to register applications in Azure AD. Navigate to App Registrations: In the Azure portal, use the search bar at the top to search for \"App registrations\" and select \"App registrations\" from the search results under \"Services\". Create New Registration: On the \"App registrations\" page, click on \"+ New registration\" . Configure App Registration Details: On the \"Register an application\" page, provide the following information: Name: Enter a meaningful and descriptive name for your application registration. For example, use \"ELITEA SharePoint Integration\" or \"ELITEA Agent Access to SharePoint\". This name will help you identify the purpose of this app registration later. Supported account types: Select the appropriate account type based on your organization's requirements. In most cases, \"Accounts in this organizational directory only ([Your Organization Name] only - Single tenant)\" is the recommended option for internal organizational use. If you need to access SharePoint resources across multiple organizations, you may need to select a different option. Redirect URI (Optional): You do not need to configure a Redirect URI for this integration as ELITEA will be authenticating as an application without user interaction. Leave the \"Redirect URI\" field blank. Register Application: After providing the application details, click the \"Register\" button at the bottom of the page to create the app registration. Note Application Credentials: Once the app registration is created successfully, you will be redirected to the application's \"Overview\" page. Note down the following credentials from this page, as you will need them to configure the SharePoint toolkit in ELITEA: Application (client) ID: This is the unique identifier for your registered application. Copy and store this value securely. Directory (tenant) ID: This is the unique identifier for your Azure AD tenant (your organization's Azure AD instance). Copy and store this value securely.","title":"Registering an App in Azure Active Directory (Azure AD)"},{"location":"how-tos/agents-toolkits/sharepoint_toolkit/#configure-api-permissions-for-the-registered-app","text":"To allow ELITEA to access SharePoint resources, you need to configure API permissions for your registered application. This involves granting the application the necessary permissions to interact with Microsoft Graph and SharePoint APIs. Navigate to API Permissions: In your registered app within the Azure portal, navigate to the left-hand menu and click on \"API permissions\" . Add Permissions: On the \"API permissions\" page, click on \"+ Add a permission\" . Select API Type - Microsoft Graph: In the \"Request API permissions\" panel, select the \"Microsoft Graph\" API tile. Microsoft Graph provides access to various Microsoft 365 services, including SharePoint. Select Permission Type - Application permissions: Choose \"Application permissions\" as the permission type. Application permissions are used when the application acts without a signed-in user, which is the case for ELITEA's SharePoint integration. Add Microsoft Graph Scopes: In the \"Application permissions\" section, use the search bar to search for and select the following scopes. These scopes grant ELITEA Agents the necessary permissions to access SharePoint resources through Microsoft Graph: Sites.Read.All : Allows the application to read site collections and list all sites, lists, and libraries in all site collections without a signed-in user. Sites.ReadWrite.All : Allows the application to read and write site collections and list all sites, lists, and libraries in all site collections without a signed-in user. Note: Grant this scope only if your ELITEA Agents need to modify SharePoint content (e.g., create or update files). If you only need read-only access, only grant Sites.Read.All . Add Permissions - SharePoint API: Click \"+ Add a permission\" again to add SharePoint-specific permissions. This time, in the \"Request API permissions\" panel, select the \"SharePoint\" API tile (you may need to scroll down to find it). Select Permission Type - Application permissions: Choose \"Application permissions\" as the permission type again. Add SharePoint Scopes: In the \"Application permissions\" section for SharePoint API, use the search bar to search for and select the following scopes. These scopes grant ELITEA Agents direct SharePoint-specific access: Sites.FullControl.All : Allows the application to have full control of all site collections without a signed-in user. Important Security Note: Grant this scope with caution and only if absolutely necessary, as it provides extensive permissions. For most use cases, more granular scopes through Microsoft Graph are sufficient and recommended for better security. Add Permissions: After selecting the necessary scopes for both Microsoft Graph and SharePoint APIs, click the \"Add permissions\" button at the bottom of the \"Request API permissions\" panel to add the selected permissions to your application registration. Grant Admin Consent: On the \"API permissions\" page, you will see the newly added permissions listed. Click the \"Grant admin consent for [Your Organization Name]\" button and then click \"Yes\" to grant admin consent for these permissions. Admin consent is required for application permissions to take effect.","title":"Configure API Permissions for the Registered App"},{"location":"how-tos/agents-toolkits/sharepoint_toolkit/#configure-the-client-secret","text":"To securely authenticate your ELITEA Agents with SharePoint, you need to create a Client Secret for your registered application. The Client Secret acts as a password for your application when authenticating with Azure AD. Navigate to Certificates & secrets: In your registered app within the Azure portal, navigate to the left-hand menu and click on \"Certificates & secrets\" . Create New Client Secret: On the \"Certificates & secrets\" page, click on \"Client secrets\" tab (if not already selected) and then click \"+ New client secret\" . Configure Client Secret Details: In the \"Add a client secret\" panel: Description: Enter a descriptive name for your client secret. For example, use \"ELITEA Integration Client Secret\" or \"SharePoint Access Secret.\" This description will help you identify the purpose of this client secret later. Expiration: Choose an appropriate expiration period for the client secret from the \"Expires\" dropdown. For security best practices, it is recommended to set an expiration period and rotate client secrets regularly. Add Client Secret: Click the \"Add\" button at the bottom of the \"Add a client secret\" panel to create the client secret. Securely Copy and Store Client Secret Value: Immediately copy the generated Client Secret Value that is displayed in the \"Client secrets\" page. This is the only time you will see the full Client Secret Value. Important Security Note: Store the Client Secret Value securely in a password manager or, preferably, ELITEA's built-in Secrets Management feature. Do not store the Client Secret Value in plain text or in insecure locations. You will need this Client Secret Value to configure the SharePoint toolkit in ELITEA. Note: Take note of the \"Value\" column, not the \"Secret ID\" column. The \"Value\" is the actual client secret, while \"Secret ID\" is just an identifier for the secret itself.","title":"Configure the Client Secret"},{"location":"how-tos/agents-toolkits/sharepoint_toolkit/#granting-access-scope-to-sharepoint-site-app-only-access","text":"To enable ELITEA Agents to access and interact with your SharePoint site and its content, you need to grant specific access permissions to your registered application at the SharePoint site collection level. This is done using the SharePoint App-Only Access via the AppInv.aspx page in the SharePoint Admin Center. Navigate to SharePoint Site AppInv.aspx Page: Open your web browser and navigate to the following URL, replacing {your-tenant} and {site} with your actual SharePoint tenant name and site name: https://{your-tenant}.sharepoint.com/sites/{site}/_layouts/15/appinv.aspx {your-tenant} : Replace this with your SharePoint tenant name (e.g., epam in epam.sharepoint.com ). {site} : Replace this with the URL-encoded name of the specific SharePoint site collection you want to grant access to (e.g., EPAMAlitaDoc for a site named \"EPAMAlitaDoc\"). Example URL: https://epam.sharepoint.com/sites/EPAMAlitaDoc/_layouts/15/appinv.aspx Enter Client ID: On the \"App permissions request page,\" in the \"App Id\" field, enter the Application (client) ID of your registered application that you noted down in Step 1.3. Click \"Lookup\" . Verify App Information: After clicking \"Lookup,\" SharePoint will retrieve information about your registered application. Verify that the \"Title,\" \"App Domain,\" and \"Redirect URL\" fields are populated correctly based on your app registration details. Define Permissions using XML: In the \"Permission Request XML\" field, define the permissions you want to grant to your application for the SharePoint site collection. Use XML format to specify the permission scopes. Example XML Permission Request (Full Control at Site Collection Level): xml <AppPermissionRequests AllowAppOnlyPolicy=\"true\"> <AppPermissionRequest Scope=\"http://sharepoint/content/sitecollection\" Right=\"FullControl\" /> </AppPermissionRequests> Explanation of Example XML: <AppPermissionRequests AllowAppOnlyPolicy=\"true\"> : This element indicates that you are requesting app-only access, meaning the application will access SharePoint without a signed-in user context. <AppPermissionRequest Scope=\"http://sharepoint/content/sitecollection\" Right=\"FullControl\" /> : This element defines the permission scope and right: Scope=\"http://sharepoint/content/sitecollection\" : Specifies that the permission scope is the entire site collection. Right=\"FullControl\" : Grants the application Full Control permissions over the site collection. Important Security Note: Grant FullControl only if absolutely necessary. For most use cases, more limited permissions like \"Read\" or \"Write\" might be sufficient and are recommended for better security. More Granular Permission Scopes (Example - Read Only at Site Collection Level): If you only need read-only access, you can use the following XML: xml <AppPermissionRequests AllowAppOnlyPolicy=\"true\"> <AppPermissionRequest Scope=\"http://sharepoint/content/sitecollection\" Right=\"Read\" /> </AppPermissionRequests> Important Security Practice: Grant Least Privilege. Carefully consider the necessary permissions and grant only the minimum required permissions for your ELITEA Agent's intended interactions with SharePoint. Avoid granting \"FullControl\" or overly broad permissions unless absolutely necessary. Create and Grant Permissions: After entering the XML permission request, click the \"Create\" button. Trust the App: A confirmation page will appear asking if you trust the application. Click \"Trust It\" to grant the requested permissions to your registered application for the specified SharePoint site collection.","title":"Granting Access Scope to SharePoint Site (App-Only Access)"},{"location":"how-tos/agents-toolkits/sharepoint_toolkit/#system-integration-with-elitea","text":"","title":"System Integration with ELITEA"},{"location":"how-tos/agents-toolkits/sharepoint_toolkit/#overview-and-usage-of-sharepoint-integration-with-elitea","text":"The SharePoint toolkit integration in ELITEA provides a powerful bridge between your AI Agents and your Microsoft SharePoint Online environment. This integration empowers your Agents to: Access SharePoint Content: Retrieve and analyze content from SharePoint document libraries and lists, including documents, list items, and metadata. Automate Document Management Tasks: Automate routine document management tasks such as retrieving files, reading document content, and listing files within document libraries, streamlining document workflows. Enhance Collaboration Workflows: Integrate AI-powered automation into your SharePoint-based collaboration workflows, improving efficiency and information sharing within teams and projects. Extract Data from SharePoint Lists: Access and process data stored in SharePoint lists, enabling agents to utilize list data for analysis, reporting, or integration with other systems.","title":"Overview and Usage of SharePoint Integration with ELITEA"},{"location":"how-tos/agents-toolkits/sharepoint_toolkit/#integration-steps-configuring-the-sharepoint-toolkit-in-elitea","text":"To integrate SharePoint with ELITEA and enable your Agents to interact with your SharePoint sites, lists, and libraries, follow these configuration steps within ELITEA: Navigate to Agents Menu: In ELITEA, go to the Agents menu and either create a new Agent or edit an existing Agent that you want to integrate with SharePoint. Access Toolkits Section: Within the Agent configuration, scroll down to the \"Tools\" section. Add Toolkit: Click the \"+\" icon under the \"TOOLS\" section to add a new toolkit. Select SharePoint Toolkit: From the dropdown list of available toolkits, choose \"SharePoint\" . This will open the \"New SharePoint tool\" configuration section. Configure SharePoint Toolkit Settings: Fill in the following configuration fields in the \"New SharePoint tool\" section: Name: Enter a descriptive Name for your SharePoint toolkit instance. This name will be used to reference the toolkit within your Agent's instructions (e.g., \"MySharePointSite\", \"DocumentLibraryAccess\"). Description: Provide a brief Description of the toolkit's purpose or the specific SharePoint site it will access (e.g., \"Access to Project Marketing SharePoint Site\"). SharePoint Site URL: Enter the full URL of your SharePoint site collection that you want to access with this toolkit. Ensure you use the correct format , including https:// and the full site URL (e.g., https://your-tenant.sharepoint.com/sites/YourSiteName ). Client ID: Paste the Application (client) ID of your registered Azure AD application that you noted down in Step 1.3 (during the \"Software-Specific Setup\" section of this guide) into the \"Client Id\" field. Client Secret: Paste the Client Secret Value of your registered Azure AD application that you generated in Step 1.4 (during the \"Software-Specific Setup\" section of this guide) into the \"Client Secret\" field. Important Security Note: For enhanced security, consider using the \"Secret\" option instead and storing your Client Secret securely as a Secret within Secrets feature. Enable Desired Tools: In the \"Tools\" section within the SharePoint toolkit configuration, check the boxes next to the specific SharePoint tools you want to enable for your Agent. Select only the tools that your Agent will actually need to use to minimize unnecessary permissions and maintain security. Available tools include: Get All Files Read Document Read List Complete Setup: Click the arrow icon (located at the top right of the toolkit configuration section) to complete the SharePoint toolkit setup and return to the main Agent configuration menu.","title":"Integration Steps: Configuring the SharePoint Toolkit in ELITEA"},{"location":"how-tos/agents-toolkits/sharepoint_toolkit/#tool-overview-sharepoint-toolkit-functionalities","text":"Once the SharePoint toolkit is configured and added to your Agent, you can leverage the following tools within your Agent's instructions to interact with your SharePoint sites, lists, and libraries: Get all files: Tool Name: get_all_files Functionality: Retrieves a list of all files from a specified SharePoint document library. Purpose: Enables Agents to access and manage documents within SharePoint document libraries directly from ELITEA, facilitating document retrieval, reporting, or automated file processing workflows. Read document: Tool Name: read_document Functionality: Reads the content of a specific document from a specified SharePoint document library. Supports various document formats including .txt , .csv , .docx , .xlsx , and .pptx . Purpose: Allows Agents to extract content from SharePoint documents for analysis, information extraction, content summarization, or to provide document content to users within ELITEA conversations, enabling AI-powered document processing and information retrieval. Read list: Tool Name: read_list Functionality: Reads items from a specified SharePoint list. Returns list items with their fields and values in JSON format. Purpose: Enables Agents to access and process data stored in SharePoint lists, allowing for data extraction, reporting, list item analysis, or integration of SharePoint list data into ELITEA workflows, facilitating data-driven automation and insights from SharePoint lists.","title":"Tool Overview: SharePoint Toolkit Functionalities"},{"location":"how-tos/agents-toolkits/sharepoint_toolkit/#instructions-and-prompts-for-using-the-sharepoint-toolkit","text":"To effectively utilize the SharePoint toolkit within your ELITEA Agents, you need to provide clear instructions within the Agent's \"Instructions\" field, telling the Agent how and when to use these tools. General Instruction Structure: When instructing your Agent to use a SharePoint tool, you will typically follow this pattern: Use the \"[tool_name]\" tool to [describe the action you want to perform] in SharePoint. Provide the following parameters: - Parameter 1: <value or description of value> - Parameter 2: <value or description of value> - ... Example Agent Instructions for SharePoint Toolkit Tools: Agent Instructions for Getting All Files from a Document Library: Use the \"get_all_files\" tool to retrieve a list of all files from a SharePoint document library. Provide the following parameters: - SharePoint Site URL: \"your-sharepoint-site-url\" - Library Name: \"Marketing Documents\" Agent Instructions for Reading a Document: Use the \"read_document\" tool to read the content of a specific document from SharePoint. Provide the following parameters: - SharePoint Site URL: \"your-sharepoint-site-url\" - Library Name: \"Financial Reports\" - File Name: \"Q3 Financial Report.xlsx\" Agent Instructions for Reading a SharePoint List: Use the \"read_list\" tool to read items from a SharePoint list. Provide the following parameters: - SharePoint Site URL: \"your-sharepoint-site-url\" - List Name: \"Project Tasks\" Important Considerations for Agent Instructions: Tool Name Accuracy: Ensure you use the correct Tool Name (e.g., \"get_all_files\" , \"read_document\" , \"read_list\" ) as listed in the \"Tool Overview\" section. Typos or incorrect tool names will prevent the Agent from using the toolkit correctly. Parameter Clarity: Clearly specify the parameters required for each tool and provide instructions on where the Agent should obtain the values for these parameters (e.g., from user input, from previous steps in the workflow, or hardcoded values). Context and Examples: Provide sufficient context and examples within your Agent's \"Instructions\" to guide the LLM in understanding when and how to use the SharePoint toolkit tools effectively within your desired workflow. SharePoint Element Names: Ensure that you use the correct SharePoint Site URL, Library Name, File Name, and List Name in your Agent instructions. These names are case-sensitive and must exactly match the names in your SharePoint site.","title":"Instructions and Prompts for Using the SharePoint Toolkit"},{"location":"how-tos/agents-toolkits/sharepoint_toolkit/#best-practices-and-use-cases-for-sharepoint-integration","text":"","title":"Best Practices and Use Cases for SharePoint Integration"},{"location":"how-tos/agents-toolkits/sharepoint_toolkit/#best-practices-for-efficient-integration","text":"Test Integration Regularly: After setting up the SharePoint toolkit and incorporating it into your Agents, thoroughly test the integration to ensure it is functioning as expected. Test each tool you intend to use to verify connectivity, authentication, and correct execution of SharePoint actions. Monitor Agent Performance: After deploying Agents with SharePoint integration, monitor their performance regularly. Track metrics like task completion success rate, execution time, and error rates to identify any potential issues or areas for optimization in your Agent's instructions or toolkit configurations. Follow Security Best Practices: Use App Registration and Client Secrets: Always use Azure AD App Registrations and Client Secrets for secure authentication instead of user credentials. Grant Least Privilege: Grant only the minimum necessary scopes/permissions to the App Registration to limit potential security risks. Securely Store Credentials: Utilize ELITEA's Secrets Management feature to securely store and manage your SharePoint Client IDs and Client Secrets instead of hardcoding them directly in Agent configurations. Provide Clear Instructions and Prompts: Craft clear and unambiguous instructions within your ELITEA Agents to guide them in using the SharePoint toolkit effectively. Use the prompt examples provided in this guide as a starting point and adapt them to your specific use cases. Start with Simple Use Cases: Begin by implementing SharePoint integration for simpler automation tasks, such as retrieving document lists or reading document content, and gradually progress to more complex workflows as you gain experience and confidence with the toolkit.","title":"Best Practices for Efficient Integration"},{"location":"how-tos/agents-toolkits/sharepoint_toolkit/#use-cases","text":"The SharePoint toolkit unlocks numerous automation possibilities for document management, collaboration, and information retrieval workflows within ELITEA. Here are some compelling use cases, demonstrating how each tool can be applied, formatted to match the Bitbucket and GitHub guide style: Automated Document Library File Listing and Reporting: Scenario: Project managers need regular reports on the project documentation stored in SharePoint, including summaries of document types and sizes within specific libraries. Tools Used: get_all_files Example Instruction: \"Use the 'get_all_files' tool to retrieve a list of all files from the 'Project Documentation' library in SharePoint. Generate a summary report showing the count of each document type (e.g., .docx, .pdf, .xlsx) and the total size of documents in the library. Send the report to the project manager weekly.\" Benefit: Provides project managers with automated, regular visibility into project documentation stored in SharePoint, improving document management oversight, enabling proactive monitoring of document storage, and facilitating better resource planning. AI-Powered Document Content Extraction and Summarization: Scenario: Stakeholders need a quick summary of key information from lengthy project proposals or reports stored as documents in SharePoint, such as project goals, timelines, and budget. Tools Used: read_document Example Instruction: \"Use the 'read_document' tool to read the content of the 'Project Proposal.docx' document from the 'Financial Reports' library in SharePoint. Extract key information related to project goals, timelines, and budget. Summarize this information into a concise report for stakeholders.\" Benefit: Enables AI-powered document analysis and information extraction from SharePoint documents, providing valuable insights and summaries directly within ELITEA workflows. Improves efficiency by automating information extraction, speeds up decision-making, and enhances stakeholder communication with readily available document summaries. Automated Project Task Progress Reporting from SharePoint Lists: Scenario: Project teams require regular progress reports on project tasks managed within SharePoint lists for team meetings and status updates. Tools Used: read_list Example Instruction: \"Use the 'read_list' tool to retrieve items from the 'Project Tasks' list in SharePoint. Analyze the 'Status', 'Due Date', and 'Assigned To' fields for each task. Generate a project task progress report summarizing tasks by status, highlighting overdue tasks, and listing tasks assigned to each team member. Send the report to the project team before each weekly meeting.\" Benefit: Provides automated reporting and analysis of SharePoint list data, enabling project managers and teams to track progress, identify potential bottlenecks, and improve task management directly within ELITEA. Reduces manual effort in report generation, ensures timely and accurate progress updates, and facilitates data-driven project management.","title":"Use Cases"},{"location":"how-tos/agents-toolkits/sharepoint_toolkit/#troubleshooting-and-support","text":"","title":"Troubleshooting and Support"},{"location":"how-tos/agents-toolkits/sharepoint_toolkit/#troubleshooting-common-issues","text":"Connection Errors: Problem: ELITEA Agent fails to connect to SharePoint, resulting in errors during toolkit execution. Possible Solutions: Verify SharePoint Site URL: Double-check that you have entered the correct SharePoint Site URL in the toolkit configuration, including https:// and the full site URL (e.g., https://your-tenant.sharepoint.com/sites/YourSiteName ). Check Client ID and Client Secret: Ensure that the Client ID and Client Secret you provided are correct and valid for your registered Azure AD application. Carefully re-enter or copy-paste these credentials to rule out typos. Verify App Registration Permissions: Review the API permissions configured for your registered Azure AD application. Ensure it has the necessary permissions (e.g., Sites.Read.All , Sites.ReadWrite.All ) for the SharePoint tools your Agent is trying to use. Network Connectivity: Confirm that both your ELITEA environment and your SharePoint Online instance are connected to the internet and that there are no network connectivity issues blocking the integration. Authorization Errors (Permission Denied/Unauthorized): Problem: Agent execution fails with \"Permission Denied\" or \"Unauthorized\" errors when trying to access or modify SharePoint resources. Possible Solutions: Verify App Registration Permissions: Double-check the API permissions granted to your registered Azure AD application. Ensure it has the necessary scopes for the specific SharePoint actions your Agent is trying to perform (e.g., Sites.ReadWrite.All for modifying documents). SharePoint Site Collection Permissions: Confirm that the registered Azure AD application has been granted access to the specific SharePoint site collection using the AppInv.aspx page and that the granted permissions are sufficient for the actions your Agent is trying to perform. Client ID and Client Secret Validity: Ensure that the Client ID and Client Secret you are using are still valid and have not expired or been revoked in Azure AD. Incorrect SharePoint Element Names: Problem: Agent tools fail to operate on the intended SharePoint document library or list. Possible Solutions: Double-Check Library Name: Carefully verify that you have entered the correct SharePoint Document Library Name in your Agent's instructions, ensuring it exactly matches the library name in SharePoint. Library names are case-sensitive. Verify List Name: Ensure that you are using the correct SharePoint List Name in your Agent's instructions. List names are also case-sensitive and must match the list name in SharePoint exactly. SharePoint Site URL Accuracy: Double-check that the SharePoint Site URL in the toolkit configuration is correct and points to the root site collection where your target libraries and lists are located.","title":"Troubleshooting Common Issues"},{"location":"how-tos/agents-toolkits/sharepoint_toolkit/#faqs","text":"Q: Can I use my regular SharePoint username and password for the ELITEA integration? A: No, it is strongly recommended to use Azure AD App Registration and Client Secrets instead of user credentials for secure integration. App registration provides a more secure and controlled way to grant access to external applications like ELITEA without exposing user accounts. Q: What permissions should I grant to the Azure AD App Registration for SharePoint integration? A: Grant only the minimum necessary scopes required for your ELITEA Agent's intended interactions with SharePoint. For read-only access, Sites.Read.All scope in Microsoft Graph might be sufficient. If your Agent needs to modify SharePoint content, you might need to grant Sites.ReadWrite.All in Microsoft Graph or more granular SharePoint-specific permissions via AppInv.aspx . Avoid granting \"FullControl\" or unnecessary permissions. Q: What is the correct format for the SharePoint Site URL in the toolkit configuration? A: The SharePoint Site URL should be entered in the full format, including https:// and the complete site URL (e.g., https://your-tenant.sharepoint.com/sites/YourSiteName ). Ensure there are no typos or missing parts in the URL. Q: Why is my Agent getting \"Permission Denied\" errors even though I think I have configured everything correctly? A: Double-check the following: App Registration Permissions: Verify that the API permissions granted to your Azure AD App Registration include the necessary scopes for the SharePoint tools your Agent is trying to use (e.g., Sites.ReadWrite.All for modifying documents). SharePoint Site Collection Permissions: Ensure that you have granted access to your registered App for the specific SharePoint site collection using AppInv.aspx and that the granted permissions are sufficient. Client ID and Client Secret Validity: Double-check that the Client ID and Client Secret are correct, valid, and have not expired or been revoked in Azure AD.","title":"FAQs"},{"location":"how-tos/agents-toolkits/sharepoint_toolkit/#support-and-contact-information","text":"If you encounter any issues, have questions, or require further assistance beyond what is covered in this guide regarding the SharePoint integration or ELITEA Agents in general, please do not hesitate to contact our dedicated ELITEA Support Team. We are here to help you resolve any problems quickly and efficiently and ensure you have a smooth and productive experience with ELITEA. How to Reach ELITEA Support: Email: SupportAlita@epam.com Best Practices for Effective Support Requests: To help us understand and resolve your issue as quickly as possible, please ensure you provide the following information in your support email: ELITEA Environment: Clearly specify the ELITEA environment you are using (e.g., \"Nexus,\" \"Alita Lab,\" \"EYE\"). Project Details: Indicate the Project Name and whether you are working in your Private workspace or a Team project. Detailed Issue Description: Provide a clear, concise, and detailed description of the problem you are encountering. Explain what you were trying to do, what you expected to happen, and what actually occurred. Relevant Configuration Information: To help us diagnose the issue, please include relevant configuration details, such as: Agent Instructions (Screenshot or Text): If the issue is with an Agent, provide a screenshot or copy the text of your Agent's \"Instructions\" field. Toolkit Configurations (Screenshots): If the issue involves the SharePoint toolkit or other toolkits, include screenshots of the toolkit configuration settings within your Agent. Error Messages (Full Error Text): If you are encountering an error message, please provide the complete error text . In the Chat window, expand the error details and copy the full error message. This detailed error information is crucial for diagnosis. Your Query/Prompt (Exact Text): If the issue is related to Agent execution, provide the exact query or prompt you used to trigger the issue. Before Contacting Support: We encourage you to first explore the resources available within this guide and the broader ELITEA documentation. You may find answers to common questions or solutions to known issues in the documentation.","title":"Support and Contact Information"},{"location":"how-tos/agents-toolkits/sharepoint_toolkit/#useful-links","text":"To further enhance your understanding and skills in integrating SharePoint with ELITEA, here are some helpful resources: Microsoft SharePoint Website : Access the main Microsoft SharePoint website for product information and documentation. Azure Portal : Access the Azure portal to manage your Azure AD App Registrations and configure API permissions. ELITEA Secrets Management : Learn how to securely store your SharePoint Client ID and Client Secret using ELITEA's Secrets management feature for enhanced security. ELITEA Agents Configuration : Find out more about creating and configuring Agents in ELITEA, where you integrate the SharePoint toolkit to automate your workflows. ELITEA Support Email : Contact the ELITEA support team for direct assistance with SharePoint integration or any other questions and issues you may encounter.","title":"Useful Links"},{"location":"how-tos/agents-toolkits/sql_toolkit/","text":"ELITEA Toolkit Guide: SQL Integration Introduction Purpose of this Guide This guide is your definitive resource for integrating and utilizing the SQL toolkit within ELITEA. It provides a step-by-step walkthrough, from understanding SQL database prerequisites to configuring the toolkit in ELITEA and effectively using it within your Agents. By following this guide, you will unlock the power of automated data interaction, streamlined database workflows, and enhanced data-driven decision making, all directly within the ELITEA platform. This integration empowers you to leverage AI-driven automation to optimize your workflows that rely on structured data stored in SQL databases, using the combined strengths of ELITEA and SQL. Brief Overview of SQL SQL (Structured Query Language) is the standard language for interacting with relational database management systems (RDBMS). It's designed for managing and manipulating structured data held in databases. SQL provides a powerful and efficient way to: Query Data: Retrieve specific information from databases based on defined criteria. SQL queries allow you to filter, sort, and join data from multiple tables to get the exact insights you need. Manipulate Data: Insert, update, and delete data within databases. SQL enables you to modify database content to keep it accurate and up-to-date. Define Data Structures: Create, modify, and delete database objects like tables, views, and indexes. SQL allows you to structure your data effectively for optimal storage and retrieval. Control Data Access: Manage user permissions and access rights to ensure data security and integrity. SQL provides mechanisms to control who can access and modify specific parts of the database. Integrating SQL with ELITEA brings these robust data management capabilities directly into your AI-powered workflows. Your ELITEA Agents can then interact with your SQL databases to automate data-related tasks, enhance data processing, and improve data accessibility through intelligent automation. SQL Database Prerequisites and Configuration Preconditions Before integrating your SQL database with ELITEA, ensure the following prerequisites are met: Running SQL Database Instance: You need an operational SQL database instance. This could be MySQL, PostgreSQL, SQL Server, or another supported SQL database. The database server must be running and accessible. Database Access Credentials: You must have valid credentials (username and password) that ELITEA can use to connect to your database. Database Server Accessibility: ELITEA needs to be able to communicate with your SQL server. Consider the following network accessibility requirements: Public Accessibility (for externally hosted ELITEA): If your ELITEA instance is hosted externally (e.g., in the cloud) and your SQL server is on a private network, your SQL server must be accessible from the public internet or through a secure tunnel (like a VPN) that ELITEA can connect to. For locally hosted SQL servers, assigning a Public IP address might be necessary. Security Note: Exposing your database directly to the public internet is generally discouraged for security reasons. Consider using secure methods like VPNs or allowing access only from specific IP ranges. Same Network Environment (for internally hosted ELITEA): If you are hosting ELITEA within the same network environment as your SQL server (e.g., behind a corporate firewall), ensure that there are no firewall rules blocking communication between the ELITEA instance and the SQL server on the designated port (e.g., 3306 for MySQL, 5432 for PostgreSQL). Database Connection This section describes how to connect to your database server using a database client application. Launch Your Database Client: Open either pgAdmin (for PostgreSQL), MySQL Workbench (for MySQL), or DBeaver (which supports multiple database types). Initiate a New Connection: pgAdmin: Expand \"Servers\" in the object browser, right-click, and select \"Create\" -> \"Server\". A server creation dialog will appear. MySQL Workbench: Navigate to \"Database\" -> \"Manage Connections\" -> \"New\". This opens the connection management window. DBeaver: Go to \"Database\" -> \"New Database Connection\". A wizard for selecting the database type will appear. Configure the Connection Settings: Carefully enter the following information. Host/Server Address: dbserver.company.com (This may also be an IP address like 192.168.1.100 if you know the server's IP.) This is the network address where your database server is located. Port: The port number your database server is listening on. Use the correct port for your database type: PostgreSQL: 5432 MySQL: 3306 SQL Server: 1433 Database Name: test_db (The specific database you want to access.) Username: test_user (The username you've been assigned to access the database.) Password: Test@123 (The password associated with the username.) Test the Connection: Click the \"Test Connection\" button (or its equivalent) within the connection configuration window. Successful Test: You should receive a confirmation message. Proceed to step 5. Unsuccessful Test: If the test fails, carefully review the following: Typographical Errors: Double-check the host address, port, username, and password for any typos. Server Availability: Ensure the database server is running and accessible from your network. (You may need to contact your system administrator.) Firewall Rules: Confirm that your firewall is not blocking connections to the database server on the specified port. Establish the Connection: If the connection test was successful, click \"OK\" (or \"Save\") and then \"Connect\" to establish the connection to the database. You should now be able to browse the database schema and execute queries. SQL Integration with ELITEA Overview of SQL Toolkit The SQL integration within the ELITEA platform enhances data management by enabling seamless access to structured database information. This integration allows users to query, retrieve, and analyze SQL databases directly from ELITEA, ensuring that critical business data remains synchronized and readily available. By eliminating the need to switch between database management tools, teams can improve efficiency and maintain a single source of truth for key operational and analytical data. With this integration, users can pull real-time structured data from SQL databases into ELITEA, enhancing workflows with up-to-date records, analytical insights, and system-generated reports. The integration supports automated query execution, data visualization, ensuring that the latest database information is always accessible within the ELITEA environment. Agent Creation/Configuration To integrate SQL, you'll need to configure it within an ELITEA Agent. You can either create a new Agent or modify an existing one. Creating a New Agent To create a new agent within the system: Click the \"+ Agent\" Button: Locate and click the + Agent button, typically found in the top right corner of the application. This will initiate the agent creation process. Fill Out Basic Information (Name and Description): Name: Enter a descriptive and easily identifiable name for the agent in the \"Name\" field. Description: Provide a brief description of the agent's purpose and functionality in the \"Description\" field. This helps other users understand the agent's intended use. Add Tags (Optional): The \"Tags\" input box allows you to categorize and organize agents. Add a New Tag: Type the desired tag name in the \"Tags\" input box. Select from Existing Tags: If there are pre-existing tags, you can select them from a dropdown or list of available tags presented in the \"Tags\" input box. Using consistent tagging helps with searching and filtering agents. Select the Agent Type: Choose the appropriate agent type from the available options (e.g., OpenAI, ReAct, Pipeline). Instructions: Provide Instructions for selected Agent Type in the Instarction field. Configure Conversation Starters and Welcome Message (Optional): Conversation Starter: Define phrases or questions that users can click on to initiate a conversation with the agent. This provides users with guidance and examples of how to interact with the agent. Welcome Message: Create a welcome message that the agent displays when a user first interacts with it. This provides context and sets expectations for the interaction. A good welcome message might introduce the agent's purpose and capabilities. Modifying an Existing Agent To modify an existing agent within the system: Locate the Agent: Find the agent you want to modify in the agent list or using search. Open for Editing: Click the agent's name to open its configuration page. Modify Settings: Change the Name, Description, Tags, Agent Type, Instructions, Conversation Starters, or Welcome Message as needed. Save Changes: Click the \"Save\" button. Toolkit Configuration This section details how to configure the SQL toolkit within your ELITEA Agent. Add Toolkit: In the \"Tools\" section, click the \"+\" icon . Select SQL: Choose \"SQL\" from the dropdown list of available toolkits. This opens the \"New SQL tool\" configuration panel. Configure Toolkit Details: Fill in the following fields: Name: Enter a Name for this SQL toolkit instance. Choose a descriptive name that helps you identify its purpose within your Agent's instructions (e.g., \"DataQueryTool\", \"CustomerDatabase\"). Description: Provide a Description for the toolkit, clarifying its purpose or the specific database it connects to (e.g., \"Toolkit to query the main customer database\"). Dialect: Select the SQL Dialect of your database from the dropdown menu. Choose either \"MySQL\" or \"PostgreSQL\" based on your database type. Host: Enter the Hostname or IP Address of your SQL server. For example: dbserver.example.com or 192.168.1.100 . Port: Specify the Port Number used to connect to your SQL server. The default ports are: PostgreSQL: 5432 MySQL: 3306 If your database uses a non-default port, enter that port number here. Database name: Enter the Name of the Database you want to connect to. For example: mydatabase . Username: Provide the Username for database authentication. This should be the username of the dedicated database user you configured for ELITEA. Password: Choose the authentication method for the password: Secret (Recommended): Select \"Secret\" and choose a pre-configured secret from the dropdown list. You must first create and securely store your database password as a Secret in ELITEA's Secret section. Using Secrets is highly recommended for enhanced security. Password: Select \"Password\" and directly enter the Password associated with the provided username in the \"Password\" field. Caution: While convenient, directly entering the password is less secure than using Secrets. Enable Tools: In the \"Tools\" section of the SQL toolkit configuration, select the checkboxes next to the SQL tools you want to enable for your Agent. Enable only the tools your Agent will actually use to adhere to the principle of least privilege and enhance security. Complete Configuration: Click the arrow icon (at the top right of the toolkit configuration) to save the SQL toolkit setup and return to the main Agent configuration. Click Save to apply configuration and changes to the Agent. NOTE: Database Server Accessibility: Elitea must be able to communicate with your SQL server. Please ensure the following requirements are met: Public Accessibility: If your SQL server is hosted locally, it must be assigned a Public IP address. This allows Elitea to access the database from outside your local network. Environment Configuration: If your SQL server is in a closed environment (e.g., behind corporate firewalls or exclusively accessible via VPN), you must deploy the Elitea instance within the same environment. This ensures direct access to the database. Tool Overview The SQL toolkit provides the following tools for ELITEA SQL Agents: list_tables_and_columns - Retrieves a list of tables and their columns from the connected database. This is useful for understanding the database schema and available data. execute_sql - Executes a custom SQL query against the connected database. This tool allows for flexible data retrieval and manipulation based on your specific needs. Instructions and Prompts for Using the Toolkit To instruct your ELITEA Agent to use the SQL toolkit, you need to provide clear instructions within the Agent's \"Instructions\" field. These instructions guide the Agent on when and how to use the available tools. Instruction Creation for OpenAI Agents When creating instructions for the SQL toolkit for OpenAI-based Agents, focus on clear, action-oriented language. Break down tasks into simple steps and explicitly state the parameters required for each tool. OpenAI Agents respond best to instructions that are: Direct and Imperative: Use action verbs and clear commands (e.g., \"Use the 'list_tables_and_columns' tool...\", \"Execute the following SQL query...\"). Parameter-Focused: Clearly list each parameter and how the Agent should determine its value. Context-Aware: Provide enough context so the Agent understands the overall goal and when to use specific tools within a workflow. When instructing your Agent to use a SQL toolkit, use this pattern: 1. Identify the goal: [State the objective, e.g., \"To list all tables in the database\"]. 2. Tool Selection: Use the \"[tool_name]\" tool. 3. Parameter Specification: Provide the following parameters: - Parameter Name 1: <value or description of value> - Parameter Name 2: <value or description of value> - ... 4. Expected Outcome: [Optionally, describe what should happen after the tool is used]. Example Agent Instructions for SQL Toolkit Tools (OpenAI Agent Friendly): Agent Instructions for Listing Tables and Columns: 1. Goal: To get a list of all tables and their columns in the database. 2. Tool: Use the \"list_tables_and_columns\" tool. 3. Parameters: - Include Data Types: \"true\" (to include data types in the output) - Output Format: \"table\" (to display output in tabular format) 4. Outcome: The Agent will list all tables and their columns, including data types, in a table format. Agent Instructions for Executing a SQL Query: 1. Goal: To retrieve the names and emails of all users from the 'users' table. 2. Tool: Use the \"execute_sql\" tool. 3. Parameters: - Query: \"SELECT name, email FROM users;\" - Output Format: \"JSON\" (to get output in JSON format) - Limit: \"100\" (to limit the output to the first 100 rows) 4. Outcome: The Agent will execute the SQL query and return a JSON formatted list of user names and emails, limited to 100 entries. Conversation Starters Use these conversation starters to interact with your SQL-integrated Agent. 1. For Testing and Troubleshooting Connection: These starters are designed to verify if the SQL toolkit is correctly configured and connected to your database. \"List all tables and columns.\" - This tests basic connectivity and schema retrieval. \"Show the tables in the database.\" - Another way to test table listing. 2. For General Agent Usage Scenarios: These starters demonstrate how to initiate agent execution for common SQL-related tasks. \"What are the columns in the 'customers' table?\" - Uses list_tables_and_columns to get table schema. \"Find all products with a price greater than $50 and list their names and prices.\" - Uses execute_sql with filtering. \"Retrieve the structure of the users table, including column names and data types.\" - Uses list_tables_and_columns for a specific table. These conversation starters provide a starting point for interacting with your SQL-integrated ELITEA Agent and can be customized further based on your specific use cases and workflows. Use Cases The SQL toolkit unlocks numerous automation possibilities for data-driven workflows within ELITEA. Here are some key use cases, demonstrating how each tool can be applied: Database Schema Exploration: Scenario: Quickly understand the structure of a database, especially when working with unfamiliar databases. Tools Used: list_tables_and_columns Example Instruction: \"Use the 'list_tables_and_columns' tool to show me all tables and their columns in the 'sales_db' database.\" Benefit: Reduces the time spent manually exploring database schemas using database clients. Agents can quickly provide schema information, enabling faster query construction and data analysis. Data Retrieval for Reporting and Analysis: Scenario: Generate reports or perform data analysis by retrieving specific data sets from the database. Tools Used: execute_sql Example Instruction: \"Use the 'execute_sql' tool to execute the query: 'SELECT category, AVG(price) FROM products GROUP BY category;' and show the results in a table.\" Benefit: Automates data extraction for reporting and analysis. Agents can fetch real-time data based on complex queries, eliminating manual data export and manipulation. Data Validation and Monitoring: Scenario: Regularly check data integrity or monitor specific data conditions within the database. Tools Used: execute_sql Example Instruction: \"Use the 'execute_sql' tool to run the query: 'SELECT COUNT(*) FROM orders WHERE order_date < DATE_SUB(CURDATE(), INTERVAL 7 DAY) AND status = 'pending';' and tell me the count of pending orders older than 7 days.\" Benefit: Enables proactive data monitoring and validation. Agents can automatically execute checks and alert users to anomalies or data quality issues. Troubleshooting and Support Troubleshooting Connection Issues: Problem: Agent fails to connect to the SQL database, resulting in errors during toolkit execution. Troubleshooting Steps: Verify Connection Details: Double-check the Host, Port, Database name, Username, and Password in the toolkit configuration. Ensure they are accurate and match your database credentials. Database Server Status: Confirm that your SQL server is running and accessible. Try connecting to the database using a database client (like MySQL Workbench, pgAdmin, DBeaver) from the same network where ELITEA is running to isolate network issues. Network Connectivity: Verify network connectivity between ELITEA and your SQL server. Check firewall rules, network configurations, and ensure that the SQL server port is open for incoming connections from ELITEA's IP address (if applicable). Database Dialect: Ensure you have selected the correct SQL Dialect (\"MySQL\" or \"PostgreSQL\") in the toolkit configuration that matches your database type. Authorization Errors (Access Denied): Problem: Agent receives \"Access Denied\" or \"Unauthorized\" errors when trying to access the database or execute queries. Troubleshooting Steps: Verify Database User Permissions: Re-examine the permissions granted to the database user you are using for ELITEA integration. Ensure the user has sufficient privileges (e.g., SELECT , EXECUTE ) for the database and tables you are trying to access. Incorrect Credentials: Double-check the Username and Password in the toolkit configuration for typos or errors. If using Secrets, ensure the Secret is correctly configured and contains the right password. FAQ Q: Can I use this toolkit with other SQL databases besides MySQL and PostgreSQL? A: Currently, the ELITEA SQL toolkit officially supports MySQL and PostgreSQL dialects. Support for other SQL databases might be added in future updates. If you require integration with a different SQL database, please contact ELITEA support to discuss your needs. Q: Why can't Elitea connect to my SQL server? A: Elitea requires direct access to your SQL server. If you're experiencing connectivity issues, check the following: Public IP: Ensure that your local-hosted SQL server has a Public IP address if it needs to be accessed from outside your local network. Without this, ELITEA cannot initiate a connection to your database. Network Environment: If your SQL server operates within a closed network or a VPN-restricted environment, deploy ELITEA within the same network. This ensures that ELITEA can reach the SQL server without external network barriers. Support Contact For any issues, questions, or further assistance with the SQL integration or ELITEA Agents, please reach out to our dedicated ELITEA Support Team. We are committed to providing prompt and effective support to ensure your success with ELITEA. Contact ELITEA Support: Email: SupportAlita@epam.com Best Practices for Effective Support Requests: To help us understand and resolve your issue as quickly as possible, please ensure you provide the following information in your support email: ELITEA Environment: Clearly specify the ELITEA environment you are using (e.g., \"Nexus,\" \"Alita Lab,\" \"EYE\"). Project Details: Indicate the Project Name and whether you are working in your Private workspace or a Team project. Detailed Issue Description: Provide a clear, concise, and detailed description of the problem you are encountering. Explain what you were trying to do, what you expected to happen, and what actually occurred. Relevant Configuration Information: To help us diagnose the issue, please include relevant configuration details, such as: Agent Instructions (Screenshot or Text): If the issue is with an Agent, provide a screenshot or copy the text of your Agent's \"Instructions\" field. Toolkit Configurations (Screenshots): If the issue involves the SQL toolkit or other toolkits, include screenshots of the toolkit configuration settings within your Agent. Error Messages (Full Error Text): If you are encountering an error message, please provide the complete error text . In the Chat window, expand the error details and copy the full error message. This detailed error information is crucial for diagnosis. Your Query/Prompt (Exact Text): If the issue is related to Agent execution, provide the exact query or prompt you used to trigger the issue. Before Contacting Support: We encourage you to first explore the resources available within this guide and the broader ELITEA documentation. You may find answers to common questions or solutions to known issues in the documentation. Useful Links To further enhance your understanding and skills in integrating SQL with ELITEA, here are some helpful resources: MySQL Official Website : Access the official website for MySQL documentation, downloads, and community resources. PostgreSQL Official Website : Access the official website for PostgreSQL documentation, downloads, and community resources. SQL Tutorial (W3Schools) : A comprehensive SQL tutorial for learning SQL syntax and concepts. ELITEA Secrets : Learn how to securely store your database credentials using ELITEA's Secrets management feature for enhanced security. ELITEA Agents Configuration : Find out more about creating and configuring Agents in ELITEA, where you integrate the SQL toolkit to automate your workflows. ELITEA Support Email : Contact the ELITEA support team for direct assistance with SQL integration or any other questions and issues you may encounter.","title":"SQL Integration"},{"location":"how-tos/agents-toolkits/sql_toolkit/#elitea-toolkit-guide-sql-integration","text":"","title":"ELITEA Toolkit Guide: SQL Integration"},{"location":"how-tos/agents-toolkits/sql_toolkit/#introduction","text":"","title":"Introduction"},{"location":"how-tos/agents-toolkits/sql_toolkit/#purpose-of-this-guide","text":"This guide is your definitive resource for integrating and utilizing the SQL toolkit within ELITEA. It provides a step-by-step walkthrough, from understanding SQL database prerequisites to configuring the toolkit in ELITEA and effectively using it within your Agents. By following this guide, you will unlock the power of automated data interaction, streamlined database workflows, and enhanced data-driven decision making, all directly within the ELITEA platform. This integration empowers you to leverage AI-driven automation to optimize your workflows that rely on structured data stored in SQL databases, using the combined strengths of ELITEA and SQL.","title":"Purpose of this Guide"},{"location":"how-tos/agents-toolkits/sql_toolkit/#brief-overview-of-sql","text":"SQL (Structured Query Language) is the standard language for interacting with relational database management systems (RDBMS). It's designed for managing and manipulating structured data held in databases. SQL provides a powerful and efficient way to: Query Data: Retrieve specific information from databases based on defined criteria. SQL queries allow you to filter, sort, and join data from multiple tables to get the exact insights you need. Manipulate Data: Insert, update, and delete data within databases. SQL enables you to modify database content to keep it accurate and up-to-date. Define Data Structures: Create, modify, and delete database objects like tables, views, and indexes. SQL allows you to structure your data effectively for optimal storage and retrieval. Control Data Access: Manage user permissions and access rights to ensure data security and integrity. SQL provides mechanisms to control who can access and modify specific parts of the database. Integrating SQL with ELITEA brings these robust data management capabilities directly into your AI-powered workflows. Your ELITEA Agents can then interact with your SQL databases to automate data-related tasks, enhance data processing, and improve data accessibility through intelligent automation.","title":"Brief Overview of SQL"},{"location":"how-tos/agents-toolkits/sql_toolkit/#sql-database-prerequisites-and-configuration","text":"","title":"SQL Database Prerequisites and Configuration"},{"location":"how-tos/agents-toolkits/sql_toolkit/#preconditions","text":"Before integrating your SQL database with ELITEA, ensure the following prerequisites are met: Running SQL Database Instance: You need an operational SQL database instance. This could be MySQL, PostgreSQL, SQL Server, or another supported SQL database. The database server must be running and accessible. Database Access Credentials: You must have valid credentials (username and password) that ELITEA can use to connect to your database. Database Server Accessibility: ELITEA needs to be able to communicate with your SQL server. Consider the following network accessibility requirements: Public Accessibility (for externally hosted ELITEA): If your ELITEA instance is hosted externally (e.g., in the cloud) and your SQL server is on a private network, your SQL server must be accessible from the public internet or through a secure tunnel (like a VPN) that ELITEA can connect to. For locally hosted SQL servers, assigning a Public IP address might be necessary. Security Note: Exposing your database directly to the public internet is generally discouraged for security reasons. Consider using secure methods like VPNs or allowing access only from specific IP ranges. Same Network Environment (for internally hosted ELITEA): If you are hosting ELITEA within the same network environment as your SQL server (e.g., behind a corporate firewall), ensure that there are no firewall rules blocking communication between the ELITEA instance and the SQL server on the designated port (e.g., 3306 for MySQL, 5432 for PostgreSQL).","title":"Preconditions"},{"location":"how-tos/agents-toolkits/sql_toolkit/#database-connection","text":"This section describes how to connect to your database server using a database client application. Launch Your Database Client: Open either pgAdmin (for PostgreSQL), MySQL Workbench (for MySQL), or DBeaver (which supports multiple database types). Initiate a New Connection: pgAdmin: Expand \"Servers\" in the object browser, right-click, and select \"Create\" -> \"Server\". A server creation dialog will appear. MySQL Workbench: Navigate to \"Database\" -> \"Manage Connections\" -> \"New\". This opens the connection management window. DBeaver: Go to \"Database\" -> \"New Database Connection\". A wizard for selecting the database type will appear. Configure the Connection Settings: Carefully enter the following information. Host/Server Address: dbserver.company.com (This may also be an IP address like 192.168.1.100 if you know the server's IP.) This is the network address where your database server is located. Port: The port number your database server is listening on. Use the correct port for your database type: PostgreSQL: 5432 MySQL: 3306 SQL Server: 1433 Database Name: test_db (The specific database you want to access.) Username: test_user (The username you've been assigned to access the database.) Password: Test@123 (The password associated with the username.) Test the Connection: Click the \"Test Connection\" button (or its equivalent) within the connection configuration window. Successful Test: You should receive a confirmation message. Proceed to step 5. Unsuccessful Test: If the test fails, carefully review the following: Typographical Errors: Double-check the host address, port, username, and password for any typos. Server Availability: Ensure the database server is running and accessible from your network. (You may need to contact your system administrator.) Firewall Rules: Confirm that your firewall is not blocking connections to the database server on the specified port. Establish the Connection: If the connection test was successful, click \"OK\" (or \"Save\") and then \"Connect\" to establish the connection to the database. You should now be able to browse the database schema and execute queries.","title":"Database Connection"},{"location":"how-tos/agents-toolkits/sql_toolkit/#sql-integration-with-elitea","text":"","title":"SQL Integration with ELITEA"},{"location":"how-tos/agents-toolkits/sql_toolkit/#overview-of-sql-toolkit","text":"The SQL integration within the ELITEA platform enhances data management by enabling seamless access to structured database information. This integration allows users to query, retrieve, and analyze SQL databases directly from ELITEA, ensuring that critical business data remains synchronized and readily available. By eliminating the need to switch between database management tools, teams can improve efficiency and maintain a single source of truth for key operational and analytical data. With this integration, users can pull real-time structured data from SQL databases into ELITEA, enhancing workflows with up-to-date records, analytical insights, and system-generated reports. The integration supports automated query execution, data visualization, ensuring that the latest database information is always accessible within the ELITEA environment.","title":"Overview of SQL Toolkit"},{"location":"how-tos/agents-toolkits/sql_toolkit/#agent-creationconfiguration","text":"To integrate SQL, you'll need to configure it within an ELITEA Agent. You can either create a new Agent or modify an existing one. Creating a New Agent To create a new agent within the system: Click the \"+ Agent\" Button: Locate and click the + Agent button, typically found in the top right corner of the application. This will initiate the agent creation process. Fill Out Basic Information (Name and Description): Name: Enter a descriptive and easily identifiable name for the agent in the \"Name\" field. Description: Provide a brief description of the agent's purpose and functionality in the \"Description\" field. This helps other users understand the agent's intended use. Add Tags (Optional): The \"Tags\" input box allows you to categorize and organize agents. Add a New Tag: Type the desired tag name in the \"Tags\" input box. Select from Existing Tags: If there are pre-existing tags, you can select them from a dropdown or list of available tags presented in the \"Tags\" input box. Using consistent tagging helps with searching and filtering agents. Select the Agent Type: Choose the appropriate agent type from the available options (e.g., OpenAI, ReAct, Pipeline). Instructions: Provide Instructions for selected Agent Type in the Instarction field. Configure Conversation Starters and Welcome Message (Optional): Conversation Starter: Define phrases or questions that users can click on to initiate a conversation with the agent. This provides users with guidance and examples of how to interact with the agent. Welcome Message: Create a welcome message that the agent displays when a user first interacts with it. This provides context and sets expectations for the interaction. A good welcome message might introduce the agent's purpose and capabilities. Modifying an Existing Agent To modify an existing agent within the system: Locate the Agent: Find the agent you want to modify in the agent list or using search. Open for Editing: Click the agent's name to open its configuration page. Modify Settings: Change the Name, Description, Tags, Agent Type, Instructions, Conversation Starters, or Welcome Message as needed. Save Changes: Click the \"Save\" button.","title":"Agent Creation/Configuration"},{"location":"how-tos/agents-toolkits/sql_toolkit/#toolkit-configuration","text":"This section details how to configure the SQL toolkit within your ELITEA Agent. Add Toolkit: In the \"Tools\" section, click the \"+\" icon . Select SQL: Choose \"SQL\" from the dropdown list of available toolkits. This opens the \"New SQL tool\" configuration panel. Configure Toolkit Details: Fill in the following fields: Name: Enter a Name for this SQL toolkit instance. Choose a descriptive name that helps you identify its purpose within your Agent's instructions (e.g., \"DataQueryTool\", \"CustomerDatabase\"). Description: Provide a Description for the toolkit, clarifying its purpose or the specific database it connects to (e.g., \"Toolkit to query the main customer database\"). Dialect: Select the SQL Dialect of your database from the dropdown menu. Choose either \"MySQL\" or \"PostgreSQL\" based on your database type. Host: Enter the Hostname or IP Address of your SQL server. For example: dbserver.example.com or 192.168.1.100 . Port: Specify the Port Number used to connect to your SQL server. The default ports are: PostgreSQL: 5432 MySQL: 3306 If your database uses a non-default port, enter that port number here. Database name: Enter the Name of the Database you want to connect to. For example: mydatabase . Username: Provide the Username for database authentication. This should be the username of the dedicated database user you configured for ELITEA. Password: Choose the authentication method for the password: Secret (Recommended): Select \"Secret\" and choose a pre-configured secret from the dropdown list. You must first create and securely store your database password as a Secret in ELITEA's Secret section. Using Secrets is highly recommended for enhanced security. Password: Select \"Password\" and directly enter the Password associated with the provided username in the \"Password\" field. Caution: While convenient, directly entering the password is less secure than using Secrets. Enable Tools: In the \"Tools\" section of the SQL toolkit configuration, select the checkboxes next to the SQL tools you want to enable for your Agent. Enable only the tools your Agent will actually use to adhere to the principle of least privilege and enhance security. Complete Configuration: Click the arrow icon (at the top right of the toolkit configuration) to save the SQL toolkit setup and return to the main Agent configuration. Click Save to apply configuration and changes to the Agent. NOTE: Database Server Accessibility: Elitea must be able to communicate with your SQL server. Please ensure the following requirements are met: Public Accessibility: If your SQL server is hosted locally, it must be assigned a Public IP address. This allows Elitea to access the database from outside your local network. Environment Configuration: If your SQL server is in a closed environment (e.g., behind corporate firewalls or exclusively accessible via VPN), you must deploy the Elitea instance within the same environment. This ensures direct access to the database.","title":"Toolkit Configuration"},{"location":"how-tos/agents-toolkits/sql_toolkit/#tool-overview","text":"The SQL toolkit provides the following tools for ELITEA SQL Agents: list_tables_and_columns - Retrieves a list of tables and their columns from the connected database. This is useful for understanding the database schema and available data. execute_sql - Executes a custom SQL query against the connected database. This tool allows for flexible data retrieval and manipulation based on your specific needs.","title":"Tool Overview"},{"location":"how-tos/agents-toolkits/sql_toolkit/#instructions-and-prompts-for-using-the-toolkit","text":"To instruct your ELITEA Agent to use the SQL toolkit, you need to provide clear instructions within the Agent's \"Instructions\" field. These instructions guide the Agent on when and how to use the available tools.","title":"Instructions and Prompts for Using the Toolkit"},{"location":"how-tos/agents-toolkits/sql_toolkit/#instruction-creation-for-openai-agents","text":"When creating instructions for the SQL toolkit for OpenAI-based Agents, focus on clear, action-oriented language. Break down tasks into simple steps and explicitly state the parameters required for each tool. OpenAI Agents respond best to instructions that are: Direct and Imperative: Use action verbs and clear commands (e.g., \"Use the 'list_tables_and_columns' tool...\", \"Execute the following SQL query...\"). Parameter-Focused: Clearly list each parameter and how the Agent should determine its value. Context-Aware: Provide enough context so the Agent understands the overall goal and when to use specific tools within a workflow. When instructing your Agent to use a SQL toolkit, use this pattern: 1. Identify the goal: [State the objective, e.g., \"To list all tables in the database\"]. 2. Tool Selection: Use the \"[tool_name]\" tool. 3. Parameter Specification: Provide the following parameters: - Parameter Name 1: <value or description of value> - Parameter Name 2: <value or description of value> - ... 4. Expected Outcome: [Optionally, describe what should happen after the tool is used]. Example Agent Instructions for SQL Toolkit Tools (OpenAI Agent Friendly): Agent Instructions for Listing Tables and Columns: 1. Goal: To get a list of all tables and their columns in the database. 2. Tool: Use the \"list_tables_and_columns\" tool. 3. Parameters: - Include Data Types: \"true\" (to include data types in the output) - Output Format: \"table\" (to display output in tabular format) 4. Outcome: The Agent will list all tables and their columns, including data types, in a table format. Agent Instructions for Executing a SQL Query: 1. Goal: To retrieve the names and emails of all users from the 'users' table. 2. Tool: Use the \"execute_sql\" tool. 3. Parameters: - Query: \"SELECT name, email FROM users;\" - Output Format: \"JSON\" (to get output in JSON format) - Limit: \"100\" (to limit the output to the first 100 rows) 4. Outcome: The Agent will execute the SQL query and return a JSON formatted list of user names and emails, limited to 100 entries.","title":"Instruction Creation for OpenAI Agents"},{"location":"how-tos/agents-toolkits/sql_toolkit/#conversation-starters","text":"Use these conversation starters to interact with your SQL-integrated Agent. 1. For Testing and Troubleshooting Connection: These starters are designed to verify if the SQL toolkit is correctly configured and connected to your database. \"List all tables and columns.\" - This tests basic connectivity and schema retrieval. \"Show the tables in the database.\" - Another way to test table listing. 2. For General Agent Usage Scenarios: These starters demonstrate how to initiate agent execution for common SQL-related tasks. \"What are the columns in the 'customers' table?\" - Uses list_tables_and_columns to get table schema. \"Find all products with a price greater than $50 and list their names and prices.\" - Uses execute_sql with filtering. \"Retrieve the structure of the users table, including column names and data types.\" - Uses list_tables_and_columns for a specific table. These conversation starters provide a starting point for interacting with your SQL-integrated ELITEA Agent and can be customized further based on your specific use cases and workflows.","title":"Conversation Starters"},{"location":"how-tos/agents-toolkits/sql_toolkit/#use-cases","text":"The SQL toolkit unlocks numerous automation possibilities for data-driven workflows within ELITEA. Here are some key use cases, demonstrating how each tool can be applied: Database Schema Exploration: Scenario: Quickly understand the structure of a database, especially when working with unfamiliar databases. Tools Used: list_tables_and_columns Example Instruction: \"Use the 'list_tables_and_columns' tool to show me all tables and their columns in the 'sales_db' database.\" Benefit: Reduces the time spent manually exploring database schemas using database clients. Agents can quickly provide schema information, enabling faster query construction and data analysis. Data Retrieval for Reporting and Analysis: Scenario: Generate reports or perform data analysis by retrieving specific data sets from the database. Tools Used: execute_sql Example Instruction: \"Use the 'execute_sql' tool to execute the query: 'SELECT category, AVG(price) FROM products GROUP BY category;' and show the results in a table.\" Benefit: Automates data extraction for reporting and analysis. Agents can fetch real-time data based on complex queries, eliminating manual data export and manipulation. Data Validation and Monitoring: Scenario: Regularly check data integrity or monitor specific data conditions within the database. Tools Used: execute_sql Example Instruction: \"Use the 'execute_sql' tool to run the query: 'SELECT COUNT(*) FROM orders WHERE order_date < DATE_SUB(CURDATE(), INTERVAL 7 DAY) AND status = 'pending';' and tell me the count of pending orders older than 7 days.\" Benefit: Enables proactive data monitoring and validation. Agents can automatically execute checks and alert users to anomalies or data quality issues.","title":"Use Cases"},{"location":"how-tos/agents-toolkits/sql_toolkit/#troubleshooting-and-support","text":"","title":"Troubleshooting and Support"},{"location":"how-tos/agents-toolkits/sql_toolkit/#troubleshooting","text":"Connection Issues: Problem: Agent fails to connect to the SQL database, resulting in errors during toolkit execution. Troubleshooting Steps: Verify Connection Details: Double-check the Host, Port, Database name, Username, and Password in the toolkit configuration. Ensure they are accurate and match your database credentials. Database Server Status: Confirm that your SQL server is running and accessible. Try connecting to the database using a database client (like MySQL Workbench, pgAdmin, DBeaver) from the same network where ELITEA is running to isolate network issues. Network Connectivity: Verify network connectivity between ELITEA and your SQL server. Check firewall rules, network configurations, and ensure that the SQL server port is open for incoming connections from ELITEA's IP address (if applicable). Database Dialect: Ensure you have selected the correct SQL Dialect (\"MySQL\" or \"PostgreSQL\") in the toolkit configuration that matches your database type. Authorization Errors (Access Denied): Problem: Agent receives \"Access Denied\" or \"Unauthorized\" errors when trying to access the database or execute queries. Troubleshooting Steps: Verify Database User Permissions: Re-examine the permissions granted to the database user you are using for ELITEA integration. Ensure the user has sufficient privileges (e.g., SELECT , EXECUTE ) for the database and tables you are trying to access. Incorrect Credentials: Double-check the Username and Password in the toolkit configuration for typos or errors. If using Secrets, ensure the Secret is correctly configured and contains the right password.","title":"Troubleshooting"},{"location":"how-tos/agents-toolkits/sql_toolkit/#faq","text":"Q: Can I use this toolkit with other SQL databases besides MySQL and PostgreSQL? A: Currently, the ELITEA SQL toolkit officially supports MySQL and PostgreSQL dialects. Support for other SQL databases might be added in future updates. If you require integration with a different SQL database, please contact ELITEA support to discuss your needs. Q: Why can't Elitea connect to my SQL server? A: Elitea requires direct access to your SQL server. If you're experiencing connectivity issues, check the following: Public IP: Ensure that your local-hosted SQL server has a Public IP address if it needs to be accessed from outside your local network. Without this, ELITEA cannot initiate a connection to your database. Network Environment: If your SQL server operates within a closed network or a VPN-restricted environment, deploy ELITEA within the same network. This ensures that ELITEA can reach the SQL server without external network barriers.","title":"FAQ"},{"location":"how-tos/agents-toolkits/sql_toolkit/#support-contact","text":"For any issues, questions, or further assistance with the SQL integration or ELITEA Agents, please reach out to our dedicated ELITEA Support Team. We are committed to providing prompt and effective support to ensure your success with ELITEA. Contact ELITEA Support: Email: SupportAlita@epam.com Best Practices for Effective Support Requests: To help us understand and resolve your issue as quickly as possible, please ensure you provide the following information in your support email: ELITEA Environment: Clearly specify the ELITEA environment you are using (e.g., \"Nexus,\" \"Alita Lab,\" \"EYE\"). Project Details: Indicate the Project Name and whether you are working in your Private workspace or a Team project. Detailed Issue Description: Provide a clear, concise, and detailed description of the problem you are encountering. Explain what you were trying to do, what you expected to happen, and what actually occurred. Relevant Configuration Information: To help us diagnose the issue, please include relevant configuration details, such as: Agent Instructions (Screenshot or Text): If the issue is with an Agent, provide a screenshot or copy the text of your Agent's \"Instructions\" field. Toolkit Configurations (Screenshots): If the issue involves the SQL toolkit or other toolkits, include screenshots of the toolkit configuration settings within your Agent. Error Messages (Full Error Text): If you are encountering an error message, please provide the complete error text . In the Chat window, expand the error details and copy the full error message. This detailed error information is crucial for diagnosis. Your Query/Prompt (Exact Text): If the issue is related to Agent execution, provide the exact query or prompt you used to trigger the issue. Before Contacting Support: We encourage you to first explore the resources available within this guide and the broader ELITEA documentation. You may find answers to common questions or solutions to known issues in the documentation.","title":"Support Contact"},{"location":"how-tos/agents-toolkits/sql_toolkit/#useful-links","text":"To further enhance your understanding and skills in integrating SQL with ELITEA, here are some helpful resources: MySQL Official Website : Access the official website for MySQL documentation, downloads, and community resources. PostgreSQL Official Website : Access the official website for PostgreSQL documentation, downloads, and community resources. SQL Tutorial (W3Schools) : A comprehensive SQL tutorial for learning SQL syntax and concepts. ELITEA Secrets : Learn how to securely store your database credentials using ELITEA's Secrets management feature for enhanced security. ELITEA Agents Configuration : Find out more about creating and configuring Agents in ELITEA, where you integrate the SQL toolkit to automate your workflows. ELITEA Support Email : Contact the ELITEA support team for direct assistance with SQL integration or any other questions and issues you may encounter.","title":"Useful Links"},{"location":"how-tos/agents-toolkits/testIO_toolkit/","text":"ELITEA Toolkit Guide: TestIO Integration Introduction Purpose of this Guide This guide is your comprehensive resource for integrating and effectively using the TestIO toolkit within ELITEA. It provides a detailed, step-by-step walkthrough, from configuration in TestIO platform to configuring the toolkit in ELITEA and seamlessly incorporating it into your Agents. By following this guide, you will unlock the power of automated test result analysis, streamlined QA workflows, and enhanced insights into your testing process, all directly within the ELITEA platform. This integration empowers you to leverage AI-driven automation to optimize your TestIO-driven quality assurance, enhance test visibility, and improve QA team productivity within your software development lifecycle. Brief Overview of TestIO TestIO is a leading crowdtesting platform that connects businesses with a global community of testers. Clients submit their software products and request test runs for specific features or applications. During test runs, testers report bugs and provide test results directly on the TestIO platform. Analyzing the large volume of bug reports, identifying duplicates, and standardizing varied report styles can be time-consuming. Value of Integration Integrating TestIO with ELITEA allows users and AI agents to directly access and process data from TestIO within the ELITEA environment. This integration provides: Retrieving Test Cases: Obtain details of test cases designed for specific TestIO test runs. Fetching Test Case Statuses: Get real-time statuses of test case executions (e.g., Passed, Failed, Pending). Listing Bugs with Filters: Access detailed bug reports associated with test runs, with options to apply filters for focused analysis. This integration streamlines the analysis of test execution status, bug trends, and overall test coverage, providing valuable insights for QA teams, development management, and stakeholders. Account Setup and Configuration in TestIO Account Setup TestIO is a commercial crowdtesting platform. To use the TestIO Toolkit, you will need an active TestIO account. If you do not have a TestIO account, you will need to obtain one through your organization or directly with TestIO. Token/API Key Generation: Obtaining a TestIO Personal Access Token For secure integration with ELITEA, it is essential to use a TestIO Personal Access Token for authentication. This method is more secure than using your primary TestIO account password directly and allows you to control access permissions for ELITEA. Follow these steps to obtain a Personal Access Token in TestIO: Request Access (if needed): If you do not already have access to generate Personal Access Tokens, consult the TestIO documentation or contact TestIO support (or your TestIO Customer Success Manager/development team contact) to request access. Generate Personal Access Token: Once access is granted, navigate to the TestIO API Integrations page using the following URL (you may need to be logged into TestIO via SSO): https://epamglobal.test.io/api_integrations (Note: This URL may vary depending on your specific TestIO environment. Confirm with your TestIO contact if needed.) Sign in with SSO: Log in to TestIO using your Single Sign-On credentials if prompted. Create a New Token: Follow the instructions on the TestIO API Integrations page to generate a new Personal Access Token. Give the token a descriptive name (e.g., \"ELITEA Integration Token\"). Securely Copy the Token: Important: Copy the generated Personal Access Token and store it securely. You will need this token to configure the TestIO Toolkit in ELITEA. Treat this token like a password \u2013 keep it confidential. TestIO Integration with ELITEA Integration Steps Follow these steps to integrate the TestIO Toolkit into an ELITEA agent: Navigate to Alitea Agents: Access the Agent section within your ELITEA instance. Create or Edit an Agent: Select an existing agent or create a new agent by clicking \"Create Agent\". Agent Configuration: Configure the agent with a relevant Agent Name , Description , Instructions , and Agent Type suitable for your intended use case (e.g., an \"OpenAI Agent\" type for general-purpose interaction). Crucial: Agent Instructions: Within the agent's instructions, clearly define any required parameters that the agent will need, to use the TestIO tools, such as productId and testCaseTestId . Provide examples of how to obtain these IDs from TestIO. Add a New Tool: In the Agent configuration, locate the \"Tools\" section and click the \"+\" (Add Tool) icon. Select TestIO Toolkit: From the dropdown list of available toolkits, choose \"TestIO\" . TestIO Toolkit Configuration: The \"New TestIO tool configuration\" section will appear. Configure the following: Tool Name: Enter a descriptive name for this TestIO Toolkit instance (e.g., \"TestIO Integration\", \"QA Data Retriever\"). Description: Provide a brief description outlining the purpose of this toolkit integration (e.g., \"Retrieves test results and bug data from TestIO\"). API Endpoint: Verify that the \"API Endpoint\" field is pre-filled with the correct TestIO API endpoint URL: https://api.test.io . (Note: This endpoint URL may vary depending on your specific TestIO environment. Confirm with your TestIO contact if needed.) API Key: This field is for your TestIO Personal Access Token. Recommended Security Practice: Use Secrets (Preferred): Click the \"Secrets\" icon to create or select a securely stored secret within ELITEA to hold your TestIO Personal Access Token. This is the most secure method. Direct Input (Less Secure): You can directly paste your Personal Access Token into the \"API Key\" field. However, using secrets is strongly recommended for enhanced security. Select Tools: Choose the specific tools from the TestIO Toolkit that you want to enable for this agent. Select all necessary tools: Get Test Cases for Test Test Cases Statuses for Test List Bugs for Test with Filter Save Configuration: Click the \"Save\" button to save the TestIO Toolkit configuration for your agent. Tools Overview The TestIO Toolkit provides the following tools (actions) for interacting with the TestIO API: Get Test Cases for Test: Description: Retrieves a list of test cases defined for a specific TestIO test run (launch). Provides detailed information about each test case. e.g. Parameters Required: productId (string): The ID of the product in TestIO. API Endpoint Used: GET /customer/v2/products/{productId}/test_case_tests/{testCaseTestId} Use Case Example: To get a detailed list of test cases to understand the scope of a particular test launch. Test Cases Statuses for Test: Description: Retrieves the execution statuses of test cases for a specific TestIO test run. Provides information on whether each test case Passed, Failed, is Pending, etc. API Endpoint: GET /customer/v2/products/{productId}/test_case_tests/{testCaseTestId}/results Use Case Example: To analyze the overall pass/fail rate of a test run, identify failing test cases, and understand test execution progress. List Bugs for Test with Filter: Description: Retrieves a list of bug reports submitted by testers for a specific TestIO test run. Allows filtering of bugs based on various criteria Use Case Example: To get a list of bugs reported in a specific test run, or to filter bugs based on a filter parameter. Use Cases Here are practical use cases demonstrating how to leverage the TestIO Toolkit within ELITEA agents to enhance QA workflows: Detailed Test Case Review: Scenario: A QA lead wants to review the specific test cases included in a recent TestIO test launch to understand the test scope and coverage. Tool: Get Test Cases for Test Example Agent Instruction: \"Use the 'Get Test Cases for Test' tool to retrieve the test cases for product ID 'YOUR_PRODUCT_ID' and test run ID 'YOUR_TEST_CASE_TEST_ID'. Provide a summary of the test case descriptions to the user.\" Benefit: Provides detailed insights into test case design and scope for better test planning and understanding. Real-time Test Execution Monitoring: Scenario: A project manager needs to track the progress of a TestIO test run in real-time, specifically focusing on the status of test cases (passed, failed, pending). Tool: Test Cases Statuses for Test Example Agent Instruction: \"Use the 'Test Cases Statuses for Test' tool to get the execution statuses for product ID 'YOUR_PRODUCT_ID' and test run ID 'YOUR_TEST_CASE_TEST_ID'. Summarize the number of passed, failed, and pending test cases and present a progress report.\" Benefit: Enables proactive monitoring of test execution progress, allowing for timely intervention if issues arise. Bug Triage and Analysis: Scenario: A QA engineer needs to analyze bugs reported in a specific TestIO test run, potentially filtering bugs related to a specific product area or component for focused triage and defect management. Tool: List Bugs for Test with Filter Example Agent Instruction: \"Use the 'List Bugs for Test with Filter' tool for product ID 'YOUR_PRODUCT_ID'. (If filtering by specific product IDs is supported, add:) Filter for bugs related to product IDs 'COMPONENT_A_PRODUCT_ID,COMPONENT_B_PRODUCT_ID'. Provide a list of bug titles and severities to the QA team.\" Benefit: Streamlines bug analysis and triage by providing filtered bug lists, allowing QA teams to focus on specific areas and manage defects efficiently. Automated Test Summary Report Generation: Scenario: An agent can automatically retrieve test case details, statuses, and bug lists for a TestIO test run and compile a comprehensive test summary report for stakeholders. Tools Used: Get Test Cases for Test, Test Cases Statuses for Test, List Bugs for Test with Filter Example Agent Instructions: \"Use 'Get Test Cases for Test' to get test case details.\" \"Use 'Test Cases Statuses for Test' to get test case statuses.\" \"Use 'List Bugs for Test with Filter' to get bug information.\" \"Compile a summary report including test case counts, pass/fail metrics, and a list of reported bugs.\" Benefit: Creates automated test summary reports, saving time and effort in manual report compilation and providing stakeholders with timely insights into test results and quality metrics. Troubleshooting and Support Troubleshooting Integration Failure - Connection or Authentication Errors: Problem: ELITEA agent fails to connect to TestIO or encounters authentication errors when using TestIO tools. Troubleshooting Steps: Check API Key: Verify that the Personal Access Token entered in the \"API Key\" field (or secret) is correct, has been copied accurately, and is valid. API Endpoint URL: Confirm that the \"API Endpoint\" URL is correctly set to https://api.test.io (or the correct environment-specific URL if applicable). Token Validity and Permissions: Ensure the Personal Access Token is still valid in TestIO and has not been revoked. While TestIO Personal Access Tokens generally have broad access, confirm with TestIO documentation if specific scopes are required for the API endpoints used by the toolkit. Network Connectivity: Check network connectivity between ELITEA and the TestIO API endpoint. Ensure there are no firewall rules or network issues blocking the connection. ELITEA Error Logs: Examine ELITEA's error logs for any specific error messages related to the TestIO Toolkit integration. These logs can provide more detailed clues about the failure. Data Errors or Empty Data Retrieval: Problem: Integration is successful (no connection errors), but the agent retrieves incorrect data, incomplete data, or empty datasets from TestIO. Troubleshooting Steps: Verify Product ID and Test Run ID: Double-check that the productId and testCaseTestId values being used in agent instructions and tool calls are absolutely correct and correspond to valid, active test runs and products in your TestIO project. Incorrect IDs are a common cause of data retrieval issues. Test Run Status in TestIO: Verify that the TestIO test run (specified by testCaseTestId ) is not archived or in a state where data is no longer accessible via the API. Instruction Accuracy: Review the agent's instructions to ensure they are correctly using the TestIO tools and providing the required parameters ( productId , testCaseTestId , filter parameters if applicable). Tool Parameter Requirements: Re-examine the documentation for each TestIO tool ( Get Test Cases for Test , Test Cases Statuses for Test , List Bugs for Test with Filter ) to confirm you are providing all required parameters and in the correct format. Example Instructions and Testing: Start with the example instruction provided in this guide and test it to ensure basic data retrieval works. Gradually increase complexity as needed. Agent Type Compatibility: Problem: If you are using a specific agent type in ELITEA (beyond a general \"OpenAI Agent\"), and the TestIO Toolkit is not functioning as expected, consider if there are any agent-type-specific limitations or compatibility issues. Troubleshooting Step: As a general troubleshooting step, especially when initially setting up the integration, try using \"OpenAI Agent\" type . This can help rule out issues related to more specialized agent types. If it works with a basic agent, then investigate if there are specific configurations needed for other agent types. FAQs Q: Can I use my regular TestIO username and password for the ELITEA integration? A: No, you should not use your regular TestIO username and password directly. For secure API access, you must use a TestIO Personal Access Token as described in the \"Account Setup\" section of this guide. Personal Access Tokens are designed for secure application integrations. Q: Where do I find the productId and testCaseTestId in TestIO? A: The productId and testCaseTestId are associated with your product and tests within TestIO. You can usually find them in the TestIO CSM portal (e.g., in the URL path). You may also find them in TestIO project settings or by contacting your TestIO CSM or project team. Q: What if I don't have access to generate a Personal Access Token in TestIO? A: If you do not have access to generate Personal Access Tokens in TestIO, you will need to request access. Contact TestIO support, your TestIO Customer Success Manager, or your internal project team/TestIO administrator to request the necessary permissions. Q: Is there a limit to the amount of data I can retrieve from TestIO using this toolkit? A: The TestIO API itself might have limitations on data retrieval volume or rate limits. While the ELITEA Toolkit itself doesn't impose specific limits, be mindful of potentially large data retrievals, especially for bug lists or test case details for very large test runs. LLM models also have limitations on data (tokens). Support and Contact Information ELITEA Support Team If you encounter persistent issues, have questions not covered in this guide, or require further assistance with the TestIO Toolkit or ELITEA Agents, please contact the ELITEA Support Team: Email: SupportAlita@epam.com To help us assist you efficiently, please provide the following details in your support request: ELITEA Environment: (e.g., \"Nexus,\" \"Alita Lab,\" \"EYE\") Project Details: Project Name, Private or Team project. Detailed Issue Description: Clear explanation of the problem, steps to reproduce, expected vs. actual behavior. Relevant Configuration Information: Agent Instructions (screenshot or text) TestIO Toolkit Configuration (screenshots, especially of API Key and Endpoint settings) Error Messages (full error text from chat window details) Your Query/Prompt: Exact text used to trigger the issue. TestIO Product ID and Test Run ID (if relevant to the issue): Before Contacting Support: We encourage you to first explore the resources available within this guide and the broader ELITEA documentation. You may find answers to common questions or solutions to known issues in the documentation.","title":"TestIO Integration"},{"location":"how-tos/agents-toolkits/testIO_toolkit/#elitea-toolkit-guide-testio-integration","text":"","title":"ELITEA Toolkit Guide: TestIO Integration"},{"location":"how-tos/agents-toolkits/testIO_toolkit/#introduction","text":"","title":"Introduction"},{"location":"how-tos/agents-toolkits/testIO_toolkit/#purpose-of-this-guide","text":"This guide is your comprehensive resource for integrating and effectively using the TestIO toolkit within ELITEA. It provides a detailed, step-by-step walkthrough, from configuration in TestIO platform to configuring the toolkit in ELITEA and seamlessly incorporating it into your Agents. By following this guide, you will unlock the power of automated test result analysis, streamlined QA workflows, and enhanced insights into your testing process, all directly within the ELITEA platform. This integration empowers you to leverage AI-driven automation to optimize your TestIO-driven quality assurance, enhance test visibility, and improve QA team productivity within your software development lifecycle.","title":"Purpose of this Guide"},{"location":"how-tos/agents-toolkits/testIO_toolkit/#brief-overview-of-testio","text":"TestIO is a leading crowdtesting platform that connects businesses with a global community of testers. Clients submit their software products and request test runs for specific features or applications. During test runs, testers report bugs and provide test results directly on the TestIO platform. Analyzing the large volume of bug reports, identifying duplicates, and standardizing varied report styles can be time-consuming.","title":"Brief Overview of TestIO"},{"location":"how-tos/agents-toolkits/testIO_toolkit/#value-of-integration","text":"Integrating TestIO with ELITEA allows users and AI agents to directly access and process data from TestIO within the ELITEA environment. This integration provides: Retrieving Test Cases: Obtain details of test cases designed for specific TestIO test runs. Fetching Test Case Statuses: Get real-time statuses of test case executions (e.g., Passed, Failed, Pending). Listing Bugs with Filters: Access detailed bug reports associated with test runs, with options to apply filters for focused analysis. This integration streamlines the analysis of test execution status, bug trends, and overall test coverage, providing valuable insights for QA teams, development management, and stakeholders.","title":"Value of Integration"},{"location":"how-tos/agents-toolkits/testIO_toolkit/#account-setup-and-configuration-in-testio","text":"","title":"Account Setup and Configuration in TestIO"},{"location":"how-tos/agents-toolkits/testIO_toolkit/#account-setup","text":"TestIO is a commercial crowdtesting platform. To use the TestIO Toolkit, you will need an active TestIO account. If you do not have a TestIO account, you will need to obtain one through your organization or directly with TestIO.","title":"Account Setup"},{"location":"how-tos/agents-toolkits/testIO_toolkit/#tokenapi-key-generation-obtaining-a-testio-personal-access-token","text":"For secure integration with ELITEA, it is essential to use a TestIO Personal Access Token for authentication. This method is more secure than using your primary TestIO account password directly and allows you to control access permissions for ELITEA. Follow these steps to obtain a Personal Access Token in TestIO: Request Access (if needed): If you do not already have access to generate Personal Access Tokens, consult the TestIO documentation or contact TestIO support (or your TestIO Customer Success Manager/development team contact) to request access. Generate Personal Access Token: Once access is granted, navigate to the TestIO API Integrations page using the following URL (you may need to be logged into TestIO via SSO): https://epamglobal.test.io/api_integrations (Note: This URL may vary depending on your specific TestIO environment. Confirm with your TestIO contact if needed.) Sign in with SSO: Log in to TestIO using your Single Sign-On credentials if prompted. Create a New Token: Follow the instructions on the TestIO API Integrations page to generate a new Personal Access Token. Give the token a descriptive name (e.g., \"ELITEA Integration Token\"). Securely Copy the Token: Important: Copy the generated Personal Access Token and store it securely. You will need this token to configure the TestIO Toolkit in ELITEA. Treat this token like a password \u2013 keep it confidential.","title":"Token/API Key Generation: Obtaining a TestIO Personal Access Token"},{"location":"how-tos/agents-toolkits/testIO_toolkit/#testio-integration-with-elitea","text":"","title":"TestIO Integration with ELITEA"},{"location":"how-tos/agents-toolkits/testIO_toolkit/#integration-steps","text":"Follow these steps to integrate the TestIO Toolkit into an ELITEA agent: Navigate to Alitea Agents: Access the Agent section within your ELITEA instance. Create or Edit an Agent: Select an existing agent or create a new agent by clicking \"Create Agent\". Agent Configuration: Configure the agent with a relevant Agent Name , Description , Instructions , and Agent Type suitable for your intended use case (e.g., an \"OpenAI Agent\" type for general-purpose interaction). Crucial: Agent Instructions: Within the agent's instructions, clearly define any required parameters that the agent will need, to use the TestIO tools, such as productId and testCaseTestId . Provide examples of how to obtain these IDs from TestIO. Add a New Tool: In the Agent configuration, locate the \"Tools\" section and click the \"+\" (Add Tool) icon. Select TestIO Toolkit: From the dropdown list of available toolkits, choose \"TestIO\" . TestIO Toolkit Configuration: The \"New TestIO tool configuration\" section will appear. Configure the following: Tool Name: Enter a descriptive name for this TestIO Toolkit instance (e.g., \"TestIO Integration\", \"QA Data Retriever\"). Description: Provide a brief description outlining the purpose of this toolkit integration (e.g., \"Retrieves test results and bug data from TestIO\"). API Endpoint: Verify that the \"API Endpoint\" field is pre-filled with the correct TestIO API endpoint URL: https://api.test.io . (Note: This endpoint URL may vary depending on your specific TestIO environment. Confirm with your TestIO contact if needed.) API Key: This field is for your TestIO Personal Access Token. Recommended Security Practice: Use Secrets (Preferred): Click the \"Secrets\" icon to create or select a securely stored secret within ELITEA to hold your TestIO Personal Access Token. This is the most secure method. Direct Input (Less Secure): You can directly paste your Personal Access Token into the \"API Key\" field. However, using secrets is strongly recommended for enhanced security. Select Tools: Choose the specific tools from the TestIO Toolkit that you want to enable for this agent. Select all necessary tools: Get Test Cases for Test Test Cases Statuses for Test List Bugs for Test with Filter Save Configuration: Click the \"Save\" button to save the TestIO Toolkit configuration for your agent.","title":"Integration Steps"},{"location":"how-tos/agents-toolkits/testIO_toolkit/#tools-overview","text":"The TestIO Toolkit provides the following tools (actions) for interacting with the TestIO API: Get Test Cases for Test: Description: Retrieves a list of test cases defined for a specific TestIO test run (launch). Provides detailed information about each test case. e.g. Parameters Required: productId (string): The ID of the product in TestIO. API Endpoint Used: GET /customer/v2/products/{productId}/test_case_tests/{testCaseTestId} Use Case Example: To get a detailed list of test cases to understand the scope of a particular test launch. Test Cases Statuses for Test: Description: Retrieves the execution statuses of test cases for a specific TestIO test run. Provides information on whether each test case Passed, Failed, is Pending, etc. API Endpoint: GET /customer/v2/products/{productId}/test_case_tests/{testCaseTestId}/results Use Case Example: To analyze the overall pass/fail rate of a test run, identify failing test cases, and understand test execution progress. List Bugs for Test with Filter: Description: Retrieves a list of bug reports submitted by testers for a specific TestIO test run. Allows filtering of bugs based on various criteria Use Case Example: To get a list of bugs reported in a specific test run, or to filter bugs based on a filter parameter.","title":"Tools Overview"},{"location":"how-tos/agents-toolkits/testIO_toolkit/#use-cases","text":"Here are practical use cases demonstrating how to leverage the TestIO Toolkit within ELITEA agents to enhance QA workflows: Detailed Test Case Review: Scenario: A QA lead wants to review the specific test cases included in a recent TestIO test launch to understand the test scope and coverage. Tool: Get Test Cases for Test Example Agent Instruction: \"Use the 'Get Test Cases for Test' tool to retrieve the test cases for product ID 'YOUR_PRODUCT_ID' and test run ID 'YOUR_TEST_CASE_TEST_ID'. Provide a summary of the test case descriptions to the user.\" Benefit: Provides detailed insights into test case design and scope for better test planning and understanding. Real-time Test Execution Monitoring: Scenario: A project manager needs to track the progress of a TestIO test run in real-time, specifically focusing on the status of test cases (passed, failed, pending). Tool: Test Cases Statuses for Test Example Agent Instruction: \"Use the 'Test Cases Statuses for Test' tool to get the execution statuses for product ID 'YOUR_PRODUCT_ID' and test run ID 'YOUR_TEST_CASE_TEST_ID'. Summarize the number of passed, failed, and pending test cases and present a progress report.\" Benefit: Enables proactive monitoring of test execution progress, allowing for timely intervention if issues arise. Bug Triage and Analysis: Scenario: A QA engineer needs to analyze bugs reported in a specific TestIO test run, potentially filtering bugs related to a specific product area or component for focused triage and defect management. Tool: List Bugs for Test with Filter Example Agent Instruction: \"Use the 'List Bugs for Test with Filter' tool for product ID 'YOUR_PRODUCT_ID'. (If filtering by specific product IDs is supported, add:) Filter for bugs related to product IDs 'COMPONENT_A_PRODUCT_ID,COMPONENT_B_PRODUCT_ID'. Provide a list of bug titles and severities to the QA team.\" Benefit: Streamlines bug analysis and triage by providing filtered bug lists, allowing QA teams to focus on specific areas and manage defects efficiently. Automated Test Summary Report Generation: Scenario: An agent can automatically retrieve test case details, statuses, and bug lists for a TestIO test run and compile a comprehensive test summary report for stakeholders. Tools Used: Get Test Cases for Test, Test Cases Statuses for Test, List Bugs for Test with Filter Example Agent Instructions: \"Use 'Get Test Cases for Test' to get test case details.\" \"Use 'Test Cases Statuses for Test' to get test case statuses.\" \"Use 'List Bugs for Test with Filter' to get bug information.\" \"Compile a summary report including test case counts, pass/fail metrics, and a list of reported bugs.\" Benefit: Creates automated test summary reports, saving time and effort in manual report compilation and providing stakeholders with timely insights into test results and quality metrics.","title":"Use Cases"},{"location":"how-tos/agents-toolkits/testIO_toolkit/#troubleshooting-and-support","text":"","title":"Troubleshooting and Support"},{"location":"how-tos/agents-toolkits/testIO_toolkit/#troubleshooting","text":"Integration Failure - Connection or Authentication Errors: Problem: ELITEA agent fails to connect to TestIO or encounters authentication errors when using TestIO tools. Troubleshooting Steps: Check API Key: Verify that the Personal Access Token entered in the \"API Key\" field (or secret) is correct, has been copied accurately, and is valid. API Endpoint URL: Confirm that the \"API Endpoint\" URL is correctly set to https://api.test.io (or the correct environment-specific URL if applicable). Token Validity and Permissions: Ensure the Personal Access Token is still valid in TestIO and has not been revoked. While TestIO Personal Access Tokens generally have broad access, confirm with TestIO documentation if specific scopes are required for the API endpoints used by the toolkit. Network Connectivity: Check network connectivity between ELITEA and the TestIO API endpoint. Ensure there are no firewall rules or network issues blocking the connection. ELITEA Error Logs: Examine ELITEA's error logs for any specific error messages related to the TestIO Toolkit integration. These logs can provide more detailed clues about the failure. Data Errors or Empty Data Retrieval: Problem: Integration is successful (no connection errors), but the agent retrieves incorrect data, incomplete data, or empty datasets from TestIO. Troubleshooting Steps: Verify Product ID and Test Run ID: Double-check that the productId and testCaseTestId values being used in agent instructions and tool calls are absolutely correct and correspond to valid, active test runs and products in your TestIO project. Incorrect IDs are a common cause of data retrieval issues. Test Run Status in TestIO: Verify that the TestIO test run (specified by testCaseTestId ) is not archived or in a state where data is no longer accessible via the API. Instruction Accuracy: Review the agent's instructions to ensure they are correctly using the TestIO tools and providing the required parameters ( productId , testCaseTestId , filter parameters if applicable). Tool Parameter Requirements: Re-examine the documentation for each TestIO tool ( Get Test Cases for Test , Test Cases Statuses for Test , List Bugs for Test with Filter ) to confirm you are providing all required parameters and in the correct format. Example Instructions and Testing: Start with the example instruction provided in this guide and test it to ensure basic data retrieval works. Gradually increase complexity as needed. Agent Type Compatibility: Problem: If you are using a specific agent type in ELITEA (beyond a general \"OpenAI Agent\"), and the TestIO Toolkit is not functioning as expected, consider if there are any agent-type-specific limitations or compatibility issues. Troubleshooting Step: As a general troubleshooting step, especially when initially setting up the integration, try using \"OpenAI Agent\" type . This can help rule out issues related to more specialized agent types. If it works with a basic agent, then investigate if there are specific configurations needed for other agent types.","title":"Troubleshooting"},{"location":"how-tos/agents-toolkits/testIO_toolkit/#faqs","text":"Q: Can I use my regular TestIO username and password for the ELITEA integration? A: No, you should not use your regular TestIO username and password directly. For secure API access, you must use a TestIO Personal Access Token as described in the \"Account Setup\" section of this guide. Personal Access Tokens are designed for secure application integrations. Q: Where do I find the productId and testCaseTestId in TestIO? A: The productId and testCaseTestId are associated with your product and tests within TestIO. You can usually find them in the TestIO CSM portal (e.g., in the URL path). You may also find them in TestIO project settings or by contacting your TestIO CSM or project team. Q: What if I don't have access to generate a Personal Access Token in TestIO? A: If you do not have access to generate Personal Access Tokens in TestIO, you will need to request access. Contact TestIO support, your TestIO Customer Success Manager, or your internal project team/TestIO administrator to request the necessary permissions. Q: Is there a limit to the amount of data I can retrieve from TestIO using this toolkit? A: The TestIO API itself might have limitations on data retrieval volume or rate limits. While the ELITEA Toolkit itself doesn't impose specific limits, be mindful of potentially large data retrievals, especially for bug lists or test case details for very large test runs. LLM models also have limitations on data (tokens).","title":"FAQs"},{"location":"how-tos/agents-toolkits/testIO_toolkit/#support-and-contact-information","text":"","title":"Support and Contact Information"},{"location":"how-tos/agents-toolkits/testIO_toolkit/#elitea-support-team","text":"If you encounter persistent issues, have questions not covered in this guide, or require further assistance with the TestIO Toolkit or ELITEA Agents, please contact the ELITEA Support Team: Email: SupportAlita@epam.com To help us assist you efficiently, please provide the following details in your support request: ELITEA Environment: (e.g., \"Nexus,\" \"Alita Lab,\" \"EYE\") Project Details: Project Name, Private or Team project. Detailed Issue Description: Clear explanation of the problem, steps to reproduce, expected vs. actual behavior. Relevant Configuration Information: Agent Instructions (screenshot or text) TestIO Toolkit Configuration (screenshots, especially of API Key and Endpoint settings) Error Messages (full error text from chat window details) Your Query/Prompt: Exact text used to trigger the issue. TestIO Product ID and Test Run ID (if relevant to the issue): Before Contacting Support: We encourage you to first explore the resources available within this guide and the broader ELITEA documentation. You may find answers to common questions or solutions to known issues in the documentation.","title":"ELITEA Support Team"},{"location":"how-tos/agents-toolkits/testrail_toolkit/","text":"ELITEA Toolkit Guide: TestRail Integration Introduction Purpose of this Guide This guide is your definitive resource for integrating and utilizing the TestRail toolkit within ELITEA. It provides a step-by-step walkthrough, from setting up your TestRail API Key to configuring the toolkit in ELITEA and effectively using it within your Agents. By following this guide, you will unlock the power of automated test management, streamlined testing workflows, and enhanced team collaboration, all directly within the ELITEA platform. This integration empowers you to leverage AI-driven automation to optimize your software testing lifecycle using the combined strengths of ELITEA and TestRail. Brief Overview of TestRail TestRail is a comprehensive, web-based test management tool that helps teams of all sizes efficiently organize, manage, and track their software testing efforts. It provides a centralized platform to streamline your testing process, offering features for: Test Case Management: Create, organize, and manage test cases with rich text formatting, attachments, and custom fields. Structure test cases into projects, suites, and sections for easy navigation and maintenance. Test Execution & Tracking: Plan and execute test runs and test plans, track test results in real-time, and assign tests to team members. Get a clear overview of testing progress and identify areas needing attention. Reporting & Metrics: Generate insightful reports and metrics on test coverage, test results, and team performance. Use dashboards and charts to visualize testing progress and identify trends. Integration with Development Tools: Seamlessly integrates with issue trackers like Jira, and automation tools, making it a central hub for your testing ecosystem. Customization & Scalability: Adapt TestRail to your specific testing processes with customizable workflows, fields, and templates. Scale TestRail as your team and projects grow. Integrating TestRail with ELITEA brings these robust test management capabilities directly into your AI-powered workflows. Your ELITEA Agents can then interact with your TestRail instance to automate test-related tasks, enhance testing processes, and improve team collaboration through intelligent automation. TestRail Account Setup and Configuration Account Setup If you don't have a TestRail account yet, here\u2019s how to get started with a free trial: Go to TestRail Website: Open your web browser and navigate to TestRail's official website . Start a Free Trial: On the homepage, locate and click the \"Free Trial\" button. Fill Out the Registration Form: Provide your details in the registration form. This typically includes your name, company email address, company name, and other relevant information. For professional use, it's highly recommended to use your company email. Submit the Form: Click on the \u201cStart Free Trial\u201d or similar button to submit the form. TestRail will send a confirmation email to the email address you provided. Verify Your Email: Open the confirmation email from TestRail and click on the verification link provided within the email. This step is crucial to activate your TestRail trial account. Access Your Account: After email verification, you will be redirected to your new TestRail instance or prompted to log in. Follow any on-screen instructions to complete the setup and access your TestRail account. API Key Generation in TestRail To securely integrate TestRail with ELITEA, you need to generate an API key within TestRail. This API key will be used by ELITEA to authenticate and access your TestRail instance. Follow these steps to create an API Key: Log in to TestRail: Access your TestRail account using your credentials. Access My Settings: Click on your profile name in the top right corner of the TestRail interface. From the dropdown menu, select \"My Settings\" . Navigate to API Keys: In the \"My Settings\" page, find and click on the \"API keys\" tab. Add API Key: Click the \"Add Key\" button to create a new API key. Name the API Key: In the \"Name\" field, enter a descriptive name for the API key, such as \"ELITEA Integration Key\". This will help you identify the purpose of this key later. Generate API Key: Click the \"Generate Key\" button. TestRail will generate a new API key and display it to you. Securely Store Your API Key: Immediately copy the generated API key. This is the only time it will be displayed in full. Store it securely using a password manager or ELITEA's built-in Secrets feature (recommended for enhanced security within ELITEA). You will need this API Key to configure the TestRail toolkit in ELITEA. TestRail Integration with ELITEA Agent Creation/Configuration To integrate TestRail, you'll need to configure it within an ELITEA Agent. You can either create a new Agent or modify an existing one. Navigate to Agents: In ELITEA, go to the Agents menu. Create or Edit Agent: New Agent: Click \"+ Agent\" to create a new Agent. Follow the steps to define Agent details like name, description, type, and instructions. Existing Agent: Select the Agent you want to integrate with TestRail and click on its name to edit. Access Tools Section: In the Agent configuration, scroll down to the \"Tools\" section. Toolkit Configuration This section details how to configure the TestRail toolkit within your ELITEA Agent. Add Toolkit: In the \"Tools\" section, click the \"+\" icon . Select TestRail: Choose \"TestRail\" from the dropdown list of available toolkits. This opens the \"New TestRail tool\" configuration panel. Configure Toolkit Details: Fill in the following fields: Name: Enter a Name for this TestRail toolkit instance. Choose a descriptive name that helps you identify its purpose within your Agent's instructions (e.g., \"TestRailQA\", \"TestManagementTool\"). Description: Provide a Description for the toolkit, clarifying its purpose or the specific TestRail project it accesses (e.g., \"Toolkit to access and manage test cases in TestRail\"). URL: Enter the URL of your TestRail instance . It is crucial to use the correct format and your specific instance URL. For example: https://yourcompany.testrail.io/ . Replace yourcompany with your actual TestRail subdomain. Email: Enter the Email address associated with your TestRail account that you used to generate the API key. Password/API token: Select \"API token\" as the authentication method. Password/Secret: Choose \"Secret\" and select a pre-configured secret from the dropdown. You must first create and securely store your API Key as a Secret in ELITEA's Secrets feature. Using Secrets prevents hardcoding sensitive credentials directly in the toolkit configuration and enhances security. Alternatively, you can choose \"Password\" and paste the API Key you generated in TestRail into the \"Password\" field, but using Secrets is highly recommended for security best practices. [ Note: Replace with actual screenshot of TestRail Toolkit Configuration in ELITEA if available] Enable Tools: In the \"Tools\" section of the TestRail toolkit configuration, select the checkboxes next to the TestRail tools you want to enable for your Agent. Enable only the tools your Agent will actually use to adhere to the principle of least privilege and enhance security. Available tools are: Get case: Retrieves a specific test case from TestRail. Get cases: Retrieves a list of test cases from a TestRail project. Get cases by filter: Retrieves test cases based on specified filter criteria. Add case: Adds a new test case to TestRail. Complete Configuration: Click the arrow icon (at the top right of the toolkit configuration) to save the TestRail toolkit setup and return to the main Agent configuration. Click Save to apply configuration and changes to the Agent. Tool Overview The TestRail toolkit provides the following tools for your ELITEA Agents: Get case: get_case - Retrieves a specific test case from TestRail using its ID. Useful for reviewing details of a particular test case. Get cases: get_cases - Retrieves a list of test cases from a specified TestRail project. Useful for getting an overview of test cases within a project. Get cases by filter: get_cases_by_filter - Retrieves test cases from TestRail based on specified filter criteria, such as priority, status, or type. Useful for targeted retrieval of test cases based on specific attributes. Add case: add_case - Adds a new test case to a specified TestRail project and section. Useful for automating test case creation. Instructions and Prompts for Using the Toolkit To instruct your ELITEA Agent to use the TestRail toolkit, you need to provide clear instructions within the Agent's \"Instructions\" field. These instructions guide the Agent on when and how to use the available tools. Instruction Creation for OpenAI Agents When creating instructions for the TestRail toolkit for OpenAI-based Agents, focus on clear, action-oriented language. Break down tasks into simple steps and explicitly state the parameters required for each tool. OpenAI Agents respond best to instructions that are: Direct and Imperative: Use action verbs and clear commands (e.g., \"Use the 'get_case' tool...\", \"Add a new test case with...\"). Parameter-Focused: Clearly list each parameter and how the Agent should determine its value. Context-Aware: Provide enough context so the Agent understands the overall goal and when to use specific tools within a workflow. When instructing your Agent to use a TestRail toolkit, use this pattern: 1. Identify the goal: [State the objective, e.g., \"To retrieve details of a specific test case\"]. 2. Tool Selection: Use the \"[tool_name]\" tool. 3. Parameter Specification: Provide the following parameters: - Parameter Name 1: <value or description of value> - Parameter Name 2: <value or description of value> - ... 4. Expected Outcome: [Optionally, describe what should happen after the tool is used]. Example Agent Instructions for TestRail Toolkit Tools (OpenAI Agent Friendly): Agent Instructions for Retrieving a Specific Test Case: 1. Goal: To get the details of test case with ID 2260 from TestRail. 2. Tool: Use the \"get_case\" tool. 3. Parameters: - Case ID: \"2260\" 4. Outcome: The Agent will retrieve and display the details of test case with ID 2260. Agent Instructions for Adding a New Test Case: 1. Goal: To create a new test case in TestRail project with ID 1, section ID 5, with title \"Login Functionality Test\" and priority \"High\". 2. Tool: Use the \"add_case\" tool. 3. Parameters: - Project ID: \"1\" - Section ID: \"5\" - Title: \"Login Functionality Test\" - Case Properties (JSON format): '{\"priority_id\": 1}' (Note: priority_id 1 usually corresponds to High priority in TestRail, check your TestRail instance for specific IDs) 4. Outcome: A new test case named \"Login Functionality Test\" will be created in TestRail under project ID 1 and section ID 5 with High priority. Agent Instructions for Retrieving All Test Cases in a Project: 1. Goal: To get a list of all test cases from TestRail project with ID 2. 2. Tool: Use the \"get_cases\" tool. 3. Parameters: - Project ID: \"2\" 4. Outcome: The Agent will retrieve and display a list of all test cases in project ID 2. Agent Instructions for Retrieving Test Cases by Filter: 1. Goal: To retrieve all test cases from project ID 1 that are of \"Functional\" type and have \"High\" priority. 2. Tool: Use the \"get_cases_by_filter\" tool. 3. Parameters: - Project ID: \"1\" - Filter Arguments (JSON format): '{\"priority_id\": 1, \"type_id\": 2}' (Note: priority_id 1 for High, type_id 2 for Functional are examples, check your TestRail instance for specific IDs) 4. Outcome: The Agent will retrieve and display a list of test cases from project ID 1 that match the specified filter criteria (Functional type and High priority). Conversation Starters Use these conversation starters to interact with your TestRail-integrated Agent. 1. For Testing and Troubleshooting Connection: These starters are designed to verify if the TestRail toolkit is correctly configured and connected to your TestRail instance. \"Get test case with ID 1.\" - This tests basic connectivity and read permissions. \"Get all test cases for project ID 1.\" - This further tests read permissions and project access. 2. For General Agent Usage Scenarios: These starters demonstrate how to initiate agent execution for common TestRail-related tasks. \"I need to review the details of test case 2260.\" - This could trigger the get_case tool. \"Create a new test case in project 1, section 5, with title 'User Registration Test' and priority 'Medium'.\" - This directly initiates the add_case tool. \"List all high priority test cases in project 2.\" - This would use the get_cases_by_filter tool. \"Get me all test cases from project 3.\" - This would use the get_cases tool. These conversation starters provide a starting point for interacting with your TestRail-integrated ELITEA Agent and can be customized further based on your specific use cases and workflows. Use Cases The TestRail toolkit unlocks numerous automation possibilities for software testing workflows within ELITEA. Here are some key use cases, demonstrating how each tool can be applied: Automated Test Case Review: Scenario: Quickly review the details of a specific test case to understand its steps, expected results, and current status. Tools Used: get_case Example Instruction: \"Use the 'get_case' tool to retrieve test case with ID 2260 and show me the details.\" Benefit: Saves time in manually searching for and opening test cases in TestRail, allowing for faster reviews and decision-making. Project Test Case Overview: Scenario: Get a comprehensive list of all test cases within a specific TestRail project to understand the testing scope and coverage. Tools Used: get_cases Example Instruction: \"Use the 'get_cases' tool to list all test cases in project ID 1 so I can get an overview of the project's test suite.\" Benefit: Provides a quick and easy way to get a high-level view of all test cases in a project, aiding in test planning and progress monitoring. Filtered Test Case Retrieval for Targeted Analysis: Scenario: Identify and retrieve test cases based on specific criteria, such as priority, status, or type, for focused analysis or reporting. Tools Used: get_cases_by_filter Example Instruction: \"Use the 'get_cases_by_filter' tool to get all 'Failed' test cases with 'High' priority in project ID 2 to prioritize bug fixing.\" Benefit: Enables targeted retrieval of test cases, allowing testers and managers to quickly focus on specific areas of interest, such as failed tests or high-priority items. Automated Test Case Creation from Requirements: Scenario: Automatically create new test cases in TestRail based on new software requirements or user stories. Tools Used: add_case Example Instruction: \"Use the 'add_case' tool to create a new test case in project ID 3, section ID 10, with title 'Data Validation Test' and priority 'Medium' based on this new requirement: [paste requirement details here].\" Benefit: Streamlines test case creation, reduces manual effort, and ensures that test cases are created promptly as requirements evolve, improving test coverage and efficiency. Troubleshooting and Support Troubleshooting Connection Issues: Problem: Agent fails to connect to TestRail, resulting in errors during toolkit execution. Troubleshooting Steps: Verify TestRail URL: Ensure the URL is correctly entered and points to your TestRail instance (e.g., https://yourcompany.testrail.io/ ). Check Authentication: Double-check the Email address and API Key for accuracy. API Key Generation: Re-generate a new API key in TestRail and try using that if you suspect the key might be invalid. Network Connectivity: Verify that both ELITEA and TestRail have internet access and no network issues are blocking the connection. Authorization Errors (Permission Denied): Problem: Agent receives \"Permission Denied\" or \"Unauthorized\" errors when accessing TestRail resources. Troubleshooting Steps: API Key Validity: Ensure the API key is valid and has not been revoked in TestRail. Account Permissions: Confirm that the TestRail account associated with the API key has the necessary permissions to access the specified projects and perform the requested actions (e.g., read test cases, add test cases). TestRail permissions are generally managed within TestRail itself, ensure your user role has sufficient privileges. Incorrect Project or Section IDs: Problem: Agent fails to find projects or sections, especially when adding new test cases. Troubleshooting Steps: Verify Project ID: Double-check the Project ID in your TestRail instance. You can usually find the Project ID in the URL when you are viewing a specific project in TestRail. Verify Section ID: Similarly, verify the Section ID. Section IDs are typically found in the URL when you are within a specific section of a test suite in TestRail. Ensure the Section ID is valid within the specified Project. FAQ Q: Can I use my regular TestRail password instead of an API Key? A: No, for secure integration with ELITEA, you must use a TestRail API Key . Using your regular password directly is not supported and is a security risk. Q: Where do I find Project IDs and Section IDs in TestRail? A: Project IDs and Section IDs are typically visible in the URL when you navigate to a specific project or section within TestRail. For example, in the URL https://yourcompany.testrail.io/index.php?/projects/overview/1 , 1 is likely the Project ID. Similarly, when viewing a section, the URL will contain a section identifier. You can also find these IDs through TestRail's API if needed, but checking the URL is usually the easiest method. Q: What if I don't know the exact IDs for priority or type when filtering test cases? A: TestRail uses numerical IDs for various fields like priority and type. You need to find the correct IDs within your TestRail instance. Typically, you can find these IDs by inspecting the source code of the TestRail page when you are viewing or editing test cases, or by using TestRail's API to query available priorities and types. Contact your TestRail administrator if you are unsure about these IDs. Support Contact For any issues, questions, or further assistance with the TestRail integration or ELITEA Agents, please reach out to our dedicated ELITEA Support Team. We are committed to providing prompt and effective support to ensure your success with ELITEA. Contact ELITEA Support: Email: SupportAlita@epam.com Best Practices for Effective Support Requests: To help us understand and resolve your issue as quickly as possible, please ensure you provide the following information in your support email: ELITEA Environment: Clearly specify the ELITEA environment you are using (e.g., \"Nexus,\" \"Alita Lab,\" \"EYE\"). Project Details: Indicate the Project Name and whether you are working in your Private workspace or a Team project. Detailed Issue Description: Provide a clear, concise, and detailed description of the problem you are encountering. Explain what you were trying to do, what you expected to happen, and what actually occurred. Relevant Configuration Information: To help us diagnose the issue, please include relevant configuration details, such as: Agent Instructions (Screenshot or Text): If the issue is with an Agent, provide a screenshot or copy the text of your Agent's \"Instructions\" field. Toolkit Configurations (Screenshots): If the issue involves the TestRail toolkit or other toolkits, include screenshots of the toolkit configuration settings within your Agent. Error Messages (Full Error Text): If you are encountering an error message, please provide the complete error text . In the Chat window, expand the error details and copy the full error message. This detailed error information is crucial for diagnosis. Your Query/Prompt (Exact Text): If the issue is related to Agent execution, provide the exact query or prompt you used to trigger the issue. Before Contacting Support: We encourage you to first explore the resources available within this guide and the broader ELITEA documentation. You may find answers to common questions or solutions to known issues in the documentation. Useful Links To further enhance your understanding and skills in integrating TestRail with ELITEA, here are some helpful resources: TestRail Website : Access the main TestRail platform to create an account or log in and explore TestRail features. TestRail API Documentation : Refer to the official TestRail API documentation for detailed information on API endpoints, data structures, and advanced usage. ELITEA Secrets : Learn how to securely store your TestRail API Key using ELITEA's Secrets management feature for enhanced security. ELITEA Agents Configuration : Find out more about creating and configuring Agents in ELITEA, where you integrate the TestRail toolkit to automate your workflows. ELITEA Support Email : Contact the ELITEA support team for direct assistance with TestRail integration or any other questions and issues you may encounter.","title":"TestRail Integration"},{"location":"how-tos/agents-toolkits/testrail_toolkit/#elitea-toolkit-guide-testrail-integration","text":"","title":"ELITEA Toolkit Guide: TestRail Integration"},{"location":"how-tos/agents-toolkits/testrail_toolkit/#introduction","text":"","title":"Introduction"},{"location":"how-tos/agents-toolkits/testrail_toolkit/#purpose-of-this-guide","text":"This guide is your definitive resource for integrating and utilizing the TestRail toolkit within ELITEA. It provides a step-by-step walkthrough, from setting up your TestRail API Key to configuring the toolkit in ELITEA and effectively using it within your Agents. By following this guide, you will unlock the power of automated test management, streamlined testing workflows, and enhanced team collaboration, all directly within the ELITEA platform. This integration empowers you to leverage AI-driven automation to optimize your software testing lifecycle using the combined strengths of ELITEA and TestRail.","title":"Purpose of this Guide"},{"location":"how-tos/agents-toolkits/testrail_toolkit/#brief-overview-of-testrail","text":"TestRail is a comprehensive, web-based test management tool that helps teams of all sizes efficiently organize, manage, and track their software testing efforts. It provides a centralized platform to streamline your testing process, offering features for: Test Case Management: Create, organize, and manage test cases with rich text formatting, attachments, and custom fields. Structure test cases into projects, suites, and sections for easy navigation and maintenance. Test Execution & Tracking: Plan and execute test runs and test plans, track test results in real-time, and assign tests to team members. Get a clear overview of testing progress and identify areas needing attention. Reporting & Metrics: Generate insightful reports and metrics on test coverage, test results, and team performance. Use dashboards and charts to visualize testing progress and identify trends. Integration with Development Tools: Seamlessly integrates with issue trackers like Jira, and automation tools, making it a central hub for your testing ecosystem. Customization & Scalability: Adapt TestRail to your specific testing processes with customizable workflows, fields, and templates. Scale TestRail as your team and projects grow. Integrating TestRail with ELITEA brings these robust test management capabilities directly into your AI-powered workflows. Your ELITEA Agents can then interact with your TestRail instance to automate test-related tasks, enhance testing processes, and improve team collaboration through intelligent automation.","title":"Brief Overview of TestRail"},{"location":"how-tos/agents-toolkits/testrail_toolkit/#testrail-account-setup-and-configuration","text":"","title":"TestRail Account Setup and Configuration"},{"location":"how-tos/agents-toolkits/testrail_toolkit/#account-setup","text":"If you don't have a TestRail account yet, here\u2019s how to get started with a free trial: Go to TestRail Website: Open your web browser and navigate to TestRail's official website . Start a Free Trial: On the homepage, locate and click the \"Free Trial\" button. Fill Out the Registration Form: Provide your details in the registration form. This typically includes your name, company email address, company name, and other relevant information. For professional use, it's highly recommended to use your company email. Submit the Form: Click on the \u201cStart Free Trial\u201d or similar button to submit the form. TestRail will send a confirmation email to the email address you provided. Verify Your Email: Open the confirmation email from TestRail and click on the verification link provided within the email. This step is crucial to activate your TestRail trial account. Access Your Account: After email verification, you will be redirected to your new TestRail instance or prompted to log in. Follow any on-screen instructions to complete the setup and access your TestRail account.","title":"Account Setup"},{"location":"how-tos/agents-toolkits/testrail_toolkit/#api-key-generation-in-testrail","text":"To securely integrate TestRail with ELITEA, you need to generate an API key within TestRail. This API key will be used by ELITEA to authenticate and access your TestRail instance. Follow these steps to create an API Key: Log in to TestRail: Access your TestRail account using your credentials. Access My Settings: Click on your profile name in the top right corner of the TestRail interface. From the dropdown menu, select \"My Settings\" . Navigate to API Keys: In the \"My Settings\" page, find and click on the \"API keys\" tab. Add API Key: Click the \"Add Key\" button to create a new API key. Name the API Key: In the \"Name\" field, enter a descriptive name for the API key, such as \"ELITEA Integration Key\". This will help you identify the purpose of this key later. Generate API Key: Click the \"Generate Key\" button. TestRail will generate a new API key and display it to you. Securely Store Your API Key: Immediately copy the generated API key. This is the only time it will be displayed in full. Store it securely using a password manager or ELITEA's built-in Secrets feature (recommended for enhanced security within ELITEA). You will need this API Key to configure the TestRail toolkit in ELITEA.","title":"API Key Generation in TestRail"},{"location":"how-tos/agents-toolkits/testrail_toolkit/#testrail-integration-with-elitea","text":"","title":"TestRail Integration with ELITEA"},{"location":"how-tos/agents-toolkits/testrail_toolkit/#agent-creationconfiguration","text":"To integrate TestRail, you'll need to configure it within an ELITEA Agent. You can either create a new Agent or modify an existing one. Navigate to Agents: In ELITEA, go to the Agents menu. Create or Edit Agent: New Agent: Click \"+ Agent\" to create a new Agent. Follow the steps to define Agent details like name, description, type, and instructions. Existing Agent: Select the Agent you want to integrate with TestRail and click on its name to edit. Access Tools Section: In the Agent configuration, scroll down to the \"Tools\" section.","title":"Agent Creation/Configuration"},{"location":"how-tos/agents-toolkits/testrail_toolkit/#toolkit-configuration","text":"This section details how to configure the TestRail toolkit within your ELITEA Agent. Add Toolkit: In the \"Tools\" section, click the \"+\" icon . Select TestRail: Choose \"TestRail\" from the dropdown list of available toolkits. This opens the \"New TestRail tool\" configuration panel. Configure Toolkit Details: Fill in the following fields: Name: Enter a Name for this TestRail toolkit instance. Choose a descriptive name that helps you identify its purpose within your Agent's instructions (e.g., \"TestRailQA\", \"TestManagementTool\"). Description: Provide a Description for the toolkit, clarifying its purpose or the specific TestRail project it accesses (e.g., \"Toolkit to access and manage test cases in TestRail\"). URL: Enter the URL of your TestRail instance . It is crucial to use the correct format and your specific instance URL. For example: https://yourcompany.testrail.io/ . Replace yourcompany with your actual TestRail subdomain. Email: Enter the Email address associated with your TestRail account that you used to generate the API key. Password/API token: Select \"API token\" as the authentication method. Password/Secret: Choose \"Secret\" and select a pre-configured secret from the dropdown. You must first create and securely store your API Key as a Secret in ELITEA's Secrets feature. Using Secrets prevents hardcoding sensitive credentials directly in the toolkit configuration and enhances security. Alternatively, you can choose \"Password\" and paste the API Key you generated in TestRail into the \"Password\" field, but using Secrets is highly recommended for security best practices. [ Note: Replace with actual screenshot of TestRail Toolkit Configuration in ELITEA if available] Enable Tools: In the \"Tools\" section of the TestRail toolkit configuration, select the checkboxes next to the TestRail tools you want to enable for your Agent. Enable only the tools your Agent will actually use to adhere to the principle of least privilege and enhance security. Available tools are: Get case: Retrieves a specific test case from TestRail. Get cases: Retrieves a list of test cases from a TestRail project. Get cases by filter: Retrieves test cases based on specified filter criteria. Add case: Adds a new test case to TestRail. Complete Configuration: Click the arrow icon (at the top right of the toolkit configuration) to save the TestRail toolkit setup and return to the main Agent configuration. Click Save to apply configuration and changes to the Agent.","title":"Toolkit Configuration"},{"location":"how-tos/agents-toolkits/testrail_toolkit/#tool-overview","text":"The TestRail toolkit provides the following tools for your ELITEA Agents: Get case: get_case - Retrieves a specific test case from TestRail using its ID. Useful for reviewing details of a particular test case. Get cases: get_cases - Retrieves a list of test cases from a specified TestRail project. Useful for getting an overview of test cases within a project. Get cases by filter: get_cases_by_filter - Retrieves test cases from TestRail based on specified filter criteria, such as priority, status, or type. Useful for targeted retrieval of test cases based on specific attributes. Add case: add_case - Adds a new test case to a specified TestRail project and section. Useful for automating test case creation.","title":"Tool Overview"},{"location":"how-tos/agents-toolkits/testrail_toolkit/#instructions-and-prompts-for-using-the-toolkit","text":"To instruct your ELITEA Agent to use the TestRail toolkit, you need to provide clear instructions within the Agent's \"Instructions\" field. These instructions guide the Agent on when and how to use the available tools.","title":"Instructions and Prompts for Using the Toolkit"},{"location":"how-tos/agents-toolkits/testrail_toolkit/#instruction-creation-for-openai-agents","text":"When creating instructions for the TestRail toolkit for OpenAI-based Agents, focus on clear, action-oriented language. Break down tasks into simple steps and explicitly state the parameters required for each tool. OpenAI Agents respond best to instructions that are: Direct and Imperative: Use action verbs and clear commands (e.g., \"Use the 'get_case' tool...\", \"Add a new test case with...\"). Parameter-Focused: Clearly list each parameter and how the Agent should determine its value. Context-Aware: Provide enough context so the Agent understands the overall goal and when to use specific tools within a workflow. When instructing your Agent to use a TestRail toolkit, use this pattern: 1. Identify the goal: [State the objective, e.g., \"To retrieve details of a specific test case\"]. 2. Tool Selection: Use the \"[tool_name]\" tool. 3. Parameter Specification: Provide the following parameters: - Parameter Name 1: <value or description of value> - Parameter Name 2: <value or description of value> - ... 4. Expected Outcome: [Optionally, describe what should happen after the tool is used]. Example Agent Instructions for TestRail Toolkit Tools (OpenAI Agent Friendly): Agent Instructions for Retrieving a Specific Test Case: 1. Goal: To get the details of test case with ID 2260 from TestRail. 2. Tool: Use the \"get_case\" tool. 3. Parameters: - Case ID: \"2260\" 4. Outcome: The Agent will retrieve and display the details of test case with ID 2260. Agent Instructions for Adding a New Test Case: 1. Goal: To create a new test case in TestRail project with ID 1, section ID 5, with title \"Login Functionality Test\" and priority \"High\". 2. Tool: Use the \"add_case\" tool. 3. Parameters: - Project ID: \"1\" - Section ID: \"5\" - Title: \"Login Functionality Test\" - Case Properties (JSON format): '{\"priority_id\": 1}' (Note: priority_id 1 usually corresponds to High priority in TestRail, check your TestRail instance for specific IDs) 4. Outcome: A new test case named \"Login Functionality Test\" will be created in TestRail under project ID 1 and section ID 5 with High priority. Agent Instructions for Retrieving All Test Cases in a Project: 1. Goal: To get a list of all test cases from TestRail project with ID 2. 2. Tool: Use the \"get_cases\" tool. 3. Parameters: - Project ID: \"2\" 4. Outcome: The Agent will retrieve and display a list of all test cases in project ID 2. Agent Instructions for Retrieving Test Cases by Filter: 1. Goal: To retrieve all test cases from project ID 1 that are of \"Functional\" type and have \"High\" priority. 2. Tool: Use the \"get_cases_by_filter\" tool. 3. Parameters: - Project ID: \"1\" - Filter Arguments (JSON format): '{\"priority_id\": 1, \"type_id\": 2}' (Note: priority_id 1 for High, type_id 2 for Functional are examples, check your TestRail instance for specific IDs) 4. Outcome: The Agent will retrieve and display a list of test cases from project ID 1 that match the specified filter criteria (Functional type and High priority).","title":"Instruction Creation for OpenAI Agents"},{"location":"how-tos/agents-toolkits/testrail_toolkit/#conversation-starters","text":"Use these conversation starters to interact with your TestRail-integrated Agent. 1. For Testing and Troubleshooting Connection: These starters are designed to verify if the TestRail toolkit is correctly configured and connected to your TestRail instance. \"Get test case with ID 1.\" - This tests basic connectivity and read permissions. \"Get all test cases for project ID 1.\" - This further tests read permissions and project access. 2. For General Agent Usage Scenarios: These starters demonstrate how to initiate agent execution for common TestRail-related tasks. \"I need to review the details of test case 2260.\" - This could trigger the get_case tool. \"Create a new test case in project 1, section 5, with title 'User Registration Test' and priority 'Medium'.\" - This directly initiates the add_case tool. \"List all high priority test cases in project 2.\" - This would use the get_cases_by_filter tool. \"Get me all test cases from project 3.\" - This would use the get_cases tool. These conversation starters provide a starting point for interacting with your TestRail-integrated ELITEA Agent and can be customized further based on your specific use cases and workflows.","title":"Conversation Starters"},{"location":"how-tos/agents-toolkits/testrail_toolkit/#use-cases","text":"The TestRail toolkit unlocks numerous automation possibilities for software testing workflows within ELITEA. Here are some key use cases, demonstrating how each tool can be applied: Automated Test Case Review: Scenario: Quickly review the details of a specific test case to understand its steps, expected results, and current status. Tools Used: get_case Example Instruction: \"Use the 'get_case' tool to retrieve test case with ID 2260 and show me the details.\" Benefit: Saves time in manually searching for and opening test cases in TestRail, allowing for faster reviews and decision-making. Project Test Case Overview: Scenario: Get a comprehensive list of all test cases within a specific TestRail project to understand the testing scope and coverage. Tools Used: get_cases Example Instruction: \"Use the 'get_cases' tool to list all test cases in project ID 1 so I can get an overview of the project's test suite.\" Benefit: Provides a quick and easy way to get a high-level view of all test cases in a project, aiding in test planning and progress monitoring. Filtered Test Case Retrieval for Targeted Analysis: Scenario: Identify and retrieve test cases based on specific criteria, such as priority, status, or type, for focused analysis or reporting. Tools Used: get_cases_by_filter Example Instruction: \"Use the 'get_cases_by_filter' tool to get all 'Failed' test cases with 'High' priority in project ID 2 to prioritize bug fixing.\" Benefit: Enables targeted retrieval of test cases, allowing testers and managers to quickly focus on specific areas of interest, such as failed tests or high-priority items. Automated Test Case Creation from Requirements: Scenario: Automatically create new test cases in TestRail based on new software requirements or user stories. Tools Used: add_case Example Instruction: \"Use the 'add_case' tool to create a new test case in project ID 3, section ID 10, with title 'Data Validation Test' and priority 'Medium' based on this new requirement: [paste requirement details here].\" Benefit: Streamlines test case creation, reduces manual effort, and ensures that test cases are created promptly as requirements evolve, improving test coverage and efficiency.","title":"Use Cases"},{"location":"how-tos/agents-toolkits/testrail_toolkit/#troubleshooting-and-support","text":"","title":"Troubleshooting and Support"},{"location":"how-tos/agents-toolkits/testrail_toolkit/#troubleshooting","text":"Connection Issues: Problem: Agent fails to connect to TestRail, resulting in errors during toolkit execution. Troubleshooting Steps: Verify TestRail URL: Ensure the URL is correctly entered and points to your TestRail instance (e.g., https://yourcompany.testrail.io/ ). Check Authentication: Double-check the Email address and API Key for accuracy. API Key Generation: Re-generate a new API key in TestRail and try using that if you suspect the key might be invalid. Network Connectivity: Verify that both ELITEA and TestRail have internet access and no network issues are blocking the connection. Authorization Errors (Permission Denied): Problem: Agent receives \"Permission Denied\" or \"Unauthorized\" errors when accessing TestRail resources. Troubleshooting Steps: API Key Validity: Ensure the API key is valid and has not been revoked in TestRail. Account Permissions: Confirm that the TestRail account associated with the API key has the necessary permissions to access the specified projects and perform the requested actions (e.g., read test cases, add test cases). TestRail permissions are generally managed within TestRail itself, ensure your user role has sufficient privileges. Incorrect Project or Section IDs: Problem: Agent fails to find projects or sections, especially when adding new test cases. Troubleshooting Steps: Verify Project ID: Double-check the Project ID in your TestRail instance. You can usually find the Project ID in the URL when you are viewing a specific project in TestRail. Verify Section ID: Similarly, verify the Section ID. Section IDs are typically found in the URL when you are within a specific section of a test suite in TestRail. Ensure the Section ID is valid within the specified Project.","title":"Troubleshooting"},{"location":"how-tos/agents-toolkits/testrail_toolkit/#faq","text":"Q: Can I use my regular TestRail password instead of an API Key? A: No, for secure integration with ELITEA, you must use a TestRail API Key . Using your regular password directly is not supported and is a security risk. Q: Where do I find Project IDs and Section IDs in TestRail? A: Project IDs and Section IDs are typically visible in the URL when you navigate to a specific project or section within TestRail. For example, in the URL https://yourcompany.testrail.io/index.php?/projects/overview/1 , 1 is likely the Project ID. Similarly, when viewing a section, the URL will contain a section identifier. You can also find these IDs through TestRail's API if needed, but checking the URL is usually the easiest method. Q: What if I don't know the exact IDs for priority or type when filtering test cases? A: TestRail uses numerical IDs for various fields like priority and type. You need to find the correct IDs within your TestRail instance. Typically, you can find these IDs by inspecting the source code of the TestRail page when you are viewing or editing test cases, or by using TestRail's API to query available priorities and types. Contact your TestRail administrator if you are unsure about these IDs.","title":"FAQ"},{"location":"how-tos/agents-toolkits/testrail_toolkit/#support-contact","text":"For any issues, questions, or further assistance with the TestRail integration or ELITEA Agents, please reach out to our dedicated ELITEA Support Team. We are committed to providing prompt and effective support to ensure your success with ELITEA. Contact ELITEA Support: Email: SupportAlita@epam.com Best Practices for Effective Support Requests: To help us understand and resolve your issue as quickly as possible, please ensure you provide the following information in your support email: ELITEA Environment: Clearly specify the ELITEA environment you are using (e.g., \"Nexus,\" \"Alita Lab,\" \"EYE\"). Project Details: Indicate the Project Name and whether you are working in your Private workspace or a Team project. Detailed Issue Description: Provide a clear, concise, and detailed description of the problem you are encountering. Explain what you were trying to do, what you expected to happen, and what actually occurred. Relevant Configuration Information: To help us diagnose the issue, please include relevant configuration details, such as: Agent Instructions (Screenshot or Text): If the issue is with an Agent, provide a screenshot or copy the text of your Agent's \"Instructions\" field. Toolkit Configurations (Screenshots): If the issue involves the TestRail toolkit or other toolkits, include screenshots of the toolkit configuration settings within your Agent. Error Messages (Full Error Text): If you are encountering an error message, please provide the complete error text . In the Chat window, expand the error details and copy the full error message. This detailed error information is crucial for diagnosis. Your Query/Prompt (Exact Text): If the issue is related to Agent execution, provide the exact query or prompt you used to trigger the issue. Before Contacting Support: We encourage you to first explore the resources available within this guide and the broader ELITEA documentation. You may find answers to common questions or solutions to known issues in the documentation.","title":"Support Contact"},{"location":"how-tos/agents-toolkits/testrail_toolkit/#useful-links","text":"To further enhance your understanding and skills in integrating TestRail with ELITEA, here are some helpful resources: TestRail Website : Access the main TestRail platform to create an account or log in and explore TestRail features. TestRail API Documentation : Refer to the official TestRail API documentation for detailed information on API endpoints, data structures, and advanced usage. ELITEA Secrets : Learn how to securely store your TestRail API Key using ELITEA's Secrets management feature for enhanced security. ELITEA Agents Configuration : Find out more about creating and configuring Agents in ELITEA, where you integrate the TestRail toolkit to automate your workflows. ELITEA Support Email : Contact the ELITEA support team for direct assistance with TestRail integration or any other questions and issues you may encounter.","title":"Useful Links"},{"location":"how-tos/agents-toolkits/xray_toolkit/","text":"ELITEA Toolkit Guide: Xray Cloud Integration Introduction Purpose of this Guide This guide is your definitive resource for integrating and effectively utilizing the Xray Cloud toolkit within ELITEA. It provides a detailed, step-by-step walkthrough, from setting up your Xray Cloud API credentials to configuring the toolkit in ELITEA and seamlessly incorporating it into your Agents. By following this guide, you will unlock the power of automated test management, streamlined QA workflows, and enhanced collaboration between development and testing teams, all directly within the ELITEA platform. This integration empowers you to leverage AI-driven automation to optimize your Xray Cloud-driven workflows, enhance QA productivity, and improve software quality within your Jira projects. Brief Overview of Xray Cloud Xray Test Management for Jira Cloud is a leading test management app for Jira Cloud, developed by Xray. It provides comprehensive test management capabilities directly within your Jira Cloud environment, seamlessly integrating with Jira's issue tracking and project management features. Xray Cloud is widely used by QA teams to: Native Jira Integration for Test Management: Xray Cloud is seamlessly integrated within Jira Cloud, providing a unified platform for test management and issue tracking, allowing QA teams to manage all testing activities directly within their existing Jira environment. Centralized Test Case Management within Jira: Provides a centralized test management repository within Jira, allowing QA teams to create, organize, and manage test cases, test cycles, and test executions all within the familiar Jira interface. Efficient Test Execution and Tracking: Enables efficient test execution and real-time tracking of test runs, allowing QA teams to monitor progress, identify bottlenecks, and ensure timely test completion. Requirements Traceability and Coverage Analysis: Xray Cloud ensures traceability by linking test cases to Jira requirements and user stories, providing clear visibility into test coverage, requirement verification, and ensuring alignment between testing efforts and project goals. Detailed Reporting and Analytics: Offers robust reporting and analytics features, allowing QA teams to generate detailed reports on testing progress, quality metrics, defect trends, and test coverage, offering valuable insights for data-driven decision-making and continuous improvement. Integrating Xray Cloud with ELITEA brings these powerful test management capabilities directly into your AI-driven workflows. Your ELITEA Agents can then intelligently interact with your Xray Cloud test assets to automate test management tasks, enhance QA processes, improve test coverage analysis, and leverage AI to optimize your entire software testing lifecycle within Jira and Xray Cloud. Toolkit's Account Setup and Configuration in Xray Cloud Account Setup and Xray Cloud Integration with Jira Xray Cloud is an app for Jira and requires an active Jira Cloud instance with the Xray Test Management app installed. To set up your Xray Cloud account and integrate it with Jira Cloud, follow these steps: Access Jira Cloud Instance: Log in to your Jira Cloud instance (e.g., your-workspace.atlassian.net ) where you want to install and use Xray Cloud. You will need Jira administrator privileges to install apps. Navigate to Jira Apps Marketplace: In Jira Cloud, go to the administration menu (usually by clicking the gear icon in the top right corner) and select \"Apps\" -> \"Explore more apps\" . This will take you to the Atlassian Marketplace. Find Xray Test Management in Marketplace: In the Atlassian Marketplace, use the search bar to search for \"Xray Test Management\" or simply \"Xray\" . Select Xray App: From the search results, choose \"Xray Test Management for Jira\" (or \"Xray Test Management Cloud\"). Click on the app listing to go to the app details page. Start Free Trial or Install App: On the Xray Test Management for Jira app details page, click on the \"Try it free\" button to start a free trial or \"Get app\" to install the app if you have a paid subscription. Initiate Trial or Installation: A modal window will appear. Click on \"Start trial\" to initiate the trial period or \"Get it now\" to proceed with the installation. Verify Installation: Upon successful addition, a pop-up message will confirm that Xray Test Management has been successfully added to your Jira Cloud instance. You should now see Xray-specific options within your Jira projects. Token/API Key Generation: Creating Xray Cloud API Keys (Client ID and Client Secret) For secure integration with ELITEA, it is essential to use Xray Cloud API Keys , specifically a Client ID and Client Secret , for authentication. This method is more secure than using your primary Jira account password directly and allows you to control access permissions for ELITEA. Follow these steps to generate Xray Cloud API Keys (Client ID and Client Secret): Log in to Jira Cloud: Access your Jira Cloud instance (e.g., your-workspace.atlassian.net ) where Xray Cloud is installed and log in with your Jira Cloud credentials (you need to be a Jira administrator or have appropriate permissions to manage Xray settings). Access Xray Settings: In Jira Cloud, navigate to the top navigation bar and click on \"Apps\" . From the dropdown menu, select \"Xray\" . This will open the Xray main menu. Navigate to API Keys: In the Xray menu on the left-hand sidebar, click on \"Configure Project\" . Then, in the \"Configuration\" submenu, click on \"API Keys\" . This will take you to the API Keys management page within Xray settings. Generate API Key: On the \"API Keys\" page, you will see a section to generate new API keys. In the search box provided, enter your Jira Cloud Username (typically your email address used for Jira login). Select your username from the search results. Create API Key: After selecting your username, click the \"Generate API Key\" button. This will generate a new Client ID and Client Secret pair for your user. Securely Copy and Store Client ID and Client Secret: A pop-up window will appear displaying your newly generated Client ID and Client Secret . Immediately copy both the Client ID and Client Secret . This is the only time you will see the full Client Secret value. Store both the Client ID and Client Secret securely in a password manager or, preferably, ELITEA's built-in Secrets feature for enhanced security within ELITEA. You will need both the Client ID and Client Secret to configure the Zephyr Scale toolkit in ELITEA. Xray Configuration in Jira Configure Issue Types in Jira Project Settings for Xray To fully utilize Xray's features, you need to configure specific Issue Types in your Jira project settings. This involves adding Issue Types for \"Test\", \"Test Execution\", \"Test Set\", and \"Test Plan\" and associating appropriate icons. Download Issue Type Icons: Before adding Issue Types, download the recommended icons for Xray Issue Types. Access Icon Download Link: Open your web browser and navigate to the following URL: IssueTypeIcons . This link provides a ZIP file containing PNG images for each Xray Issue Type. Download Icons: Download the ZIP file to your local computer and extract the image files. You will use these icons to visually identify Xray Issue Types in Jira. Navigate to Jira Project Settings: In your Jira project, navigate to \"Project settings\" (usually located in the bottom left corner of the Jira project sidebar). Click on \"Project settings\" . Access Issue Types: In the Project settings menu, click on \"Issue types\" . This will take you to the Issue types configuration page for your Jira project. Add Issue Type: On the \"Issue types\" page, click on the \"Add issue type\" button, typically located at the top right corner. Select Issue Type Creation Option: In the \"Add issue type\" dropdown menu, click on \"Add issue type\" again to create a new issue type from scratch. Configure \"Test\" Issue Type: In the \"Add new issue type\" panel, configure the following for the \"Test\" Issue Type: Name: Enter \"Test\" as the name for the Issue Type. Description: Provide a brief description, such as \"Use this issue type to create test cases for software testing.\" Icon: Click on the \"Change Icon\" button. In the \"Upload icon\" modal window, click \"Upload new icon\" and upload the test.png icon file that you downloaded in Step 3.1. Click \"Upload\" to set the icon. Click \"Add\" to create the \"Test\" Issue Type. Repeat for \"Test Execution\", \"Test Set\", and \"Test Plan\" Issue Types: Repeat steps 4-6 to add the following additional Issue Types, using the corresponding downloaded icons for each: Issue Type Name: \"Test Execution\" , Icon: test-execution.png Issue Type Name: \"Test Set\" , Icon: test-set.png Issue Type Name: \"Test Plan\" , Icon: test-plan.png Ensure you upload the appropriate icon (e.g., test-execution.png for \"Test Execution\", test-set.png for \"Test Set\", and test-plan.png for \"Test Plan\") for each Issue Type when creating them. Verify Issue Types: After adding all four Issue Types (\"Test\", \"Test Execution\", \"Test Set\", \"Test Plan\"), verify that they are listed on the \"Issue types\" page in your Jira Project Settings with their corresponding icons. Configure Issue Type Mapping in Xray Settings To finalize the Xray configuration, you need to map the newly created Jira Issue Types to their corresponding Xray Issue Types within the Xray settings for your project. Navigate to Xray Settings - Issue Type Mapping: In Jira, navigate to the top navigation bar and click on \"Apps\" . From the dropdown menu, select \"Xray\" . This will open the Xray main menu. In the Xray menu on the left-hand sidebar, click on \"Configure Project\" . Then, navigate to the \"Issue Types Mapping\" section within the Xray Settings page. Map Jira Issue Types to Xray Issue Types: In the \"Issue Types Mapping\" section, use the dropdown lists to map the Jira Issue Types you created to the corresponding Xray Issue Types: Test: Select the \"Test\" Jira Issue Type you created from the dropdown list next to \"Test\". Test Execution: Select the \"Test Execution\" Jira Issue Type you created from the dropdown list next to \"Test Execution\". Test Set: Select the \"Test Set\" Jira Issue Type you created from the dropdown list next to \"Test Set\". Test Plan: Select the \"Test Plan\" Jira Issue Type you created from the dropdown list next to \"Test Plan\". Save Configuration: After mapping all the Issue Types, click the \"Save\" or \"Submit\" button (the button label may vary slightly depending on your Xray version) to save the Issue Type Mapping configuration. After completing these configuration steps, your Xray tool will be successfully set up and integrated within your Jira project. You can now proceed to configure the ELITEA Xray Cloud toolkit and start automating your test management workflows. System Integration with ELITEA Agent Creation/Configuration To integrate Xray Cloud functionalities into your workflows, you will need to configure the Xray Cloud toolkit within an ELITEA Agent. You can either create a new Agent specifically for Xray Cloud interactions or modify an existing Agent to incorporate Xray Cloud tools. Navigate to Agents Menu: In ELITEA, go to the Agents menu from the main navigation panel. Create or Edit Agent: Create a New Agent: Click on the \"+ Agent\" button to create a new Agent. Follow the on-screen prompts to define essential Agent attributes such as Agent name, a descriptive Agent description, the desired Agent type, and initial instructions for the Agent. Edit an Existing Agent: Select the Agent you intend to integrate with Xray Cloud from your list of Agents. Click on the Agent's name to open its configuration settings for editing. Access Tools Section: Within the Agent configuration interface, scroll down until you locate the \"Tools\" section. This section is where you will add and configure toolkits, including the Xray Cloud toolkit. Toolkit Configuration This section provides detailed instructions on how to configure the Xray Cloud toolkit within your ELITEA Agent. Add Toolkit: In the \"Tools\" section of the Agent configuration, click on the \"+\" icon . This action will display a dropdown list of available toolkits that can be integrated with your Agent. Select Xray Cloud Toolkit: From the dropdown list of available toolkits, choose \"Xray Cloud\" . Selecting \"Xray Cloud\" will open the \"New Xray cloud tool\" configuration panel, where you will specify the settings for your Xray Cloud integration. Configure Xray Cloud Toolkit Settings: Carefully fill in the following configuration fields within the \"New Xray cloud tool\" section: Name: Enter a descriptive Name for your Xray Cloud toolkit instance. Choose a name that is easily recognizable and helps you identify its purpose within your Agent's instructions (e.g., \"ProjectXrayCloud\", \"TestManagementAccess\", \"XrayCloudIntegration\"). Description: Provide a concise Description for the toolkit. This description should clarify the toolkit's purpose or the specific Jira project with Xray Cloud it is intended to access (e.g., \"Toolkit for accessing and managing test cases in Xray Cloud\", \"Integration for Xray Cloud in Jira Project 'Project Alpha'\"). Base URL: Enter the base URL of your Jira Cloud instance where Xray Cloud is installed. Ensure you use the correct format , including https:// or http:// and the full workspace URL (e.g., https://your-workspace.atlassian.net ). For Epam Jira, use https://jira.epam.com . Important Note: Use the base URL of your Jira Cloud instance, not the Xray Cloud-specific API endpoint. The toolkit automatically constructs the API endpoint URL. Client ID: Paste the Client ID of your registered Xray Cloud API Keys that you noted down into the \"Client ID\" field. Client Secret: Paste the Client Secret of your registered Xray Cloud API Keys that you generated in previous section into the \"Client Secret\" field. Important Security Note: For enhanced security, it is strongly recommended to use ELITEA's Secrets Management feature to store your Xray Cloud Client ID and Client Secret securely. Instead of directly pasting them into the corresponding fields, select the \"Secret\" option and choose the pre-configured secrets containing your Xray Cloud credentials from the dropdown list. This prevents hardcoding sensitive credentials in your toolkit configuration. Enable Desired Tools: In the \"Tools\" section within the Xray Cloud toolkit configuration panel, select the checkboxes next to the specific Xray Cloud tools that you want to enable for your Agent. It is crucial to enable only the tools that your Agent will actually need to use to adhere to the principle of least privilege and minimize potential security risks. Available tools include: Get tests - Retrieves a list of all tests in Xray Cloud. Create test - Allows the Agent to create new test cases in Xray Cloud. Execute custom GraphQL - Allows to send custom GraphQL requests to Xray Cloud API. Complete Setup: After configuring all the necessary settings and enabling the desired tools, click the arrow icon (located at the top right of the toolkit configuration section) to finalize the Xray Cloud toolkit setup and return to the main Agent configuration menu. Click Save in the Agent configuration to save all changes and activate the Xray Cloud toolkit integration for your Agent. Tool Overview: Xray Cloud Toolkit Functionalities Once the Xray Cloud toolkit is successfully configured and added to your Agent, you can leverage the following tools within your Agent's instructions to enable intelligent interaction with your Xray Cloud test assets: Get tests: Tool Name: get_tests Functionality: Retrieves a list of all tests (test cases) available in the specified Jira project with Xray Cloud enabled. Returns a list of test case summaries, including key information like Test Case IDs and names. Purpose: Enables Agents to quickly access and review the entire test inventory within a Jira project managed by Xray Cloud, facilitating test case discovery, reporting on test coverage, or providing users with an overview of available tests. Create test: Tool Name: create_test Functionality: Automates the creation of a new test case in Xray Cloud within a specified Jira project and test suite. Requires parameters such as Test Issue Summary (Test Case Title) and optional details like description, preconditions, and test steps (JSON format). Purpose: Streamlines test case authoring and test plan creation by enabling Agents to automatically generate new test cases in Xray Cloud directly from ELITEA workflows, based on requirements, user stories, or automated test generation processes, improving test coverage and reducing manual test case creation effort. Execute custom GraphQL: Tool Name: execute_custom_graphql Functionality: Allows sending custom GraphQL requests to Xray Cloud API. Requires a GraphQL query as a parameter. Purpose: Enables advanced users to interact with Xray Cloud API directly and perform complex data queries or actions that are not covered by other pre-built tools, providing maximum flexibility for specialized Xray Cloud integrations and data manipulation. Instructions and Prompts for Using the Xray Cloud Toolkit To effectively utilize the Xray Cloud toolkit within your ELITEA Agents, you need to provide clear and precise instructions within the Agent's \"Instructions\" field, telling the Agent how and when to use these tools. General Instruction Structure: When instructing your Agent to use an Xray Cloud tool, you will typically follow this pattern: Use the \"[tool_name]\" tool to [describe the action you want to perform] in Xray Cloud. Provide the following parameters: - Parameter 1: <value or description of value> - Parameter 2: <value or description of value> - ... Example Agent Instructions for Xray Cloud Toolkit Tools: Agent Instructions for Getting a List of Tests: Use the \"get_tests\" tool to retrieve a list of all test cases in the Xray Cloud project. Provide the following parameters: - Project Key: \"PA\" Agent Instructions for Creating a New Test Case: Use the \"create_test_case\" tool to create a new test case in Xray Cloud. Provide the following parameters: - Project Key: \"PA\" - Test Issue Summary: \"Verify User Login Functionality\" - Description: \"This test case verifies the user login functionality with valid credentials.\" - Test Steps (JSON Array): [ { \"action\": \"Open Login Page\", \"data\": \"\", \"result\": \"\" }, { \"action\": \"Enter valid username\", \"data\": \"\", \"result\": \"\" }, { \"action\": \"Enter valid password\", \"data\": \"\", \"result\": \"\" }, { \"action\": \"Click Login\", \"data\": \"\", \"result\": \"User should be logged in successfully.\" } ] Important Considerations for Agent Instructions: Tool Name Accuracy: Ensure you use the correct Tool Name (e.g., \"get_tests\" , \"create_test\" ) as listed in the \"Tool Overview\" section. Typos or incorrect tool names will prevent the Agent from using the toolkit correctly. Parameter Clarity: Clearly specify the parameters required for each tool and provide instructions on where the Agent should obtain the values for these parameters (e.g., from user input, from previous steps in the workflow, or hardcoded values). Context and Examples: Provide sufficient context and examples within your Agent's \"Instructions\" to guide the LLM in understanding when and how to use the Xray Cloud toolkit tools effectively within your desired workflow. Project Key and Test Case Keys: Ensure that you use the correct Project Keys and Test Case Keys that accurately correspond to your Jira project and Xray Cloud test assets. Incorrect keys will lead to errors or incorrect tool execution. JSON Format for Complex Parameters: For tools like \"Create Test Case\" that require complex data structures like test steps, ensure you provide the parameters in valid JSON format as specified in the tool documentation and examples. Best Practices and Use Cases for Xray Cloud Integration Best Practices for Efficient Integration Test Integration Thoroughly: After setting up the Xray Cloud toolkit and incorporating it into your Agents, thoroughly test each tool you intend to use to ensure seamless connectivity, correct authentication, and accurate execution of Xray Cloud actions. Monitor Agent Performance and Usage: Regularly monitor the performance of Agents utilizing Xray Cloud toolkits. Track metrics such as task completion success rate, execution time, and error rates to identify any potential issues or areas for optimization in Agent instructions or toolkit configurations. Follow Security Best Practices: Use API Keys: Always use Xray Cloud API Keys (Client ID and Client Secret) instead of your main Jira account password for integrations. Grant Least Privilege: While Xray Cloud API Keys have fixed scopes based on the associated Jira user, ensure you are generating tokens specifically for ELITEA integration and not reusing tokens with broader access. Securely Store Credentials: Utilize ELITEA's Secrets Management feature to securely store and manage your Xray Cloud Client ID and Client Secret instead of hardcoding them directly in Agent configurations. Provide Clear Instructions and Prompts: Craft clear and unambiguous instructions within your ELITEA Agents to guide them in using the Xray Cloud toolkit effectively. Use the prompt examples provided in this guide as a starting point and adapt them to your specific use cases. Start with Simple Use Cases: Begin by implementing Xray Cloud integration for simpler automation tasks, such as retrieving test case lists or reading test case details, and gradually progress to more complex workflows as you gain experience and confidence with the toolkit. Use Cases for Xray Cloud Toolkit Integration The Xray Cloud toolkit opens up a range of automation possibilities for test management and QA workflows within ELITEA. Here are some compelling use cases: Automated Test Case Retrieval for Test Automation Engineers: Scenario: Test automation engineers can use ELITEA Agents to quickly retrieve detailed test steps and expected results for specific test cases from Xray Cloud, providing them with the necessary information to develop automated tests based on existing manual test cases. Tools Used: get_tests Example Instruction: \"Use the 'get_test_steps' tool to retrieve the execution steps for test case with Key 'XA-12345' from Xray Cloud Project 'QA Project'. Provide the test steps in a structured format suitable for test automation script generation.\" Benefit: Streamlines test automation development by providing automation engineers with quick access to test case details, reducing the time spent manually reviewing test cases in Xray Cloud and accelerating the test automation process. Dynamic Test Case Creation from User Stories or Requirements: Scenario: When new user stories or requirements are created in Jira, automatically generate corresponding test case stubs in Xray Cloud, pre-populated with basic information extracted from the user story or requirement details, ensuring test coverage from the outset of development. Tools Used: create_test Example Instruction: \"Use the 'create_test' tool to create a new test case in Xray Cloud Project 'QA Project' and Test Suite 'New Feature Tests' with the name 'Test User Story [User Story ID]' and description based on the user story description in Jira.\" Benefit: Automates test case creation, streamlining test planning and ensuring comprehensive test coverage from the initial stages of development. Reduces manual effort in test case authoring and improves alignment between requirements and test cases. Reporting on Test Case Inventory for QA Managers: Scenario: QA managers can use ELITEA Agents to generate reports summarizing the total number of test cases and test inventory metrics from Xray Cloud, providing them with automated visibility into test assets and test coverage within ELITEA. Tools Used: get_tests Example Instruction: \"Use the 'get_tests' tool to retrieve a list of all test cases in Xray Cloud Project 'QA Project'. Generate a report summarizing the total number of test cases and present it to the QA Manager for test inventory overview.\" Benefit: Provides project managers with automated visibility into test documentation stored in Xray Cloud, improving test case management and project oversight. Troubleshooting and Support Troubleshooting Common Issues Connection Errors: Problem: ELITEA Agent fails to connect to Xray Cloud, resulting in errors during toolkit execution. Possible Solutions: Verify Jira Base URL: Double-check that you have entered the correct Jira Cloud Base URL in the toolkit configuration, including https:// or http:// and the full workspace URL (e.g., https://your-workspace.atlassian.net ). For Epam Jira, use https://jira.epam.com . Check Client ID and Client Secret: Ensure that the Client ID and Client Secret you provided are correct and valid for your Xray Cloud API Keys. Carefully re-enter or copy-paste these credentials to rule out typos. Verify Jira and Xray Cloud Availability: Confirm that both your ELITEA environment and your Jira Cloud/Xray Cloud instance are connected to the internet and that there are no service outages or connectivity issues on the Atlassian Cloud platform that might be blocking the integration. Authorization Errors (Permission Denied/Unauthorized): Problem: Agent execution fails with \"Permission Denied\" or \"Unauthorized\" errors when trying to access or modify Xray Cloud resources. Possible Solutions: Verify API Key Validity: Ensure that the Xray Cloud API Keys (Client ID and Client Secret) you are using are valid and have not been revoked in your Jira user profile settings. Generate new API Keys if necessary. Check Jira User Permissions: Confirm that the Jira user account associated with the API Keys has the necessary permissions within Jira and Xray Cloud to access the specific projects and test assets your Agent is trying to interact with. Verify user roles and permissions within Jira project and Xray Cloud settings. Project Key Accuracy: Double-check that you have entered the correct Project Key in the toolkit configuration and that the API Keys are valid for that specific Jira project with Xray Cloud enabled. Tool-Specific Parameter Errors: Problem: Agent execution fails for specific Xray Cloud tools due to incorrect parameter values or formats. Troubleshooting Steps: Verify Project Key: Ensure that you are using the correct Jira Project Key in your Agent's instructions when specifying project-related parameters for Xray Cloud tools. Project Keys are case-sensitive and must match the Project Key in Jira exactly. Verify Test Case Keys and Test Suite IDs: Double-check that you are using the correct Test Case Keys (Jira Issue Keys) and Test Suite IDs when referencing specific test assets in your Agent's instructions. Test Case Keys and Test Suite IDs are alphanumeric and must match the IDs in Xray Cloud exactly. Parameter Format: Verify that you are providing parameters in the correct format expected by each Xray Cloud tool (e.g., string values for names, numerical values for IDs, JSON format for test case data). Refer to the \"Instructions and Prompts for Using the Toolkit\" section for parameter details and examples. Jira Issue Key Format: When using Test Case Keys (Jira Issue Keys), ensure you are using the correct format (e.g., \"PA-TC-123\") and that the Issue Keys are valid and exist in your Jira project with Xray Cloud enabled. FAQs Q: Can I use my regular Jira password for the ELITEA integration with Xray Cloud? A: No, it is mandatory to use Xray Cloud API Keys (Client ID and Client Secret) instead of your main Jira account password for secure integration. API Keys provide a more secure and controlled way to grant access to external applications like ELITEA. Q: What permissions should I grant to the Xray Cloud API Keys? A: Xray Cloud API Keys inherit the permissions of the Jira user account they are associated with. Ensure that the Jira user account associated with the API Keys has the necessary permissions within Jira and Xray Cloud to access the specific projects and test assets your Agent will be interacting with. You do not need to configure specific scopes during API Key generation as permissions are managed through Jira user roles and project permissions. Q: What is the correct format for the Base URL in the Xray Cloud toolkit configuration? A: The Xray Cloud Base URL should be entered as the base URL of your Jira Cloud instance, including https:// or http:// and the full workspace URL (e.g., https://your-workspace.atlassian.net ). For Epam Jira, use https://jira.epam.com . Do not append any API endpoint paths to the Base URL. The toolkit automatically constructs the API endpoint URL. Q: How do I find the Project Key and Test Case Key for my Xray Cloud project and test cases? A: The Project Key is the standard Jira Project Key, which is typically displayed in Jira project settings and URLs. Test Case Keys (Jira Issue Keys) are the standard Jira Issue Keys assigned to test case issues in your Jira project with Xray Cloud enabled. You can find these keys in Jira issue URLs or by inspecting issue details within Jira. Q: Why is my Agent getting \"Permission Denied\" errors even though I think I have configured everything correctly? A: Double-check the API Key Validity , Jira User Permissions , Project Key Accuracy , and Base URL Accuracy as described in the Troubleshooting section. Ensure all these configurations are correct and that the Jira user account associated with the API Keys has the necessary permissions within Jira and Xray Cloud. Support and Contact Information If you encounter any issues, have questions, or require further assistance beyond what is covered in this guide regarding the Xray Cloud integration or ELITEA Agents in general, please do not hesitate to contact our dedicated ELITEA Support Team. We are here to help you resolve any problems quickly and efficiently and ensure you have a smooth and productive experience with ELITEA. How to Reach ELITEA Support: Email: SupportAlita@epam.com Best Practices for Effective Support Requests: To help us understand and resolve your issue as quickly as possible, please ensure you provide the following information in your support email: ELITEA Environment: Clearly specify the ELITEA environment you are using (e.g., \"Nexus,\" \"Alita Lab,\" \"EYE\"). Project Details: Indicate the Project Name and whether you are working in your Private workspace or a Team project. Detailed Issue Description: Provide a clear, concise, and detailed description of the problem you are encountering. Explain what you were trying to do, what you expected to happen, and what actually occurred. Relevant Configuration Information: To help us diagnose the issue, please include relevant configuration details, such as: Agent Instructions (Screenshot or Text): If the issue is with an Agent, provide a screenshot or copy the text of your Agent's \"Instructions\" field. Toolkit Configurations (Screenshots): If the issue involves the Xray Cloud toolkit or other toolkits, include screenshots of the toolkit configuration settings within your Agent. Error Messages (Full Error Text): If you are encountering an error message, please provide the complete error text . In the Chat window, expand the error details and copy the full error message. This detailed error information is crucial for diagnosis. Your Query/Prompt (Exact Text): If the issue is related to Agent execution, provide the exact query or prompt you used to trigger the issue. Before Contacting Support: We encourage you to first explore the resources available within this guide and the broader ELITEA documentation. You may find answers to common questions or solutions to known issues in the documentation. Useful Links To further enhance your understanding and skills in integrating Xray Cloud with ELITEA, here are some helpful resources: Xray Test Management for Jira Cloud Website : Access the main Xray Cloud product website for product information and documentation. Xray Cloud Documentation : Explore the official Xray Cloud documentation for detailed information on Xray Cloud features, functionalities, and API. Atlassian Jira Website : Access the main Jira product website for product information and documentation, as Xray Cloud is a Jira app. ELITEA Secrets Management : Learn how to securely store your Xray Cloud API Keys (Client ID and Client Secret) using ELITEA's Secrets management feature for enhanced security. ELITEA Agents Configuration : Find out more about creating and configuring Agents in ELITEA, where you integrate the Xray Cloud toolkit to automate your workflows. ELITEA Support Email : Contact the ELITEA support team for direct assistance with Xray Cloud integration or any other questions and issues you may encounter.","title":"XRAY Cloud Integration"},{"location":"how-tos/agents-toolkits/xray_toolkit/#elitea-toolkit-guide-xray-cloud-integration","text":"","title":"ELITEA Toolkit Guide: Xray Cloud Integration"},{"location":"how-tos/agents-toolkits/xray_toolkit/#introduction","text":"","title":"Introduction"},{"location":"how-tos/agents-toolkits/xray_toolkit/#purpose-of-this-guide","text":"This guide is your definitive resource for integrating and effectively utilizing the Xray Cloud toolkit within ELITEA. It provides a detailed, step-by-step walkthrough, from setting up your Xray Cloud API credentials to configuring the toolkit in ELITEA and seamlessly incorporating it into your Agents. By following this guide, you will unlock the power of automated test management, streamlined QA workflows, and enhanced collaboration between development and testing teams, all directly within the ELITEA platform. This integration empowers you to leverage AI-driven automation to optimize your Xray Cloud-driven workflows, enhance QA productivity, and improve software quality within your Jira projects.","title":"Purpose of this Guide"},{"location":"how-tos/agents-toolkits/xray_toolkit/#brief-overview-of-xray-cloud","text":"Xray Test Management for Jira Cloud is a leading test management app for Jira Cloud, developed by Xray. It provides comprehensive test management capabilities directly within your Jira Cloud environment, seamlessly integrating with Jira's issue tracking and project management features. Xray Cloud is widely used by QA teams to: Native Jira Integration for Test Management: Xray Cloud is seamlessly integrated within Jira Cloud, providing a unified platform for test management and issue tracking, allowing QA teams to manage all testing activities directly within their existing Jira environment. Centralized Test Case Management within Jira: Provides a centralized test management repository within Jira, allowing QA teams to create, organize, and manage test cases, test cycles, and test executions all within the familiar Jira interface. Efficient Test Execution and Tracking: Enables efficient test execution and real-time tracking of test runs, allowing QA teams to monitor progress, identify bottlenecks, and ensure timely test completion. Requirements Traceability and Coverage Analysis: Xray Cloud ensures traceability by linking test cases to Jira requirements and user stories, providing clear visibility into test coverage, requirement verification, and ensuring alignment between testing efforts and project goals. Detailed Reporting and Analytics: Offers robust reporting and analytics features, allowing QA teams to generate detailed reports on testing progress, quality metrics, defect trends, and test coverage, offering valuable insights for data-driven decision-making and continuous improvement. Integrating Xray Cloud with ELITEA brings these powerful test management capabilities directly into your AI-driven workflows. Your ELITEA Agents can then intelligently interact with your Xray Cloud test assets to automate test management tasks, enhance QA processes, improve test coverage analysis, and leverage AI to optimize your entire software testing lifecycle within Jira and Xray Cloud.","title":"Brief Overview of Xray Cloud"},{"location":"how-tos/agents-toolkits/xray_toolkit/#toolkits-account-setup-and-configuration-in-xray-cloud","text":"","title":"Toolkit's Account Setup and Configuration in Xray Cloud"},{"location":"how-tos/agents-toolkits/xray_toolkit/#account-setup-and-xray-cloud-integration-with-jira","text":"Xray Cloud is an app for Jira and requires an active Jira Cloud instance with the Xray Test Management app installed. To set up your Xray Cloud account and integrate it with Jira Cloud, follow these steps: Access Jira Cloud Instance: Log in to your Jira Cloud instance (e.g., your-workspace.atlassian.net ) where you want to install and use Xray Cloud. You will need Jira administrator privileges to install apps. Navigate to Jira Apps Marketplace: In Jira Cloud, go to the administration menu (usually by clicking the gear icon in the top right corner) and select \"Apps\" -> \"Explore more apps\" . This will take you to the Atlassian Marketplace. Find Xray Test Management in Marketplace: In the Atlassian Marketplace, use the search bar to search for \"Xray Test Management\" or simply \"Xray\" . Select Xray App: From the search results, choose \"Xray Test Management for Jira\" (or \"Xray Test Management Cloud\"). Click on the app listing to go to the app details page. Start Free Trial or Install App: On the Xray Test Management for Jira app details page, click on the \"Try it free\" button to start a free trial or \"Get app\" to install the app if you have a paid subscription. Initiate Trial or Installation: A modal window will appear. Click on \"Start trial\" to initiate the trial period or \"Get it now\" to proceed with the installation. Verify Installation: Upon successful addition, a pop-up message will confirm that Xray Test Management has been successfully added to your Jira Cloud instance. You should now see Xray-specific options within your Jira projects.","title":"Account Setup and Xray Cloud Integration with Jira"},{"location":"how-tos/agents-toolkits/xray_toolkit/#tokenapi-key-generation-creating-xray-cloud-api-keys-client-id-and-client-secret","text":"For secure integration with ELITEA, it is essential to use Xray Cloud API Keys , specifically a Client ID and Client Secret , for authentication. This method is more secure than using your primary Jira account password directly and allows you to control access permissions for ELITEA. Follow these steps to generate Xray Cloud API Keys (Client ID and Client Secret): Log in to Jira Cloud: Access your Jira Cloud instance (e.g., your-workspace.atlassian.net ) where Xray Cloud is installed and log in with your Jira Cloud credentials (you need to be a Jira administrator or have appropriate permissions to manage Xray settings). Access Xray Settings: In Jira Cloud, navigate to the top navigation bar and click on \"Apps\" . From the dropdown menu, select \"Xray\" . This will open the Xray main menu. Navigate to API Keys: In the Xray menu on the left-hand sidebar, click on \"Configure Project\" . Then, in the \"Configuration\" submenu, click on \"API Keys\" . This will take you to the API Keys management page within Xray settings. Generate API Key: On the \"API Keys\" page, you will see a section to generate new API keys. In the search box provided, enter your Jira Cloud Username (typically your email address used for Jira login). Select your username from the search results. Create API Key: After selecting your username, click the \"Generate API Key\" button. This will generate a new Client ID and Client Secret pair for your user. Securely Copy and Store Client ID and Client Secret: A pop-up window will appear displaying your newly generated Client ID and Client Secret . Immediately copy both the Client ID and Client Secret . This is the only time you will see the full Client Secret value. Store both the Client ID and Client Secret securely in a password manager or, preferably, ELITEA's built-in Secrets feature for enhanced security within ELITEA. You will need both the Client ID and Client Secret to configure the Zephyr Scale toolkit in ELITEA.","title":"Token/API Key Generation: Creating Xray Cloud API Keys (Client ID and Client Secret)"},{"location":"how-tos/agents-toolkits/xray_toolkit/#xray-configuration-in-jira","text":"","title":"Xray Configuration in Jira"},{"location":"how-tos/agents-toolkits/xray_toolkit/#configure-issue-types-in-jira-project-settings-for-xray","text":"To fully utilize Xray's features, you need to configure specific Issue Types in your Jira project settings. This involves adding Issue Types for \"Test\", \"Test Execution\", \"Test Set\", and \"Test Plan\" and associating appropriate icons. Download Issue Type Icons: Before adding Issue Types, download the recommended icons for Xray Issue Types. Access Icon Download Link: Open your web browser and navigate to the following URL: IssueTypeIcons . This link provides a ZIP file containing PNG images for each Xray Issue Type. Download Icons: Download the ZIP file to your local computer and extract the image files. You will use these icons to visually identify Xray Issue Types in Jira. Navigate to Jira Project Settings: In your Jira project, navigate to \"Project settings\" (usually located in the bottom left corner of the Jira project sidebar). Click on \"Project settings\" . Access Issue Types: In the Project settings menu, click on \"Issue types\" . This will take you to the Issue types configuration page for your Jira project. Add Issue Type: On the \"Issue types\" page, click on the \"Add issue type\" button, typically located at the top right corner. Select Issue Type Creation Option: In the \"Add issue type\" dropdown menu, click on \"Add issue type\" again to create a new issue type from scratch. Configure \"Test\" Issue Type: In the \"Add new issue type\" panel, configure the following for the \"Test\" Issue Type: Name: Enter \"Test\" as the name for the Issue Type. Description: Provide a brief description, such as \"Use this issue type to create test cases for software testing.\" Icon: Click on the \"Change Icon\" button. In the \"Upload icon\" modal window, click \"Upload new icon\" and upload the test.png icon file that you downloaded in Step 3.1. Click \"Upload\" to set the icon. Click \"Add\" to create the \"Test\" Issue Type. Repeat for \"Test Execution\", \"Test Set\", and \"Test Plan\" Issue Types: Repeat steps 4-6 to add the following additional Issue Types, using the corresponding downloaded icons for each: Issue Type Name: \"Test Execution\" , Icon: test-execution.png Issue Type Name: \"Test Set\" , Icon: test-set.png Issue Type Name: \"Test Plan\" , Icon: test-plan.png Ensure you upload the appropriate icon (e.g., test-execution.png for \"Test Execution\", test-set.png for \"Test Set\", and test-plan.png for \"Test Plan\") for each Issue Type when creating them. Verify Issue Types: After adding all four Issue Types (\"Test\", \"Test Execution\", \"Test Set\", \"Test Plan\"), verify that they are listed on the \"Issue types\" page in your Jira Project Settings with their corresponding icons.","title":"Configure Issue Types in Jira Project Settings for Xray"},{"location":"how-tos/agents-toolkits/xray_toolkit/#configure-issue-type-mapping-in-xray-settings","text":"To finalize the Xray configuration, you need to map the newly created Jira Issue Types to their corresponding Xray Issue Types within the Xray settings for your project. Navigate to Xray Settings - Issue Type Mapping: In Jira, navigate to the top navigation bar and click on \"Apps\" . From the dropdown menu, select \"Xray\" . This will open the Xray main menu. In the Xray menu on the left-hand sidebar, click on \"Configure Project\" . Then, navigate to the \"Issue Types Mapping\" section within the Xray Settings page. Map Jira Issue Types to Xray Issue Types: In the \"Issue Types Mapping\" section, use the dropdown lists to map the Jira Issue Types you created to the corresponding Xray Issue Types: Test: Select the \"Test\" Jira Issue Type you created from the dropdown list next to \"Test\". Test Execution: Select the \"Test Execution\" Jira Issue Type you created from the dropdown list next to \"Test Execution\". Test Set: Select the \"Test Set\" Jira Issue Type you created from the dropdown list next to \"Test Set\". Test Plan: Select the \"Test Plan\" Jira Issue Type you created from the dropdown list next to \"Test Plan\". Save Configuration: After mapping all the Issue Types, click the \"Save\" or \"Submit\" button (the button label may vary slightly depending on your Xray version) to save the Issue Type Mapping configuration. After completing these configuration steps, your Xray tool will be successfully set up and integrated within your Jira project. You can now proceed to configure the ELITEA Xray Cloud toolkit and start automating your test management workflows.","title":"Configure Issue Type Mapping in Xray Settings"},{"location":"how-tos/agents-toolkits/xray_toolkit/#system-integration-with-elitea","text":"","title":"System Integration with ELITEA"},{"location":"how-tos/agents-toolkits/xray_toolkit/#agent-creationconfiguration","text":"To integrate Xray Cloud functionalities into your workflows, you will need to configure the Xray Cloud toolkit within an ELITEA Agent. You can either create a new Agent specifically for Xray Cloud interactions or modify an existing Agent to incorporate Xray Cloud tools. Navigate to Agents Menu: In ELITEA, go to the Agents menu from the main navigation panel. Create or Edit Agent: Create a New Agent: Click on the \"+ Agent\" button to create a new Agent. Follow the on-screen prompts to define essential Agent attributes such as Agent name, a descriptive Agent description, the desired Agent type, and initial instructions for the Agent. Edit an Existing Agent: Select the Agent you intend to integrate with Xray Cloud from your list of Agents. Click on the Agent's name to open its configuration settings for editing. Access Tools Section: Within the Agent configuration interface, scroll down until you locate the \"Tools\" section. This section is where you will add and configure toolkits, including the Xray Cloud toolkit.","title":"Agent Creation/Configuration"},{"location":"how-tos/agents-toolkits/xray_toolkit/#toolkit-configuration","text":"This section provides detailed instructions on how to configure the Xray Cloud toolkit within your ELITEA Agent. Add Toolkit: In the \"Tools\" section of the Agent configuration, click on the \"+\" icon . This action will display a dropdown list of available toolkits that can be integrated with your Agent. Select Xray Cloud Toolkit: From the dropdown list of available toolkits, choose \"Xray Cloud\" . Selecting \"Xray Cloud\" will open the \"New Xray cloud tool\" configuration panel, where you will specify the settings for your Xray Cloud integration. Configure Xray Cloud Toolkit Settings: Carefully fill in the following configuration fields within the \"New Xray cloud tool\" section: Name: Enter a descriptive Name for your Xray Cloud toolkit instance. Choose a name that is easily recognizable and helps you identify its purpose within your Agent's instructions (e.g., \"ProjectXrayCloud\", \"TestManagementAccess\", \"XrayCloudIntegration\"). Description: Provide a concise Description for the toolkit. This description should clarify the toolkit's purpose or the specific Jira project with Xray Cloud it is intended to access (e.g., \"Toolkit for accessing and managing test cases in Xray Cloud\", \"Integration for Xray Cloud in Jira Project 'Project Alpha'\"). Base URL: Enter the base URL of your Jira Cloud instance where Xray Cloud is installed. Ensure you use the correct format , including https:// or http:// and the full workspace URL (e.g., https://your-workspace.atlassian.net ). For Epam Jira, use https://jira.epam.com . Important Note: Use the base URL of your Jira Cloud instance, not the Xray Cloud-specific API endpoint. The toolkit automatically constructs the API endpoint URL. Client ID: Paste the Client ID of your registered Xray Cloud API Keys that you noted down into the \"Client ID\" field. Client Secret: Paste the Client Secret of your registered Xray Cloud API Keys that you generated in previous section into the \"Client Secret\" field. Important Security Note: For enhanced security, it is strongly recommended to use ELITEA's Secrets Management feature to store your Xray Cloud Client ID and Client Secret securely. Instead of directly pasting them into the corresponding fields, select the \"Secret\" option and choose the pre-configured secrets containing your Xray Cloud credentials from the dropdown list. This prevents hardcoding sensitive credentials in your toolkit configuration. Enable Desired Tools: In the \"Tools\" section within the Xray Cloud toolkit configuration panel, select the checkboxes next to the specific Xray Cloud tools that you want to enable for your Agent. It is crucial to enable only the tools that your Agent will actually need to use to adhere to the principle of least privilege and minimize potential security risks. Available tools include: Get tests - Retrieves a list of all tests in Xray Cloud. Create test - Allows the Agent to create new test cases in Xray Cloud. Execute custom GraphQL - Allows to send custom GraphQL requests to Xray Cloud API. Complete Setup: After configuring all the necessary settings and enabling the desired tools, click the arrow icon (located at the top right of the toolkit configuration section) to finalize the Xray Cloud toolkit setup and return to the main Agent configuration menu. Click Save in the Agent configuration to save all changes and activate the Xray Cloud toolkit integration for your Agent.","title":"Toolkit Configuration"},{"location":"how-tos/agents-toolkits/xray_toolkit/#tool-overview-xray-cloud-toolkit-functionalities","text":"Once the Xray Cloud toolkit is successfully configured and added to your Agent, you can leverage the following tools within your Agent's instructions to enable intelligent interaction with your Xray Cloud test assets: Get tests: Tool Name: get_tests Functionality: Retrieves a list of all tests (test cases) available in the specified Jira project with Xray Cloud enabled. Returns a list of test case summaries, including key information like Test Case IDs and names. Purpose: Enables Agents to quickly access and review the entire test inventory within a Jira project managed by Xray Cloud, facilitating test case discovery, reporting on test coverage, or providing users with an overview of available tests. Create test: Tool Name: create_test Functionality: Automates the creation of a new test case in Xray Cloud within a specified Jira project and test suite. Requires parameters such as Test Issue Summary (Test Case Title) and optional details like description, preconditions, and test steps (JSON format). Purpose: Streamlines test case authoring and test plan creation by enabling Agents to automatically generate new test cases in Xray Cloud directly from ELITEA workflows, based on requirements, user stories, or automated test generation processes, improving test coverage and reducing manual test case creation effort. Execute custom GraphQL: Tool Name: execute_custom_graphql Functionality: Allows sending custom GraphQL requests to Xray Cloud API. Requires a GraphQL query as a parameter. Purpose: Enables advanced users to interact with Xray Cloud API directly and perform complex data queries or actions that are not covered by other pre-built tools, providing maximum flexibility for specialized Xray Cloud integrations and data manipulation.","title":"Tool Overview: Xray Cloud Toolkit Functionalities"},{"location":"how-tos/agents-toolkits/xray_toolkit/#instructions-and-prompts-for-using-the-xray-cloud-toolkit","text":"To effectively utilize the Xray Cloud toolkit within your ELITEA Agents, you need to provide clear and precise instructions within the Agent's \"Instructions\" field, telling the Agent how and when to use these tools. General Instruction Structure: When instructing your Agent to use an Xray Cloud tool, you will typically follow this pattern: Use the \"[tool_name]\" tool to [describe the action you want to perform] in Xray Cloud. Provide the following parameters: - Parameter 1: <value or description of value> - Parameter 2: <value or description of value> - ... Example Agent Instructions for Xray Cloud Toolkit Tools: Agent Instructions for Getting a List of Tests: Use the \"get_tests\" tool to retrieve a list of all test cases in the Xray Cloud project. Provide the following parameters: - Project Key: \"PA\" Agent Instructions for Creating a New Test Case: Use the \"create_test_case\" tool to create a new test case in Xray Cloud. Provide the following parameters: - Project Key: \"PA\" - Test Issue Summary: \"Verify User Login Functionality\" - Description: \"This test case verifies the user login functionality with valid credentials.\" - Test Steps (JSON Array): [ { \"action\": \"Open Login Page\", \"data\": \"\", \"result\": \"\" }, { \"action\": \"Enter valid username\", \"data\": \"\", \"result\": \"\" }, { \"action\": \"Enter valid password\", \"data\": \"\", \"result\": \"\" }, { \"action\": \"Click Login\", \"data\": \"\", \"result\": \"User should be logged in successfully.\" } ] Important Considerations for Agent Instructions: Tool Name Accuracy: Ensure you use the correct Tool Name (e.g., \"get_tests\" , \"create_test\" ) as listed in the \"Tool Overview\" section. Typos or incorrect tool names will prevent the Agent from using the toolkit correctly. Parameter Clarity: Clearly specify the parameters required for each tool and provide instructions on where the Agent should obtain the values for these parameters (e.g., from user input, from previous steps in the workflow, or hardcoded values). Context and Examples: Provide sufficient context and examples within your Agent's \"Instructions\" to guide the LLM in understanding when and how to use the Xray Cloud toolkit tools effectively within your desired workflow. Project Key and Test Case Keys: Ensure that you use the correct Project Keys and Test Case Keys that accurately correspond to your Jira project and Xray Cloud test assets. Incorrect keys will lead to errors or incorrect tool execution. JSON Format for Complex Parameters: For tools like \"Create Test Case\" that require complex data structures like test steps, ensure you provide the parameters in valid JSON format as specified in the tool documentation and examples.","title":"Instructions and Prompts for Using the Xray Cloud Toolkit"},{"location":"how-tos/agents-toolkits/xray_toolkit/#best-practices-and-use-cases-for-xray-cloud-integration","text":"","title":"Best Practices and Use Cases for Xray Cloud Integration"},{"location":"how-tos/agents-toolkits/xray_toolkit/#best-practices-for-efficient-integration","text":"Test Integration Thoroughly: After setting up the Xray Cloud toolkit and incorporating it into your Agents, thoroughly test each tool you intend to use to ensure seamless connectivity, correct authentication, and accurate execution of Xray Cloud actions. Monitor Agent Performance and Usage: Regularly monitor the performance of Agents utilizing Xray Cloud toolkits. Track metrics such as task completion success rate, execution time, and error rates to identify any potential issues or areas for optimization in Agent instructions or toolkit configurations. Follow Security Best Practices: Use API Keys: Always use Xray Cloud API Keys (Client ID and Client Secret) instead of your main Jira account password for integrations. Grant Least Privilege: While Xray Cloud API Keys have fixed scopes based on the associated Jira user, ensure you are generating tokens specifically for ELITEA integration and not reusing tokens with broader access. Securely Store Credentials: Utilize ELITEA's Secrets Management feature to securely store and manage your Xray Cloud Client ID and Client Secret instead of hardcoding them directly in Agent configurations. Provide Clear Instructions and Prompts: Craft clear and unambiguous instructions within your ELITEA Agents to guide them in using the Xray Cloud toolkit effectively. Use the prompt examples provided in this guide as a starting point and adapt them to your specific use cases. Start with Simple Use Cases: Begin by implementing Xray Cloud integration for simpler automation tasks, such as retrieving test case lists or reading test case details, and gradually progress to more complex workflows as you gain experience and confidence with the toolkit.","title":"Best Practices for Efficient Integration"},{"location":"how-tos/agents-toolkits/xray_toolkit/#use-cases-for-xray-cloud-toolkit-integration","text":"The Xray Cloud toolkit opens up a range of automation possibilities for test management and QA workflows within ELITEA. Here are some compelling use cases: Automated Test Case Retrieval for Test Automation Engineers: Scenario: Test automation engineers can use ELITEA Agents to quickly retrieve detailed test steps and expected results for specific test cases from Xray Cloud, providing them with the necessary information to develop automated tests based on existing manual test cases. Tools Used: get_tests Example Instruction: \"Use the 'get_test_steps' tool to retrieve the execution steps for test case with Key 'XA-12345' from Xray Cloud Project 'QA Project'. Provide the test steps in a structured format suitable for test automation script generation.\" Benefit: Streamlines test automation development by providing automation engineers with quick access to test case details, reducing the time spent manually reviewing test cases in Xray Cloud and accelerating the test automation process. Dynamic Test Case Creation from User Stories or Requirements: Scenario: When new user stories or requirements are created in Jira, automatically generate corresponding test case stubs in Xray Cloud, pre-populated with basic information extracted from the user story or requirement details, ensuring test coverage from the outset of development. Tools Used: create_test Example Instruction: \"Use the 'create_test' tool to create a new test case in Xray Cloud Project 'QA Project' and Test Suite 'New Feature Tests' with the name 'Test User Story [User Story ID]' and description based on the user story description in Jira.\" Benefit: Automates test case creation, streamlining test planning and ensuring comprehensive test coverage from the initial stages of development. Reduces manual effort in test case authoring and improves alignment between requirements and test cases. Reporting on Test Case Inventory for QA Managers: Scenario: QA managers can use ELITEA Agents to generate reports summarizing the total number of test cases and test inventory metrics from Xray Cloud, providing them with automated visibility into test assets and test coverage within ELITEA. Tools Used: get_tests Example Instruction: \"Use the 'get_tests' tool to retrieve a list of all test cases in Xray Cloud Project 'QA Project'. Generate a report summarizing the total number of test cases and present it to the QA Manager for test inventory overview.\" Benefit: Provides project managers with automated visibility into test documentation stored in Xray Cloud, improving test case management and project oversight.","title":"Use Cases for Xray Cloud Toolkit Integration"},{"location":"how-tos/agents-toolkits/xray_toolkit/#troubleshooting-and-support","text":"","title":"Troubleshooting and Support"},{"location":"how-tos/agents-toolkits/xray_toolkit/#troubleshooting-common-issues","text":"Connection Errors: Problem: ELITEA Agent fails to connect to Xray Cloud, resulting in errors during toolkit execution. Possible Solutions: Verify Jira Base URL: Double-check that you have entered the correct Jira Cloud Base URL in the toolkit configuration, including https:// or http:// and the full workspace URL (e.g., https://your-workspace.atlassian.net ). For Epam Jira, use https://jira.epam.com . Check Client ID and Client Secret: Ensure that the Client ID and Client Secret you provided are correct and valid for your Xray Cloud API Keys. Carefully re-enter or copy-paste these credentials to rule out typos. Verify Jira and Xray Cloud Availability: Confirm that both your ELITEA environment and your Jira Cloud/Xray Cloud instance are connected to the internet and that there are no service outages or connectivity issues on the Atlassian Cloud platform that might be blocking the integration. Authorization Errors (Permission Denied/Unauthorized): Problem: Agent execution fails with \"Permission Denied\" or \"Unauthorized\" errors when trying to access or modify Xray Cloud resources. Possible Solutions: Verify API Key Validity: Ensure that the Xray Cloud API Keys (Client ID and Client Secret) you are using are valid and have not been revoked in your Jira user profile settings. Generate new API Keys if necessary. Check Jira User Permissions: Confirm that the Jira user account associated with the API Keys has the necessary permissions within Jira and Xray Cloud to access the specific projects and test assets your Agent is trying to interact with. Verify user roles and permissions within Jira project and Xray Cloud settings. Project Key Accuracy: Double-check that you have entered the correct Project Key in the toolkit configuration and that the API Keys are valid for that specific Jira project with Xray Cloud enabled. Tool-Specific Parameter Errors: Problem: Agent execution fails for specific Xray Cloud tools due to incorrect parameter values or formats. Troubleshooting Steps: Verify Project Key: Ensure that you are using the correct Jira Project Key in your Agent's instructions when specifying project-related parameters for Xray Cloud tools. Project Keys are case-sensitive and must match the Project Key in Jira exactly. Verify Test Case Keys and Test Suite IDs: Double-check that you are using the correct Test Case Keys (Jira Issue Keys) and Test Suite IDs when referencing specific test assets in your Agent's instructions. Test Case Keys and Test Suite IDs are alphanumeric and must match the IDs in Xray Cloud exactly. Parameter Format: Verify that you are providing parameters in the correct format expected by each Xray Cloud tool (e.g., string values for names, numerical values for IDs, JSON format for test case data). Refer to the \"Instructions and Prompts for Using the Toolkit\" section for parameter details and examples. Jira Issue Key Format: When using Test Case Keys (Jira Issue Keys), ensure you are using the correct format (e.g., \"PA-TC-123\") and that the Issue Keys are valid and exist in your Jira project with Xray Cloud enabled.","title":"Troubleshooting Common Issues"},{"location":"how-tos/agents-toolkits/xray_toolkit/#faqs","text":"Q: Can I use my regular Jira password for the ELITEA integration with Xray Cloud? A: No, it is mandatory to use Xray Cloud API Keys (Client ID and Client Secret) instead of your main Jira account password for secure integration. API Keys provide a more secure and controlled way to grant access to external applications like ELITEA. Q: What permissions should I grant to the Xray Cloud API Keys? A: Xray Cloud API Keys inherit the permissions of the Jira user account they are associated with. Ensure that the Jira user account associated with the API Keys has the necessary permissions within Jira and Xray Cloud to access the specific projects and test assets your Agent will be interacting with. You do not need to configure specific scopes during API Key generation as permissions are managed through Jira user roles and project permissions. Q: What is the correct format for the Base URL in the Xray Cloud toolkit configuration? A: The Xray Cloud Base URL should be entered as the base URL of your Jira Cloud instance, including https:// or http:// and the full workspace URL (e.g., https://your-workspace.atlassian.net ). For Epam Jira, use https://jira.epam.com . Do not append any API endpoint paths to the Base URL. The toolkit automatically constructs the API endpoint URL. Q: How do I find the Project Key and Test Case Key for my Xray Cloud project and test cases? A: The Project Key is the standard Jira Project Key, which is typically displayed in Jira project settings and URLs. Test Case Keys (Jira Issue Keys) are the standard Jira Issue Keys assigned to test case issues in your Jira project with Xray Cloud enabled. You can find these keys in Jira issue URLs or by inspecting issue details within Jira. Q: Why is my Agent getting \"Permission Denied\" errors even though I think I have configured everything correctly? A: Double-check the API Key Validity , Jira User Permissions , Project Key Accuracy , and Base URL Accuracy as described in the Troubleshooting section. Ensure all these configurations are correct and that the Jira user account associated with the API Keys has the necessary permissions within Jira and Xray Cloud.","title":"FAQs"},{"location":"how-tos/agents-toolkits/xray_toolkit/#support-and-contact-information","text":"If you encounter any issues, have questions, or require further assistance beyond what is covered in this guide regarding the Xray Cloud integration or ELITEA Agents in general, please do not hesitate to contact our dedicated ELITEA Support Team. We are here to help you resolve any problems quickly and efficiently and ensure you have a smooth and productive experience with ELITEA. How to Reach ELITEA Support: Email: SupportAlita@epam.com Best Practices for Effective Support Requests: To help us understand and resolve your issue as quickly as possible, please ensure you provide the following information in your support email: ELITEA Environment: Clearly specify the ELITEA environment you are using (e.g., \"Nexus,\" \"Alita Lab,\" \"EYE\"). Project Details: Indicate the Project Name and whether you are working in your Private workspace or a Team project. Detailed Issue Description: Provide a clear, concise, and detailed description of the problem you are encountering. Explain what you were trying to do, what you expected to happen, and what actually occurred. Relevant Configuration Information: To help us diagnose the issue, please include relevant configuration details, such as: Agent Instructions (Screenshot or Text): If the issue is with an Agent, provide a screenshot or copy the text of your Agent's \"Instructions\" field. Toolkit Configurations (Screenshots): If the issue involves the Xray Cloud toolkit or other toolkits, include screenshots of the toolkit configuration settings within your Agent. Error Messages (Full Error Text): If you are encountering an error message, please provide the complete error text . In the Chat window, expand the error details and copy the full error message. This detailed error information is crucial for diagnosis. Your Query/Prompt (Exact Text): If the issue is related to Agent execution, provide the exact query or prompt you used to trigger the issue. Before Contacting Support: We encourage you to first explore the resources available within this guide and the broader ELITEA documentation. You may find answers to common questions or solutions to known issues in the documentation.","title":"Support and Contact Information"},{"location":"how-tos/agents-toolkits/xray_toolkit/#useful-links","text":"To further enhance your understanding and skills in integrating Xray Cloud with ELITEA, here are some helpful resources: Xray Test Management for Jira Cloud Website : Access the main Xray Cloud product website for product information and documentation. Xray Cloud Documentation : Explore the official Xray Cloud documentation for detailed information on Xray Cloud features, functionalities, and API. Atlassian Jira Website : Access the main Jira product website for product information and documentation, as Xray Cloud is a Jira app. ELITEA Secrets Management : Learn how to securely store your Xray Cloud API Keys (Client ID and Client Secret) using ELITEA's Secrets management feature for enhanced security. ELITEA Agents Configuration : Find out more about creating and configuring Agents in ELITEA, where you integrate the Xray Cloud toolkit to automate your workflows. ELITEA Support Email : Contact the ELITEA support team for direct assistance with Xray Cloud integration or any other questions and issues you may encounter.","title":"Useful Links"},{"location":"how-tos/agents-toolkits/zephyr_scale_toolkit/","text":"ELITEA Toolkit Guide: Zephyr Scale Integration Introduction Purpose of this Guide This guide is your definitive resource for integrating and effectively utilizing the Zephyr Scale toolkit within ELITEA. It provides a detailed, step-by-step walkthrough, from setting up your Zephyr Scale API token to configuring the toolkit in ELITEA and seamlessly incorporating it into your Agents. By following this guide, you will unlock the power of automated test management, streamlined QA workflows, and enhanced collaboration between development and testing teams, all directly within the ELITEA platform. This integration empowers you to leverage AI-driven automation to optimize your Zephyr Scale-driven workflows, enhance QA productivity, and improve software quality within your projects. Brief Overview of Zephyr Scale Zephyr Scale, by SmartBear, is a leading test management application for Jira, designed to provide comprehensive test management capabilities directly within the Jira environment. It is widely used by QA teams to plan, organize, execute, and track software testing efforts seamlessly integrated with their Jira projects. Zephyr Scale offers a wide array of functionalities, including: Native Jira Integration: Zephyr Scale is built natively within Jira, providing seamless integration with Jira projects, issues, and workflows, allowing QA teams to manage testing activities directly within their existing Jira environment. Centralized Test Management within Jira: Provides a centralized test management repository within Jira, allowing QA teams to create, organize, and manage test cases, test cycles, and test executions all within the familiar Jira interface. Comprehensive Test Planning and Execution: Enables efficient test planning, test suite creation, test cycle management, and structured test execution, supporting various testing methodologies and ensuring organized and traceable testing processes. Real-time Test Tracking and Reporting: Offers real-time test execution tracking, progress dashboards, and customizable reports, providing QA teams and stakeholders with up-to-date visibility into testing progress, test results, and quality metrics, facilitating data-driven decision-making. Traceability and Requirements Coverage: Zephyr Scale ensures traceability by linking test cases to Jira requirements and user stories, providing clear visibility into test coverage, requirement verification, and ensuring alignment between testing efforts and project goals. Integrating Zephyr Scale with ELITEA brings these powerful test management capabilities directly into your AI-driven workflows. Your ELITEA Agents can then intelligently interact with your Zephyr Scale test assets to automate test management tasks, enhance QA processes, improve test coverage analysis, and leverage AI to optimize your entire software testing lifecycle within Zephyr Scale. Toolkit's Account Setup and Configuration in Zephyr Scale Account Setup and Zephyr Scale Integration with Jira Zephyr Scale is an app for Jira and requires an active Jira instance with the Zephyr Scale app installed. To set up your Zephyr Scale account and integrate it with Jira, follow these steps: Access Jira Instance: Log in to your Jira instance (Cloud or Server/Data Center) where you want to install and use Zephyr Scale. You will need Jira administrator privileges to install apps. Navigate to Jira Administration - Apps: In Jira, go to the administration menu (usually by clicking the gear icon in the top right corner) and select \"Apps\" . Find Zephyr Scale in Marketplace: In the Atlassian Marketplace, search for \"Zephyr Scale\" . Install Zephyr Scale: Locate the \"Zephyr Scale - Test Management for Jira\" app (or \"Zephyr Scale Cloud\" for Jira Cloud) and click on \"Get app\" or \"Try it free\" to start the installation process. Add to Jira: Follow the prompts to add the Zephyr Scale app to your Jira instance. You may need to accept terms and conditions and confirm the installation. Verify Installation: Once the installation is complete, you should see a confirmation message indicating that Zephyr Scale has been added to Jira. You can typically access Zephyr Scale features within your Jira projects under the \"Zephyr Scale\" menu item in the project sidebar. Access Zephyr Scale within Jira Project: Navigate to a Jira project where you want to use Zephyr Scale. You should now see Zephyr Scale-specific options in the project sidebar, such as \"Test Cases\", \"Test Cycles\", \"Test Plans\", and \"Reports\". Token/API Key Generation: Creating a Zephyr Scale API Access Token For secure integration with ELITEA, it is essential to use a Zephyr Scale API Access Token . This method is more secure than using your primary Jira account password directly and allows you to control access permissions for ELITEA. Follow these steps to generate a Zephyr Scale API Access Token: Log in to Jira: Access your Jira instance (Cloud or Server/Data Center) where Zephyr Scale is installed and log in with your Jira credentials. Access User Profile Settings: Click on your profile avatar in the top right corner of the Jira interface. From the dropdown menu, select \"Profile\" or \"Personal settings\" . Navigate to Zephyr Scale API Access Tokens: In your profile settings, look for a section related to Zephyr Scale API access tokens. This is often labeled as \"Zephyr Scale API Access Tokens\" or similar. You may need to scroll down or navigate through tabs within your profile settings to find this section. Create Access Token: In the \"Zephyr Scale API Access Tokens\" section, click on \"Create Access Token\" or a similar button to generate a new API token. Name Your Token: In the \"Create Access Token\" dialog, enter a descriptive Label for your token, such as \"ELITEA Integration Token\" or \"ELITEA Agent Access.\" This label will help you identify the purpose of this token later. Create Token: Click the \"Create\" or \"Generate\" button to create the API token. Securely Copy and Store Your API Token: Immediately copy the generated API token that is displayed in the pop-up window. This is the only time you will see the full token value. Store it securely in a password manager or, preferably, ELITEA's built-in Secrets feature for enhanced security within ELITEA. You will need this API token to configure the Zephyr Scale toolkit in ELITEA. System Integration with ELITEA Agent Creation/Configuration To integrate Zephyr Scale functionalities into your workflows, you will need to configure the Zephyr Scale toolkit within an ELITEA Agent. You can either create a new Agent specifically for Zephyr Scale interactions or modify an existing Agent to incorporate Zephyr Scale tools. Navigate to Agents Menu: In ELITEA, go to the Agents menu from the main navigation panel. Create or Edit Agent: Create a New Agent: Click on the \"+ Agent\" button to create a new Agent. Follow the on-screen prompts to define essential Agent attributes such as Agent name, a descriptive Agent description, the desired Agent type, and initial instructions for the Agent. Edit an Existing Agent: Select the Agent you intend to integrate with Zephyr Scale from your list of Agents. Click on the Agent's name to open its configuration settings for editing. Access Tools Section: Within the Agent configuration interface, scroll down until you locate the \"Tools\" section. This section is where you will add and configure toolkits, including the Zephyr Scale toolkit. Toolkit Configuration This section provides detailed instructions on how to configure the Zephyr Scale toolkit within your ELITEA Agent. Add Toolkit: In the \"Tools\" section of the Agent configuration, click on the \"+\" icon . This action will display a dropdown list of available toolkits that can be integrated with your Agent. Select Zephyr Scale Toolkit: From the dropdown list of available toolkits, choose \"Zephyr Scale\" . Selecting \"Zephyr Scale\" will open the \"New Zephyr_Scale tool\" configuration panel, where you will specify the settings for your Zephyr Scale integration. Configure Zephyr Scale Toolkit Settings: Carefully fill in the following configuration fields within the \"New Zephyr_Scale tool\" section: Name: Enter a descriptive Name for your Zephyr Scale toolkit instance. Choose a name that is easily recognizable and helps you identify its purpose within your Agent's instructions (e.g., \"ProjectZephyrScale\", \"TestManagementAccess\", \"ZephyrScaleIntegration\"). Description: Provide a concise Description for the toolkit. This description should clarify the toolkit's purpose or the specific Zephyr Scale project it is intended to access (e.g., \"Toolkit for accessing and managing test cases in Zephyr Scale\", \"Integration for Zephyr Scale Project 'Project Alpha'\"). Base URL: Enter the base URL of your Jira instance where Zephyr Scale is installed. Ensure you use the correct format , including https:// or http:// and the full workspace URL (e.g., https://your-workspace.atlassian.net/jira ). For Epam Jira, use https://jira.epam.com/jira/ . Important Note: Use the base URL of your Jira instance, not the Zephyr Scale-specific API endpoint. The toolkit automatically constructs the API endpoint URL. API Token: In the \"API token\" field, paste the API token you generated in Zephyr Scale (during the \"Software-Specific Setup\" section of this guide) into the \"API token\" field. Enhanced Security with Secrets (Recommended): For enhanced security, it is strongly recommended to use ELITEA's Secrets Management feature to store your Zephyr Scale API token securely. Instead of directly pasting the token into the \"API token\" field, select the \"Secret\" option and choose the pre-configured secret containing your Zephyr Scale API token from the dropdown list. This prevents hardcoding sensitive credentials in your toolkit configuration. Project Key: Enter the Project Key of the specific Jira project in which Zephyr Scale is enabled and that you want to access with this toolkit. The Project Key is a unique identifier for your Jira project (e.g., \"PA\" for \"Project Alpha\"). You can typically find the Project Key in your Jira project settings or in the URL when you are within your Jira project. Enable Desired Tools: In the \"Tools\" section within the Zephyr Scale toolkit configuration panel, select the checkboxes next to the specific Zephyr Scale tools that you want to enable for your Agent. It is crucial to enable only the tools that your Agent will actually need to use to adhere to the principle of least privilege and minimize potential security risks. Available tools include: Get Tests - Retrieves a list of all tests in Zephyr Scale. Get Test - Retrieves detailed information about a specific test case in Zephyr Scale. Get Test Steps - Retrieves the steps associated with a specific test case in Zephyr Scale. Create Test Case - Allows the Agent to create new test cases in Zephyr Scale. Generic request - Allows to send custom HTTP requests to Zephyr Scale API. Complete Setup: After configuring all the necessary settings and enabling the desired tools, click the arrow icon (typically located at the top right of the toolkit configuration section) to finalize the Zephyr Scale toolkit setup and return to the main Agent configuration menu. Click Save in the Agent configuration to save all changes and activate the Zephyr Scale toolkit integration for your Agent. Tool Overview: Zephyr Scale Toolkit Functionalities Once the Zephyr Scale toolkit is successfully configured and added to your Agent, you can leverage the following tools within your Agent's instructions to enable intelligent interaction with your Zephyr Scale test assets: Get Tests: Tool Name: get_tests Functionality: Retrieves a list of all tests (test cases) available in the specified Zephyr Scale project. Returns a list of test case summaries, including key information like Test Case IDs and names. Purpose: Enables Agents to quickly access and review the entire test inventory within a Zephyr Scale project, facilitating test case discovery, reporting on test coverage, or providing users with an overview of available tests. Get Test: Tool Name: get_test Functionality: Retrieves detailed information about a specific test case in Zephyr Scale, identified by its Test Case ID. Returns comprehensive test case details, including steps, attachments, and custom fields. Purpose: Allows Agents to access in-depth information for specific test cases, enabling retrieval of test steps for test execution guidance, providing context for test analysis, or incorporating detailed test case information into ELITEA workflows and reports. Get Test Steps: Tool Name: get_test_steps Functionality: Retrieves the execution steps associated with a specific test case in Zephyr Scale, identified by its Test Case ID. Returns a structured list of test steps, including actions, expected results, and step-level data. Purpose: Enables Agents to access and analyze the detailed steps of test cases, facilitating automated test execution analysis, providing testers with step-by-step guidance during manual testing, or incorporating test step information into test documentation and reports. Create Test Case: Tool Name: create_test_case Functionality: Automates the creation of a new test case in Zephyr Scale within a specified project and test suite. Requires parameters such as Test Case Name, Test Suite ID, and optional details like description and steps. Purpose: Streamlines test case authoring and test plan creation by enabling Agents to automatically generate new test cases in Zephyr Scale directly from ELITEA workflows, based on requirements, user stories, or automated test generation processes, improving test coverage and reducing manual test case creation effort. Instructions and Prompts for Using the Zephyr Scale Toolkit To effectively utilize the Zephyr Scale toolkit within your ELITEA Agents, you need to provide clear and precise instructions within the Agent's \"Instructions\" field, telling the Agent how and when to use these tools. General Instruction Structure: When instructing your Agent to use a Zephyr Scale tool, you will typically follow this pattern: Use the \"[tool_name]\" tool to [describe the action you want to perform] in Zephyr Scale. Provide the following parameters: - Parameter 1: <value or description of value> - Parameter 2: <value or description of value> - ... Example Agent Instructions for Zephyr Scale Toolkit Tools: Agent Instructions for Getting a List of Tests: Use the \"get_tests\" tool to retrieve a list of all test cases in the Zephyr Scale project. Provide the following parameters: - Project Key: \"PA\" Agent Instructions for Getting a Specific Test Case: Use the \"get_test\" tool to retrieve detailed information for a specific test case from Zephyr Scale. Provide the following parameters: - Project Key: \"PA\" - Test Case ID: \"TC-123\" Agent Instructions for Creating a New Test Case: Use the \"create_test_case\" tool to create a new test case in Zephyr Scale. Provide the following parameters: - Project Key: \"PA\" - Test Suite ID: \"456\" - Test Case Name: \"Verify User Login Functionality\" - Test Case Description: \"This test case verifies the user login functionality with valid credentials.\" Important Considerations for Agent Instructions: Tool Name Accuracy: Ensure you use the correct Tool Name (e.g., \"get_tests\" , \"get_test\" , \"create_test_case\" ) as listed in the \"Tool Overview\" section. Typos or incorrect tool names will prevent the Agent from using the toolkit correctly. Parameter Clarity: Clearly specify the parameters required for each tool and provide instructions on where the Agent should obtain the values for these parameters (e.g., from user input, from previous steps in the workflow, or hardcoded values). Context and Examples: Provide sufficient context and examples within your Agent's \"Instructions\" to guide the LLM in understanding when and how to use the Zephyr Scale toolkit tools effectively within your desired workflow. Project Key and Test Case IDs: Ensure that you use the correct Project Keys and Test Case IDs that accurately correspond to your Zephyr Scale project and test assets. Incorrect IDs will lead to errors or incorrect tool execution. Best Practices and Use Cases for Zephyr Scale Integration Best Practices for Efficient Integration Test Integration Thoroughly: After setting up the Zephyr Scale toolkit and incorporating it into your Agents, thoroughly test each tool you intend to use to ensure seamless connectivity, correct authentication, and accurate execution of Zephyr Scale actions. Monitor Agent Performance and Usage: Regularly monitor the performance of Agents utilizing Zephyr Scale toolkits. Track metrics such as task completion success rate, execution time, and error rates to identify any potential issues or areas for optimization in Agent instructions or toolkit configurations. Follow Security Best Practices: Use API Tokens: Always use Zephyr Scale API tokens instead of your main account password for integrations. Grant Least Privilege: While Zephyr Scale API tokens have limited scope control, ensure you are generating tokens specifically for ELITEA integration and not reusing tokens with broader access. Securely Store Credentials: Utilize ELITEA's Secrets Management feature to securely store and manage your Zephyr Scale API tokens instead of hardcoding them directly in Agent configurations. Provide Clear Instructions and Prompts: Craft clear and unambiguous instructions within your ELITEA Agents to guide them in using the Zephyr Scale toolkit effectively. Use the prompt examples provided in this guide as a starting point and adapt them to your specific use cases. Start with Simple Use Cases: Begin by implementing Zephyr Scale integration for simpler automation tasks, such as retrieving test case lists or reading test case details, and gradually progress to more complex workflows as you gain experience and confidence with the toolkit. Use Cases for Zephyr Scale Toolkit Integration The Zephyr Scale toolkit opens up a wide range of automation possibilities for test management and QA workflows within ELITEA. Here are some compelling use cases: Automated Test Case Documentation Retrieval for Testers: Scenario: Testers can use ELITEA Agents to quickly retrieve detailed test steps and expected results for specific test cases from Zephyr Scale, providing them with immediate access to test execution guidance during manual testing. Tools Used: get_test , get_test_steps Example Instruction: \"Use the 'get_test_steps' tool to retrieve the execution steps for test case with ID 'TC-78901' from Zephyr Scale Project 'Project Beta'. Display the steps to the tester to guide test execution.\" Benefit: Improves tester efficiency by providing instant access to test case details and steps directly within ELITEA, streamlining manual test execution, reducing context switching, and ensuring testers have all necessary information at their fingertips. Dynamic Test Case Creation from Requirements or User Stories: Scenario: When new requirements or user stories are created in ELITEA or linked systems, automatically generate corresponding test case stubs in Zephyr Scale, pre-populated with basic information extracted from the requirements, streamlining test planning and ensuring test coverage from the outset. Tools Used: create_test_case Example Instruction: \"Use the 'create_test_case' tool to create a new test case in Zephyr Scale Project 'Project Gamma' and Test Suite 'New Feature Test Suite' with the name 'Test User Story [User Story ID]' and description based on the user story details provided in ELITEA.\" Benefit: Automates test case creation, streamlining test planning and ensuring comprehensive test coverage from the initial stages of development. Reduces manual effort in test case authoring and improves alignment between requirements and test cases. Automated Test Case Updates Based on Test Automation Results: Scenario: After automated test execution within ELITEA workflows, automatically update the status and results of corresponding test cases in Zephyr Scale to reflect the automated test outcomes, providing real-time test execution status updates in qTest. Tools Used: update_test_case Example Instruction: \"Use the 'update_test_case' tool to update test case with ID 'TC-34567' in Zephyr Scale Project 'Project Delta'. Set the 'Status' field to 'Pass' if the automated test execution in ELITEA workflow was successful, or set 'Status' to 'Fail' and update the 'Comment' field with the error logs if the test failed.\" Benefit: Automates test result reporting and test case status updates in qTest, ensuring test results are automatically reflected in the test management system, improving test reporting accuracy and reducing manual effort in updating test case statuses. Reporting on Test Coverage and Inventory for QA Managers: Scenario: QA managers can use ELITEA Agents to generate reports summarizing the total number of test cases, test coverage by module, or other test inventory metrics from Zephyr Scale, providing them with automated visibility into test assets and test coverage within ELITEA. Tools Used: get_tests Example Instruction: \"Use the 'get_tests' tool to retrieve a list of all test cases in Zephyr Scale Project 'Project Epsilon'. Generate a report summarizing the total number of test cases, the number of test cases per test suite, and the test case coverage for each module based on test case names or labels. Send the report to the QA Manager on a weekly basis.\" Benefit: Enables automated test reporting and analysis, providing QA managers and stakeholders with real-time visibility into test inventory, test coverage, and test metrics directly within ELITEA, improving test management and reporting efficiency. Troubleshooting and Support Troubleshooting Common Issues Connection Errors: Problem: ELITEA Agent fails to connect to Zephyr Scale, resulting in errors during toolkit execution. Possible Solutions: Verify Zephyr Scale Base URL: Double-check that you have entered the correct Zephyr Scale Base URL in the toolkit configuration, including https:// or http:// and ensuring it points to the API endpoint of your Zephyr Scale instance (e.g., https://your-workspace.atlassian.net/jira ). Important Note: Use the base URL of your Jira instance, not the Zephyr Scale-specific API endpoint. Check API Token: Ensure that the API Token you provided is correct and valid for your Zephyr Scale account and project. Carefully re-enter or copy-paste the token to rule out typos. Verify Project Key: Double-check that you have entered the correct Project Key for your Zephyr Scale project in the toolkit configuration. Ensure the Project Key is a valid key for an existing Zephyr Scale project within your Jira instance. Network Connectivity: Confirm that both your ELITEA environment and your Jira/Zephyr Scale instance are connected to the internet and that there are no network connectivity issues blocking the integration. Authorization Errors (Permission Denied/Unauthorized): Problem: Agent execution fails with \"Permission Denied\" or \"Unauthorized\" errors when trying to access or modify Zephyr Scale resources. Possible Solutions: Verify API Token Validity: Ensure that the Zephyr Scale API token you are using is valid and has not been revoked in your Jira user profile settings. Generate a new token if necessary. Check Jira User Permissions: Confirm that the Jira user account associated with the API token has the necessary permissions within Jira and Zephyr Scale to access and modify the specific projects and test assets your Agent is trying to interact with. Verify user roles and permissions within Jira project and Zephyr Scale settings. Project Key Accuracy: Double-check that you have entered the correct Project Key in the toolkit configuration and that the API token is valid for that specific Zephyr Scale project. Tool-Specific Parameter Errors: Problem: Agent execution fails for specific Zephyr Scale tools due to incorrect parameter values or formats. Troubleshooting Steps: Verify Project Key: Ensure that you are using the correct Zephyr Scale Project Key in your Agent's instructions when specifying project-related parameters for Zephyr Scale tools. Project Keys are case-sensitive and must match the Project Key in Jira/Zephyr Scale exactly. Verify Test Case and Test Suite IDs: Double-check that you are using the correct Test Case IDs and Test Suite IDs when referencing specific test assets in your Agent's instructions. Test Case and Test Suite IDs are numerical and must match the IDs in Zephyr Scale exactly. Parameter Format: Verify that you are providing parameters in the correct format expected by each Zephyr Scale tool (e.g., string values for names, numerical values for IDs, JSON format for test case data). Refer to the \"Instructions and Prompts for Using the Toolkit\" section for parameter details and examples. FAQs Q: Can I use my regular Jira password for the ELITEA integration with Zephyr Scale? A: No, it is mandatory to use a Zephyr Scale API token for secure integration with ELITEA. Direct password authentication is not supported. API tokens provide a more secure and controlled way to grant access to external applications like ELITEA. Q: What permissions should I grant to the Zephyr Scale API Token? A: Zephyr Scale API tokens inherit the permissions of the Jira user account they are associated with. Ensure that the Jira user account associated with the API token has the necessary permissions within Jira and Zephyr Scale to access and modify the specific projects and test assets your Agent will be interacting with. You do not need to configure specific scopes during token generation as permissions are managed through Jira user roles and project permissions. Q: What is the correct format for the Zephyr Scale Base URL in the toolkit configuration? A: The Zephyr Scale Base URL should be entered as the base URL of your Jira instance, including https:// or http:// and the full workspace URL (e.g., https://your-workspace.atlassian.net/jira or https://your-company.atlassian.net ). For Epam Jira, use https://jira.epam.com/jira/ . Do not append /api/v1 or any other API endpoint path to the Base URL. The toolkit automatically constructs the API endpoint URL. Q: How do I find the Project Key for my Zephyr Scale project? A: The Project Key is a unique identifier for your Jira project where Zephyr Scale is enabled. You can typically find the Project Key in your Jira project settings or in the URL when you are within your Jira project. It is usually a short string of uppercase letters (e.g., \"PA\", \"PROJECTX\"). Q: Why is my Agent getting \"Permission Denied\" errors even though I think I have configured everything correctly? A: Double-check the following: API Token Validity: Ensure that the API token is valid and has not been revoked. Jira User Permissions: Verify that the Jira user account associated with the API token has the necessary permissions within Jira and Zephyr Scale to access the specific projects and test assets your Agent is trying to use. Project Key Accuracy: Double-check that you have entered the correct Project Key in the toolkit configuration and that it corresponds to the Zephyr Scale project you intend to access. Base URL Accuracy: Ensure that the Base URL is correctly entered and points to the base URL of your Jira instance. Hosting Option: Double-check that you have selected the correct \"Hosting option\" (Cloud or Server) in the Jira toolkit configuration, especially for self-hosted or Epam Jira instances. Support and Contact Information If you encounter any issues, have questions, or require further assistance beyond what is covered in this guide regarding the Zephyr Scale integration or ELITEA Agents in general, please do not hesitate to contact our dedicated ELITEA Support Team. We are here to help you resolve any problems quickly and efficiently and ensure you have a smooth and productive experience with ELITEA. How to Reach ELITEA Support: Email: SupportAlita@epam.com Best Practices for Effective Support Requests: To help us understand and resolve your issue as quickly as possible, please ensure you provide the following information in your support email: ELITEA Environment: Clearly specify the ELITEA environment you are using (e.g., \"Nexus,\" \"Alita Lab,\" \"EYE\"). Project Details: Indicate the Project Name and whether you are working in your Private workspace or a Team project. Detailed Issue Description: Provide a clear, concise, and detailed description of the problem you are encountering. Explain what you were trying to do, what you expected to happen, and what actually occurred. Relevant Configuration Information: To help us diagnose the issue, please include relevant configuration details, such as: Agent Instructions (Screenshot or Text): If the issue is with an Agent, provide a screenshot or copy the text of your Agent's \"Instructions\" field. Toolkit Configurations (Screenshots): If the issue involves the Zephyr Scale toolkit or other toolkits, include screenshots of the toolkit configuration settings within your Agent. Error Messages (Full Error Text): If you are encountering an error message, please provide the complete error text . In the Chat window, expand the error details and copy the full error message. This detailed error information is crucial for diagnosis. Your Query/Prompt (Exact Text): If the issue is related to Agent execution, provide the exact query or prompt you used to trigger the issue. Before Contacting Support: We encourage you to first explore the resources available within this guide and the broader ELITEA documentation. You may find answers to common questions or solutions to known issues in the documentation. Useful Links To further enhance your understanding and skills in integrating Zephyr Scale with ELITEA, here are some helpful resources: Tricentis Zephyr Scale Website : Access the main Zephyr Scale product website for product information and documentation. Zephyr Scale Documentation : Explore the official Zephyr Scale documentation for detailed information on Zephyr Scale features, functionalities, and API. Atlassian Jira Website : Access the main Jira product website for product information and documentation, as Zephyr Scale is a Jira app. ELITEA Secrets Management : Learn how to securely store your Zephyr Scale API Token using ELITEA's Secrets management feature for enhanced security. ELITEA Agents Configuration : Find out more about creating and configuring Agents in ELITEA, where you integrate the Zephyr Scale toolkit to automate your workflows. ELITEA Support Email : Contact the ELITEA support team for direct assistance with Zephyr Scale integration or any other questions and issues you may encounter.","title":"Zephyr Scale Integration"},{"location":"how-tos/agents-toolkits/zephyr_scale_toolkit/#elitea-toolkit-guide-zephyr-scale-integration","text":"","title":"ELITEA Toolkit Guide: Zephyr Scale Integration"},{"location":"how-tos/agents-toolkits/zephyr_scale_toolkit/#introduction","text":"","title":"Introduction"},{"location":"how-tos/agents-toolkits/zephyr_scale_toolkit/#purpose-of-this-guide","text":"This guide is your definitive resource for integrating and effectively utilizing the Zephyr Scale toolkit within ELITEA. It provides a detailed, step-by-step walkthrough, from setting up your Zephyr Scale API token to configuring the toolkit in ELITEA and seamlessly incorporating it into your Agents. By following this guide, you will unlock the power of automated test management, streamlined QA workflows, and enhanced collaboration between development and testing teams, all directly within the ELITEA platform. This integration empowers you to leverage AI-driven automation to optimize your Zephyr Scale-driven workflows, enhance QA productivity, and improve software quality within your projects.","title":"Purpose of this Guide"},{"location":"how-tos/agents-toolkits/zephyr_scale_toolkit/#brief-overview-of-zephyr-scale","text":"Zephyr Scale, by SmartBear, is a leading test management application for Jira, designed to provide comprehensive test management capabilities directly within the Jira environment. It is widely used by QA teams to plan, organize, execute, and track software testing efforts seamlessly integrated with their Jira projects. Zephyr Scale offers a wide array of functionalities, including: Native Jira Integration: Zephyr Scale is built natively within Jira, providing seamless integration with Jira projects, issues, and workflows, allowing QA teams to manage testing activities directly within their existing Jira environment. Centralized Test Management within Jira: Provides a centralized test management repository within Jira, allowing QA teams to create, organize, and manage test cases, test cycles, and test executions all within the familiar Jira interface. Comprehensive Test Planning and Execution: Enables efficient test planning, test suite creation, test cycle management, and structured test execution, supporting various testing methodologies and ensuring organized and traceable testing processes. Real-time Test Tracking and Reporting: Offers real-time test execution tracking, progress dashboards, and customizable reports, providing QA teams and stakeholders with up-to-date visibility into testing progress, test results, and quality metrics, facilitating data-driven decision-making. Traceability and Requirements Coverage: Zephyr Scale ensures traceability by linking test cases to Jira requirements and user stories, providing clear visibility into test coverage, requirement verification, and ensuring alignment between testing efforts and project goals. Integrating Zephyr Scale with ELITEA brings these powerful test management capabilities directly into your AI-driven workflows. Your ELITEA Agents can then intelligently interact with your Zephyr Scale test assets to automate test management tasks, enhance QA processes, improve test coverage analysis, and leverage AI to optimize your entire software testing lifecycle within Zephyr Scale.","title":"Brief Overview of Zephyr Scale"},{"location":"how-tos/agents-toolkits/zephyr_scale_toolkit/#toolkits-account-setup-and-configuration-in-zephyr-scale","text":"","title":"Toolkit's Account Setup and Configuration in Zephyr Scale"},{"location":"how-tos/agents-toolkits/zephyr_scale_toolkit/#account-setup-and-zephyr-scale-integration-with-jira","text":"Zephyr Scale is an app for Jira and requires an active Jira instance with the Zephyr Scale app installed. To set up your Zephyr Scale account and integrate it with Jira, follow these steps: Access Jira Instance: Log in to your Jira instance (Cloud or Server/Data Center) where you want to install and use Zephyr Scale. You will need Jira administrator privileges to install apps. Navigate to Jira Administration - Apps: In Jira, go to the administration menu (usually by clicking the gear icon in the top right corner) and select \"Apps\" . Find Zephyr Scale in Marketplace: In the Atlassian Marketplace, search for \"Zephyr Scale\" . Install Zephyr Scale: Locate the \"Zephyr Scale - Test Management for Jira\" app (or \"Zephyr Scale Cloud\" for Jira Cloud) and click on \"Get app\" or \"Try it free\" to start the installation process. Add to Jira: Follow the prompts to add the Zephyr Scale app to your Jira instance. You may need to accept terms and conditions and confirm the installation. Verify Installation: Once the installation is complete, you should see a confirmation message indicating that Zephyr Scale has been added to Jira. You can typically access Zephyr Scale features within your Jira projects under the \"Zephyr Scale\" menu item in the project sidebar. Access Zephyr Scale within Jira Project: Navigate to a Jira project where you want to use Zephyr Scale. You should now see Zephyr Scale-specific options in the project sidebar, such as \"Test Cases\", \"Test Cycles\", \"Test Plans\", and \"Reports\".","title":"Account Setup and Zephyr Scale Integration with Jira"},{"location":"how-tos/agents-toolkits/zephyr_scale_toolkit/#tokenapi-key-generation-creating-a-zephyr-scale-api-access-token","text":"For secure integration with ELITEA, it is essential to use a Zephyr Scale API Access Token . This method is more secure than using your primary Jira account password directly and allows you to control access permissions for ELITEA. Follow these steps to generate a Zephyr Scale API Access Token: Log in to Jira: Access your Jira instance (Cloud or Server/Data Center) where Zephyr Scale is installed and log in with your Jira credentials. Access User Profile Settings: Click on your profile avatar in the top right corner of the Jira interface. From the dropdown menu, select \"Profile\" or \"Personal settings\" . Navigate to Zephyr Scale API Access Tokens: In your profile settings, look for a section related to Zephyr Scale API access tokens. This is often labeled as \"Zephyr Scale API Access Tokens\" or similar. You may need to scroll down or navigate through tabs within your profile settings to find this section. Create Access Token: In the \"Zephyr Scale API Access Tokens\" section, click on \"Create Access Token\" or a similar button to generate a new API token. Name Your Token: In the \"Create Access Token\" dialog, enter a descriptive Label for your token, such as \"ELITEA Integration Token\" or \"ELITEA Agent Access.\" This label will help you identify the purpose of this token later. Create Token: Click the \"Create\" or \"Generate\" button to create the API token. Securely Copy and Store Your API Token: Immediately copy the generated API token that is displayed in the pop-up window. This is the only time you will see the full token value. Store it securely in a password manager or, preferably, ELITEA's built-in Secrets feature for enhanced security within ELITEA. You will need this API token to configure the Zephyr Scale toolkit in ELITEA.","title":"Token/API Key Generation: Creating a Zephyr Scale API Access Token"},{"location":"how-tos/agents-toolkits/zephyr_scale_toolkit/#system-integration-with-elitea","text":"","title":"System Integration with ELITEA"},{"location":"how-tos/agents-toolkits/zephyr_scale_toolkit/#agent-creationconfiguration","text":"To integrate Zephyr Scale functionalities into your workflows, you will need to configure the Zephyr Scale toolkit within an ELITEA Agent. You can either create a new Agent specifically for Zephyr Scale interactions or modify an existing Agent to incorporate Zephyr Scale tools. Navigate to Agents Menu: In ELITEA, go to the Agents menu from the main navigation panel. Create or Edit Agent: Create a New Agent: Click on the \"+ Agent\" button to create a new Agent. Follow the on-screen prompts to define essential Agent attributes such as Agent name, a descriptive Agent description, the desired Agent type, and initial instructions for the Agent. Edit an Existing Agent: Select the Agent you intend to integrate with Zephyr Scale from your list of Agents. Click on the Agent's name to open its configuration settings for editing. Access Tools Section: Within the Agent configuration interface, scroll down until you locate the \"Tools\" section. This section is where you will add and configure toolkits, including the Zephyr Scale toolkit.","title":"Agent Creation/Configuration"},{"location":"how-tos/agents-toolkits/zephyr_scale_toolkit/#toolkit-configuration","text":"This section provides detailed instructions on how to configure the Zephyr Scale toolkit within your ELITEA Agent. Add Toolkit: In the \"Tools\" section of the Agent configuration, click on the \"+\" icon . This action will display a dropdown list of available toolkits that can be integrated with your Agent. Select Zephyr Scale Toolkit: From the dropdown list of available toolkits, choose \"Zephyr Scale\" . Selecting \"Zephyr Scale\" will open the \"New Zephyr_Scale tool\" configuration panel, where you will specify the settings for your Zephyr Scale integration. Configure Zephyr Scale Toolkit Settings: Carefully fill in the following configuration fields within the \"New Zephyr_Scale tool\" section: Name: Enter a descriptive Name for your Zephyr Scale toolkit instance. Choose a name that is easily recognizable and helps you identify its purpose within your Agent's instructions (e.g., \"ProjectZephyrScale\", \"TestManagementAccess\", \"ZephyrScaleIntegration\"). Description: Provide a concise Description for the toolkit. This description should clarify the toolkit's purpose or the specific Zephyr Scale project it is intended to access (e.g., \"Toolkit for accessing and managing test cases in Zephyr Scale\", \"Integration for Zephyr Scale Project 'Project Alpha'\"). Base URL: Enter the base URL of your Jira instance where Zephyr Scale is installed. Ensure you use the correct format , including https:// or http:// and the full workspace URL (e.g., https://your-workspace.atlassian.net/jira ). For Epam Jira, use https://jira.epam.com/jira/ . Important Note: Use the base URL of your Jira instance, not the Zephyr Scale-specific API endpoint. The toolkit automatically constructs the API endpoint URL. API Token: In the \"API token\" field, paste the API token you generated in Zephyr Scale (during the \"Software-Specific Setup\" section of this guide) into the \"API token\" field. Enhanced Security with Secrets (Recommended): For enhanced security, it is strongly recommended to use ELITEA's Secrets Management feature to store your Zephyr Scale API token securely. Instead of directly pasting the token into the \"API token\" field, select the \"Secret\" option and choose the pre-configured secret containing your Zephyr Scale API token from the dropdown list. This prevents hardcoding sensitive credentials in your toolkit configuration. Project Key: Enter the Project Key of the specific Jira project in which Zephyr Scale is enabled and that you want to access with this toolkit. The Project Key is a unique identifier for your Jira project (e.g., \"PA\" for \"Project Alpha\"). You can typically find the Project Key in your Jira project settings or in the URL when you are within your Jira project. Enable Desired Tools: In the \"Tools\" section within the Zephyr Scale toolkit configuration panel, select the checkboxes next to the specific Zephyr Scale tools that you want to enable for your Agent. It is crucial to enable only the tools that your Agent will actually need to use to adhere to the principle of least privilege and minimize potential security risks. Available tools include: Get Tests - Retrieves a list of all tests in Zephyr Scale. Get Test - Retrieves detailed information about a specific test case in Zephyr Scale. Get Test Steps - Retrieves the steps associated with a specific test case in Zephyr Scale. Create Test Case - Allows the Agent to create new test cases in Zephyr Scale. Generic request - Allows to send custom HTTP requests to Zephyr Scale API. Complete Setup: After configuring all the necessary settings and enabling the desired tools, click the arrow icon (typically located at the top right of the toolkit configuration section) to finalize the Zephyr Scale toolkit setup and return to the main Agent configuration menu. Click Save in the Agent configuration to save all changes and activate the Zephyr Scale toolkit integration for your Agent.","title":"Toolkit Configuration"},{"location":"how-tos/agents-toolkits/zephyr_scale_toolkit/#tool-overview-zephyr-scale-toolkit-functionalities","text":"Once the Zephyr Scale toolkit is successfully configured and added to your Agent, you can leverage the following tools within your Agent's instructions to enable intelligent interaction with your Zephyr Scale test assets: Get Tests: Tool Name: get_tests Functionality: Retrieves a list of all tests (test cases) available in the specified Zephyr Scale project. Returns a list of test case summaries, including key information like Test Case IDs and names. Purpose: Enables Agents to quickly access and review the entire test inventory within a Zephyr Scale project, facilitating test case discovery, reporting on test coverage, or providing users with an overview of available tests. Get Test: Tool Name: get_test Functionality: Retrieves detailed information about a specific test case in Zephyr Scale, identified by its Test Case ID. Returns comprehensive test case details, including steps, attachments, and custom fields. Purpose: Allows Agents to access in-depth information for specific test cases, enabling retrieval of test steps for test execution guidance, providing context for test analysis, or incorporating detailed test case information into ELITEA workflows and reports. Get Test Steps: Tool Name: get_test_steps Functionality: Retrieves the execution steps associated with a specific test case in Zephyr Scale, identified by its Test Case ID. Returns a structured list of test steps, including actions, expected results, and step-level data. Purpose: Enables Agents to access and analyze the detailed steps of test cases, facilitating automated test execution analysis, providing testers with step-by-step guidance during manual testing, or incorporating test step information into test documentation and reports. Create Test Case: Tool Name: create_test_case Functionality: Automates the creation of a new test case in Zephyr Scale within a specified project and test suite. Requires parameters such as Test Case Name, Test Suite ID, and optional details like description and steps. Purpose: Streamlines test case authoring and test plan creation by enabling Agents to automatically generate new test cases in Zephyr Scale directly from ELITEA workflows, based on requirements, user stories, or automated test generation processes, improving test coverage and reducing manual test case creation effort.","title":"Tool Overview: Zephyr Scale Toolkit Functionalities"},{"location":"how-tos/agents-toolkits/zephyr_scale_toolkit/#instructions-and-prompts-for-using-the-zephyr-scale-toolkit","text":"To effectively utilize the Zephyr Scale toolkit within your ELITEA Agents, you need to provide clear and precise instructions within the Agent's \"Instructions\" field, telling the Agent how and when to use these tools. General Instruction Structure: When instructing your Agent to use a Zephyr Scale tool, you will typically follow this pattern: Use the \"[tool_name]\" tool to [describe the action you want to perform] in Zephyr Scale. Provide the following parameters: - Parameter 1: <value or description of value> - Parameter 2: <value or description of value> - ... Example Agent Instructions for Zephyr Scale Toolkit Tools: Agent Instructions for Getting a List of Tests: Use the \"get_tests\" tool to retrieve a list of all test cases in the Zephyr Scale project. Provide the following parameters: - Project Key: \"PA\" Agent Instructions for Getting a Specific Test Case: Use the \"get_test\" tool to retrieve detailed information for a specific test case from Zephyr Scale. Provide the following parameters: - Project Key: \"PA\" - Test Case ID: \"TC-123\" Agent Instructions for Creating a New Test Case: Use the \"create_test_case\" tool to create a new test case in Zephyr Scale. Provide the following parameters: - Project Key: \"PA\" - Test Suite ID: \"456\" - Test Case Name: \"Verify User Login Functionality\" - Test Case Description: \"This test case verifies the user login functionality with valid credentials.\" Important Considerations for Agent Instructions: Tool Name Accuracy: Ensure you use the correct Tool Name (e.g., \"get_tests\" , \"get_test\" , \"create_test_case\" ) as listed in the \"Tool Overview\" section. Typos or incorrect tool names will prevent the Agent from using the toolkit correctly. Parameter Clarity: Clearly specify the parameters required for each tool and provide instructions on where the Agent should obtain the values for these parameters (e.g., from user input, from previous steps in the workflow, or hardcoded values). Context and Examples: Provide sufficient context and examples within your Agent's \"Instructions\" to guide the LLM in understanding when and how to use the Zephyr Scale toolkit tools effectively within your desired workflow. Project Key and Test Case IDs: Ensure that you use the correct Project Keys and Test Case IDs that accurately correspond to your Zephyr Scale project and test assets. Incorrect IDs will lead to errors or incorrect tool execution.","title":"Instructions and Prompts for Using the Zephyr Scale Toolkit"},{"location":"how-tos/agents-toolkits/zephyr_scale_toolkit/#best-practices-and-use-cases-for-zephyr-scale-integration","text":"","title":"Best Practices and Use Cases for Zephyr Scale Integration"},{"location":"how-tos/agents-toolkits/zephyr_scale_toolkit/#best-practices-for-efficient-integration","text":"Test Integration Thoroughly: After setting up the Zephyr Scale toolkit and incorporating it into your Agents, thoroughly test each tool you intend to use to ensure seamless connectivity, correct authentication, and accurate execution of Zephyr Scale actions. Monitor Agent Performance and Usage: Regularly monitor the performance of Agents utilizing Zephyr Scale toolkits. Track metrics such as task completion success rate, execution time, and error rates to identify any potential issues or areas for optimization in Agent instructions or toolkit configurations. Follow Security Best Practices: Use API Tokens: Always use Zephyr Scale API tokens instead of your main account password for integrations. Grant Least Privilege: While Zephyr Scale API tokens have limited scope control, ensure you are generating tokens specifically for ELITEA integration and not reusing tokens with broader access. Securely Store Credentials: Utilize ELITEA's Secrets Management feature to securely store and manage your Zephyr Scale API tokens instead of hardcoding them directly in Agent configurations. Provide Clear Instructions and Prompts: Craft clear and unambiguous instructions within your ELITEA Agents to guide them in using the Zephyr Scale toolkit effectively. Use the prompt examples provided in this guide as a starting point and adapt them to your specific use cases. Start with Simple Use Cases: Begin by implementing Zephyr Scale integration for simpler automation tasks, such as retrieving test case lists or reading test case details, and gradually progress to more complex workflows as you gain experience and confidence with the toolkit.","title":"Best Practices for Efficient Integration"},{"location":"how-tos/agents-toolkits/zephyr_scale_toolkit/#use-cases-for-zephyr-scale-toolkit-integration","text":"The Zephyr Scale toolkit opens up a wide range of automation possibilities for test management and QA workflows within ELITEA. Here are some compelling use cases: Automated Test Case Documentation Retrieval for Testers: Scenario: Testers can use ELITEA Agents to quickly retrieve detailed test steps and expected results for specific test cases from Zephyr Scale, providing them with immediate access to test execution guidance during manual testing. Tools Used: get_test , get_test_steps Example Instruction: \"Use the 'get_test_steps' tool to retrieve the execution steps for test case with ID 'TC-78901' from Zephyr Scale Project 'Project Beta'. Display the steps to the tester to guide test execution.\" Benefit: Improves tester efficiency by providing instant access to test case details and steps directly within ELITEA, streamlining manual test execution, reducing context switching, and ensuring testers have all necessary information at their fingertips. Dynamic Test Case Creation from Requirements or User Stories: Scenario: When new requirements or user stories are created in ELITEA or linked systems, automatically generate corresponding test case stubs in Zephyr Scale, pre-populated with basic information extracted from the requirements, streamlining test planning and ensuring test coverage from the outset. Tools Used: create_test_case Example Instruction: \"Use the 'create_test_case' tool to create a new test case in Zephyr Scale Project 'Project Gamma' and Test Suite 'New Feature Test Suite' with the name 'Test User Story [User Story ID]' and description based on the user story details provided in ELITEA.\" Benefit: Automates test case creation, streamlining test planning and ensuring comprehensive test coverage from the initial stages of development. Reduces manual effort in test case authoring and improves alignment between requirements and test cases. Automated Test Case Updates Based on Test Automation Results: Scenario: After automated test execution within ELITEA workflows, automatically update the status and results of corresponding test cases in Zephyr Scale to reflect the automated test outcomes, providing real-time test execution status updates in qTest. Tools Used: update_test_case Example Instruction: \"Use the 'update_test_case' tool to update test case with ID 'TC-34567' in Zephyr Scale Project 'Project Delta'. Set the 'Status' field to 'Pass' if the automated test execution in ELITEA workflow was successful, or set 'Status' to 'Fail' and update the 'Comment' field with the error logs if the test failed.\" Benefit: Automates test result reporting and test case status updates in qTest, ensuring test results are automatically reflected in the test management system, improving test reporting accuracy and reducing manual effort in updating test case statuses. Reporting on Test Coverage and Inventory for QA Managers: Scenario: QA managers can use ELITEA Agents to generate reports summarizing the total number of test cases, test coverage by module, or other test inventory metrics from Zephyr Scale, providing them with automated visibility into test assets and test coverage within ELITEA. Tools Used: get_tests Example Instruction: \"Use the 'get_tests' tool to retrieve a list of all test cases in Zephyr Scale Project 'Project Epsilon'. Generate a report summarizing the total number of test cases, the number of test cases per test suite, and the test case coverage for each module based on test case names or labels. Send the report to the QA Manager on a weekly basis.\" Benefit: Enables automated test reporting and analysis, providing QA managers and stakeholders with real-time visibility into test inventory, test coverage, and test metrics directly within ELITEA, improving test management and reporting efficiency.","title":"Use Cases for Zephyr Scale Toolkit Integration"},{"location":"how-tos/agents-toolkits/zephyr_scale_toolkit/#troubleshooting-and-support","text":"","title":"Troubleshooting and Support"},{"location":"how-tos/agents-toolkits/zephyr_scale_toolkit/#troubleshooting-common-issues","text":"Connection Errors: Problem: ELITEA Agent fails to connect to Zephyr Scale, resulting in errors during toolkit execution. Possible Solutions: Verify Zephyr Scale Base URL: Double-check that you have entered the correct Zephyr Scale Base URL in the toolkit configuration, including https:// or http:// and ensuring it points to the API endpoint of your Zephyr Scale instance (e.g., https://your-workspace.atlassian.net/jira ). Important Note: Use the base URL of your Jira instance, not the Zephyr Scale-specific API endpoint. Check API Token: Ensure that the API Token you provided is correct and valid for your Zephyr Scale account and project. Carefully re-enter or copy-paste the token to rule out typos. Verify Project Key: Double-check that you have entered the correct Project Key for your Zephyr Scale project in the toolkit configuration. Ensure the Project Key is a valid key for an existing Zephyr Scale project within your Jira instance. Network Connectivity: Confirm that both your ELITEA environment and your Jira/Zephyr Scale instance are connected to the internet and that there are no network connectivity issues blocking the integration. Authorization Errors (Permission Denied/Unauthorized): Problem: Agent execution fails with \"Permission Denied\" or \"Unauthorized\" errors when trying to access or modify Zephyr Scale resources. Possible Solutions: Verify API Token Validity: Ensure that the Zephyr Scale API token you are using is valid and has not been revoked in your Jira user profile settings. Generate a new token if necessary. Check Jira User Permissions: Confirm that the Jira user account associated with the API token has the necessary permissions within Jira and Zephyr Scale to access and modify the specific projects and test assets your Agent is trying to interact with. Verify user roles and permissions within Jira project and Zephyr Scale settings. Project Key Accuracy: Double-check that you have entered the correct Project Key in the toolkit configuration and that the API token is valid for that specific Zephyr Scale project. Tool-Specific Parameter Errors: Problem: Agent execution fails for specific Zephyr Scale tools due to incorrect parameter values or formats. Troubleshooting Steps: Verify Project Key: Ensure that you are using the correct Zephyr Scale Project Key in your Agent's instructions when specifying project-related parameters for Zephyr Scale tools. Project Keys are case-sensitive and must match the Project Key in Jira/Zephyr Scale exactly. Verify Test Case and Test Suite IDs: Double-check that you are using the correct Test Case IDs and Test Suite IDs when referencing specific test assets in your Agent's instructions. Test Case and Test Suite IDs are numerical and must match the IDs in Zephyr Scale exactly. Parameter Format: Verify that you are providing parameters in the correct format expected by each Zephyr Scale tool (e.g., string values for names, numerical values for IDs, JSON format for test case data). Refer to the \"Instructions and Prompts for Using the Toolkit\" section for parameter details and examples.","title":"Troubleshooting Common Issues"},{"location":"how-tos/agents-toolkits/zephyr_scale_toolkit/#faqs","text":"Q: Can I use my regular Jira password for the ELITEA integration with Zephyr Scale? A: No, it is mandatory to use a Zephyr Scale API token for secure integration with ELITEA. Direct password authentication is not supported. API tokens provide a more secure and controlled way to grant access to external applications like ELITEA. Q: What permissions should I grant to the Zephyr Scale API Token? A: Zephyr Scale API tokens inherit the permissions of the Jira user account they are associated with. Ensure that the Jira user account associated with the API token has the necessary permissions within Jira and Zephyr Scale to access and modify the specific projects and test assets your Agent will be interacting with. You do not need to configure specific scopes during token generation as permissions are managed through Jira user roles and project permissions. Q: What is the correct format for the Zephyr Scale Base URL in the toolkit configuration? A: The Zephyr Scale Base URL should be entered as the base URL of your Jira instance, including https:// or http:// and the full workspace URL (e.g., https://your-workspace.atlassian.net/jira or https://your-company.atlassian.net ). For Epam Jira, use https://jira.epam.com/jira/ . Do not append /api/v1 or any other API endpoint path to the Base URL. The toolkit automatically constructs the API endpoint URL. Q: How do I find the Project Key for my Zephyr Scale project? A: The Project Key is a unique identifier for your Jira project where Zephyr Scale is enabled. You can typically find the Project Key in your Jira project settings or in the URL when you are within your Jira project. It is usually a short string of uppercase letters (e.g., \"PA\", \"PROJECTX\"). Q: Why is my Agent getting \"Permission Denied\" errors even though I think I have configured everything correctly? A: Double-check the following: API Token Validity: Ensure that the API token is valid and has not been revoked. Jira User Permissions: Verify that the Jira user account associated with the API token has the necessary permissions within Jira and Zephyr Scale to access the specific projects and test assets your Agent is trying to use. Project Key Accuracy: Double-check that you have entered the correct Project Key in the toolkit configuration and that it corresponds to the Zephyr Scale project you intend to access. Base URL Accuracy: Ensure that the Base URL is correctly entered and points to the base URL of your Jira instance. Hosting Option: Double-check that you have selected the correct \"Hosting option\" (Cloud or Server) in the Jira toolkit configuration, especially for self-hosted or Epam Jira instances.","title":"FAQs"},{"location":"how-tos/agents-toolkits/zephyr_scale_toolkit/#support-and-contact-information","text":"If you encounter any issues, have questions, or require further assistance beyond what is covered in this guide regarding the Zephyr Scale integration or ELITEA Agents in general, please do not hesitate to contact our dedicated ELITEA Support Team. We are here to help you resolve any problems quickly and efficiently and ensure you have a smooth and productive experience with ELITEA. How to Reach ELITEA Support: Email: SupportAlita@epam.com Best Practices for Effective Support Requests: To help us understand and resolve your issue as quickly as possible, please ensure you provide the following information in your support email: ELITEA Environment: Clearly specify the ELITEA environment you are using (e.g., \"Nexus,\" \"Alita Lab,\" \"EYE\"). Project Details: Indicate the Project Name and whether you are working in your Private workspace or a Team project. Detailed Issue Description: Provide a clear, concise, and detailed description of the problem you are encountering. Explain what you were trying to do, what you expected to happen, and what actually occurred. Relevant Configuration Information: To help us diagnose the issue, please include relevant configuration details, such as: Agent Instructions (Screenshot or Text): If the issue is with an Agent, provide a screenshot or copy the text of your Agent's \"Instructions\" field. Toolkit Configurations (Screenshots): If the issue involves the Zephyr Scale toolkit or other toolkits, include screenshots of the toolkit configuration settings within your Agent. Error Messages (Full Error Text): If you are encountering an error message, please provide the complete error text . In the Chat window, expand the error details and copy the full error message. This detailed error information is crucial for diagnosis. Your Query/Prompt (Exact Text): If the issue is related to Agent execution, provide the exact query or prompt you used to trigger the issue. Before Contacting Support: We encourage you to first explore the resources available within this guide and the broader ELITEA documentation. You may find answers to common questions or solutions to known issues in the documentation.","title":"Support and Contact Information"},{"location":"how-tos/agents-toolkits/zephyr_scale_toolkit/#useful-links","text":"To further enhance your understanding and skills in integrating Zephyr Scale with ELITEA, here are some helpful resources: Tricentis Zephyr Scale Website : Access the main Zephyr Scale product website for product information and documentation. Zephyr Scale Documentation : Explore the official Zephyr Scale documentation for detailed information on Zephyr Scale features, functionalities, and API. Atlassian Jira Website : Access the main Jira product website for product information and documentation, as Zephyr Scale is a Jira app. ELITEA Secrets Management : Learn how to securely store your Zephyr Scale API Token using ELITEA's Secrets management feature for enhanced security. ELITEA Agents Configuration : Find out more about creating and configuring Agents in ELITEA, where you integrate the Zephyr Scale toolkit to automate your workflows. ELITEA Support Email : Contact the ELITEA support team for direct assistance with Zephyr Scale integration or any other questions and issues you may encounter.","title":"Useful Links"},{"location":"platform-documentation/extensions/alita-chat/","text":"Alita Code Chat Alita Code Chat for VSCode and IntelliJ is an auxiliary GUI for Alita Code, you can utilize the functionality of Alita Code and you can also chat with ELITEA HUB. Pre-requisite Alita Code Chat operates in conjunction with Alita Code for both VS Code and IntelliJ. To utilize Alita Code Chat, you must first install Alita Code from their respective marketplaces: VS Code : Install Alita Code from the VS Code Marketplace. IntelliJ : Install AlitaCode from the JetBrains Marketplace. Important : Ensure that Alita Code is not only installed but also properly configured with ELITEA HUB to function correctly. For detailed installation and configuration instructions, please refer to the Alita Code documentation . This step is crucial for enabling the full capabilities of Alita Code Chat within your development environment. Features list: Chat with ELITEA directly. It will use the model settings set by Alita Code extension. Type trigger chat to add participants to chat: / for prompt, # for datasources and @ for agents. Note : Alita Code Chat doesn't support Chat History, in case of restarting VS Code or IntelliJ, the Chat History will be cleaned. Alita Code Chat for VS code Alita Code Chat is a visual studio extension to work as chatting companion using Alita Code. Installation Getting started with Alita Code Chat is straightforward: Navigate to the Extensions section in VS Code. Search for Alita Code Chat in the Marketplace and click Install . Note : After successful installation Alita Code Chat shortcut will be added to left menu of VS Code. Alita Code Chat Usage With Alita Code Chat set up, you can now: Prompts - call and use prompts configured in ELITEA HUB. Datasources - call and use datasources configured in ELITEA HUB. Agents - call and use agents configured in ELITEA HUB. Chat - is a specific type of input designed for conversational AI models, which aims to initiate or guide a dialogue. This can be in the form of a question, statement, or command that simulates human-like interaction, prompting the AI to produce a conversational response for engagement. Important: To successfully call and utilize prompts, datasources, or agents from ELITEA HUB, it is essential that these items are tagged with code in ELITEA HUB. This tag ensures that the resources are correctly categorized and accessible. Ensure that the code tag is applied to relevant prompts, datasources, and agents to enable their proper functionality within the ELITEA ecosystem. Additional Interaction Features: Auto scroll to bottom : This option can be toggled on or off to automatically scroll to the bottom of the output as it is being generated. This feature is helpful during long outputs to keep the most recent content visible. Reload Alita Code Settings : This option allows to reload and update Alita Code settings. Stop generating : To stop generation of output. Post-Output Actions: Continue the Dialogue : To keep the conversation going, simply type your next question or command in the chat box and click the Send icon. Copy the Output : Click the Copy to clipboard icon to copy the generated text for use elsewhere. Delete Output : To remove the current output from the chat, click the Delete icon. Purge Chat History : For a fresh start or to clear sensitive data, click the Clean icon to erase the chat history. Specialized Download Options for Tabular outputs. When the Gen AI generates output in a tabular format, additional options become available to manage and utilize this structured data: Download as xlsx : Allows you to save the tabular output directly in an Excel spreadsheet format, facilitating easy data manipulation and analysis. Copy as markdown : Enables copying the tabular output in markdown format, suitable for use in markdown-supported environments like GitHub or blogging platforms. Copy as html : Permits copying the tabular output in HTML format, ideal for integration into web pages or emails, preserving the formatting and structure. Prompts To call and use Prompts from ELITEA HUB: Open the Alita Code Chat. Type / in the chat box. Select the prompt that you want to run. Version Selection : Prompts may have multiple versions. Ensure you select the appropriate version from the dropdown list as different versions may vary in functionality and variables. Variable Management : If the selected prompt version includes variables, a dialog will appear allowing you to input or modify the values. Prepopulated values might be present, or you may need to provide your own. Ensure that all required variables are correctly filled to execute the prompt accurately. You can adjust or update variable values at any time by clicking the Settings icon. Once all instructions for the prompt are set in the Context and/or Messages sections, you can start the execution by typing your text (be it a question or a command) into the chat box. Use simple commands like \"Go\", \"Start Generating\", \"Execute\", or \"Run it\" and click the Send icon to begin. These commands signal the Gen AI to process the information and generate the desired output based on the configured settings. If you need to start a fresh conversation or prompt, simply click the X icon to clear the current setup and begin anew. Datasources To call and use Datasources from ELITEA HUB: Open the Alita Code Chat. Type # in the chat box. Select the datasource that you want to run. Start conversation in the form of a question, statement, or command that simulates human-like interaction . If you need to start a fresh conversation or datasource, simply click the X icon to clear the current setup and begin anew. Agents To call and use Agents from ELITEA HUB: Open the Alita Code Chat. Type @ in the chat box. Select the prompt that you want to run. Version Selection : Agents may have multiple versions. Ensure you select the appropriate version from the dropdown list as different versions may vary in functionality and variables. Variable Management : If the selected agent version includes variables, a dialog will appear allowing you to input or modify the values. Prepopulated values might be present, or you may need to provide your own. Ensure that all required variables are correctly filled to execute the agent accurately. You can adjust or update variable values at any time by clicking the Settings icon. Start conversation in the form of a question, statement, or command that simulates human-like interaction . If you need to start a fresh conversation or application, simply click the X icon to clear the current setup and begin anew. Chat Open the AlitaCodeChat. Start conversation in the form of a question, statement, or command that simulates human-like interaction . AlitaCodeChat for IntelliJ AlitaCodeChat is an IntelliJ plugin to work as chatting companion using AlitaCode. Installation Getting started with AlitaCodeChat is straightforward: Navigate to the Settings \u2192 Plugins section in IntelliJ. Search for AlitaCodeChat in the Marketplace and click Install . Alita Chat for IntelliJ offers two distinct modes to cater to different user preferences and integration styles. Each mode is designed to provide a seamless user experience while aligning with specific design philosophies: Native Mode : This mode is tailored to blend seamlessly with the IntelliJ environment. It adheres to the native design and style guidelines of IntelliJ, ensuring that the interface feels familiar and integrated for users who prefer consistency with their development environment. React Mode : Designed to echo the aesthetics and usability of ELITEA, this mode brings the distinctive look and feel of ELITEA's design language into IntelliJ. It's ideal for users who enjoy the ELITEA interface and wish to have a similar user experience within the IntelliJ platform. Both modes are crafted to provide a robust and intuitive chat interface, allowing users to choose according to their design preference and familiarity. Note : After successful installation AlitaCodeChat shortcut will be added to right menu of IntelliJ. To ensure seamless integration and functionality, the Alita Code and AlitaCodeChat plugins must be installed with matching versions. Please verify that both plugins are updated to the same version to avoid compatibility issues. To successfully call and utilize prompts, datasources, or agents from ELITEA HUB, it is essential that these items are tagged with code in ELITEA HUB. This tag ensures that the resources are correctly categorized and accessible. Ensure that the code tag is applied to relevant prompts, datasources, and applications to enable their proper functionality within the ELITEA ecosystem. AlitaCodeChat Usage Prompts To call and use Prompts from ELITEA HUB: Open the AlitaCodeChat. Select the React or Native tab. Type / in the chat box. Select the prompt that you want to run. Version Selection : Prompts may have multiple versions. Ensure you select the appropriate version from the dropdown list as different versions may vary in functionality and variables. Variable Management : If the selected prompt version includes variables, a dialog will appear allowing you to input or modify the values. Prepopulated values might be present, or you may need to provide your own. Ensure that all required variables are correctly filled to execute the prompt accurately. You can adjust or update variable values at any time by clicking the Settings icon. Once all instructions for the prompt are set in the Context and/or Messages sections, you can start the execution by typing your text (be it a question or a command) into the chat box. Use simple commands like \"Go\", \"Start Generating\", \"Execute\", or \"Run it\" and click the Send icon to begin. These commands signal the Gen AI to process the information and generate the desired output based on the configured settings. If you need to start a fresh conversation or prompt, simply click the X icon to clear the current setup and begin anew. Datasources To call and use Datasources from ELITEA HUB: Open the AlitaCodeChat. Select the React or Native tab. Type # in the chat box. Select the datasource that you want to run. Start conversation in the form of a question, statement, or command that simulates human-like interaction . If you need to start a fresh conversation or datasource, simply click the X icon to clear the current setup and begin anew. Agents To call and use Agents from ELITEA HUB: Open the AlitaCodeChat. Select the React tab. Type @ in the chat box. Select the agent that you want to run. Version Selection : Agents may have multiple versions. Ensure you select the appropriate version from the dropdown list as different versions may vary in functionality and variables. Variable Management : If the selected agent version includes variables, a dialog will appear allowing you to input or modify the values. Prepopulated values might be present, or you may need to provide your own. Ensure that all required variables are correctly filled to execute the agent accurately. You can adjust or update variable values at any time by clicking the Settings icon. Start conversation in the form of a question, statement, or command that simulates human-like interaction . If you need to start a fresh conversation or application, simply click the X icon to clear the current setup and begin anew. Chat Open the AlitaCodeChat. Select either the Native or React tab. Start conversation in the form of a question, statement, or command that simulates human-like interaction . Additional Interaction Features Auto scroll to bottom : This option can be toggled on or off to automatically scroll to the bottom of the output as it is being generated. This feature is helpful during long outputs to keep the most recent content visible. Reload Alita Code Settings : This option allows to reload and update Alita Code settings. Stop generating : To stop generation of output. Post-Output Actions: Continue the Dialogue : To keep the conversation going, simply type your next question or command in the chat box and click the Send icon. Copy the Output : Click the Copy to clipboard icon to copy the generated text for use elsewhere. Delete Output : To remove the current output from the chat, click the Delete icon. Purge Chat History : For a fresh start or to clear sensitive data, click the Clean icon to erase the chat history. Specialized Download Options for Tabular outputs. When the Gen AI generates output in a tabular format, additional options become available to manage and utilize this structured data: Download as xlsx : Allows you to save the tabular output directly in an Excel spreadsheet format, facilitating easy data manipulation and analysis. Copy as markdown : Enables copying the tabular output in markdown format, suitable for use in markdown-supported environments like GitHub or blogging platforms. Copy as html : Permits copying the tabular output in HTML format, ideal for integration into web pages or emails, preserving the formatting and structure.","title":"Alita Code Chat"},{"location":"platform-documentation/extensions/alita-chat/#alita-code-chat","text":"Alita Code Chat for VSCode and IntelliJ is an auxiliary GUI for Alita Code, you can utilize the functionality of Alita Code and you can also chat with ELITEA HUB.","title":"Alita Code Chat"},{"location":"platform-documentation/extensions/alita-chat/#pre-requisite","text":"Alita Code Chat operates in conjunction with Alita Code for both VS Code and IntelliJ. To utilize Alita Code Chat, you must first install Alita Code from their respective marketplaces: VS Code : Install Alita Code from the VS Code Marketplace. IntelliJ : Install AlitaCode from the JetBrains Marketplace. Important : Ensure that Alita Code is not only installed but also properly configured with ELITEA HUB to function correctly. For detailed installation and configuration instructions, please refer to the Alita Code documentation . This step is crucial for enabling the full capabilities of Alita Code Chat within your development environment.","title":"Pre-requisite"},{"location":"platform-documentation/extensions/alita-chat/#features-list","text":"Chat with ELITEA directly. It will use the model settings set by Alita Code extension. Type trigger chat to add participants to chat: / for prompt, # for datasources and @ for agents. Note : Alita Code Chat doesn't support Chat History, in case of restarting VS Code or IntelliJ, the Chat History will be cleaned.","title":"Features list:"},{"location":"platform-documentation/extensions/alita-chat/#alita-code-chat-for-vs-code","text":"Alita Code Chat is a visual studio extension to work as chatting companion using Alita Code.","title":"Alita Code Chat for VS code"},{"location":"platform-documentation/extensions/alita-chat/#installation","text":"Getting started with Alita Code Chat is straightforward: Navigate to the Extensions section in VS Code. Search for Alita Code Chat in the Marketplace and click Install . Note : After successful installation Alita Code Chat shortcut will be added to left menu of VS Code.","title":"Installation"},{"location":"platform-documentation/extensions/alita-chat/#alita-code-chat-usage","text":"With Alita Code Chat set up, you can now: Prompts - call and use prompts configured in ELITEA HUB. Datasources - call and use datasources configured in ELITEA HUB. Agents - call and use agents configured in ELITEA HUB. Chat - is a specific type of input designed for conversational AI models, which aims to initiate or guide a dialogue. This can be in the form of a question, statement, or command that simulates human-like interaction, prompting the AI to produce a conversational response for engagement. Important: To successfully call and utilize prompts, datasources, or agents from ELITEA HUB, it is essential that these items are tagged with code in ELITEA HUB. This tag ensures that the resources are correctly categorized and accessible. Ensure that the code tag is applied to relevant prompts, datasources, and agents to enable their proper functionality within the ELITEA ecosystem. Additional Interaction Features: Auto scroll to bottom : This option can be toggled on or off to automatically scroll to the bottom of the output as it is being generated. This feature is helpful during long outputs to keep the most recent content visible. Reload Alita Code Settings : This option allows to reload and update Alita Code settings. Stop generating : To stop generation of output. Post-Output Actions: Continue the Dialogue : To keep the conversation going, simply type your next question or command in the chat box and click the Send icon. Copy the Output : Click the Copy to clipboard icon to copy the generated text for use elsewhere. Delete Output : To remove the current output from the chat, click the Delete icon. Purge Chat History : For a fresh start or to clear sensitive data, click the Clean icon to erase the chat history. Specialized Download Options for Tabular outputs. When the Gen AI generates output in a tabular format, additional options become available to manage and utilize this structured data: Download as xlsx : Allows you to save the tabular output directly in an Excel spreadsheet format, facilitating easy data manipulation and analysis. Copy as markdown : Enables copying the tabular output in markdown format, suitable for use in markdown-supported environments like GitHub or blogging platforms. Copy as html : Permits copying the tabular output in HTML format, ideal for integration into web pages or emails, preserving the formatting and structure.","title":"Alita Code Chat Usage"},{"location":"platform-documentation/extensions/alita-chat/#prompts","text":"To call and use Prompts from ELITEA HUB: Open the Alita Code Chat. Type / in the chat box. Select the prompt that you want to run. Version Selection : Prompts may have multiple versions. Ensure you select the appropriate version from the dropdown list as different versions may vary in functionality and variables. Variable Management : If the selected prompt version includes variables, a dialog will appear allowing you to input or modify the values. Prepopulated values might be present, or you may need to provide your own. Ensure that all required variables are correctly filled to execute the prompt accurately. You can adjust or update variable values at any time by clicking the Settings icon. Once all instructions for the prompt are set in the Context and/or Messages sections, you can start the execution by typing your text (be it a question or a command) into the chat box. Use simple commands like \"Go\", \"Start Generating\", \"Execute\", or \"Run it\" and click the Send icon to begin. These commands signal the Gen AI to process the information and generate the desired output based on the configured settings. If you need to start a fresh conversation or prompt, simply click the X icon to clear the current setup and begin anew.","title":"Prompts"},{"location":"platform-documentation/extensions/alita-chat/#datasources","text":"To call and use Datasources from ELITEA HUB: Open the Alita Code Chat. Type # in the chat box. Select the datasource that you want to run. Start conversation in the form of a question, statement, or command that simulates human-like interaction . If you need to start a fresh conversation or datasource, simply click the X icon to clear the current setup and begin anew.","title":"Datasources"},{"location":"platform-documentation/extensions/alita-chat/#agents","text":"To call and use Agents from ELITEA HUB: Open the Alita Code Chat. Type @ in the chat box. Select the prompt that you want to run. Version Selection : Agents may have multiple versions. Ensure you select the appropriate version from the dropdown list as different versions may vary in functionality and variables. Variable Management : If the selected agent version includes variables, a dialog will appear allowing you to input or modify the values. Prepopulated values might be present, or you may need to provide your own. Ensure that all required variables are correctly filled to execute the agent accurately. You can adjust or update variable values at any time by clicking the Settings icon. Start conversation in the form of a question, statement, or command that simulates human-like interaction . If you need to start a fresh conversation or application, simply click the X icon to clear the current setup and begin anew.","title":"Agents"},{"location":"platform-documentation/extensions/alita-chat/#chat","text":"Open the AlitaCodeChat. Start conversation in the form of a question, statement, or command that simulates human-like interaction .","title":"Chat"},{"location":"platform-documentation/extensions/alita-chat/#alitacodechat-for-intellij","text":"AlitaCodeChat is an IntelliJ plugin to work as chatting companion using AlitaCode.","title":"AlitaCodeChat for IntelliJ"},{"location":"platform-documentation/extensions/alita-chat/#installation_1","text":"Getting started with AlitaCodeChat is straightforward: Navigate to the Settings \u2192 Plugins section in IntelliJ. Search for AlitaCodeChat in the Marketplace and click Install . Alita Chat for IntelliJ offers two distinct modes to cater to different user preferences and integration styles. Each mode is designed to provide a seamless user experience while aligning with specific design philosophies: Native Mode : This mode is tailored to blend seamlessly with the IntelliJ environment. It adheres to the native design and style guidelines of IntelliJ, ensuring that the interface feels familiar and integrated for users who prefer consistency with their development environment. React Mode : Designed to echo the aesthetics and usability of ELITEA, this mode brings the distinctive look and feel of ELITEA's design language into IntelliJ. It's ideal for users who enjoy the ELITEA interface and wish to have a similar user experience within the IntelliJ platform. Both modes are crafted to provide a robust and intuitive chat interface, allowing users to choose according to their design preference and familiarity. Note : After successful installation AlitaCodeChat shortcut will be added to right menu of IntelliJ. To ensure seamless integration and functionality, the Alita Code and AlitaCodeChat plugins must be installed with matching versions. Please verify that both plugins are updated to the same version to avoid compatibility issues. To successfully call and utilize prompts, datasources, or agents from ELITEA HUB, it is essential that these items are tagged with code in ELITEA HUB. This tag ensures that the resources are correctly categorized and accessible. Ensure that the code tag is applied to relevant prompts, datasources, and applications to enable their proper functionality within the ELITEA ecosystem.","title":"Installation"},{"location":"platform-documentation/extensions/alita-chat/#alitacodechat-usage","text":"","title":"AlitaCodeChat Usage"},{"location":"platform-documentation/extensions/alita-chat/#prompts_1","text":"To call and use Prompts from ELITEA HUB: Open the AlitaCodeChat. Select the React or Native tab. Type / in the chat box. Select the prompt that you want to run. Version Selection : Prompts may have multiple versions. Ensure you select the appropriate version from the dropdown list as different versions may vary in functionality and variables. Variable Management : If the selected prompt version includes variables, a dialog will appear allowing you to input or modify the values. Prepopulated values might be present, or you may need to provide your own. Ensure that all required variables are correctly filled to execute the prompt accurately. You can adjust or update variable values at any time by clicking the Settings icon. Once all instructions for the prompt are set in the Context and/or Messages sections, you can start the execution by typing your text (be it a question or a command) into the chat box. Use simple commands like \"Go\", \"Start Generating\", \"Execute\", or \"Run it\" and click the Send icon to begin. These commands signal the Gen AI to process the information and generate the desired output based on the configured settings. If you need to start a fresh conversation or prompt, simply click the X icon to clear the current setup and begin anew.","title":"Prompts"},{"location":"platform-documentation/extensions/alita-chat/#datasources_1","text":"To call and use Datasources from ELITEA HUB: Open the AlitaCodeChat. Select the React or Native tab. Type # in the chat box. Select the datasource that you want to run. Start conversation in the form of a question, statement, or command that simulates human-like interaction . If you need to start a fresh conversation or datasource, simply click the X icon to clear the current setup and begin anew.","title":"Datasources"},{"location":"platform-documentation/extensions/alita-chat/#agents_1","text":"To call and use Agents from ELITEA HUB: Open the AlitaCodeChat. Select the React tab. Type @ in the chat box. Select the agent that you want to run. Version Selection : Agents may have multiple versions. Ensure you select the appropriate version from the dropdown list as different versions may vary in functionality and variables. Variable Management : If the selected agent version includes variables, a dialog will appear allowing you to input or modify the values. Prepopulated values might be present, or you may need to provide your own. Ensure that all required variables are correctly filled to execute the agent accurately. You can adjust or update variable values at any time by clicking the Settings icon. Start conversation in the form of a question, statement, or command that simulates human-like interaction . If you need to start a fresh conversation or application, simply click the X icon to clear the current setup and begin anew.","title":"Agents"},{"location":"platform-documentation/extensions/alita-chat/#chat_1","text":"Open the AlitaCodeChat. Select either the Native or React tab. Start conversation in the form of a question, statement, or command that simulates human-like interaction .","title":"Chat"},{"location":"platform-documentation/extensions/alita-chat/#additional-interaction-features","text":"Auto scroll to bottom : This option can be toggled on or off to automatically scroll to the bottom of the output as it is being generated. This feature is helpful during long outputs to keep the most recent content visible. Reload Alita Code Settings : This option allows to reload and update Alita Code settings. Stop generating : To stop generation of output. Post-Output Actions: Continue the Dialogue : To keep the conversation going, simply type your next question or command in the chat box and click the Send icon. Copy the Output : Click the Copy to clipboard icon to copy the generated text for use elsewhere. Delete Output : To remove the current output from the chat, click the Delete icon. Purge Chat History : For a fresh start or to clear sensitive data, click the Clean icon to erase the chat history. Specialized Download Options for Tabular outputs. When the Gen AI generates output in a tabular format, additional options become available to manage and utilize this structured data: Download as xlsx : Allows you to save the tabular output directly in an Excel spreadsheet format, facilitating easy data manipulation and analysis. Copy as markdown : Enables copying the tabular output in markdown format, suitable for use in markdown-supported environments like GitHub or blogging platforms. Copy as html : Permits copying the tabular output in HTML format, ideal for integration into web pages or emails, preserving the formatting and structure.","title":"Additional Interaction Features"},{"location":"platform-documentation/extensions/alita-code/","text":"Alita Code Get Started with Alita Code Welcome to the Alita Code your comprehensive resource for harnessing the power of the ultimate AI-powered IDE extension that's set to transform your coding workflow. Alita Code integrates seamlessly with VS Code and InteliiJ, offering intelligent suggestions, automating routine tasks, and providing a level of adaptability that's unmatched, all designed to elevate your coding experience. Why Choose Alita Code? Alita Code is not just another IDE extension. It's a revolutionary tool designed to: Boost Productivity - with AI-powered suggestions, Alita Code analyzes your code in real-time, offering insights to enhance code quality, readability, and performance. Automate Testing and Documentation - simplify the creation of unit tests, integration tests, and automated tests. Alita Code also enriches your code with automatic commenting, making it more accessible and maintainable. Customizable Assistance - tailor Alita Code's assistance to your project's specific needs with customizable prompts, both internal and powered by Alita Backend's llms for external prompts. Key Features Alita Code comes packed with features designed to streamline your development process: AI-powered code suggestions for smarter coding Automated generation of unit tests, integration tests, and automated tests Automatic code commenting for better maintainability Customizable internal prompts for tailored assistance Project-specific external prompts and datasources powered by ELITEA Backend Code explanation and optimization recommendations Seamless native IDE integration Regular updates and enhancements Comprehensive documentation and dedicated support Collaboration-friendly design for team projects Secure and privacy-conscious implementation Alita Code for VS Code Alita Code is a visual studio extension to handle prompt-engineering based code generation using ELITEA as a backend. Installation Getting started with Alita Code is straightforward and involves a few simple steps: Open VS Code and navigate to the Extensions section. In the Marketplace, search for Alita Code and click Install . Configuration on ELITEA HUB To configure the necessary parameters for the Alita Code extension, follow these steps: Go to Settings \u2192 Configuration on the ELITEA HUB. Click the + icon to create a new token. Enter a name and set an expiration date for the token. Click Generate to create the token. Immediately copy and securely store the generated token; it will not be visible again once you close the pop-up window. From the Integration Option dropdown list, select the desired LLM model (e.g., gpt-4, gpt-4o, gpt-4-0125-preview, etc.). Once the LLM model is selected, the Download VS Code Settings icon will appear next to the created token. Click this icon to download the settings.json file, which contains all necessary configuration information for integration with VS Code. Note : The settings.json file includes essential information such as Project ID, ELITEA HUB's URL, LLM model, Integration UID, and the generated token. Important : Alternatively, you can manually copy and paste all required parameters into the Alita Code extension's settings in VS Code. Configuration on VS Code Once Alita Code is installed, setting it up to work with your project in ELITEA HUB involves: Open your project in VS Code. Navigate to the .vscode folder and open the settings.json file. If this folder does not exist, create it and add a settings.json file. Open the settings.json file downloaded from ELITEA HUB. Copy all information from this file into the .vscode/settings.json file in your project. Note : Be careful not to overwrite other configurations. If previous Alita Code configurations exist, remove them before adding new information. Save the file. The integration settings will now be applied under Alita Code \u2192 Extension Settings \u2192 Workspace tab. Go to Extensions \u2192 Alita Code \u2192 Extension Settings . Open the Workspace tab and verify that all parameters are correctly populated from the settings.json file. Note : Manual adjustments can be made if necessary. Types of Settings in Alita Code Alita Code offers two types of settings to cater to different needs: User Settings : These are global settings that apply to all sessions across any workspace, providing a consistent environment across your projects. Workspace Settings : These are specific to a particular workspace, allowing for tailored configurations such as different project IDs or models, which is essential for managing separate environments or specific tasks. The following settings are available in both tabs (which can either be prepopulated or manually configured): Main Settings : Alitacode: LLMServer Url : Enter the URL of your LLM service provider. For connecting to ELITEA Nexus env., use https://nexus.elitea.ai/ . Alitacode: LLMAuth Token : Provide your token for authentication with the LLM service provider. For ELITEA Prod env, input the generated Token. Alitacode: Project ID : Input the Project ID for the ELITEA backend. Alitacode: Display Type : Choose how the prediction results are displayed: append - when you run Alita Predict the results will be displayed after the text or part that you have selected. split - when you run Alita Predict the results will be displayed in a separate place (view). replace - when you run Alita Predict the results will be displayed instead of the text or part that you have selected. prepend -when you run Alita predict the results will be displayed before the text or part that you have selected. Alitacode: Verify Ssl : Toggle this setting to verify the LLM service provider's SSL certificate. For Nexus env, keep this checkbox not selected. Alitacode: Enable : Toggle to enable or disable the Alita Code extension as needed. Alitacode: Debug : Toggle to enable or disable the debugging feature as needed. Integration Settings : Alitacode: Select Integration : Click here to select link to select the available models from dropdown list for above selected environment. Note: After selection the corresponding information will be automatically populated for Alitacode: LLMModel Name , Alitacode: Integration Name and Alitacode: Integration Uid fields. * Alitacode: LLMModel Name : Write manually the desired LLM model name, if you don't want to preopoluate all information from . * Alitacode: Integration Name : This is the integration type which is used for selected LLM model setup in ELITEA\u2192Settings-Integrations page. Will automatically be populated and set after selecting LLM model from Alitacode: Select Integration . * Alitacode: Integration Uid : Enter the Integration UID from the ELITEA backend. Will automatically be populated and set after selecting LLM model from Alitacode: Select Integration . Advanced Settings : Alitacode: Custom Model Tokens : Set the maximum completion tokens for selected custom model. This setting defines the maximum length of the AI's generated response, measured in tokens. Alitacode: Max Tokens : Set the maximum completion tokens for selected model. This setting defines the maximum length of the AI's generated response, measured in tokens. Alitacode: Temperature : Adjust the temperature setting for the selected model to control the randomness of the output. Alitacode: Top P : Set the Top P value for the selected model. Also known as nucleus sampling, Top P offers another way to control the randomness of the output. Alitacode: Top K : Set the Top K value for the selected model. This parameter limits the AI's token selection to the K most likely tokens at each step of the generation process. These settings ensure that Alita Code is properly configured to interact with the ELITEA, allowing for seamless integration and efficient use of LLM models within your projects. Note : Restarting VS Code may be necessary for changes to take effect. Configuring Alita Code To initialize Alita Code in your project: Open any file and right-click to select Alita \u2192 Alita:Init . This creates a .promptLib folder with default prompts and prompts.json files. Alita Code Usage Getting Started with Extension Commands Jumpstart your Alita Code experience with these essential commands: Alita: Init : Initialize Alita Code in your workspace by creating a .promptLib folder at the root. Note : After successful initalization the Alita: Init command becomes unavailable. Alita: Create Prompt : Craft a new prompt within the .promptLib folder. Alita: Extend Context : Enhance the context of an existing prompt in the .promptLib folder. Alita: Predict : Choose from a list of prompts and generate predictions based on your selection. Alita: Sync External Prompts : Synchronize your external prompts and datasources with ELITEA Backend. Alita Code is designed to be your coding companion, offering a blend of AI-powered efficiency and customizable support. Whether you're looking to enhance your productivity, streamline your testing process, or simply make your code more understandable, Alita Code is here to help. Let's embark on this journey to revolutionize your coding experience together. Synchronize External Prompts Sync prompts and datasources created in the Alita HUB with your Alita Code setup for seamless integration: Open prompts.json : Locate and open the prompts.json file. Access Alita Menu : Right-click in the editor to see the Alita menu option. Sync Prompts Option : Select Alita: Sync External Prompts from the submenu. Synchronization : The prompts and datasources will be synced and added to the prompts.json file. Usage : These prompts and datasources are now ready to be used with Alita: Predict command. Note : To sync and use prompts and datasources from ELITEA HUB, tag the prompt with code in ELITEA HUB. Create a Prompt Creating a custom prompt in Alita Code allows you to tailor Gen AI suggestions to your specific tasks. Here's how to create one: Open a File : Start by opening any file from your project, or create a new one. Access Alita Menu : Right-click in the editor view to bring up the context menu, where you'll find the Alita item. Create Prompt Option : Hover over Alita in the menu, and on the second level menu, select Create Prompt . Name Your Prompt : Enter a name for your prompt-template, such as \"Generate unit-tests\". Describe Your Prompt : Press Enter and provide a description for your prompt. Provide Prompt Content : Press Enter again and input the content of your prompt. This can be modified later in the .promptLib folder. Finalize Creation : Hit Enter to finalize. Alita will add a reference to the new prompt in prompts.json and create a corresponding .yaml file in the .promptLib folder, which can be edited to extend content and add examples. Extend Prompt Context Enhance the context of an existing prompt with selected text from your code, improving the relevance of AI suggestions: Open and Select : Open any file from your project and select a portion of the text. Access Alita Menu : Right-click to open the context menu and find the Alita item. Extend Context Option : Hover over Alita and select \"Extend Context\" from the submenu. Choose a Prompt : Pick the prompt you wish to extend the context for from the dropdown list. Extend Context : The selected text will be automatically added to the prompt's context, enriching its understanding for future suggestions. Predict (Execute) Prompt To predict (execute) a prompt or a datasource directly from VS Code to generate Gen AI-driven code suggestions: Open a File and Select Text : Open any project file and select the text you want to analyze or for which you need suggestions. Access Alita Menu : Right-click in the editor view to see the Alita menu item. Predict Option : Hover over Alita and choose Alita Predict from the submenu. Select a Prompt or Datasource: Choose the desired prompt or datasource from the dropdown list. Version Selection : Prompts may have multiple versions. Ensure you select the appropriate version from the dropdown list as different versions may vary in functionality and variables. Variable Management : If the selected prompt version includes variables, you will either see prepopulated values or you can provide your own values. Ensure that all required variables are correctly filled to execute the prompt accurately. View Predictions : After execution, the generated response will be displayed in your editor according to the method specified in your Alita Code: Default View Mode settings . This could be appended, replaced, split, or prepended based on your configuration. Note : You can use default prompts, those you've created, or external prompts and datasources synced from ELITEA HUB . AlitaCode for IntelliJ Idea AlitaCode is a IntelliJ plugin to handle prompt-engineering based code generation using ELITEA as a backend. Installation Getting started with Alita Code is straightforward and involves a few simple steps: Navigate to the Settings \u2192 Plugins section in IntelliJ. Search for AlitaCode in the Marketplace and click Install . Configuration on ELITEA HUB To configure the necessary parameters for the Alita Code extension, follow these steps: Go to Settings \u2192 Configuration on the ELITEA HUB. Click the + icon to create a new token. Enter a name and set an expiration date for the token. Click Generate to create the token. Immediately copy and securely store the generated token; it will not be visible again once you close the pop-up window. From the Integration Option dropdown list, select the desired LLM model (e.g., gpt-4, gpt-4o, gpt-4-0125-preview, etc.). Once the LLM model is selected, the Download Jetbrains Settings icon will appear next to the created token. Click this icon to download the alita.xml file, which contains all necessary configuration information (except generated token) for integration with IntelliJ. Configuration on IntelliJ Once Alita Code is installed, setting it up to work with your project in ELITEA HUB involves: Open your project in IntelliJ. Navigate to the .idea folder and open the alita.xml file. If this folder does not exist, create it and add a alita.xml file. Open the alita.xml file downloaded from ELITEA HUB. Copy all information from this file into the .idea/alita.xml file in your project. Note : If previous Alita Code configurations exist, remove them before adding new information. Save the file. The integration settings will now be applied under Settings \u2192 Tools \u2192 Alita tab. Go to Settings \u2192 Tools \u2192 Alita . Open it and verify that all parameters are correctly populated from the alita.xml file. Copy and paste generated token to the LLM Auth Token field. Check and apply configuration: Click the Reload icon next to the Integration Name dropdown list. Select the ai_dial as integration and click OK button. To complete the setup click the OK button. Settings in Alita Code Alita Code includes the following settings: LLM Provider : Select the LLM Provider. To connect with ELITEA Hub, select Alita option. LLM Auth Token : Provide your Bearer token for the LLM service provider. Provide Settings Project ID : Enter the Project Id for ELITEA Backend, ignored for OpenAI. LLM Server URL : Enter the URL to your LLM service provider. (e.g. https://alita.lab.epam.com/ ) Integration Name : To use Epam AI Dial models, select ai_dial option. Integration UID : Enter the AI integration Id from ELITEA Backend, ignored for OpenAI. LLM Model Name : Choose the LLM model from the dropdown list. Custom Model Name : Enter a custom model name if the desired model is not listed. Check the Use custom model checkbox. Display Type : Select the default display mode for the predictions. append - when you run Alita Predict the results will be displayed after the text or part that you have selected. split - when you run Alita Predict the results will be displayed in a separate place (view). replace - when you run Alita Predict the results will be displayed instead of the text or part that you have selected. Advanced Settings : Custom Encoding Type : Select the encoding type, default cl100k_base . Custom Model Size : Set the max tokens for custom model, default is 4096 . LLM Response Timeout : Set the response timeout, default is 90 seconds. Max Tokens : Set the max tokens for the selected model. Temperature : Adjust the temperature for the selected model. Top K : Set the Top K value for the selected model. Top P : Set the Top P value for the selected model. These settings ensure that Alita Code is properly configured to interact with the ELITEA HUB, allowing for seamless integration and efficient use of LLM models within your projects. Note : Restarting IntelliJ may be necessary for changes to take effect. Configuration To initialize Alita Code in your project: Open any file and right-click to select Alita \u2192 Alita:Init . This creates a .promptLib folder with default prompts and prompts.json files. AlitaCode Usage Getting Started with Extension Commands Jumpstart your Alita Code experience with these essential commands: Alita: Init : Initialize Alita Code in your workspace by creating a .promptLib folder at the root. Note : After successful initalization the Alita: Init command becomes unavailable. Alita: Create Prompt : Craft a new prompt within the .promptLib folder. Alita: Extend Context : Enhance the context of an existing prompt in the .promptLib folder. Alita: Predict : Choose from a list of prompts and generate predictions based on your selection. Alita: Sync External Prompts : Synchronize your external prompts and datasources with ELITEA Backend. Synchronize External Prompts Sync prompts and datasources created in the ELITEA HUB with your Alita Code setup for seamless integration: Open prompts.json : Locate and open the prompts.json file. Access Alita Menu : Right-click in the editor to see the Alita Actions item. Sync Prompts Option : Select the Alita: Sync External Prompts option from the submenu. Synchronization : The prompts and datasources will be synced and added to the prompts.json file. Usage : These prompts and datasources are now ready to be used with Alita: Predict command. Note : To sync and use prompts and datasources from ELITEA HUB, tag the prompt with code in ELITEA HUB. Create a Prompt Creating a custom prompt in Alita Code allows you to tailor Gen AI suggestions to your specific tasks. Here's how to create one: Open a File : Start by opening any file from your project, or create a new one. Access Alita Menu : Right-click in the editor view to bring up the context menu, where you'll find the Alita Actions item. Create Prompt Option : Hover over Alita Actions in the menu, and on the second level menu, select Alita: Create Prompt . The Create Prompt window is opened: Name : Assign a descriptive name that clearly reflects the aim of the prompt. Description : Summarize the purpose of the prompt, detailing what it intends to achieve. Context : Well crafted prompt corresponding to well-acceppted Frameworks for creating prompts (e.g. CREATE, CRISPE, Elavis Saravia, etc.). In case the prompt's context contains Variables , then provide the names and values of the variables in the Variables section. Click the Use the project integration settings in the context file checkbox to configure Model, Top-P, Top-K, Tempreature and MaX Tokens settings. Click the Ok button to create a prompt. This can be modified later in the .promptLib folder. Alita Code will add a reference to the new prompt in prompts.json and create a corresponding .yaml file in the .promptLib folder, which can be edited to extend content and add examples. Edit Prompt Context Enhance the context of an existing prompt with selected text from your code, improving the relevance of AI suggestions: Open and Select : Open any file from your project and select a portion of the text. Access Alita Menu : Right-click to open the context menu and find the Alita Actions item. Edit Context Option : Hover over Alita Actions and select Alita: Edit Context from the submenu. Choose a Prompt : Select the prompt you wish to modify for from the list and click the Edit button. Edit Context The selected prompt's yaml file will be opened where you can make the changes. Predict (Execute) Prompt To predict (execute) a prompt or a datasource directly from VS Code to generate Gen AI-driven code suggestions: Open a File and Select Text : Open any project file and select the text you want to analyze or for which you need suggestions. Access Alita Menu : Right-click in the editor view to see the Alita Actions item. Predict Option : Hover over Alita Actions and choose Alita: Predict from the submenu. Select a Prompt or Datasource: Choose the desired prompt or datasource from the dropdown list. Version Selection : Prompts may have multiple versions. Ensure you select the appropriate version from the dropdown list as different versions may vary in functionality and variables. Variable Management : If the selected prompt version includes variables, you will either see prepopulated values or you can provide your own values. Ensure that all required variables are correctly filled to execute the prompt accurately. View Predictions : After execution, the generated response will be displayed in your editor according to the method specified in your AlitaCode: Display Type . Note : You can use default prompts, those you've created, or external prompts and datasources synced from ELITEA HUB .","title":"Alita Code"},{"location":"platform-documentation/extensions/alita-code/#alita-code","text":"","title":"Alita Code"},{"location":"platform-documentation/extensions/alita-code/#get-started-with-alita-code","text":"Welcome to the Alita Code your comprehensive resource for harnessing the power of the ultimate AI-powered IDE extension that's set to transform your coding workflow. Alita Code integrates seamlessly with VS Code and InteliiJ, offering intelligent suggestions, automating routine tasks, and providing a level of adaptability that's unmatched, all designed to elevate your coding experience.","title":"Get Started with Alita Code"},{"location":"platform-documentation/extensions/alita-code/#why-choose-alita-code","text":"Alita Code is not just another IDE extension. It's a revolutionary tool designed to: Boost Productivity - with AI-powered suggestions, Alita Code analyzes your code in real-time, offering insights to enhance code quality, readability, and performance. Automate Testing and Documentation - simplify the creation of unit tests, integration tests, and automated tests. Alita Code also enriches your code with automatic commenting, making it more accessible and maintainable. Customizable Assistance - tailor Alita Code's assistance to your project's specific needs with customizable prompts, both internal and powered by Alita Backend's llms for external prompts.","title":"Why Choose Alita Code?"},{"location":"platform-documentation/extensions/alita-code/#key-features","text":"Alita Code comes packed with features designed to streamline your development process: AI-powered code suggestions for smarter coding Automated generation of unit tests, integration tests, and automated tests Automatic code commenting for better maintainability Customizable internal prompts for tailored assistance Project-specific external prompts and datasources powered by ELITEA Backend Code explanation and optimization recommendations Seamless native IDE integration Regular updates and enhancements Comprehensive documentation and dedicated support Collaboration-friendly design for team projects Secure and privacy-conscious implementation","title":"Key Features"},{"location":"platform-documentation/extensions/alita-code/#alita-code-for-vs-code","text":"Alita Code is a visual studio extension to handle prompt-engineering based code generation using ELITEA as a backend.","title":"Alita Code for VS Code"},{"location":"platform-documentation/extensions/alita-code/#installation","text":"Getting started with Alita Code is straightforward and involves a few simple steps: Open VS Code and navigate to the Extensions section. In the Marketplace, search for Alita Code and click Install .","title":"Installation"},{"location":"platform-documentation/extensions/alita-code/#configuration-on-elitea-hub","text":"To configure the necessary parameters for the Alita Code extension, follow these steps: Go to Settings \u2192 Configuration on the ELITEA HUB. Click the + icon to create a new token. Enter a name and set an expiration date for the token. Click Generate to create the token. Immediately copy and securely store the generated token; it will not be visible again once you close the pop-up window. From the Integration Option dropdown list, select the desired LLM model (e.g., gpt-4, gpt-4o, gpt-4-0125-preview, etc.). Once the LLM model is selected, the Download VS Code Settings icon will appear next to the created token. Click this icon to download the settings.json file, which contains all necessary configuration information for integration with VS Code. Note : The settings.json file includes essential information such as Project ID, ELITEA HUB's URL, LLM model, Integration UID, and the generated token. Important : Alternatively, you can manually copy and paste all required parameters into the Alita Code extension's settings in VS Code.","title":"Configuration on ELITEA HUB"},{"location":"platform-documentation/extensions/alita-code/#configuration-on-vs-code","text":"Once Alita Code is installed, setting it up to work with your project in ELITEA HUB involves: Open your project in VS Code. Navigate to the .vscode folder and open the settings.json file. If this folder does not exist, create it and add a settings.json file. Open the settings.json file downloaded from ELITEA HUB. Copy all information from this file into the .vscode/settings.json file in your project. Note : Be careful not to overwrite other configurations. If previous Alita Code configurations exist, remove them before adding new information. Save the file. The integration settings will now be applied under Alita Code \u2192 Extension Settings \u2192 Workspace tab. Go to Extensions \u2192 Alita Code \u2192 Extension Settings . Open the Workspace tab and verify that all parameters are correctly populated from the settings.json file. Note : Manual adjustments can be made if necessary.","title":"Configuration on VS Code"},{"location":"platform-documentation/extensions/alita-code/#types-of-settings-in-alita-code","text":"Alita Code offers two types of settings to cater to different needs: User Settings : These are global settings that apply to all sessions across any workspace, providing a consistent environment across your projects. Workspace Settings : These are specific to a particular workspace, allowing for tailored configurations such as different project IDs or models, which is essential for managing separate environments or specific tasks. The following settings are available in both tabs (which can either be prepopulated or manually configured): Main Settings : Alitacode: LLMServer Url : Enter the URL of your LLM service provider. For connecting to ELITEA Nexus env., use https://nexus.elitea.ai/ . Alitacode: LLMAuth Token : Provide your token for authentication with the LLM service provider. For ELITEA Prod env, input the generated Token. Alitacode: Project ID : Input the Project ID for the ELITEA backend. Alitacode: Display Type : Choose how the prediction results are displayed: append - when you run Alita Predict the results will be displayed after the text or part that you have selected. split - when you run Alita Predict the results will be displayed in a separate place (view). replace - when you run Alita Predict the results will be displayed instead of the text or part that you have selected. prepend -when you run Alita predict the results will be displayed before the text or part that you have selected. Alitacode: Verify Ssl : Toggle this setting to verify the LLM service provider's SSL certificate. For Nexus env, keep this checkbox not selected. Alitacode: Enable : Toggle to enable or disable the Alita Code extension as needed. Alitacode: Debug : Toggle to enable or disable the debugging feature as needed. Integration Settings : Alitacode: Select Integration : Click here to select link to select the available models from dropdown list for above selected environment. Note: After selection the corresponding information will be automatically populated for Alitacode: LLMModel Name , Alitacode: Integration Name and Alitacode: Integration Uid fields. * Alitacode: LLMModel Name : Write manually the desired LLM model name, if you don't want to preopoluate all information from . * Alitacode: Integration Name : This is the integration type which is used for selected LLM model setup in ELITEA\u2192Settings-Integrations page. Will automatically be populated and set after selecting LLM model from Alitacode: Select Integration . * Alitacode: Integration Uid : Enter the Integration UID from the ELITEA backend. Will automatically be populated and set after selecting LLM model from Alitacode: Select Integration . Advanced Settings : Alitacode: Custom Model Tokens : Set the maximum completion tokens for selected custom model. This setting defines the maximum length of the AI's generated response, measured in tokens. Alitacode: Max Tokens : Set the maximum completion tokens for selected model. This setting defines the maximum length of the AI's generated response, measured in tokens. Alitacode: Temperature : Adjust the temperature setting for the selected model to control the randomness of the output. Alitacode: Top P : Set the Top P value for the selected model. Also known as nucleus sampling, Top P offers another way to control the randomness of the output. Alitacode: Top K : Set the Top K value for the selected model. This parameter limits the AI's token selection to the K most likely tokens at each step of the generation process. These settings ensure that Alita Code is properly configured to interact with the ELITEA, allowing for seamless integration and efficient use of LLM models within your projects. Note : Restarting VS Code may be necessary for changes to take effect.","title":"Types of Settings in Alita Code"},{"location":"platform-documentation/extensions/alita-code/#configuring-alita-code","text":"To initialize Alita Code in your project: Open any file and right-click to select Alita \u2192 Alita:Init . This creates a .promptLib folder with default prompts and prompts.json files.","title":"Configuring Alita Code"},{"location":"platform-documentation/extensions/alita-code/#alita-code-usage","text":"","title":"Alita Code Usage"},{"location":"platform-documentation/extensions/alita-code/#getting-started-with-extension-commands","text":"Jumpstart your Alita Code experience with these essential commands: Alita: Init : Initialize Alita Code in your workspace by creating a .promptLib folder at the root. Note : After successful initalization the Alita: Init command becomes unavailable. Alita: Create Prompt : Craft a new prompt within the .promptLib folder. Alita: Extend Context : Enhance the context of an existing prompt in the .promptLib folder. Alita: Predict : Choose from a list of prompts and generate predictions based on your selection. Alita: Sync External Prompts : Synchronize your external prompts and datasources with ELITEA Backend. Alita Code is designed to be your coding companion, offering a blend of AI-powered efficiency and customizable support. Whether you're looking to enhance your productivity, streamline your testing process, or simply make your code more understandable, Alita Code is here to help. Let's embark on this journey to revolutionize your coding experience together.","title":"Getting Started with Extension Commands"},{"location":"platform-documentation/extensions/alita-code/#synchronize-external-prompts","text":"Sync prompts and datasources created in the Alita HUB with your Alita Code setup for seamless integration: Open prompts.json : Locate and open the prompts.json file. Access Alita Menu : Right-click in the editor to see the Alita menu option. Sync Prompts Option : Select Alita: Sync External Prompts from the submenu. Synchronization : The prompts and datasources will be synced and added to the prompts.json file. Usage : These prompts and datasources are now ready to be used with Alita: Predict command. Note : To sync and use prompts and datasources from ELITEA HUB, tag the prompt with code in ELITEA HUB.","title":"Synchronize External Prompts"},{"location":"platform-documentation/extensions/alita-code/#create-a-prompt","text":"Creating a custom prompt in Alita Code allows you to tailor Gen AI suggestions to your specific tasks. Here's how to create one: Open a File : Start by opening any file from your project, or create a new one. Access Alita Menu : Right-click in the editor view to bring up the context menu, where you'll find the Alita item. Create Prompt Option : Hover over Alita in the menu, and on the second level menu, select Create Prompt . Name Your Prompt : Enter a name for your prompt-template, such as \"Generate unit-tests\". Describe Your Prompt : Press Enter and provide a description for your prompt. Provide Prompt Content : Press Enter again and input the content of your prompt. This can be modified later in the .promptLib folder. Finalize Creation : Hit Enter to finalize. Alita will add a reference to the new prompt in prompts.json and create a corresponding .yaml file in the .promptLib folder, which can be edited to extend content and add examples.","title":"Create a Prompt"},{"location":"platform-documentation/extensions/alita-code/#extend-prompt-context","text":"Enhance the context of an existing prompt with selected text from your code, improving the relevance of AI suggestions: Open and Select : Open any file from your project and select a portion of the text. Access Alita Menu : Right-click to open the context menu and find the Alita item. Extend Context Option : Hover over Alita and select \"Extend Context\" from the submenu. Choose a Prompt : Pick the prompt you wish to extend the context for from the dropdown list. Extend Context : The selected text will be automatically added to the prompt's context, enriching its understanding for future suggestions.","title":"Extend Prompt Context"},{"location":"platform-documentation/extensions/alita-code/#predict-execute-prompt","text":"To predict (execute) a prompt or a datasource directly from VS Code to generate Gen AI-driven code suggestions: Open a File and Select Text : Open any project file and select the text you want to analyze or for which you need suggestions. Access Alita Menu : Right-click in the editor view to see the Alita menu item. Predict Option : Hover over Alita and choose Alita Predict from the submenu. Select a Prompt or Datasource: Choose the desired prompt or datasource from the dropdown list. Version Selection : Prompts may have multiple versions. Ensure you select the appropriate version from the dropdown list as different versions may vary in functionality and variables. Variable Management : If the selected prompt version includes variables, you will either see prepopulated values or you can provide your own values. Ensure that all required variables are correctly filled to execute the prompt accurately. View Predictions : After execution, the generated response will be displayed in your editor according to the method specified in your Alita Code: Default View Mode settings . This could be appended, replaced, split, or prepended based on your configuration. Note : You can use default prompts, those you've created, or external prompts and datasources synced from ELITEA HUB .","title":"Predict (Execute) Prompt"},{"location":"platform-documentation/extensions/alita-code/#alitacode-for-intellij-idea","text":"AlitaCode is a IntelliJ plugin to handle prompt-engineering based code generation using ELITEA as a backend.","title":"AlitaCode for IntelliJ Idea"},{"location":"platform-documentation/extensions/alita-code/#installation_1","text":"Getting started with Alita Code is straightforward and involves a few simple steps: Navigate to the Settings \u2192 Plugins section in IntelliJ. Search for AlitaCode in the Marketplace and click Install .","title":"Installation"},{"location":"platform-documentation/extensions/alita-code/#configuration-on-elitea-hub_1","text":"To configure the necessary parameters for the Alita Code extension, follow these steps: Go to Settings \u2192 Configuration on the ELITEA HUB. Click the + icon to create a new token. Enter a name and set an expiration date for the token. Click Generate to create the token. Immediately copy and securely store the generated token; it will not be visible again once you close the pop-up window. From the Integration Option dropdown list, select the desired LLM model (e.g., gpt-4, gpt-4o, gpt-4-0125-preview, etc.). Once the LLM model is selected, the Download Jetbrains Settings icon will appear next to the created token. Click this icon to download the alita.xml file, which contains all necessary configuration information (except generated token) for integration with IntelliJ.","title":"Configuration on ELITEA HUB"},{"location":"platform-documentation/extensions/alita-code/#configuration-on-intellij","text":"Once Alita Code is installed, setting it up to work with your project in ELITEA HUB involves: Open your project in IntelliJ. Navigate to the .idea folder and open the alita.xml file. If this folder does not exist, create it and add a alita.xml file. Open the alita.xml file downloaded from ELITEA HUB. Copy all information from this file into the .idea/alita.xml file in your project. Note : If previous Alita Code configurations exist, remove them before adding new information. Save the file. The integration settings will now be applied under Settings \u2192 Tools \u2192 Alita tab. Go to Settings \u2192 Tools \u2192 Alita . Open it and verify that all parameters are correctly populated from the alita.xml file. Copy and paste generated token to the LLM Auth Token field. Check and apply configuration: Click the Reload icon next to the Integration Name dropdown list. Select the ai_dial as integration and click OK button. To complete the setup click the OK button.","title":"Configuration on IntelliJ"},{"location":"platform-documentation/extensions/alita-code/#settings-in-alita-code","text":"Alita Code includes the following settings: LLM Provider : Select the LLM Provider. To connect with ELITEA Hub, select Alita option. LLM Auth Token : Provide your Bearer token for the LLM service provider. Provide Settings Project ID : Enter the Project Id for ELITEA Backend, ignored for OpenAI. LLM Server URL : Enter the URL to your LLM service provider. (e.g. https://alita.lab.epam.com/ ) Integration Name : To use Epam AI Dial models, select ai_dial option. Integration UID : Enter the AI integration Id from ELITEA Backend, ignored for OpenAI. LLM Model Name : Choose the LLM model from the dropdown list. Custom Model Name : Enter a custom model name if the desired model is not listed. Check the Use custom model checkbox. Display Type : Select the default display mode for the predictions. append - when you run Alita Predict the results will be displayed after the text or part that you have selected. split - when you run Alita Predict the results will be displayed in a separate place (view). replace - when you run Alita Predict the results will be displayed instead of the text or part that you have selected. Advanced Settings : Custom Encoding Type : Select the encoding type, default cl100k_base . Custom Model Size : Set the max tokens for custom model, default is 4096 . LLM Response Timeout : Set the response timeout, default is 90 seconds. Max Tokens : Set the max tokens for the selected model. Temperature : Adjust the temperature for the selected model. Top K : Set the Top K value for the selected model. Top P : Set the Top P value for the selected model. These settings ensure that Alita Code is properly configured to interact with the ELITEA HUB, allowing for seamless integration and efficient use of LLM models within your projects. Note : Restarting IntelliJ may be necessary for changes to take effect.","title":"Settings in Alita Code"},{"location":"platform-documentation/extensions/alita-code/#configuration","text":"To initialize Alita Code in your project: Open any file and right-click to select Alita \u2192 Alita:Init . This creates a .promptLib folder with default prompts and prompts.json files.","title":"Configuration"},{"location":"platform-documentation/extensions/alita-code/#alitacode-usage","text":"","title":"AlitaCode Usage"},{"location":"platform-documentation/extensions/alita-code/#getting-started-with-extension-commands_1","text":"Jumpstart your Alita Code experience with these essential commands: Alita: Init : Initialize Alita Code in your workspace by creating a .promptLib folder at the root. Note : After successful initalization the Alita: Init command becomes unavailable. Alita: Create Prompt : Craft a new prompt within the .promptLib folder. Alita: Extend Context : Enhance the context of an existing prompt in the .promptLib folder. Alita: Predict : Choose from a list of prompts and generate predictions based on your selection. Alita: Sync External Prompts : Synchronize your external prompts and datasources with ELITEA Backend.","title":"Getting Started with Extension Commands"},{"location":"platform-documentation/extensions/alita-code/#synchronize-external-prompts_1","text":"Sync prompts and datasources created in the ELITEA HUB with your Alita Code setup for seamless integration: Open prompts.json : Locate and open the prompts.json file. Access Alita Menu : Right-click in the editor to see the Alita Actions item. Sync Prompts Option : Select the Alita: Sync External Prompts option from the submenu. Synchronization : The prompts and datasources will be synced and added to the prompts.json file. Usage : These prompts and datasources are now ready to be used with Alita: Predict command. Note : To sync and use prompts and datasources from ELITEA HUB, tag the prompt with code in ELITEA HUB.","title":"Synchronize External Prompts"},{"location":"platform-documentation/extensions/alita-code/#create-a-prompt_1","text":"Creating a custom prompt in Alita Code allows you to tailor Gen AI suggestions to your specific tasks. Here's how to create one: Open a File : Start by opening any file from your project, or create a new one. Access Alita Menu : Right-click in the editor view to bring up the context menu, where you'll find the Alita Actions item. Create Prompt Option : Hover over Alita Actions in the menu, and on the second level menu, select Alita: Create Prompt . The Create Prompt window is opened: Name : Assign a descriptive name that clearly reflects the aim of the prompt. Description : Summarize the purpose of the prompt, detailing what it intends to achieve. Context : Well crafted prompt corresponding to well-acceppted Frameworks for creating prompts (e.g. CREATE, CRISPE, Elavis Saravia, etc.). In case the prompt's context contains Variables , then provide the names and values of the variables in the Variables section. Click the Use the project integration settings in the context file checkbox to configure Model, Top-P, Top-K, Tempreature and MaX Tokens settings. Click the Ok button to create a prompt. This can be modified later in the .promptLib folder. Alita Code will add a reference to the new prompt in prompts.json and create a corresponding .yaml file in the .promptLib folder, which can be edited to extend content and add examples.","title":"Create a Prompt"},{"location":"platform-documentation/extensions/alita-code/#edit-prompt-context","text":"Enhance the context of an existing prompt with selected text from your code, improving the relevance of AI suggestions: Open and Select : Open any file from your project and select a portion of the text. Access Alita Menu : Right-click to open the context menu and find the Alita Actions item. Edit Context Option : Hover over Alita Actions and select Alita: Edit Context from the submenu. Choose a Prompt : Select the prompt you wish to modify for from the list and click the Edit button. Edit Context The selected prompt's yaml file will be opened where you can make the changes.","title":"Edit Prompt Context"},{"location":"platform-documentation/extensions/alita-code/#predict-execute-prompt_1","text":"To predict (execute) a prompt or a datasource directly from VS Code to generate Gen AI-driven code suggestions: Open a File and Select Text : Open any project file and select the text you want to analyze or for which you need suggestions. Access Alita Menu : Right-click in the editor view to see the Alita Actions item. Predict Option : Hover over Alita Actions and choose Alita: Predict from the submenu. Select a Prompt or Datasource: Choose the desired prompt or datasource from the dropdown list. Version Selection : Prompts may have multiple versions. Ensure you select the appropriate version from the dropdown list as different versions may vary in functionality and variables. Variable Management : If the selected prompt version includes variables, you will either see prepopulated values or you can provide your own values. Ensure that all required variables are correctly filled to execute the prompt accurately. View Predictions : After execution, the generated response will be displayed in your editor according to the method specified in your AlitaCode: Display Type . Note : You can use default prompts, those you've created, or external prompts and datasources synced from ELITEA HUB .","title":"Predict (Execute) Prompt"},{"location":"platform-documentation/menus/agents/","text":"Agents Private project - Agents menu ELITEA Agents are a cornerstone feature within the ELITEA platform, designed to significantly enhance and expand the capabilities of AI technologies. By leveraging the advanced natural language processing capabilities of GPT models, ELITEA Agents serve as virtual assistants or \"agents\" that automate tasks and streamline workflows, providing users with a more efficient and effective way to interact with AI models. What are ELITEA Agents? ELITEA Agents are customizable virtual assistants or bots that you can create within the ELITEA interface. Each agent is tailored to handle specific tasks or sets of tasks, based on the instructions and capabilities you define. These agents integrate various components such as prompts, datasources, and external toolkits, allowing them to make informed decisions and perform actions like searching on Google, creating Jira tickets, interacting with your code in GitHub. The flexibility of ELITEA Agents enables them to work with a wide range of external toolkits, making them versatile tools for automating complex workflows. Purpose of ELITEA Agents The primary purpose of ELITEA Agents is to provide a structured and efficient way to interact with AI models for diverse use cases. Unlike open-ended conversations, agents are designed to achieve specific goals, tasks, or workflows. This is particularly beneficial in scenarios that involve repetitive or intricate tasks requiring multiple steps or the aggregation and processing of information from various sources. By automating these processes, ELITEA Agents help reduce manual effort and increase productivity. How do Agents work? Creating an Agent involves defining a set of instructions, toolkits, or goals that the agent is meant to accomplish. These instructions can range from simple to complex, incorporating steps, conditions, and actions that guide the agent's behavior. Once configured, the agent utilizes the natural language processing capabilities of the selected GPT model to interpret and execute the provided instructions. This allows the agent to autonomously perform tasks, make decisions, and adapt to changing conditions without requiring constant human intervention. Key Features of ELITEA Agents Autonomy : ELITEA Agents operate independently, making decisions and taking actions based on predefined goals and instructions. Proactivity : Agents can proactively determine the next steps needed to achieve their objectives, even in the absence of explicit instructions. Integration : By combining prompts, datasources, and external toolkits, agents can seamlessly integrate decision-making processes with actionable tasks. Customization : Users can tailor agents to meet specific needs, defining the scope and complexity of tasks they are designed to handle. Scalability : ELITEA Agents can be scaled to manage a wide array of tasks across different domains, enhancing their utility and effectiveness. By understanding and utilizing ELITEA Agents, users can unlock the full potential of AI-driven automation, transforming how tasks are managed and executed within the ELITEA platform. This not only improves efficiency but also empowers users to focus on more strategic and creative aspects of their work. Integration with External Toolkits, Services, and APIs ELITEA Agents are designed to be highly versatile, capable of integrating with a wide array of external toolkits, services, and APIs. This capability allows agents to extend their functionality beyond the core ELITEA platform, enabling them to perform complex and specialized tasks across various domains. By leveraging these integrations, Agents can act as powerful virtual assistants, automating and streamlining workflows to enhance productivity and efficiency. Internal Toolkits : - Agents, Datasources, Prompts, and Artifacts : These are the foundational components within ELITEA that agents can utilize to perform tasks, manage data, and execute workflows. By integrating these internal toolkits, agents can seamlessly coordinate actions and decisions within the ELITEA environment. Management Tools : - Jira, Confluence, Bitbucket, Rally : Agents can integrate with these project management and collaboration tools to manage tasks, track issues, and facilitate team collaboration. This integration allows agents to automate project updates, issue tracking, and documentation management, ensuring that teams remain aligned and informed. Test Management Tools - XRAY Cloud, TestRail, Zephyr Scale, QTest : By connecting with test management platforms, agents can assist in managing test cases, executing tests, and generating reports. This integration streamlines the software testing lifecycle, improving accuracy and efficiency in quality assurance processes. Coding Tools : - GitHub, GitLab, GitLab Org, Sonar : Integration with version control and code quality tools enables agents to manage code repositories, facilitate pull requests, and conduct code reviews. This helps streamline the development process, ensuring code integrity and facilitating collaboration among developers. EPAM Tools : - Report Portal, TEST IO : Agents can leverage EPAM-specific tools to enhance reporting and testing capabilities. This integration allows for automated data collection and analysis, providing insights that drive informed decision-making. Azure Tools : - ADO wiki, ADO plans, ADO boards : By integrating with Azure DevOps tools, agents can manage documentation, project plans, and work items. This ensures that development and operations teams can collaborate effectively, maintaining alignment with project goals and timelines. Other Tools : - SQL, Browser, Google Places, Open API, Custom : ELITEA Agents can interact with databases, search web, access location data, and connect with custom APIs. These integrations enable agents to perform data retrieval, automate web-based workflows, and access external data sources, reducing manual effort and enhancing data-driven decision-making. Setting Up Integrations To set up these integrations, users may need to perform additional configuration and authentication steps. This includes providing API keys, access tokens, or configuring webhooks and communication channels between ELITEA and the external toolkits or services. These steps ensure secure and seamless integration, allowing ELITEA Agents to function effectively within your existing technological ecosystem. By harnessing the power of these integrations, ELITEA Agents can automate a wide range of tasks, from project management and software testing to code management and data processing. This not only enhances the capabilities of the ELITEA platform but also empowers users to achieve greater efficiency and productivity in their workflows. Note : For more information, please check Alita Tools and Alita SDK git repos. Creating an Agent To set up a new agent: Click the + Agent button located at the top right corner. Fill out the Name and Description fields. Optionally, add tags by typing a tag name or selecting from pre-existing tags in the Tags input box. Select the Agent type . Provide instructions for selected Agent type in the Instructions field. Add and setup selected toolkits that agent must use. Optionally, add and configure Conversation Starter and Welcome Message . Click Save . Your newly created agent will subsequently appear on the Agents page for your project. How to Create Instructions The Instructions field in Agent is a crucial component where users input the necessary background information or instructions that guide the LLM in executing agent and generating accurate and relevant responses. This section serves as the foundational knowledge base for the model to understand and process your specific requests. How to Input Instructions Identify Key Information : Before entering data into the Instructions field, identify the essential details or instructions that the model needs to know to fulfill your request effectively. This could include the topic, specific terms, relevant background information, or the scope of the task. Enter the Details : In the Instructions field, clearly and concisely input the identified information. Ensure that the information is directly relevant to the task to maintain the agent's focus and efficiency. Using toolkits : For enhancing agent's capabilities, you can integrate toolkits and provide instructions how to use them and in which order. The name of toolkit can be denoted by \"\", (e.g. \"Access_JIRA\" toolkit). How to Select an Agent Type Selecting the right Agent type in ELITEA is essential for optimizing the performance and effectiveness of your AI-driven tasks. Each Agent type is designed to leverage specific capabilities and frameworks, catering to different use cases and operational needs. Below is a detailed overview of the available Agent types and their ideal applications: ReAct Description : The ReAct Agent type is designed for straightforward, linear tasks that require minimal context. Users can specify the desired actions and add necessary toolkits using fields such as Actor, Goals, Instructions, and Constraints to clearly define the agent's behavior. Best For : Simple tasks with clear, direct instructions where the agent's actions are well-defined and do not require extensive context or interaction history. XMLChat Description : Similar to ReAct, but utilizes XML for tool integration instead of JSON. This makes XMLChat more suitable for models like LLama and Anthropic, which may benefit from XML's structured format. Best For : Scenarios where XML is preferred for tool integration, particularly with LLama and Anthropic models. OpenAI Description : OpenAI Agents are built on the LangChain backend and are specifically designed for integrations with Azure OpenAI Service. These agents excel in generating human-like text and handling a wide range of conversational tasks. Best For : Tasks requiring high-quality natural language understanding and generation, such as customer support, content creation, and complex query resolution. Pipeline Description : Similar to OpenAI, Pipeline Agents are also based on the LangChain backend and work exclusively with Azure OpenAI Service integrations. They are designed to handle complex workflows and data processing tasks. Instructions must be written in YAML format. Best For : Scenarios that require structured workflows and data processing capabilities, leveraging the power of Azure OpenAI Service. Each Agent type in ELITEA is crafted to maximize the strengths of its underlying models and frameworks. Selecting the appropriate Agent type based on your specific task requirements and desired outcomes will ensure optimal performance and efficiency. For more detailed guidance on selecting the right Agent type and crafting effective instructions, please refer to the Agent Frameworks document. How to select and configure Toolkits Toolkits are integrations with external or ELITEA's internal services, toolkits and APIs which allows to enhance Agents to use various resources and do the tasks. To add a new toolkit : Click the + icon under TOOLS section. Select the desired tool from the dropdown list. The New tool configuration section is opened. Configure it accordingly to provide agent access to this tool. Click the arrow icon next to the New tool to complete the setup and move back to the main menu of Agent configuration. To edit already created toolkit : Click the name of the already created Tool . The New [tool_name] tool configuration section is opened. Modify the configuration of the tool accordingly Click the arrow icon next to the New [tool_name] tool to complete the changes and move back to the main menu of Agent configuration. The following internal Tools are available: Agent toolkit The Agent toolkit provides a meta-level functionality by allowing your Agent to incorporate other pre-configured agents within your ELITEA project. This recursive capability enriches the Agent's functionality, enabling complex, layered interactions and processes. To configure Agent toolkit : Click the + icon under Tools section. Select the Prompt tool from the dropdown list. The New Agent tool configuration section is opened. Name : Provide informative name for the agent (toolkit). Description : provide informative description for the agent (toolkit). Agent : Select the agent from the dropdown list that you want to use as a toolkit for the agent. Note : If you select the agent for the first time, the name and description of the selected agent will be pulled and displayed as the name/description for the toolkit. Later you can modify them if needed. Version : Select the available version of the selected agent from the dropdown list. Click the arrow icon next to the New Agent tool to complete the setup and move back to the main menu of Agent configuration. Datasource toolkit The Datasource toolkit empowers your Agent by providing access to pre-configured datasources within your ELITEA project. This toolkit facilitates the integration of structured data into the Agent's operations, enhancing its ability to process and analyze information efficiently. To configure Datasource toolkit : Click the + icon under Tools section. Select the Datasource tool from the dropdown list. The New datasource tool configuration section is opened. Name : Provide informative name for the datasource (toolkit). Description : Provide informative description for the datasource (toolkit). Datasource : Select the datasource from the dropdown list that you want to use as a toolkit for the agent. Note : If you select the datasource for the first time, the name and description of the selected datasource will be pulled and displayed as the name/description for the toolkit. Later you can modify them if needed. Action : Select the required action type that will be used by agent (either Search or Chat ). This will allow Agent to use information from selected datasource either by searching it or by chating with it. Click the arrow icon next to the New datasource tool to complete the setup and move back to the main menu of Agent configuration. Prompt toolkit The Prompt toolkit allows your Agent to utilize pre-configured prompts from your ELITEA project. This integration enables the Agent to leverage existing prompt configurations to streamline interactions and responses, ensuring consistency and accuracy in its engagements. To configure Prompt toolkit : Click the + icon under Tools section. Select the Prompt tool from the dropdown list. The New Prompt tool configuration section is opened. Name : Provide informative name for the prompt (toolkit). Description : Provide informative description for the prompt (toolkit). Datasource : Select the prompt from the dropdown list that you want to use as a toolkit for the agent. Note : If you select the prompt for the first time, the name and description of the selected prompt will be pulled and displayed as the name/description for the toolkit. Later you can modify them if needed. Version : select the available version of the selected prompt from the dropdown list. Click the arrow icon next to the New Prompt tool to complete the setup and move back to the main menu of Agent configuration. IMPORTANT: Currently, Agents don't support prompts with variables. Variable for agent is input parameter, if you have \u201cdefault\u201d you need to bake it into the prompt. Browser toolkit The Browser toolkit significantly enhances the capabilities of your Agent by integrating robust search engine functionalities directly into its operations. This toolkit enables the Agent to access and search the web, thereby enriching the LLM with a vast array of information available online. This integration allows for a more informed and responsive Agent, capable of leveraging up-to-date web data in its tasks. To configure Browser toolkit : Click the + icon under Tools section. From the dropdown list, select the Browser tool to open the configuration settings. The New Browser tool configuration section is opened. Name : Assign a descriptive name to the browser toolkit for easy identification within Agent's instructions. Description : Provide a brief description of the browser toolkit's purpose and how it integrates with your workflow. API key : Input the API key for the CSE that you have configured for the selected search engine. Note : This is required for Google tool only. You have two choices for providing the necessary credentials: Password : Enter your API key value directly into the provided field. Secret : Select a pre-configured secret from the dropdown list. This secret should have been set up previously in Secrets page for secure storage and retrieval. CSE ID : Input the Custom Search Engine ID configured for your selected search engine. Note : This is required for Google tool only. Tools : Choose which search engines to integrate by selecting from the available options: Wiki : Include Wikipedia search capabilities. Single URL Crawler : This tool is designed to crawl data from a specific web page within the Agent's context, making it ideal for targeted data extraction tasks. Multi URL Crawler : Use this tool to crawl data from multiple specified web pages within the Agent's context. It is suitable for broader data gathering operations across various sources. Get HTML Content : This tool allows you to retrieve the HTML content of a specified web page within the Agent's context, providing direct access to the page's structural data. Google : Integrate Google for comprehensive search functionalities. For creating CSE ID and API key for Google, please check the Programmable Search Engine page. Click the arrow icon next to the New Browser tool to complete the setup and move back to the main menu of Agent configuration. Confluence toolkit The Confluence toolkit seamlessly integrates Confluence, a widely-used platform for team collaboration and content management, into your Agent's toolkit. This tool enhances the Agent's knowledge base with user-specific or project-specific data from Confluence, enriching its context and response accuracy. To configure Confluence toolkit : Click the + icon under the Tools section. Select the Confluence tool from the dropdown list. The New Confluence tool configuration section is opened. Name : Provide an informative name for the Confluence toolkit. Description : Provide a detailed description of the Confluence toolkit's purpose. URL : Enter the URL to your Confluence instance (e.g., https://www.kb.epam.com/ ). The URL should be the base link as detailed handling is managed via the instructions. Authentication Options : Choose your preferred method for secure connection: API Key : Select this option if you are using an API key for authentication. You have two choices for providing the necessary credentials: Password : Enter your API key value directly into the provided field. Secret : Select a pre-configured secret from the dropdown list. This secret should have been set up previously in Secrets page for secure storage and retrieval. Username : Additionally, you will need to input the Username associated with your Confluence account to complete the authentication process. Token : Select this option if you are using a token for authentication. Similar to the API key, you have two choices for providing the necessary credentials: Password : Enter the your token value directly into the provided field. Secret : Select a pre-configured secret from the dropdown list. This secret should have been set up previously in Secrets page for secure storage and retrieval. Hosting Option : Select the appropriate hosting type for your Jira setup: Cloud : If your Confluence is hosted on Atlassian\u2019s cloud. Server : If your Confluence is hosted on your own servers or an enterprise environment. Important Note : When connecting to Epam's Confluence, ensure you select the Server option to establish the correct configuration. Hosting Option : Select the appropriate hosting type for your Confluence setup: Cloud : If your Confluence is hosted on Atlassian\u2019s cloud. Server : If your Confluence is hosted on your own servers or an enterprise environment. Important Note : When connecting to Epam's Confluence, ensure you select the Server option to establish the correct configuration. Tools : Enable the specific tools you need for your integration: Get pages with the label : Check this to retrieve pages associated with a specific label. Search pages : Check this to enable searching for pages within Confluence. Create page : Enable this to allow the agent to create a new page in Confluence. Create pages : Enable this to allow the agent to create multiple pages in Confluence. Get page tree : Enable this to retrieve the hierarchical structure of pages in Confluence. Delete page : Enable this to allow the agent to delete a page. Update page by id : Enable this to allow the agent to update existing page by page id. Update page by title : Enable this to allow the agent to update page by title. Update labels : Enable this to allow the agent to update page labels. Update pages : Enable this to allow the agent to update multiple pages in Confluence. Site search : Enable this to search pages in Confluence. Search by title : Enable this to allow the agent to search existing page by page id. Read page by id : Enable this to allow the agent to read and show the content of the existing page by page id. Advanced Settings : Configure additional settings to control data fetching and presentation: Pages limit per request : Set the maximum number of pages to retrieve per request (e.g., 5 ). Max total pages : Define the maximum number of pages to retrieve in total (e.g., 10 ). Number of retries : Specify how many times the tool should retry after a failure (e.g., 2 ). Min retry, sec : Set the minimum number of seconds to wait before retrying (e.g., 10 ). Max retry, sec : Set the maximum number of seconds to wait before retrying (e.g., 60 ). Click the arrow icon next to the New Confluence tool to complete the setup and return to the main menu of Agent configuration. Jira toolkit The Jira toolkit enables a direct integration with Jira, allowing users to manage issues and projects directly from the ELITEA platform. This tool streamlines project management tasks by enabling real-time interactions and updates through the Agent, enhancing productivity and project tracking. To configure Jira toolkit : Click the + icon under Tools section. Select the Jira tool from the dropdown list. The New Jira tool configuration section is opened. Name : Provide a unique name to identify your Jira toolkit within ELITEA. Description : Offer a concise description of what the integration is intended for. URL : Enter the URL to your Jira instance (e.g., https://www.jira.epam.com/jira/ ). Authentication Options : Choose your preferred method for secure connection: API Key : Select this option if you are using an API key for authentication. You have two choices for providing the necessary credentials: Password : Enter your API key value directly into the provided field. Secret : Select a pre-configured secret from the dropdown list. This secret should have been set up previously in Secrets page for secure storage and retrieval. Username : Additionally, you will need to input the Username associated with your Jira account to complete the authentication process. Token : Select this option if you are using a token for authentication. Similar to the API key, you have two choices for providing the necessary credentials: Password : Enter the your token value directly into the provided field. Secret : Select a pre-configured secret from the dropdown list. This secret should have been set up previously in Secrets page for secure storage and retrieval. Hosting Option : Select the appropriate hosting type for your Jira setup: Cloud : If your Jira is hosted on Atlassian\u2019s cloud. Server : If your Jira is hosted on your own servers or an enterprise environment. Important Note : When connecting to Epam's Jira, ensure you select the Server option to establish the correct configuration. Tools - the following tools are avaialble for selection: Search using JQL : To enable searching for Jira issues using Jira Query Language. Create issue : To allow the creation of new issues within Jira. Update issue : To enable updating existing Jira issues. List comments : To allow showing available comments of the Jira issue. Add comments : To allow adding comments to Jira issues. List projects : To enable listing all Jira projects. Set issue status : To set the status of Jira issues. Get specific field info : To allow getting info from the specific Jira field. Advanced Settings : Adjust the advanced settings to fine-tune the toolkit's operation: Verify SSL : Check this to enable SSL verification for secure connections to your Jira instance. Click the arrow icon next to the New Jira tool to complete the setup and move back to the main menu of Agent configuration. GitHub toolkit The GitHub toolkit integrates GitHub into your Agent, allowing it to access and interact with repositories directly. This toolkit enhances the Agent's capabilities by providing it with user-specific or project-specific data from GitHub, facilitating better version control and development process integration. To configure GitHub toolkit : Click the + icon under Tools section. Select the GitHub tool from the dropdown list. The New GitHub tool configuration section is opened. Name : Assign a distinctive name to your GitHub toolkit integration. Description : Give a concise description that outlines the integration's intended purpose. Repository : Enter the name of the GitHub repository you wish to integrate (e.g. ProjectAlita/projectalita.github.io ) Main branch : Specify the main branch of your repository, typically main . Authentication Options : Choose your preferred method for secure connection: Private Key : Select this option if you are using an Private key for authentication. App ID : Enter the App ID associated with your GitHub integration. Private Key : Enter the configured Private key. You have two choices for providing the necessary credentials: Password : Enter your Private key value directly into the provided field. Secret : Select a pre-configured secret from the dropdown list. This secret should have been set up previously in Secrets page for secure storage and retrieval. Token : Select this option if you are using a token for authentication. Similar to the Private key, you have two choices for providing the necessary credentials: Password : Enter the your token value directly into the provided field. Secret : Select a pre-configured secret from the dropdown list. This secret should have been set up previously in Secrets page for secure storage and retrieval. Password : Select this option if you are using your GitHub account password for authentication. Password : Enter the password associated with your GitHub account. Similar to previous options, you have two choices for providing the necessary credentials: Password : Enter your password value directly into the provided field. Secret : Select a pre-configured secret from the dropdown list. This secret should have been set up previously in Secrets page for secure storage and retrieval. Username : Additionally, you will need to input the Username associated with your GitHub account to complete the authentication process. Tools : Enable the tools that you require for interacting with your GitHub repository: Get issues : Enables retrieval of issues from the repository. Get issue : Allows fetching details of a specific issue. Comment on issue : Permits adding comments to issues. List open pull requests (PRs) : Lists all open pull requests. Get pull request : Retrieves details of a specific pull request. List pull request files : Lists the files changed in a pull request. Create pull request : Enables the creation of new pull requests. Create file : Allows for creating new files in the repository. Read file : Enables reading the contents of files. Update file : Permits updating existing files. Delete file : Allows for the deletion of files. List files in branch : Lists all files in a specific branch. List branches in repo : Lists all branches in the repository. Set active branch : Sets a specific branch as the active one. Create branch : Enables the creation of new branches. Get files from directory : Retrieves all files within a specified directory. Click the arrow icon next to the New GitHub tool to complete the setup and move back to the main menu of Agent configuration. Gitlab toolkit Similar to the GitHub toolkit, the Gitlab toolkit integrates your Agent with Gitlab, enabling direct interaction with repositories and project data. This toolkit enriches the Agent's operational context with specific data from Gitlab, supporting more informed decisions and interactions in software development projects. To configure Gitlab toolkit: Click the + icon under Tools section. Select the Gitlab tool from the dropdown list. The New Gitlab tool configuration section is opened. Name : Assign a distinctive name to your GitHub toolkit integration. Description : Give a concise description that outlines the integration's intended purpose. URL : Enter the URL to your GitLab repository (e.g., https://gitbud.epam.com/ ). Repository : Enter the name of the Gitlab repository you wish to integrate (e.g., Levon_Dadayan/alitatest ) Main branch : Specify the main branch of your repository, typically main . Token : Provide the configured token for authentication. You have two choices for providing the necessary credentials: Password : Enter the your token value directly into the provided field. Secret : Select a pre-configured secret from the dropdown list. This secret should have been set up previously in Secrets page for secure storage and retrieval. Tools : Enable the tools that you require for interacting with your Gitlab repository: Create branch : Allows you to create new branches in the repository. Create pull request : Enables the creation of merge requests in GitLab. Create file : Permits the creation of new files within the repository. Delete file : Provides the option to delete files from the repository. Set active branch : Lets you specify a branch as the active one for operations. List branches in repo : Lists all branches within the specified repository. Get PR changes : Retrieves changes associated with a particular merge request. Create PR change comment : Allows you to comment on changes in a merge request. Click the arrow icon next to the New Gitlab tool to complete the setup and move back to the main menu of Agent configuration. Bitbucket toolkit The Bitbucket toolkit integrates into your Agent, allowing it to access and interact with repositories directly. This toolkit enhances the Agent's capabilities by providing it with user-specific or project-specific data from Bitbucket, facilitating better version control and development process integration. To configure Bitbucket toolkit : Click the + icon under Tools section. Select the Bitbucket tool from the dropdown list. The New Bitbucket tool configuration section is opened. Name : Assign a distinctive name to your Bitbucket toolkit integration. Description : Give a concise description that outlines the integration's intended purpose. Url : Enter the URL to your Bitbucket repository. Username : Input the Username associated with your Bitbucket account to complete the authentication process. Repository : Enter the name of the Bitbucket repository you wish to integrate (e.g. ) Main branch : Specify the main branch of your repository, typically main . Authentication Options : Choose your preferred method for secure connection: Password : Select this option if you are using your Bitbucket account password for authentication you have two choices for providing the necessary credentials: Password : Enter your password value directly into the provided field. Secret : Select a pre-configured secret from the dropdown list. This secret should have been set up previously in Secrets page for secure storage and retrieval. Tools : Enable the tools that you require for interacting with your Bitbucket repository: Create pull request : Enables the creation of new pull requests. Create file : Allows for creating new files in the repository. Read file : Enables reading the contents of files. List branches in repo : Lists all branches in the repository. Set active branch : Sets a specific branch as the active one. Create branch : Enables the creation of new branches. Click the arrow icon next to the New Bitbucket tool to complete the setup and move back to the main menu of Agent configuration. Testrail toolkit The Testrail toolkit enables a direct integration with Testrauk, allowing users to manage test cases directly from the ELITEA platform. To configure TestTrail toolkit : Click the + icon under Tools section. Select the TestRail tool from the dropdown list. The New Testrail tool configuration section is opened. Name : Provide a unique name to identify your Testrail toolkit within ELITEA. Description : Offer a concise description of what the integration is intended for. URL : Enter the URL to your Testrail. Email : Enter the email used for authentication. Password : Enter the password for authentication. Tools - the following tools are avaialble for selection: Get case : To enable selecting test case. Get cases : To enable selecting test cases. Add case : To enable adding new case into Testrail. Click the arrow icon next to the New testrail tool to complete the setup and move back to the main menu of Agent configuration. Open API toolkit The Open API toolkit extends your Agent's capabilities by integrating OpenAPI-compliant APIs. This toolkit allows for a broad range of external functionalities to be incorporated into the Agent, enabling it to interact with and utilize diverse external services and data sources. To configure Open API toolkit : Click the + icon under Tools section. Select the Open API tool from the dropdown list. The New Open API tool configuration section is opened. Name : Enter a unique name for your Open API toolkit integration. This name will be used to identify the toolkit within your agent's instructions. Upload your OpenAPI schema by following one of these methods: Enter Schema : You can directly paste your OpenAPI schema into the text area provided. Drag & Drop : Drag your OpenAPI schema file and drop it into the designated area. Choose File : Click on the choose file link to browse and select your OpenAPI schema file from your local system. Reviewing Actions: Once the schema is uploaded, the ACTIONS section will populate with the endpoints defined in your OpenAPI schema. Review the actions to ensure they have been correctly interpreted from your schema. Each action will display: Name : The name of the action as defined in the schema. Description : A brief description of what the action does. Method : The HTTP method used for the action (e.g., GET, POST, PUT, DELETE). Path : The endpoint path for the action. Setting Authentication: Configure the authentication method required for your OpenAPI: Authentication : Choose the appropriate authentication method for your API from the dropdown menu. Options may include None, API Key, Token, OAuth, etc., depending on your API's requirements. Click the arrow icon next to the New Open API tool to complete the setup and move back to the main menu of Agent configuration. Custom toolkit The Custom toolkit provides a flexible solution for users to create bespoke integrations tailored to their specific needs. This toolkit allows for the development of unique functionalities that are not covered by standard toolkit, offering limitless possibilities to enhance the Agent's capabilities. To configure Custom toolkit : Click the + icon under Tools section. Select the Custom toolkit from the dropdown list. The New Custom tool configuration section is opened. You will see a JSON template in the interface, which you can edit to define your custom toolkit: { \"name\": \"Custom tool\", \"description\": \"\", \"settings\": [], \"type\": \"custom\" } name : Provide a unique name for your custom toolkit that will be used to identify it within ELITEA. description : Enter a brief description of what your custom toolkit does or its purpose. settings : Define an array of settings for your custom toolkit. These settings can include various parameters that your toolkit will use. type : This should be set to \"custom\" to indicate that it is a custom tool. Writing the JSON Configuration: Edit the JSON template to match the specifications of your custom toolkit. Ensure that you input valid JSON syntax. Referencing ELITEA Tools Documentation: For detailed instructions on creating custom toolkits and understanding the available options, refer to the ELITEA Tools GitHub repository: Alita Tools GitHub Repository . This repository contains documentation and examples that can help you build your custom tool. Once you have configured your custom toolkit, review the JSON configuration for accuracy. Click the arrow icon next to the New Custom tool to complete the setup and move back to the main menu of Agent configuration. Artifact toolkit The Artifact toolkit integrates your project's dedicated database in ELITEA into your Agent, allowing it to access and interact with your project's buckets directly. This toolkit enhances the Agent's capabilities by providing it with user-specific or project-specific data from bucket, as well as saving the agent's generated output into bucket. To configure Artifact toolkit : Click the + icon under Tools section. Select the Artifact tool from the dropdown list. The New artifact tool configuration section is opened. Name : Assign a distinctive name to your Artifact toolkit integration. Description : Give a concise description that outlines the integration's intended purpose. Bucket : Specify the bucket name that you want to access or create. Tools : Enable the tools that you require for interacting with your Artifact: List Files : Lists all files in a specific bucket. Create File : Allows for creating new file in the bucket. Read File : Enables reading the contents of files from the bucket. Delete File : Allows for the deletion of files from the bucket. Append Data : Permits updating the context of existing file in the bucket. Click the arrow icon next to the New artifact tool to complete the setup and move back to the main menu of Agent configuration. WELCOME MESSAGE The Welcome Message feature allows you to provide additional context for prompts, datasources, and agents. Currently, the Welcome Message is sent to LLM along with other instructions. How to Add the Welcome Message : Add the Welcome Message : Type the welcome message text in the input field. Save the Configuration : After entering the desired text, ensure to save the changes to the agent. This action makes the configured welcome message available to user in the Chat section. Using the Welcome Message : Go to the Chat section of the datasource. Here, you will see the configured Welcome Message . It will provide additional notification, instruction to the user. Examples of Welcome Message : \"Use this agent for generating manual test cases\" \"Don't forget to double-check the generated test cases\" CONVERSATION STARTERS The Conversation Starter feature enables you to configure and add predefined text that can be used to initiate a conversation when executing an agent. This feature is particularly useful for setting a consistent starting point for interactions facilitated by the agent. How to Add a Conversation Starter : Access the Configuration Panel : Navigate to the Conversation Starter section. Add a Conversation Starter : Click the + icon to open the text input field where you can type the text you wish to use as a conversation starter. Save the Configuration : After entering the desired text, ensure to save the changes to the prompt. This action makes the configured conversation starter available for use. Using a Conversation Starter : Initiate a Conversation : Go to the Chat section of the agent. Here, you will find the saved conversation starters listed. Click on the desired starter to automatically populate the chat input and execute the agent. Examples of Conversation Starters : \"Generate test cases for provided Acceptance Criteria.\" \"Generate automatic test cases for selected [Test_Case_ID].\" By setting up conversation starters, you streamline the process of initiating specific tasks or queries, making your interactions with the agent more efficient and standardized. How to Execute Agent To execute the agent and get the output you have to: Configure the Agent : Initialize by providing the necessary instructions, and defining tools (if applicable). Select the AI Model : Choose the appropriate AI model (e.g., gpt-4-0125-preview, gpt-35-turbo, etc.). Set the Temperature Parameter : Adjust this parameter to control the level of creativity or unpredictability in responses. Advanced Parameters (Optional): For finer control over response generation, you may adjust these optional settings: Temperature (0.1-1.0) - adjusts the level of creativity or unpredictability in responses. Higher values : Responses are more creative and varied, but may be less consistent and more unpredictable. Lower values : Responses are more consistent and predictable, but may be less creative and varied. Top P (0-1) - determines the cumulative probability threshold for selecting words, balancing between creativity and consistency. Higher values : A wider range of words is considered, leading to more creative and diverse responses. Lower values : A narrower range of words is considered, leading to more consistent and predictable responses. Top K - limits the choice of words to the K most probable, affecting the response's diversity and predictability. Higher values : More words are considered, leading to more diverse and potentially creative responses. Lower values : Fewer words are considered, leading to more predictable and focused responses. Maximum Length - sets the cap on the response length, helping tailor responses to be as concise or detailed as desired. Higher values : Responses can be longer and more detailed. Lower values : Responses are shorter and more concise. Initiate Interaction : Once all instructions for the agent are set in the Instructions and/or Tools sections, you can start the execution by typing your text (be it a question or a command) into the chat box or initate it by selecting the Conversation Starter message (if you have configured it). Use simple commands like \"Go\", \"Start Generating\", \"Execute\", or \"Run it\" and click the Send icon to begin. These commands signal the Gen AI to process the information and generate the desired output based on the configured settings. Additional Interaction Features: Auto scroll to bottom : This option can be toggled on or off to automatically scroll to the bottom of the output as it is being generated. This feature is helpful during long outputs to keep the most recent content visible. Full Screen Mode : Increase the size of the output window for better visibility and focus. This mode can be activated to expand the output interface to the full screen. Post-Output Actions: Continue the Dialogue : To keep the conversation going, simply type your next question or command in the chat box and click the Send icon. Copy the Output : Click the Copy to Clipboard icon to copy the generated text for use elsewhere. Regenerate Response : If the output isn't satisfactory, click the Regenerate icon to prompt the Gen AI to produce a new response. Delete Output : To remove the current output from the chat, click the Delete icon. Purge Chat History : For a fresh start or to clear sensitive data, click the Clean icon to erase the chat history. Managing Agent Versions: Save, Create Versions, and Manage To optimally manage your agent, understanding how to save and create versions is crucial. Follow these guidelines to efficiently save your agent, create versions, and manage them. How to Save an Agent: To save your work on an agent for the first time, simply click the Save button. This action creates what's known as the \" latest \" version of your prompt. You can continue to modify your agent and save the changes to the \" latest \" version at any time by clicking the Save button again. If you wish to discard any changes made, you have the option to click the Discard button before saving. Remember : The \" latest \" version represents the initial version you create. You can keep updating this version with your changes by saving them, without the need to create additional versions for your agent. How to Create New Versions: For instances where you need to create and manage different iterations of your agent: Initiate a New Version : Start by clicking the Save As Version button. Name Your Version : When saving your work, provide a version name that clearly identifies the iteration or changes made. Click Save to confirm your entry. Best Practices for Version Naming : Length : Keep the version name concise, not exceeding 48 characters. This ensures readability and compatibility across various systems. Characters : Avoid using special characters such as spaces (\" \"), underscores (\"_\"), and others that might cause parsing or recognition issues in certain environments. Clarity : Choose names that clearly and succinctly describe the version's purpose or the changes it introduces, facilitating easier tracking and management of different versions. Upon creating a new version of the agent, several options become available to you: Delete : Remove this version of the agent if it\u2019s no longer needed. Execute : Run this specific version of the agent to see how it performs. Navigate Versions : Use the Version dropdown list to switch between and select different versions of the agent. This allows for easy comparison and management of various iterations. By following these steps, you can effectively manage the lifecycle and iterations of your agents, ensuring that each version is appropriately saved, published, and utilized as per your requirements.","title":"Agents"},{"location":"platform-documentation/menus/agents/#agents","text":"","title":"Agents"},{"location":"platform-documentation/menus/agents/#private-project-agents-menu","text":"ELITEA Agents are a cornerstone feature within the ELITEA platform, designed to significantly enhance and expand the capabilities of AI technologies. By leveraging the advanced natural language processing capabilities of GPT models, ELITEA Agents serve as virtual assistants or \"agents\" that automate tasks and streamline workflows, providing users with a more efficient and effective way to interact with AI models.","title":"Private project - Agents menu"},{"location":"platform-documentation/menus/agents/#what-are-elitea-agents","text":"ELITEA Agents are customizable virtual assistants or bots that you can create within the ELITEA interface. Each agent is tailored to handle specific tasks or sets of tasks, based on the instructions and capabilities you define. These agents integrate various components such as prompts, datasources, and external toolkits, allowing them to make informed decisions and perform actions like searching on Google, creating Jira tickets, interacting with your code in GitHub. The flexibility of ELITEA Agents enables them to work with a wide range of external toolkits, making them versatile tools for automating complex workflows.","title":"What are ELITEA Agents?"},{"location":"platform-documentation/menus/agents/#purpose-of-elitea-agents","text":"The primary purpose of ELITEA Agents is to provide a structured and efficient way to interact with AI models for diverse use cases. Unlike open-ended conversations, agents are designed to achieve specific goals, tasks, or workflows. This is particularly beneficial in scenarios that involve repetitive or intricate tasks requiring multiple steps or the aggregation and processing of information from various sources. By automating these processes, ELITEA Agents help reduce manual effort and increase productivity.","title":"Purpose of ELITEA Agents"},{"location":"platform-documentation/menus/agents/#how-do-agents-work","text":"Creating an Agent involves defining a set of instructions, toolkits, or goals that the agent is meant to accomplish. These instructions can range from simple to complex, incorporating steps, conditions, and actions that guide the agent's behavior. Once configured, the agent utilizes the natural language processing capabilities of the selected GPT model to interpret and execute the provided instructions. This allows the agent to autonomously perform tasks, make decisions, and adapt to changing conditions without requiring constant human intervention.","title":"How do Agents work?"},{"location":"platform-documentation/menus/agents/#key-features-of-elitea-agents","text":"Autonomy : ELITEA Agents operate independently, making decisions and taking actions based on predefined goals and instructions. Proactivity : Agents can proactively determine the next steps needed to achieve their objectives, even in the absence of explicit instructions. Integration : By combining prompts, datasources, and external toolkits, agents can seamlessly integrate decision-making processes with actionable tasks. Customization : Users can tailor agents to meet specific needs, defining the scope and complexity of tasks they are designed to handle. Scalability : ELITEA Agents can be scaled to manage a wide array of tasks across different domains, enhancing their utility and effectiveness. By understanding and utilizing ELITEA Agents, users can unlock the full potential of AI-driven automation, transforming how tasks are managed and executed within the ELITEA platform. This not only improves efficiency but also empowers users to focus on more strategic and creative aspects of their work.","title":"Key Features of ELITEA Agents"},{"location":"platform-documentation/menus/agents/#integration-with-external-toolkits-services-and-apis","text":"ELITEA Agents are designed to be highly versatile, capable of integrating with a wide array of external toolkits, services, and APIs. This capability allows agents to extend their functionality beyond the core ELITEA platform, enabling them to perform complex and specialized tasks across various domains. By leveraging these integrations, Agents can act as powerful virtual assistants, automating and streamlining workflows to enhance productivity and efficiency. Internal Toolkits : - Agents, Datasources, Prompts, and Artifacts : These are the foundational components within ELITEA that agents can utilize to perform tasks, manage data, and execute workflows. By integrating these internal toolkits, agents can seamlessly coordinate actions and decisions within the ELITEA environment. Management Tools : - Jira, Confluence, Bitbucket, Rally : Agents can integrate with these project management and collaboration tools to manage tasks, track issues, and facilitate team collaboration. This integration allows agents to automate project updates, issue tracking, and documentation management, ensuring that teams remain aligned and informed. Test Management Tools - XRAY Cloud, TestRail, Zephyr Scale, QTest : By connecting with test management platforms, agents can assist in managing test cases, executing tests, and generating reports. This integration streamlines the software testing lifecycle, improving accuracy and efficiency in quality assurance processes. Coding Tools : - GitHub, GitLab, GitLab Org, Sonar : Integration with version control and code quality tools enables agents to manage code repositories, facilitate pull requests, and conduct code reviews. This helps streamline the development process, ensuring code integrity and facilitating collaboration among developers. EPAM Tools : - Report Portal, TEST IO : Agents can leverage EPAM-specific tools to enhance reporting and testing capabilities. This integration allows for automated data collection and analysis, providing insights that drive informed decision-making. Azure Tools : - ADO wiki, ADO plans, ADO boards : By integrating with Azure DevOps tools, agents can manage documentation, project plans, and work items. This ensures that development and operations teams can collaborate effectively, maintaining alignment with project goals and timelines. Other Tools : - SQL, Browser, Google Places, Open API, Custom : ELITEA Agents can interact with databases, search web, access location data, and connect with custom APIs. These integrations enable agents to perform data retrieval, automate web-based workflows, and access external data sources, reducing manual effort and enhancing data-driven decision-making.","title":"Integration with External Toolkits, Services, and APIs"},{"location":"platform-documentation/menus/agents/#setting-up-integrations","text":"To set up these integrations, users may need to perform additional configuration and authentication steps. This includes providing API keys, access tokens, or configuring webhooks and communication channels between ELITEA and the external toolkits or services. These steps ensure secure and seamless integration, allowing ELITEA Agents to function effectively within your existing technological ecosystem. By harnessing the power of these integrations, ELITEA Agents can automate a wide range of tasks, from project management and software testing to code management and data processing. This not only enhances the capabilities of the ELITEA platform but also empowers users to achieve greater efficiency and productivity in their workflows. Note : For more information, please check Alita Tools and Alita SDK git repos.","title":"Setting Up Integrations"},{"location":"platform-documentation/menus/agents/#creating-an-agent","text":"To set up a new agent: Click the + Agent button located at the top right corner. Fill out the Name and Description fields. Optionally, add tags by typing a tag name or selecting from pre-existing tags in the Tags input box. Select the Agent type . Provide instructions for selected Agent type in the Instructions field. Add and setup selected toolkits that agent must use. Optionally, add and configure Conversation Starter and Welcome Message . Click Save . Your newly created agent will subsequently appear on the Agents page for your project.","title":"Creating an Agent"},{"location":"platform-documentation/menus/agents/#how-to-create-instructions","text":"The Instructions field in Agent is a crucial component where users input the necessary background information or instructions that guide the LLM in executing agent and generating accurate and relevant responses. This section serves as the foundational knowledge base for the model to understand and process your specific requests.","title":"How to Create Instructions"},{"location":"platform-documentation/menus/agents/#how-to-input-instructions","text":"Identify Key Information : Before entering data into the Instructions field, identify the essential details or instructions that the model needs to know to fulfill your request effectively. This could include the topic, specific terms, relevant background information, or the scope of the task. Enter the Details : In the Instructions field, clearly and concisely input the identified information. Ensure that the information is directly relevant to the task to maintain the agent's focus and efficiency. Using toolkits : For enhancing agent's capabilities, you can integrate toolkits and provide instructions how to use them and in which order. The name of toolkit can be denoted by \"\", (e.g. \"Access_JIRA\" toolkit).","title":"How to Input Instructions"},{"location":"platform-documentation/menus/agents/#how-to-select-an-agent-type","text":"Selecting the right Agent type in ELITEA is essential for optimizing the performance and effectiveness of your AI-driven tasks. Each Agent type is designed to leverage specific capabilities and frameworks, catering to different use cases and operational needs. Below is a detailed overview of the available Agent types and their ideal applications:","title":"How to Select an Agent Type"},{"location":"platform-documentation/menus/agents/#react","text":"Description : The ReAct Agent type is designed for straightforward, linear tasks that require minimal context. Users can specify the desired actions and add necessary toolkits using fields such as Actor, Goals, Instructions, and Constraints to clearly define the agent's behavior. Best For : Simple tasks with clear, direct instructions where the agent's actions are well-defined and do not require extensive context or interaction history.","title":"ReAct"},{"location":"platform-documentation/menus/agents/#xmlchat","text":"Description : Similar to ReAct, but utilizes XML for tool integration instead of JSON. This makes XMLChat more suitable for models like LLama and Anthropic, which may benefit from XML's structured format. Best For : Scenarios where XML is preferred for tool integration, particularly with LLama and Anthropic models.","title":"XMLChat"},{"location":"platform-documentation/menus/agents/#openai","text":"Description : OpenAI Agents are built on the LangChain backend and are specifically designed for integrations with Azure OpenAI Service. These agents excel in generating human-like text and handling a wide range of conversational tasks. Best For : Tasks requiring high-quality natural language understanding and generation, such as customer support, content creation, and complex query resolution.","title":"OpenAI"},{"location":"platform-documentation/menus/agents/#pipeline","text":"Description : Similar to OpenAI, Pipeline Agents are also based on the LangChain backend and work exclusively with Azure OpenAI Service integrations. They are designed to handle complex workflows and data processing tasks. Instructions must be written in YAML format. Best For : Scenarios that require structured workflows and data processing capabilities, leveraging the power of Azure OpenAI Service. Each Agent type in ELITEA is crafted to maximize the strengths of its underlying models and frameworks. Selecting the appropriate Agent type based on your specific task requirements and desired outcomes will ensure optimal performance and efficiency. For more detailed guidance on selecting the right Agent type and crafting effective instructions, please refer to the Agent Frameworks document.","title":"Pipeline"},{"location":"platform-documentation/menus/agents/#how-to-select-and-configure-toolkits","text":"Toolkits are integrations with external or ELITEA's internal services, toolkits and APIs which allows to enhance Agents to use various resources and do the tasks. To add a new toolkit : Click the + icon under TOOLS section. Select the desired tool from the dropdown list. The New tool configuration section is opened. Configure it accordingly to provide agent access to this tool. Click the arrow icon next to the New tool to complete the setup and move back to the main menu of Agent configuration. To edit already created toolkit : Click the name of the already created Tool . The New [tool_name] tool configuration section is opened. Modify the configuration of the tool accordingly Click the arrow icon next to the New [tool_name] tool to complete the changes and move back to the main menu of Agent configuration. The following internal Tools are available:","title":"How to select and configure Toolkits"},{"location":"platform-documentation/menus/agents/#agent-toolkit","text":"The Agent toolkit provides a meta-level functionality by allowing your Agent to incorporate other pre-configured agents within your ELITEA project. This recursive capability enriches the Agent's functionality, enabling complex, layered interactions and processes. To configure Agent toolkit : Click the + icon under Tools section. Select the Prompt tool from the dropdown list. The New Agent tool configuration section is opened. Name : Provide informative name for the agent (toolkit). Description : provide informative description for the agent (toolkit). Agent : Select the agent from the dropdown list that you want to use as a toolkit for the agent. Note : If you select the agent for the first time, the name and description of the selected agent will be pulled and displayed as the name/description for the toolkit. Later you can modify them if needed. Version : Select the available version of the selected agent from the dropdown list. Click the arrow icon next to the New Agent tool to complete the setup and move back to the main menu of Agent configuration.","title":"Agent toolkit"},{"location":"platform-documentation/menus/agents/#datasource-toolkit","text":"The Datasource toolkit empowers your Agent by providing access to pre-configured datasources within your ELITEA project. This toolkit facilitates the integration of structured data into the Agent's operations, enhancing its ability to process and analyze information efficiently. To configure Datasource toolkit : Click the + icon under Tools section. Select the Datasource tool from the dropdown list. The New datasource tool configuration section is opened. Name : Provide informative name for the datasource (toolkit). Description : Provide informative description for the datasource (toolkit). Datasource : Select the datasource from the dropdown list that you want to use as a toolkit for the agent. Note : If you select the datasource for the first time, the name and description of the selected datasource will be pulled and displayed as the name/description for the toolkit. Later you can modify them if needed. Action : Select the required action type that will be used by agent (either Search or Chat ). This will allow Agent to use information from selected datasource either by searching it or by chating with it. Click the arrow icon next to the New datasource tool to complete the setup and move back to the main menu of Agent configuration.","title":"Datasource toolkit"},{"location":"platform-documentation/menus/agents/#prompt-toolkit","text":"The Prompt toolkit allows your Agent to utilize pre-configured prompts from your ELITEA project. This integration enables the Agent to leverage existing prompt configurations to streamline interactions and responses, ensuring consistency and accuracy in its engagements. To configure Prompt toolkit : Click the + icon under Tools section. Select the Prompt tool from the dropdown list. The New Prompt tool configuration section is opened. Name : Provide informative name for the prompt (toolkit). Description : Provide informative description for the prompt (toolkit). Datasource : Select the prompt from the dropdown list that you want to use as a toolkit for the agent. Note : If you select the prompt for the first time, the name and description of the selected prompt will be pulled and displayed as the name/description for the toolkit. Later you can modify them if needed. Version : select the available version of the selected prompt from the dropdown list. Click the arrow icon next to the New Prompt tool to complete the setup and move back to the main menu of Agent configuration. IMPORTANT: Currently, Agents don't support prompts with variables. Variable for agent is input parameter, if you have \u201cdefault\u201d you need to bake it into the prompt.","title":"Prompt toolkit"},{"location":"platform-documentation/menus/agents/#browser-toolkit","text":"The Browser toolkit significantly enhances the capabilities of your Agent by integrating robust search engine functionalities directly into its operations. This toolkit enables the Agent to access and search the web, thereby enriching the LLM with a vast array of information available online. This integration allows for a more informed and responsive Agent, capable of leveraging up-to-date web data in its tasks. To configure Browser toolkit : Click the + icon under Tools section. From the dropdown list, select the Browser tool to open the configuration settings. The New Browser tool configuration section is opened. Name : Assign a descriptive name to the browser toolkit for easy identification within Agent's instructions. Description : Provide a brief description of the browser toolkit's purpose and how it integrates with your workflow. API key : Input the API key for the CSE that you have configured for the selected search engine. Note : This is required for Google tool only. You have two choices for providing the necessary credentials: Password : Enter your API key value directly into the provided field. Secret : Select a pre-configured secret from the dropdown list. This secret should have been set up previously in Secrets page for secure storage and retrieval. CSE ID : Input the Custom Search Engine ID configured for your selected search engine. Note : This is required for Google tool only. Tools : Choose which search engines to integrate by selecting from the available options: Wiki : Include Wikipedia search capabilities. Single URL Crawler : This tool is designed to crawl data from a specific web page within the Agent's context, making it ideal for targeted data extraction tasks. Multi URL Crawler : Use this tool to crawl data from multiple specified web pages within the Agent's context. It is suitable for broader data gathering operations across various sources. Get HTML Content : This tool allows you to retrieve the HTML content of a specified web page within the Agent's context, providing direct access to the page's structural data. Google : Integrate Google for comprehensive search functionalities. For creating CSE ID and API key for Google, please check the Programmable Search Engine page. Click the arrow icon next to the New Browser tool to complete the setup and move back to the main menu of Agent configuration.","title":"Browser toolkit"},{"location":"platform-documentation/menus/agents/#confluence-toolkit","text":"The Confluence toolkit seamlessly integrates Confluence, a widely-used platform for team collaboration and content management, into your Agent's toolkit. This tool enhances the Agent's knowledge base with user-specific or project-specific data from Confluence, enriching its context and response accuracy. To configure Confluence toolkit : Click the + icon under the Tools section. Select the Confluence tool from the dropdown list. The New Confluence tool configuration section is opened. Name : Provide an informative name for the Confluence toolkit. Description : Provide a detailed description of the Confluence toolkit's purpose. URL : Enter the URL to your Confluence instance (e.g., https://www.kb.epam.com/ ). The URL should be the base link as detailed handling is managed via the instructions. Authentication Options : Choose your preferred method for secure connection: API Key : Select this option if you are using an API key for authentication. You have two choices for providing the necessary credentials: Password : Enter your API key value directly into the provided field. Secret : Select a pre-configured secret from the dropdown list. This secret should have been set up previously in Secrets page for secure storage and retrieval. Username : Additionally, you will need to input the Username associated with your Confluence account to complete the authentication process. Token : Select this option if you are using a token for authentication. Similar to the API key, you have two choices for providing the necessary credentials: Password : Enter the your token value directly into the provided field. Secret : Select a pre-configured secret from the dropdown list. This secret should have been set up previously in Secrets page for secure storage and retrieval. Hosting Option : Select the appropriate hosting type for your Jira setup: Cloud : If your Confluence is hosted on Atlassian\u2019s cloud. Server : If your Confluence is hosted on your own servers or an enterprise environment. Important Note : When connecting to Epam's Confluence, ensure you select the Server option to establish the correct configuration. Hosting Option : Select the appropriate hosting type for your Confluence setup: Cloud : If your Confluence is hosted on Atlassian\u2019s cloud. Server : If your Confluence is hosted on your own servers or an enterprise environment. Important Note : When connecting to Epam's Confluence, ensure you select the Server option to establish the correct configuration. Tools : Enable the specific tools you need for your integration: Get pages with the label : Check this to retrieve pages associated with a specific label. Search pages : Check this to enable searching for pages within Confluence. Create page : Enable this to allow the agent to create a new page in Confluence. Create pages : Enable this to allow the agent to create multiple pages in Confluence. Get page tree : Enable this to retrieve the hierarchical structure of pages in Confluence. Delete page : Enable this to allow the agent to delete a page. Update page by id : Enable this to allow the agent to update existing page by page id. Update page by title : Enable this to allow the agent to update page by title. Update labels : Enable this to allow the agent to update page labels. Update pages : Enable this to allow the agent to update multiple pages in Confluence. Site search : Enable this to search pages in Confluence. Search by title : Enable this to allow the agent to search existing page by page id. Read page by id : Enable this to allow the agent to read and show the content of the existing page by page id. Advanced Settings : Configure additional settings to control data fetching and presentation: Pages limit per request : Set the maximum number of pages to retrieve per request (e.g., 5 ). Max total pages : Define the maximum number of pages to retrieve in total (e.g., 10 ). Number of retries : Specify how many times the tool should retry after a failure (e.g., 2 ). Min retry, sec : Set the minimum number of seconds to wait before retrying (e.g., 10 ). Max retry, sec : Set the maximum number of seconds to wait before retrying (e.g., 60 ). Click the arrow icon next to the New Confluence tool to complete the setup and return to the main menu of Agent configuration.","title":"Confluence toolkit"},{"location":"platform-documentation/menus/agents/#jira-toolkit","text":"The Jira toolkit enables a direct integration with Jira, allowing users to manage issues and projects directly from the ELITEA platform. This tool streamlines project management tasks by enabling real-time interactions and updates through the Agent, enhancing productivity and project tracking. To configure Jira toolkit : Click the + icon under Tools section. Select the Jira tool from the dropdown list. The New Jira tool configuration section is opened. Name : Provide a unique name to identify your Jira toolkit within ELITEA. Description : Offer a concise description of what the integration is intended for. URL : Enter the URL to your Jira instance (e.g., https://www.jira.epam.com/jira/ ). Authentication Options : Choose your preferred method for secure connection: API Key : Select this option if you are using an API key for authentication. You have two choices for providing the necessary credentials: Password : Enter your API key value directly into the provided field. Secret : Select a pre-configured secret from the dropdown list. This secret should have been set up previously in Secrets page for secure storage and retrieval. Username : Additionally, you will need to input the Username associated with your Jira account to complete the authentication process. Token : Select this option if you are using a token for authentication. Similar to the API key, you have two choices for providing the necessary credentials: Password : Enter the your token value directly into the provided field. Secret : Select a pre-configured secret from the dropdown list. This secret should have been set up previously in Secrets page for secure storage and retrieval. Hosting Option : Select the appropriate hosting type for your Jira setup: Cloud : If your Jira is hosted on Atlassian\u2019s cloud. Server : If your Jira is hosted on your own servers or an enterprise environment. Important Note : When connecting to Epam's Jira, ensure you select the Server option to establish the correct configuration. Tools - the following tools are avaialble for selection: Search using JQL : To enable searching for Jira issues using Jira Query Language. Create issue : To allow the creation of new issues within Jira. Update issue : To enable updating existing Jira issues. List comments : To allow showing available comments of the Jira issue. Add comments : To allow adding comments to Jira issues. List projects : To enable listing all Jira projects. Set issue status : To set the status of Jira issues. Get specific field info : To allow getting info from the specific Jira field. Advanced Settings : Adjust the advanced settings to fine-tune the toolkit's operation: Verify SSL : Check this to enable SSL verification for secure connections to your Jira instance. Click the arrow icon next to the New Jira tool to complete the setup and move back to the main menu of Agent configuration.","title":"Jira toolkit"},{"location":"platform-documentation/menus/agents/#github-toolkit","text":"The GitHub toolkit integrates GitHub into your Agent, allowing it to access and interact with repositories directly. This toolkit enhances the Agent's capabilities by providing it with user-specific or project-specific data from GitHub, facilitating better version control and development process integration. To configure GitHub toolkit : Click the + icon under Tools section. Select the GitHub tool from the dropdown list. The New GitHub tool configuration section is opened. Name : Assign a distinctive name to your GitHub toolkit integration. Description : Give a concise description that outlines the integration's intended purpose. Repository : Enter the name of the GitHub repository you wish to integrate (e.g. ProjectAlita/projectalita.github.io ) Main branch : Specify the main branch of your repository, typically main . Authentication Options : Choose your preferred method for secure connection: Private Key : Select this option if you are using an Private key for authentication. App ID : Enter the App ID associated with your GitHub integration. Private Key : Enter the configured Private key. You have two choices for providing the necessary credentials: Password : Enter your Private key value directly into the provided field. Secret : Select a pre-configured secret from the dropdown list. This secret should have been set up previously in Secrets page for secure storage and retrieval. Token : Select this option if you are using a token for authentication. Similar to the Private key, you have two choices for providing the necessary credentials: Password : Enter the your token value directly into the provided field. Secret : Select a pre-configured secret from the dropdown list. This secret should have been set up previously in Secrets page for secure storage and retrieval. Password : Select this option if you are using your GitHub account password for authentication. Password : Enter the password associated with your GitHub account. Similar to previous options, you have two choices for providing the necessary credentials: Password : Enter your password value directly into the provided field. Secret : Select a pre-configured secret from the dropdown list. This secret should have been set up previously in Secrets page for secure storage and retrieval. Username : Additionally, you will need to input the Username associated with your GitHub account to complete the authentication process. Tools : Enable the tools that you require for interacting with your GitHub repository: Get issues : Enables retrieval of issues from the repository. Get issue : Allows fetching details of a specific issue. Comment on issue : Permits adding comments to issues. List open pull requests (PRs) : Lists all open pull requests. Get pull request : Retrieves details of a specific pull request. List pull request files : Lists the files changed in a pull request. Create pull request : Enables the creation of new pull requests. Create file : Allows for creating new files in the repository. Read file : Enables reading the contents of files. Update file : Permits updating existing files. Delete file : Allows for the deletion of files. List files in branch : Lists all files in a specific branch. List branches in repo : Lists all branches in the repository. Set active branch : Sets a specific branch as the active one. Create branch : Enables the creation of new branches. Get files from directory : Retrieves all files within a specified directory. Click the arrow icon next to the New GitHub tool to complete the setup and move back to the main menu of Agent configuration.","title":"GitHub toolkit"},{"location":"platform-documentation/menus/agents/#gitlab-toolkit","text":"Similar to the GitHub toolkit, the Gitlab toolkit integrates your Agent with Gitlab, enabling direct interaction with repositories and project data. This toolkit enriches the Agent's operational context with specific data from Gitlab, supporting more informed decisions and interactions in software development projects. To configure Gitlab toolkit: Click the + icon under Tools section. Select the Gitlab tool from the dropdown list. The New Gitlab tool configuration section is opened. Name : Assign a distinctive name to your GitHub toolkit integration. Description : Give a concise description that outlines the integration's intended purpose. URL : Enter the URL to your GitLab repository (e.g., https://gitbud.epam.com/ ). Repository : Enter the name of the Gitlab repository you wish to integrate (e.g., Levon_Dadayan/alitatest ) Main branch : Specify the main branch of your repository, typically main . Token : Provide the configured token for authentication. You have two choices for providing the necessary credentials: Password : Enter the your token value directly into the provided field. Secret : Select a pre-configured secret from the dropdown list. This secret should have been set up previously in Secrets page for secure storage and retrieval. Tools : Enable the tools that you require for interacting with your Gitlab repository: Create branch : Allows you to create new branches in the repository. Create pull request : Enables the creation of merge requests in GitLab. Create file : Permits the creation of new files within the repository. Delete file : Provides the option to delete files from the repository. Set active branch : Lets you specify a branch as the active one for operations. List branches in repo : Lists all branches within the specified repository. Get PR changes : Retrieves changes associated with a particular merge request. Create PR change comment : Allows you to comment on changes in a merge request. Click the arrow icon next to the New Gitlab tool to complete the setup and move back to the main menu of Agent configuration.","title":"Gitlab toolkit"},{"location":"platform-documentation/menus/agents/#bitbucket-toolkit","text":"The Bitbucket toolkit integrates into your Agent, allowing it to access and interact with repositories directly. This toolkit enhances the Agent's capabilities by providing it with user-specific or project-specific data from Bitbucket, facilitating better version control and development process integration. To configure Bitbucket toolkit : Click the + icon under Tools section. Select the Bitbucket tool from the dropdown list. The New Bitbucket tool configuration section is opened. Name : Assign a distinctive name to your Bitbucket toolkit integration. Description : Give a concise description that outlines the integration's intended purpose. Url : Enter the URL to your Bitbucket repository. Username : Input the Username associated with your Bitbucket account to complete the authentication process. Repository : Enter the name of the Bitbucket repository you wish to integrate (e.g. ) Main branch : Specify the main branch of your repository, typically main . Authentication Options : Choose your preferred method for secure connection: Password : Select this option if you are using your Bitbucket account password for authentication you have two choices for providing the necessary credentials: Password : Enter your password value directly into the provided field. Secret : Select a pre-configured secret from the dropdown list. This secret should have been set up previously in Secrets page for secure storage and retrieval. Tools : Enable the tools that you require for interacting with your Bitbucket repository: Create pull request : Enables the creation of new pull requests. Create file : Allows for creating new files in the repository. Read file : Enables reading the contents of files. List branches in repo : Lists all branches in the repository. Set active branch : Sets a specific branch as the active one. Create branch : Enables the creation of new branches. Click the arrow icon next to the New Bitbucket tool to complete the setup and move back to the main menu of Agent configuration.","title":"Bitbucket toolkit"},{"location":"platform-documentation/menus/agents/#testrail-toolkit","text":"The Testrail toolkit enables a direct integration with Testrauk, allowing users to manage test cases directly from the ELITEA platform. To configure TestTrail toolkit : Click the + icon under Tools section. Select the TestRail tool from the dropdown list. The New Testrail tool configuration section is opened. Name : Provide a unique name to identify your Testrail toolkit within ELITEA. Description : Offer a concise description of what the integration is intended for. URL : Enter the URL to your Testrail. Email : Enter the email used for authentication. Password : Enter the password for authentication. Tools - the following tools are avaialble for selection: Get case : To enable selecting test case. Get cases : To enable selecting test cases. Add case : To enable adding new case into Testrail. Click the arrow icon next to the New testrail tool to complete the setup and move back to the main menu of Agent configuration.","title":"Testrail toolkit"},{"location":"platform-documentation/menus/agents/#open-api-toolkit","text":"The Open API toolkit extends your Agent's capabilities by integrating OpenAPI-compliant APIs. This toolkit allows for a broad range of external functionalities to be incorporated into the Agent, enabling it to interact with and utilize diverse external services and data sources. To configure Open API toolkit : Click the + icon under Tools section. Select the Open API tool from the dropdown list. The New Open API tool configuration section is opened. Name : Enter a unique name for your Open API toolkit integration. This name will be used to identify the toolkit within your agent's instructions. Upload your OpenAPI schema by following one of these methods: Enter Schema : You can directly paste your OpenAPI schema into the text area provided. Drag & Drop : Drag your OpenAPI schema file and drop it into the designated area. Choose File : Click on the choose file link to browse and select your OpenAPI schema file from your local system. Reviewing Actions: Once the schema is uploaded, the ACTIONS section will populate with the endpoints defined in your OpenAPI schema. Review the actions to ensure they have been correctly interpreted from your schema. Each action will display: Name : The name of the action as defined in the schema. Description : A brief description of what the action does. Method : The HTTP method used for the action (e.g., GET, POST, PUT, DELETE). Path : The endpoint path for the action. Setting Authentication: Configure the authentication method required for your OpenAPI: Authentication : Choose the appropriate authentication method for your API from the dropdown menu. Options may include None, API Key, Token, OAuth, etc., depending on your API's requirements. Click the arrow icon next to the New Open API tool to complete the setup and move back to the main menu of Agent configuration.","title":"Open API toolkit"},{"location":"platform-documentation/menus/agents/#custom-toolkit","text":"The Custom toolkit provides a flexible solution for users to create bespoke integrations tailored to their specific needs. This toolkit allows for the development of unique functionalities that are not covered by standard toolkit, offering limitless possibilities to enhance the Agent's capabilities. To configure Custom toolkit : Click the + icon under Tools section. Select the Custom toolkit from the dropdown list. The New Custom tool configuration section is opened. You will see a JSON template in the interface, which you can edit to define your custom toolkit: { \"name\": \"Custom tool\", \"description\": \"\", \"settings\": [], \"type\": \"custom\" } name : Provide a unique name for your custom toolkit that will be used to identify it within ELITEA. description : Enter a brief description of what your custom toolkit does or its purpose. settings : Define an array of settings for your custom toolkit. These settings can include various parameters that your toolkit will use. type : This should be set to \"custom\" to indicate that it is a custom tool. Writing the JSON Configuration: Edit the JSON template to match the specifications of your custom toolkit. Ensure that you input valid JSON syntax. Referencing ELITEA Tools Documentation: For detailed instructions on creating custom toolkits and understanding the available options, refer to the ELITEA Tools GitHub repository: Alita Tools GitHub Repository . This repository contains documentation and examples that can help you build your custom tool. Once you have configured your custom toolkit, review the JSON configuration for accuracy. Click the arrow icon next to the New Custom tool to complete the setup and move back to the main menu of Agent configuration.","title":"Custom toolkit"},{"location":"platform-documentation/menus/agents/#artifact-toolkit","text":"The Artifact toolkit integrates your project's dedicated database in ELITEA into your Agent, allowing it to access and interact with your project's buckets directly. This toolkit enhances the Agent's capabilities by providing it with user-specific or project-specific data from bucket, as well as saving the agent's generated output into bucket. To configure Artifact toolkit : Click the + icon under Tools section. Select the Artifact tool from the dropdown list. The New artifact tool configuration section is opened. Name : Assign a distinctive name to your Artifact toolkit integration. Description : Give a concise description that outlines the integration's intended purpose. Bucket : Specify the bucket name that you want to access or create. Tools : Enable the tools that you require for interacting with your Artifact: List Files : Lists all files in a specific bucket. Create File : Allows for creating new file in the bucket. Read File : Enables reading the contents of files from the bucket. Delete File : Allows for the deletion of files from the bucket. Append Data : Permits updating the context of existing file in the bucket. Click the arrow icon next to the New artifact tool to complete the setup and move back to the main menu of Agent configuration.","title":"Artifact toolkit"},{"location":"platform-documentation/menus/agents/#welcome-message","text":"The Welcome Message feature allows you to provide additional context for prompts, datasources, and agents. Currently, the Welcome Message is sent to LLM along with other instructions. How to Add the Welcome Message : Add the Welcome Message : Type the welcome message text in the input field. Save the Configuration : After entering the desired text, ensure to save the changes to the agent. This action makes the configured welcome message available to user in the Chat section. Using the Welcome Message : Go to the Chat section of the datasource. Here, you will see the configured Welcome Message . It will provide additional notification, instruction to the user. Examples of Welcome Message : \"Use this agent for generating manual test cases\" \"Don't forget to double-check the generated test cases\"","title":"WELCOME MESSAGE"},{"location":"platform-documentation/menus/agents/#conversation-starters","text":"The Conversation Starter feature enables you to configure and add predefined text that can be used to initiate a conversation when executing an agent. This feature is particularly useful for setting a consistent starting point for interactions facilitated by the agent. How to Add a Conversation Starter : Access the Configuration Panel : Navigate to the Conversation Starter section. Add a Conversation Starter : Click the + icon to open the text input field where you can type the text you wish to use as a conversation starter. Save the Configuration : After entering the desired text, ensure to save the changes to the prompt. This action makes the configured conversation starter available for use. Using a Conversation Starter : Initiate a Conversation : Go to the Chat section of the agent. Here, you will find the saved conversation starters listed. Click on the desired starter to automatically populate the chat input and execute the agent. Examples of Conversation Starters : \"Generate test cases for provided Acceptance Criteria.\" \"Generate automatic test cases for selected [Test_Case_ID].\" By setting up conversation starters, you streamline the process of initiating specific tasks or queries, making your interactions with the agent more efficient and standardized.","title":"CONVERSATION STARTERS"},{"location":"platform-documentation/menus/agents/#how-to-execute-agent","text":"To execute the agent and get the output you have to: Configure the Agent : Initialize by providing the necessary instructions, and defining tools (if applicable). Select the AI Model : Choose the appropriate AI model (e.g., gpt-4-0125-preview, gpt-35-turbo, etc.). Set the Temperature Parameter : Adjust this parameter to control the level of creativity or unpredictability in responses. Advanced Parameters (Optional): For finer control over response generation, you may adjust these optional settings: Temperature (0.1-1.0) - adjusts the level of creativity or unpredictability in responses. Higher values : Responses are more creative and varied, but may be less consistent and more unpredictable. Lower values : Responses are more consistent and predictable, but may be less creative and varied. Top P (0-1) - determines the cumulative probability threshold for selecting words, balancing between creativity and consistency. Higher values : A wider range of words is considered, leading to more creative and diverse responses. Lower values : A narrower range of words is considered, leading to more consistent and predictable responses. Top K - limits the choice of words to the K most probable, affecting the response's diversity and predictability. Higher values : More words are considered, leading to more diverse and potentially creative responses. Lower values : Fewer words are considered, leading to more predictable and focused responses. Maximum Length - sets the cap on the response length, helping tailor responses to be as concise or detailed as desired. Higher values : Responses can be longer and more detailed. Lower values : Responses are shorter and more concise. Initiate Interaction : Once all instructions for the agent are set in the Instructions and/or Tools sections, you can start the execution by typing your text (be it a question or a command) into the chat box or initate it by selecting the Conversation Starter message (if you have configured it). Use simple commands like \"Go\", \"Start Generating\", \"Execute\", or \"Run it\" and click the Send icon to begin. These commands signal the Gen AI to process the information and generate the desired output based on the configured settings. Additional Interaction Features: Auto scroll to bottom : This option can be toggled on or off to automatically scroll to the bottom of the output as it is being generated. This feature is helpful during long outputs to keep the most recent content visible. Full Screen Mode : Increase the size of the output window for better visibility and focus. This mode can be activated to expand the output interface to the full screen. Post-Output Actions: Continue the Dialogue : To keep the conversation going, simply type your next question or command in the chat box and click the Send icon. Copy the Output : Click the Copy to Clipboard icon to copy the generated text for use elsewhere. Regenerate Response : If the output isn't satisfactory, click the Regenerate icon to prompt the Gen AI to produce a new response. Delete Output : To remove the current output from the chat, click the Delete icon. Purge Chat History : For a fresh start or to clear sensitive data, click the Clean icon to erase the chat history.","title":"How to Execute Agent"},{"location":"platform-documentation/menus/agents/#managing-agent-versions-save-create-versions-and-manage","text":"To optimally manage your agent, understanding how to save and create versions is crucial. Follow these guidelines to efficiently save your agent, create versions, and manage them.","title":"Managing Agent Versions: Save, Create Versions, and Manage"},{"location":"platform-documentation/menus/agents/#how-to-save-an-agent","text":"To save your work on an agent for the first time, simply click the Save button. This action creates what's known as the \" latest \" version of your prompt. You can continue to modify your agent and save the changes to the \" latest \" version at any time by clicking the Save button again. If you wish to discard any changes made, you have the option to click the Discard button before saving. Remember : The \" latest \" version represents the initial version you create. You can keep updating this version with your changes by saving them, without the need to create additional versions for your agent.","title":"How to Save an Agent:"},{"location":"platform-documentation/menus/agents/#how-to-create-new-versions","text":"For instances where you need to create and manage different iterations of your agent: Initiate a New Version : Start by clicking the Save As Version button. Name Your Version : When saving your work, provide a version name that clearly identifies the iteration or changes made. Click Save to confirm your entry. Best Practices for Version Naming : Length : Keep the version name concise, not exceeding 48 characters. This ensures readability and compatibility across various systems. Characters : Avoid using special characters such as spaces (\" \"), underscores (\"_\"), and others that might cause parsing or recognition issues in certain environments. Clarity : Choose names that clearly and succinctly describe the version's purpose or the changes it introduces, facilitating easier tracking and management of different versions. Upon creating a new version of the agent, several options become available to you: Delete : Remove this version of the agent if it\u2019s no longer needed. Execute : Run this specific version of the agent to see how it performs. Navigate Versions : Use the Version dropdown list to switch between and select different versions of the agent. This allows for easy comparison and management of various iterations. By following these steps, you can effectively manage the lifecycle and iterations of your agents, ensuring that each version is appropriately saved, published, and utilized as per your requirements.","title":"How to Create New Versions:"},{"location":"platform-documentation/menus/artifacts/","text":"Artifact Functionality Section Private project - Artifacts menu The Artifacts section in ELITEA provides a dedicated interface for managing artifact buckets and the files they contain. Artifacts are primarily used in conjunction with the Artifact Toolkit within ELITEA Agents, offering temporary storage for data and context during agent workflows. This section allows users to directly interact with artifact storage, enabling actions such as creating buckets, uploading and downloading files, managing retention policies, and organizing project-related data. Artifact storage is project-specific, accessible to project members, and is also available for private projects. Components The Artifacts page features the following key components: Bucket Search Bar: Located at the top, allows users to search for buckets by name. Storage Type Selector: A dropdown menu used to filter buckets by storage type. Currently, only one storage type is available, so this selector may have limited functionality. Add Bucket Button: Located in the upper right corner, this button initiates the process of creating a new artifact bucket. Bucket List: Displays a scrollable list of all artifact buckets within the project. File List: Is located to the right of the bucket list. This list shows the files contained within the selected bucket, displaying file name, size, and last update date. Pagination is available for long file lists, along with options to adjust the number of files displayed per page and sort files by column headers. Storage Usage Information: Displayed in the lower left part of the screen, this section shows the total storage usage for the current project and the project's storage limit (default is 9 GB). Artifact Functionality This section describes the functionalities available within the Artifacts page: Accessing the Artifacts Section Navigation: Open the ELITEA sidebar by clicking on the Alita icon (located on the right side of the interface). In the sidebar menu, select the \"Artifacts\" option. This will navigate you to the Artifacts management page. In case Artifact menue item is missing contact your administrator to get access. Searching and Filtering Buckets Searching by Bucket Name: Use the Bucket Search Bar at the top of the Artifacts page. Type in keywords related to the bucket name you are looking for. The bucket list will dynamically filter to show buckets whose names contain the entered keywords. Filtering by Storage Type: Utilize the Storage Type Selector dropdown. Although currently there might be only one storage option, you can use this selector to filter the bucket list by the available storage type if multiple types were to be available in the future. Creating a New Bucket Initiate Bucket Creation: Click the \"+ Add Bucket\" button located in the upper right corner of the Artifacts page. Enter Bucket Name: A \"New Bucket\" window will appear. In the \"Name\" field, enter a unique name for your new bucket. Naming Conventions: Bucket names must start with a letter and can only contain letters, numbers, and hyphens. Spaces and other special characters are not allowed. Uniqueness: Ensure the bucket name is unique within the project. If a non-unique name is entered, instead of creating a new bucket, the system will use the existing bucket and update the retention policy of the existing bucket to the newly provided retention period. Set Retention Policy: Select the desired retention policy for the bucket. Period Type: Choose the time unit for retention from the \"Period Type\" dropdown (Days, Weeks, Months, Years). Value: Enter a numerical value in the number field to specify the duration of the retention period. Be aware that some storage types may have limitations on the maximum retention period (e.g., not exceeding year 9999). Provide meaningful and realistic retention durations. Save Bucket: Click the \"Save\" button in the \"New Bucket\" window to create the bucket with the specified name and retention policy. The newly created bucket will then appear in the Bucket List. Managing Bucket Retention Policy Access Edit Mode: In the Bucket List, hover your mouse over the bucket you want to modify. An \"Edit\" icon (pencil icon) will appear. Click on this \"Edit\" icon. Modify Retention Policy: The \"Edit Bucket\" window will open, displaying the current retention policy. Modify the \"Period Type\" and \"Value\" as needed to set a new retention period. Note that you cannot change the bucket name in edit mode. Save or Discard Changes: Click \"Save\" to apply the new retention policy to the bucket. Click \"Cancel\" to discard the changes and revert to the original retention policy. Viewing Files in a Bucket Select a Bucket: In the Bucket List, click on the name of the bucket you wish to view the files of. File List Display: The File List section on the right side of the screen will populate, displaying the files contained within the selected bucket. The list shows the file name, size, and last update date for each file. File List Navigation: Pagination: If the file list is long, pagination controls will appear below the list, allowing you to navigate through multiple pages of files. Items Per Page: Use the \"items per page\" selector to adjust the number of files displayed on each page. Sorting: Click on the column headers (\"Name,\" \"Size,\" \"Last Update Date\") to sort the file list by that column in ascending or descending order. Uploading Files to a Bucket Select Target Bucket: Ensure you have selected the bucket in the Bucket List where you want to upload files. Drag and Drop Files: Drag and drop files directly from your computer's file explorer into the File List area on the right side of the Artifacts page. Upload Progress: After dragging and dropping, a file upload process will begin. ELITEA will provide visual feedback or notifications regarding the upload status. Once the upload is complete, the newly uploaded files will appear in the File List. Deleting a File from a Bucket Access File List: Navigate to the File List of the bucket containing the file you want to delete. Single File Deletion: A \"Delete\" Click this \"Delete\" icon to delete the file on the right side of the file entry Multiple File Deletion: To delete multiple files at once: Select the checkboxes next to each file you want to delete in the File List. Once one or more files are selected, a \"Delete\" icon will become active in the upper part of the File List (above the list itself). Click this \"Delete\" icon to delete all selected files. Confirmation: You may be prompted to confirm the file deletion before it is permanently removed. Downloading a File from a Bucket Access File List: Navigate to the File List of the bucket containing the file you want to download. Initiate Download: Locate the \"Download\" icon (download arrow icon) on the right side of the file entry in the File List. Click this \"Download\" icon to start downloading the file to your local computer. Deleting a Bucket Access Delete Mode: In the Bucket List, hover your mouse over the bucket you want to delete. A \"Delete\" icon (trash can icon) will appear. Click on this \"Delete\" icon. Confirmation Window: A confirmation window will appear, prompting you to confirm the bucket deletion. Confirm Bucket Name: In the confirmation window, you will need to manually type in the name of the bucket you wish to delete into the provided input field. This is a security measure to prevent accidental bucket deletion. Delete Bucket: After typing the bucket name correctly, click the \"Delete\" button in the confirmation window to permanently delete the bucket and all files it contains. Caution: Deleting a bucket is a permanent action. All files within the bucket will be deleted and cannot be recovered. Storage Usage Information View Storage Usage: The Storage Usage Information section is located in the lower left part of the Artifacts page. It displays: Current Project Usage: The amount of storage currently used by all artifact buckets within the current ELITEA project. Project Storage Limit: The total storage quota allocated to the project for artifacts (default is 9 GB). FAQ Q: What types of files can I upload to Artifact buckets? A: You can upload all types of files to Artifact buckets within the Artifacts section. However, the Artifact Toolkit, used by ELITEA Agents, is primarily designed to work with plain text files. For using files with agents, please refer to the Artifact Toolkit documentation for supported file types. Q: How can project members access files in Artifact buckets? A: All members who have access to the Artifacts section can access all buckets and files within that project. They can view, upload, download, and delete files and buckets within the project's Artifact storage. Q: I'm getting an \"Internal Server Error\" when trying to create a bucket. A: This error can occur if the retention policy you have defined is invalid or exceeds the limitations of the storage system. Try the following: Review Retention Policy: Ensure you have provided a reasonable \"Value\" for the retention period. Decrease Retention Period: Try decreasing the retention period value, especially if you have set a very long retention duration (e.g., thousands of years). Some storage systems have limits on maximum retention periods. Q: I am trying to create a bucket, but the \"Save\" button is not active. A: The \"Save\" button might be disabled if: Invalid Bucket Name: The bucket name you entered contains characters that are not allowed (e.g., spaces, special symbols other than hyphens) or does not start with a letter. Review the bucket naming conventions. Invalid Retention Policy Value: You have provided a non-integer or invalid numerical value for the retention policy duration. Ensure you enter a valid whole number for the retention period value. Q: Some files are missing or lost from my Artifact bucket. A: Files might be missing due to the following reasons: Retention Period Expiration: Files are automatically deleted when their retention period expires. Check the retention policy set for the bucket. Intentional or Accidental Deletion: Files might have been intentionally or unintentionally deleted by another project member or by an agent using the Artifact Toolkit with delete file functionality.","title":"Artifacts"},{"location":"platform-documentation/menus/artifacts/#artifact-functionality-section","text":"","title":"Artifact Functionality Section"},{"location":"platform-documentation/menus/artifacts/#private-project-artifacts-menu","text":"The Artifacts section in ELITEA provides a dedicated interface for managing artifact buckets and the files they contain. Artifacts are primarily used in conjunction with the Artifact Toolkit within ELITEA Agents, offering temporary storage for data and context during agent workflows. This section allows users to directly interact with artifact storage, enabling actions such as creating buckets, uploading and downloading files, managing retention policies, and organizing project-related data. Artifact storage is project-specific, accessible to project members, and is also available for private projects.","title":"Private project - Artifacts menu"},{"location":"platform-documentation/menus/artifacts/#components","text":"The Artifacts page features the following key components: Bucket Search Bar: Located at the top, allows users to search for buckets by name. Storage Type Selector: A dropdown menu used to filter buckets by storage type. Currently, only one storage type is available, so this selector may have limited functionality. Add Bucket Button: Located in the upper right corner, this button initiates the process of creating a new artifact bucket. Bucket List: Displays a scrollable list of all artifact buckets within the project. File List: Is located to the right of the bucket list. This list shows the files contained within the selected bucket, displaying file name, size, and last update date. Pagination is available for long file lists, along with options to adjust the number of files displayed per page and sort files by column headers. Storage Usage Information: Displayed in the lower left part of the screen, this section shows the total storage usage for the current project and the project's storage limit (default is 9 GB).","title":"Components"},{"location":"platform-documentation/menus/artifacts/#artifact-functionality","text":"This section describes the functionalities available within the Artifacts page:","title":"Artifact Functionality"},{"location":"platform-documentation/menus/artifacts/#accessing-the-artifacts-section","text":"Navigation: Open the ELITEA sidebar by clicking on the Alita icon (located on the right side of the interface). In the sidebar menu, select the \"Artifacts\" option. This will navigate you to the Artifacts management page. In case Artifact menue item is missing contact your administrator to get access.","title":"Accessing the Artifacts Section"},{"location":"platform-documentation/menus/artifacts/#searching-and-filtering-buckets","text":"Searching by Bucket Name: Use the Bucket Search Bar at the top of the Artifacts page. Type in keywords related to the bucket name you are looking for. The bucket list will dynamically filter to show buckets whose names contain the entered keywords. Filtering by Storage Type: Utilize the Storage Type Selector dropdown. Although currently there might be only one storage option, you can use this selector to filter the bucket list by the available storage type if multiple types were to be available in the future.","title":"Searching and Filtering Buckets"},{"location":"platform-documentation/menus/artifacts/#creating-a-new-bucket","text":"Initiate Bucket Creation: Click the \"+ Add Bucket\" button located in the upper right corner of the Artifacts page. Enter Bucket Name: A \"New Bucket\" window will appear. In the \"Name\" field, enter a unique name for your new bucket. Naming Conventions: Bucket names must start with a letter and can only contain letters, numbers, and hyphens. Spaces and other special characters are not allowed. Uniqueness: Ensure the bucket name is unique within the project. If a non-unique name is entered, instead of creating a new bucket, the system will use the existing bucket and update the retention policy of the existing bucket to the newly provided retention period. Set Retention Policy: Select the desired retention policy for the bucket. Period Type: Choose the time unit for retention from the \"Period Type\" dropdown (Days, Weeks, Months, Years). Value: Enter a numerical value in the number field to specify the duration of the retention period. Be aware that some storage types may have limitations on the maximum retention period (e.g., not exceeding year 9999). Provide meaningful and realistic retention durations. Save Bucket: Click the \"Save\" button in the \"New Bucket\" window to create the bucket with the specified name and retention policy. The newly created bucket will then appear in the Bucket List.","title":"Creating a New Bucket"},{"location":"platform-documentation/menus/artifacts/#managing-bucket-retention-policy","text":"Access Edit Mode: In the Bucket List, hover your mouse over the bucket you want to modify. An \"Edit\" icon (pencil icon) will appear. Click on this \"Edit\" icon. Modify Retention Policy: The \"Edit Bucket\" window will open, displaying the current retention policy. Modify the \"Period Type\" and \"Value\" as needed to set a new retention period. Note that you cannot change the bucket name in edit mode. Save or Discard Changes: Click \"Save\" to apply the new retention policy to the bucket. Click \"Cancel\" to discard the changes and revert to the original retention policy.","title":"Managing Bucket Retention Policy"},{"location":"platform-documentation/menus/artifacts/#viewing-files-in-a-bucket","text":"Select a Bucket: In the Bucket List, click on the name of the bucket you wish to view the files of. File List Display: The File List section on the right side of the screen will populate, displaying the files contained within the selected bucket. The list shows the file name, size, and last update date for each file. File List Navigation: Pagination: If the file list is long, pagination controls will appear below the list, allowing you to navigate through multiple pages of files. Items Per Page: Use the \"items per page\" selector to adjust the number of files displayed on each page. Sorting: Click on the column headers (\"Name,\" \"Size,\" \"Last Update Date\") to sort the file list by that column in ascending or descending order.","title":"Viewing Files in a Bucket"},{"location":"platform-documentation/menus/artifacts/#uploading-files-to-a-bucket","text":"Select Target Bucket: Ensure you have selected the bucket in the Bucket List where you want to upload files. Drag and Drop Files: Drag and drop files directly from your computer's file explorer into the File List area on the right side of the Artifacts page. Upload Progress: After dragging and dropping, a file upload process will begin. ELITEA will provide visual feedback or notifications regarding the upload status. Once the upload is complete, the newly uploaded files will appear in the File List.","title":"Uploading Files to a Bucket"},{"location":"platform-documentation/menus/artifacts/#deleting-a-file-from-a-bucket","text":"Access File List: Navigate to the File List of the bucket containing the file you want to delete. Single File Deletion: A \"Delete\" Click this \"Delete\" icon to delete the file on the right side of the file entry Multiple File Deletion: To delete multiple files at once: Select the checkboxes next to each file you want to delete in the File List. Once one or more files are selected, a \"Delete\" icon will become active in the upper part of the File List (above the list itself). Click this \"Delete\" icon to delete all selected files. Confirmation: You may be prompted to confirm the file deletion before it is permanently removed.","title":"Deleting a File from a Bucket"},{"location":"platform-documentation/menus/artifacts/#downloading-a-file-from-a-bucket","text":"Access File List: Navigate to the File List of the bucket containing the file you want to download. Initiate Download: Locate the \"Download\" icon (download arrow icon) on the right side of the file entry in the File List. Click this \"Download\" icon to start downloading the file to your local computer.","title":"Downloading a File from a Bucket"},{"location":"platform-documentation/menus/artifacts/#deleting-a-bucket","text":"Access Delete Mode: In the Bucket List, hover your mouse over the bucket you want to delete. A \"Delete\" icon (trash can icon) will appear. Click on this \"Delete\" icon. Confirmation Window: A confirmation window will appear, prompting you to confirm the bucket deletion. Confirm Bucket Name: In the confirmation window, you will need to manually type in the name of the bucket you wish to delete into the provided input field. This is a security measure to prevent accidental bucket deletion. Delete Bucket: After typing the bucket name correctly, click the \"Delete\" button in the confirmation window to permanently delete the bucket and all files it contains. Caution: Deleting a bucket is a permanent action. All files within the bucket will be deleted and cannot be recovered.","title":"Deleting a Bucket"},{"location":"platform-documentation/menus/artifacts/#storage-usage-information","text":"View Storage Usage: The Storage Usage Information section is located in the lower left part of the Artifacts page. It displays: Current Project Usage: The amount of storage currently used by all artifact buckets within the current ELITEA project. Project Storage Limit: The total storage quota allocated to the project for artifacts (default is 9 GB).","title":"Storage Usage Information"},{"location":"platform-documentation/menus/artifacts/#faq","text":"Q: What types of files can I upload to Artifact buckets? A: You can upload all types of files to Artifact buckets within the Artifacts section. However, the Artifact Toolkit, used by ELITEA Agents, is primarily designed to work with plain text files. For using files with agents, please refer to the Artifact Toolkit documentation for supported file types. Q: How can project members access files in Artifact buckets? A: All members who have access to the Artifacts section can access all buckets and files within that project. They can view, upload, download, and delete files and buckets within the project's Artifact storage. Q: I'm getting an \"Internal Server Error\" when trying to create a bucket. A: This error can occur if the retention policy you have defined is invalid or exceeds the limitations of the storage system. Try the following: Review Retention Policy: Ensure you have provided a reasonable \"Value\" for the retention period. Decrease Retention Period: Try decreasing the retention period value, especially if you have set a very long retention duration (e.g., thousands of years). Some storage systems have limits on maximum retention periods. Q: I am trying to create a bucket, but the \"Save\" button is not active. A: The \"Save\" button might be disabled if: Invalid Bucket Name: The bucket name you entered contains characters that are not allowed (e.g., spaces, special symbols other than hyphens) or does not start with a letter. Review the bucket naming conventions. Invalid Retention Policy Value: You have provided a non-integer or invalid numerical value for the retention policy duration. Ensure you enter a valid whole number for the retention period value. Q: Some files are missing or lost from my Artifact bucket. A: Files might be missing due to the following reasons: Retention Period Expiration: Files are automatically deleted when their retention period expires. Check the retention policy set for the bucket. Intentional or Accidental Deletion: Files might have been intentionally or unintentionally deleted by another project member or by an agent using the Artifact Toolkit with delete file functionality.","title":"FAQ"},{"location":"platform-documentation/menus/chat/","text":"Conversations ELITEA Chat is an ultimate feature, allowing you to combine all ELITEA features in one place and achieve the best output and results. In the ELITEA framework, a conversation is a dialogue among various participants such as selected language models, prompts, datasources, agents, and human users. The chat uses natural language to interact with a human and receive/give feedback. Within one conversation, you can refer to previous questions and answers. However, different conversations don\u2019t share context. All your conversations are stored on the ELITEA server, and you can access them from any device you use. All your conversations are accessible from the Chat menu. Conversations support the following functionality: Public and Private Conversations : Share your conversation with other users from your project, involve them in the same conversation, or keep it private and visible only to you. Participants : Add various participants to the conversation, including other users in public conversations, prompts, data sources, agents, and language models, making them part of the conversation. Interactions : Interact with added participants, copy generated responses, and more. Managing Conversations : Save conversations, pin the most important ones at the top of the screen, make private conversations public, delete conversations, clean the content of the conversation, and export the context of the conversation. Playback : During playback, you can move backward and forward through the playback process or stop the conversation by simulating the current conversation without any engagement with models. Creating a Conversation Click the + Conversation button located at the top right corner or + icon next to CONVERSATIONS . Provide the Name . By default, it is set to \"New Conversation\". After creating Conversation add partiicpants to the conversation by clicking the PARTICIPANTS + button. Start the conversation by typing your text (be it a question or a command) into the chat box. Use simple commands like \"Go\", \"Start Generating\", \"Execute\", or \"Run it\" and click the Send icon to begin. Your newly created conversation will subsequently appear on the Conversation's list. Private and Public Conversations Private conversations are only visible to the user who created them. You can add all available participants to your project and use this conversation. You can also make private conversations public later. Note : By default, all conversations created in a Private project will be Private as you can't invite/share such conversations with other users. Public conversations are visible to all users of the same project. Those users can also interact in the public conversations, add/remove their participants, delete conversations, copy messages, etc. Note : Users can't convert public conversations back to private. Participants Participants are additional \"tools\" that can be added to the conversation to enhance it. The following types of participants are available: Models : LLM models which can be added to the conversation to interact with Gen AI and get responses from the selected model. Prompts : Already created prompts within the project or public ones which can be added to the conversation to execute them and get responses. Datasources : Already created datasources within the project or public ones which can be added to the conversation to execute them and get responses. Agents : Already created agents within the project or public ones which can be added to the conversation to execute them and get responses. Note : Another category of participant is the user, which can't be added, but in the case of public conversations, users within the project can follow the conversation, interact with it, and thus become participants. How to Add a Participant To add a participant to a conversation: Click the Add participants button if you just created a conversation or + icon next to PARTICIPANTS . A pop-up window appears. Type the letters of the name or description of the available participant in the Search field. You can also filter and select required participant by type or tags. As soon as you see the participant that you need from the proposed list, click the Chat Now button on the participant card. The participant will be immediately added to your conversation and become visible in the PARTICIPANTS section. Note : You can also add several participants at once (by clicking in the cards) and then click the Add Participants button. How to Use a Participant Check that the participant is selected and added to the conversation. If you see in the Conversation's main section \"Select from the list or mention participant you wish to engage with.\", then you need to include the participant that you want to use. To do it: You can either click on the required participant option from the PARTICIPANTS section. Or you can call the required participant from the \"Type your message\" input box by typing / - prompt, # - data source, @ - agent, > - model. Then select it from the dropdown list. After adding the active participant to the conversation, you can use it by typing simple commands like \"Go\", \"Start Generating\", \"Execute\", or \"Run it\" and click the Send icon to execute the participant. To remove the participant from the conversation's active participant list, click the X icon. Note: This will not remove the participant from the Conversation entirely. You can call it again. How to Configure/Modify Participants You can easily configure participants that you have added to the conversation. For Models : Navigate to the model. Click on the Settings icon. You can configure the following settings for the model: Temperature, Top P (0-1), Top K, and Maximum Length. To apply changes, click the < SETTINGS button. You can also restore back to default settings by clicking the Restore icon. For Prompts : Navigate to the prompt. Click on the Settings icon. Select the version of the prompt. By default the \"latest\" will be selected. You can configure the following settings for the prompt:Temperature, Top P (0-1), Top K, and Maximum Length. If the prompt has variable(s), you can modify them as well. To apply changes, click the < SETTINGS button. You can also restore back to default settings by clicking the Restore icon. For Datasources : Navigate to the datasource. Click on the Settings icon. You can configure the following settings for the datasource: Embedding Settings : Initial Lookup Result (1-50), Pages Per Document (1-30), Expected Search Result (1-40). Temperature, Top P (0-1), Top K, and Maximum Length. To apply changes, click the < SETTINGS button. You can also restore back to default settings by clicking the Restore icon. For Agents : Navigate to the agent. Click on the Settings icon. Select the version of the prompt. By default the \"latest\" will be selected. You can configure the following settings for the agent: Temperature, Top P (0-1), Top K, and Maximum Length. If the agent has variable(s), you can modify them as well. To apply changes, click the < SETTINGS button. You can also restore back to default settings by clicking the Restore icon. Actions for Conversation The following actions are available for created conversations from CONVERSATIONS sidebar: Delete : To delete a single conversation, on the left panel, in the conversation contextual menu, select Delete and confirm your action. Edit : To rename a conversation, on the left panel, in the conversation contextual menu, select Edit and confirm your action. Export : To export a single conversation, on the left panel, in the conversation contextual menu, point to Export. Note : Not applicable now. Make Public : To make a private conversation public, on the left panel, in the conversation contextual menu, click the Make Public icon. Note: You will not be able to convert it back to Private. Playback : The Playback mode can be used to simulate the current conversation without any engagement with models. This mode accurately reproduces the conversation like a recording. It's well designed for demo purposes. Pin : To pin a single conversation, on the left panel, in the conversation contextual menu, select Pin . Your conversation will be pinned at the top of your conversation's list. Note : You can unpin the conversation by clicking the Unpin action.","title":"Chat"},{"location":"platform-documentation/menus/chat/#conversations","text":"ELITEA Chat is an ultimate feature, allowing you to combine all ELITEA features in one place and achieve the best output and results. In the ELITEA framework, a conversation is a dialogue among various participants such as selected language models, prompts, datasources, agents, and human users. The chat uses natural language to interact with a human and receive/give feedback. Within one conversation, you can refer to previous questions and answers. However, different conversations don\u2019t share context. All your conversations are stored on the ELITEA server, and you can access them from any device you use. All your conversations are accessible from the Chat menu. Conversations support the following functionality: Public and Private Conversations : Share your conversation with other users from your project, involve them in the same conversation, or keep it private and visible only to you. Participants : Add various participants to the conversation, including other users in public conversations, prompts, data sources, agents, and language models, making them part of the conversation. Interactions : Interact with added participants, copy generated responses, and more. Managing Conversations : Save conversations, pin the most important ones at the top of the screen, make private conversations public, delete conversations, clean the content of the conversation, and export the context of the conversation. Playback : During playback, you can move backward and forward through the playback process or stop the conversation by simulating the current conversation without any engagement with models.","title":"Conversations"},{"location":"platform-documentation/menus/chat/#creating-a-conversation","text":"Click the + Conversation button located at the top right corner or + icon next to CONVERSATIONS . Provide the Name . By default, it is set to \"New Conversation\". After creating Conversation add partiicpants to the conversation by clicking the PARTICIPANTS + button. Start the conversation by typing your text (be it a question or a command) into the chat box. Use simple commands like \"Go\", \"Start Generating\", \"Execute\", or \"Run it\" and click the Send icon to begin. Your newly created conversation will subsequently appear on the Conversation's list.","title":"Creating a Conversation"},{"location":"platform-documentation/menus/chat/#private-and-public-conversations","text":"Private conversations are only visible to the user who created them. You can add all available participants to your project and use this conversation. You can also make private conversations public later. Note : By default, all conversations created in a Private project will be Private as you can't invite/share such conversations with other users. Public conversations are visible to all users of the same project. Those users can also interact in the public conversations, add/remove their participants, delete conversations, copy messages, etc. Note : Users can't convert public conversations back to private.","title":"Private and Public Conversations"},{"location":"platform-documentation/menus/chat/#participants","text":"Participants are additional \"tools\" that can be added to the conversation to enhance it. The following types of participants are available: Models : LLM models which can be added to the conversation to interact with Gen AI and get responses from the selected model. Prompts : Already created prompts within the project or public ones which can be added to the conversation to execute them and get responses. Datasources : Already created datasources within the project or public ones which can be added to the conversation to execute them and get responses. Agents : Already created agents within the project or public ones which can be added to the conversation to execute them and get responses. Note : Another category of participant is the user, which can't be added, but in the case of public conversations, users within the project can follow the conversation, interact with it, and thus become participants.","title":"Participants"},{"location":"platform-documentation/menus/chat/#how-to-add-a-participant","text":"To add a participant to a conversation: Click the Add participants button if you just created a conversation or + icon next to PARTICIPANTS . A pop-up window appears. Type the letters of the name or description of the available participant in the Search field. You can also filter and select required participant by type or tags. As soon as you see the participant that you need from the proposed list, click the Chat Now button on the participant card. The participant will be immediately added to your conversation and become visible in the PARTICIPANTS section. Note : You can also add several participants at once (by clicking in the cards) and then click the Add Participants button.","title":"How to Add a Participant"},{"location":"platform-documentation/menus/chat/#how-to-use-a-participant","text":"Check that the participant is selected and added to the conversation. If you see in the Conversation's main section \"Select from the list or mention participant you wish to engage with.\", then you need to include the participant that you want to use. To do it: You can either click on the required participant option from the PARTICIPANTS section. Or you can call the required participant from the \"Type your message\" input box by typing / - prompt, # - data source, @ - agent, > - model. Then select it from the dropdown list. After adding the active participant to the conversation, you can use it by typing simple commands like \"Go\", \"Start Generating\", \"Execute\", or \"Run it\" and click the Send icon to execute the participant. To remove the participant from the conversation's active participant list, click the X icon. Note: This will not remove the participant from the Conversation entirely. You can call it again.","title":"How to Use a Participant"},{"location":"platform-documentation/menus/chat/#how-to-configuremodify-participants","text":"You can easily configure participants that you have added to the conversation. For Models : Navigate to the model. Click on the Settings icon. You can configure the following settings for the model: Temperature, Top P (0-1), Top K, and Maximum Length. To apply changes, click the < SETTINGS button. You can also restore back to default settings by clicking the Restore icon. For Prompts : Navigate to the prompt. Click on the Settings icon. Select the version of the prompt. By default the \"latest\" will be selected. You can configure the following settings for the prompt:Temperature, Top P (0-1), Top K, and Maximum Length. If the prompt has variable(s), you can modify them as well. To apply changes, click the < SETTINGS button. You can also restore back to default settings by clicking the Restore icon. For Datasources : Navigate to the datasource. Click on the Settings icon. You can configure the following settings for the datasource: Embedding Settings : Initial Lookup Result (1-50), Pages Per Document (1-30), Expected Search Result (1-40). Temperature, Top P (0-1), Top K, and Maximum Length. To apply changes, click the < SETTINGS button. You can also restore back to default settings by clicking the Restore icon. For Agents : Navigate to the agent. Click on the Settings icon. Select the version of the prompt. By default the \"latest\" will be selected. You can configure the following settings for the agent: Temperature, Top P (0-1), Top K, and Maximum Length. If the agent has variable(s), you can modify them as well. To apply changes, click the < SETTINGS button. You can also restore back to default settings by clicking the Restore icon.","title":"How to Configure/Modify Participants"},{"location":"platform-documentation/menus/chat/#actions-for-conversation","text":"The following actions are available for created conversations from CONVERSATIONS sidebar: Delete : To delete a single conversation, on the left panel, in the conversation contextual menu, select Delete and confirm your action. Edit : To rename a conversation, on the left panel, in the conversation contextual menu, select Edit and confirm your action. Export : To export a single conversation, on the left panel, in the conversation contextual menu, point to Export. Note : Not applicable now. Make Public : To make a private conversation public, on the left panel, in the conversation contextual menu, click the Make Public icon. Note: You will not be able to convert it back to Private. Playback : The Playback mode can be used to simulate the current conversation without any engagement with models. This mode accurately reproduces the conversation like a recording. It's well designed for demo purposes. Pin : To pin a single conversation, on the left panel, in the conversation contextual menu, select Pin . Your conversation will be pinned at the top of your conversation's list. Note : You can unpin the conversation by clicking the Unpin action.","title":"Actions for Conversation"},{"location":"platform-documentation/menus/collections/","text":"Collections Collections menu The Collections menu within Private workspace and Team projects in ELITEA serves as your central hub for organizing and managing your Collections . Think of it as your personal workspace for curating sets of related Entities (Prompts, Datasources, and Agents), allowing for efficient access, management, and sharing of your AI resources. Understanding Project Scopes: Private Workspace: Your personal and private area within ELITEA to create and manage your Entities and Collections. Only you have access to your Private workspace. Team Projects: Collaborative spaces for teams to work together on projects, sharing and managing Entities and Collections. Access to Team projects is controlled by project roles and permissions. Public Project: A shared, community space within ELITEA where published Prompts and Collections are available for all users to discover and utilize. The Purpose and Usefulness of Collections Collections are designed to enhance your workflow by providing a structured way to group and manage Entities. They offer significant benefits: Thematic Organization: Group Entities by themes, projects, or any relevant category for easy access. Efficiency: Consolidate related resources, saving time and effort in finding and utilizing them. Sharing Best Practices: Facilitate sharing and collaboration by grouping best-practice Entities into easily shareable units. Accessing the Collections menu To access the Collections menu, navigate to the main menu sidebar within your Private or Team project and click on \"Collections\" . Layout of the Collections Menu The Collections menu presents your collections in a visually organized layout, typically using a Card List View as shown in the image above. Key elements of the Collections Menu interface include: \"+ Collection\" Button: Located at the top right corner, this button allows you to create new collections. Search Bar: Positioned at the top left, the Search bar enables you to quickly find specific collections by name or description. View Options: Icons for toggling between different view formats (e.g., Card list view, Table view) may be available, allowing you to customize how collections are displayed. Collection Cards: Each collection is represented by a card, displaying: Collection Name: The user-defined name of the collection. Collection Description: A brief description of the collection's purpose (if provided). User Avatar: The avatar of the user who created the collection. Action Icons: Icons for performing actions on the collection (Edit, Publish, Delete, Export). Creating a New Collection Creating a collection allows you to organize and categorize your Entities for better accessibility and management. Follow these steps to create a new collection: Create New Collection: Click the \"+ Collection\" button located at the top right of the Collections menu. Define Collection Details: In the \"Create Collection\" dialog: Name: Enter a descriptive Name for the collection. Description: Write a concise Description explaining the collection's purpose. Create Collection: Click Create to create the collection. Exploring Collections and Viewing Entities Exploring collections is straightforward and insightful: Open Collection: Click on a Collection Card or Name to view its contents. View Entities: Explore the list of Prompts, Datasources, and Agents within the collection. Interact with Entities: Within a collection, you can perform the following actions on individual Entities: View and Open Entities: Click on Entity cards to view their details and configurations. Add to Collection: Use the Bookmark icon on Entity cards or in the Actions menu to add Entities to other Collections. Filtering Entities within a Collection Within the Collection Detail View , you can filter Entities for easier browsing and management: Filter by Type using Tabs: Use the All , Prompts , Datasources , and Agents tabs at the top of the Collection Detail View to view specific entity types within the collection. Filter by Tags: Use the \"Tags\" filter section, typically located on the right side, to narrow down the displayed list to Entities with specific tags. Modifying a Collection To modify an existing collection: Edit Collection Details: Click the \"Edit\" icon on the Collection Card or within the Collection Detail View. Update Information: Modify the Name and/or Description in the \"Edit Collection\" dialog. Saving Changes: Click the \"Save\" button to apply your changes. Publishing a Collection (Public Project) To publish a collection to the Public Project: Open Collection Detail View: Navigate to the Collections menu and open the collection you want to publish. Review Collection Contents: Ensure the collection is complete and contains at least one published entity. Publish Collection: Click the \"Publish collection\" icon within the collection detail view. Moderation and Approval: The collection will be submitted for moderation and, upon approval, published to the Public project. Deleting a Collection To delete a collection: Locate Collection: Find the collection you want to delete in the Collections menu. Delete Collection: Click the \"Delete\" icon on the Collection Card or within the Collection Detail View. Confirmation: Confirm the deletion when prompted. Exporting Collections Exporting a collection allows you to save it as a JSON file for backup or sharing: Open Collection Detail View: Navigate to the Collections menu and open the collection you want to export. Export Collection: Click the \"Export Collection\" icon within the collection detail view. Download JSON File: A JSON file containing the collection data will be automatically downloaded to your device. Importing Collections Importing collections allows you to add pre-built collections from JSON files: Import Collection: Click the \"Import\" button in the Collections menu. Select Collection File: In the \"Import Wizard,\" select the JSON file from your device. Configure Import Options: Choose the target project and select Entities to import in the Import Wizard. Start Import: Click the \"Import\" button to import the selected Entities. Locate Imported Entities: Find the imported Prompts, Datasources, and Agents in their respective menus. Important Note: The Collection entity itself is not automatically recreated during import. For more information about importing collections and entities, please refer to the Export and Import Guide . How to Add an Entity to a Collection ELITEA offers a convenient Bookmark icon to add Entities to Collections directly from the Entity menus: Navigate to Entity Menu: Go to the Prompts , Datasources , or Agents menu. Locate the Entity to Add: Find the Entity you want to add to a Collection. Click the Bookmark Icon: Click the Bookmark icon associated with the Entity: Card List View : Top right corner of the Entity card. Table View : \"Add to collection\" option under the ellipsis icon ( ... ) in the Actions column. Select Target Collection: In the pop-up window, choose the Collection to add the Entity to. Entity Added: The Entity is automatically added to the selected Collection.","title":"Collections"},{"location":"platform-documentation/menus/collections/#collections","text":"","title":"Collections"},{"location":"platform-documentation/menus/collections/#collections-menu","text":"The Collections menu within Private workspace and Team projects in ELITEA serves as your central hub for organizing and managing your Collections . Think of it as your personal workspace for curating sets of related Entities (Prompts, Datasources, and Agents), allowing for efficient access, management, and sharing of your AI resources. Understanding Project Scopes: Private Workspace: Your personal and private area within ELITEA to create and manage your Entities and Collections. Only you have access to your Private workspace. Team Projects: Collaborative spaces for teams to work together on projects, sharing and managing Entities and Collections. Access to Team projects is controlled by project roles and permissions. Public Project: A shared, community space within ELITEA where published Prompts and Collections are available for all users to discover and utilize. The Purpose and Usefulness of Collections Collections are designed to enhance your workflow by providing a structured way to group and manage Entities. They offer significant benefits: Thematic Organization: Group Entities by themes, projects, or any relevant category for easy access. Efficiency: Consolidate related resources, saving time and effort in finding and utilizing them. Sharing Best Practices: Facilitate sharing and collaboration by grouping best-practice Entities into easily shareable units.","title":"Collections menu"},{"location":"platform-documentation/menus/collections/#accessing-the-collections-menu","text":"To access the Collections menu, navigate to the main menu sidebar within your Private or Team project and click on \"Collections\" .","title":"Accessing the Collections menu"},{"location":"platform-documentation/menus/collections/#layout-of-the-collections-menu","text":"The Collections menu presents your collections in a visually organized layout, typically using a Card List View as shown in the image above. Key elements of the Collections Menu interface include: \"+ Collection\" Button: Located at the top right corner, this button allows you to create new collections. Search Bar: Positioned at the top left, the Search bar enables you to quickly find specific collections by name or description. View Options: Icons for toggling between different view formats (e.g., Card list view, Table view) may be available, allowing you to customize how collections are displayed. Collection Cards: Each collection is represented by a card, displaying: Collection Name: The user-defined name of the collection. Collection Description: A brief description of the collection's purpose (if provided). User Avatar: The avatar of the user who created the collection. Action Icons: Icons for performing actions on the collection (Edit, Publish, Delete, Export).","title":"Layout of the Collections Menu"},{"location":"platform-documentation/menus/collections/#creating-a-new-collection","text":"Creating a collection allows you to organize and categorize your Entities for better accessibility and management. Follow these steps to create a new collection: Create New Collection: Click the \"+ Collection\" button located at the top right of the Collections menu. Define Collection Details: In the \"Create Collection\" dialog: Name: Enter a descriptive Name for the collection. Description: Write a concise Description explaining the collection's purpose. Create Collection: Click Create to create the collection.","title":"Creating a New Collection"},{"location":"platform-documentation/menus/collections/#exploring-collections-and-viewing-entities","text":"Exploring collections is straightforward and insightful: Open Collection: Click on a Collection Card or Name to view its contents. View Entities: Explore the list of Prompts, Datasources, and Agents within the collection. Interact with Entities: Within a collection, you can perform the following actions on individual Entities: View and Open Entities: Click on Entity cards to view their details and configurations. Add to Collection: Use the Bookmark icon on Entity cards or in the Actions menu to add Entities to other Collections.","title":"Exploring Collections and Viewing Entities"},{"location":"platform-documentation/menus/collections/#filtering-entities-within-a-collection","text":"Within the Collection Detail View , you can filter Entities for easier browsing and management: Filter by Type using Tabs: Use the All , Prompts , Datasources , and Agents tabs at the top of the Collection Detail View to view specific entity types within the collection. Filter by Tags: Use the \"Tags\" filter section, typically located on the right side, to narrow down the displayed list to Entities with specific tags.","title":"Filtering Entities within a Collection"},{"location":"platform-documentation/menus/collections/#modifying-a-collection","text":"To modify an existing collection: Edit Collection Details: Click the \"Edit\" icon on the Collection Card or within the Collection Detail View. Update Information: Modify the Name and/or Description in the \"Edit Collection\" dialog. Saving Changes: Click the \"Save\" button to apply your changes.","title":"Modifying a Collection"},{"location":"platform-documentation/menus/collections/#publishing-a-collection-public-project","text":"To publish a collection to the Public Project: Open Collection Detail View: Navigate to the Collections menu and open the collection you want to publish. Review Collection Contents: Ensure the collection is complete and contains at least one published entity. Publish Collection: Click the \"Publish collection\" icon within the collection detail view. Moderation and Approval: The collection will be submitted for moderation and, upon approval, published to the Public project.","title":"Publishing a Collection (Public Project)"},{"location":"platform-documentation/menus/collections/#deleting-a-collection","text":"To delete a collection: Locate Collection: Find the collection you want to delete in the Collections menu. Delete Collection: Click the \"Delete\" icon on the Collection Card or within the Collection Detail View. Confirmation: Confirm the deletion when prompted.","title":"Deleting a Collection"},{"location":"platform-documentation/menus/collections/#exporting-collections","text":"Exporting a collection allows you to save it as a JSON file for backup or sharing: Open Collection Detail View: Navigate to the Collections menu and open the collection you want to export. Export Collection: Click the \"Export Collection\" icon within the collection detail view. Download JSON File: A JSON file containing the collection data will be automatically downloaded to your device.","title":"Exporting Collections"},{"location":"platform-documentation/menus/collections/#importing-collections","text":"Importing collections allows you to add pre-built collections from JSON files: Import Collection: Click the \"Import\" button in the Collections menu. Select Collection File: In the \"Import Wizard,\" select the JSON file from your device. Configure Import Options: Choose the target project and select Entities to import in the Import Wizard. Start Import: Click the \"Import\" button to import the selected Entities. Locate Imported Entities: Find the imported Prompts, Datasources, and Agents in their respective menus. Important Note: The Collection entity itself is not automatically recreated during import. For more information about importing collections and entities, please refer to the Export and Import Guide .","title":"Importing Collections"},{"location":"platform-documentation/menus/collections/#how-to-add-an-entity-to-a-collection","text":"ELITEA offers a convenient Bookmark icon to add Entities to Collections directly from the Entity menus: Navigate to Entity Menu: Go to the Prompts , Datasources , or Agents menu. Locate the Entity to Add: Find the Entity you want to add to a Collection. Click the Bookmark Icon: Click the Bookmark icon associated with the Entity: Card List View : Top right corner of the Entity card. Table View : \"Add to collection\" option under the ellipsis icon ( ... ) in the Actions column. Select Target Collection: In the pop-up window, choose the Collection to add the Entity to. Entity Added: The Entity is automatically added to the selected Collection.","title":"How to Add an Entity to a Collection"},{"location":"platform-documentation/menus/datasources/","text":"Datasources Private project - Datasources menu Datasources play a pivotal role in broadening and enriching the functionalities of ELITEA and AI technologies. They enable the extension of LLMs by integrating user-specific or project-specific data, which is not initially part of the model\u2019s training set, thereby enhancing the LLM's context with tailored information. Creating a Datasource To set up a new datasource and augment your model's capabilities: Click the + Datasource button located at the top right corner. Fill out the Name and Description fields. Choose an Embedding model from the dropdown list provided. Select the desired Storage type from another dropdown menu. Optionally, add tags by typing a tag name or selecting from pre-existing tags in the Tags input box. Click Save to finalize the creation. Exploring Datasources Discovering the intricacies of a datasource is both simple and insightful: Click on the card or the name of a datasource to unveil its configurations, providing a detailed overview of its setup and usage. Connecting a Dataset to the Datasource The initial step involves linking your dataset to the desired datasource: Press the + icon to start adding a new dataset. Enter a name for your dataset. From the dropdown list, select the source type of your dataset. Available options include: File : Any supported file type for upload. Table : Supported file types with a table structure, such as CSV or XLSX. GIT : Any accessible Git repository. Confluence : Any Confluence page accessible to you. QTest : Any QTest project accessible to you. Depending on the selected source type, various configurations may be necessary to access the dataset source, primarily involving authentication and authorization parameters. This step is exempt for File and Table options since the files will be directly uploaded. Source type - File ELITEA supports a variety of file types and offers flexible settings to handle your documents effectively. Below is an easy-to-understand breakdown of the options, settings, and parameters available for configuration. Name - specify a unique name for your source configuration. This helps in easily identifying and managing multiple sources. Choose File Option - select the file you wish to process. ELITEA supports a range of commonly used file types, ensuring compatibility and ease of use. Supported file types: PDF, DOCX, TXT, JSON. Advanced Settings - under this section, additional features enable further customization of how your file is processed. Split Pages - when enabled, each page of your document is treated as a separate entity. This is particularly useful when dealing with PDF documents, enabling more granular control over the analysis or processing of individual pages. Parse Tables by Rows Selecting this option ensures that any tables within your document are parsed row by row, maintaining the structure and context. This setting is valuable when dealing with documents that contain tabular information, ensuring the data remains organized and comprehensible. Default Document Loader - choose the mechanism by which your document is loaded into the system. Each loader handles your file differently, catering to specific needs. TextLoader - optimized for plain text documents, ensuring swift and efficient loading. PythonLoader - best suited for technical or coded documents, offering more sophisticated parsing capabilities. Extension Whitelist - specify file extensions that are explicitly allowed. This security measure ensures only designated file types are processed, safeguarding against unwanted or potentially harmful files. List the extensions separated by commas (e.g., .pdf , .docx , .txt ), overriding the default supported types if necessary. Extension Blacklist - conversely, list file extensions you wish to exclude from processing. Any file type (e.g., .exe , .bin , .png ) mentioned here will be automatically rejected, further enhancing security and control over the documents your system handles. Source type - Table This functionality is crucial for users who work with structured data in formats such as spreadsheets or structured text files. The aim is to make the process straightforward for users without requiring deep technical knowledge. Here, we outline the options, settings, and parameters available for your table data sources. Name - specify a unique name for your source configuration. This helps in easily identifying and managing multiple sources. Choose File Option - select the file you wish to process. ELITEA supports a range of commonly used file types, ensuring compatibility and ease of use. Supported File Types: CSV, JSON, XLSX. Columns - specify which column(s) within your table you want to focus on. These columns should contain the data you wish to analyze or use for generating embeddings. You can select single or multiple columns depending on your requirement. This flexibility allows you to tailor the analysis to the specific data points that are most valuable to your objectives. To select multiple columns, separate each column name with a comma (\",\"). JSON Documents - enable this option if your table data is structured as JSON documents, particularly relevant when dealing with JSON files. This tells the system to parse the file as a collection of JSON entries, allowing for a more nuanced understanding and utilization of nested data structures within the file. Raw Content - when enabled, this setting ensures that your selected data is treated as raw content, bypassing any default preprocessing or formatting. This is particularly useful when you want the data to be ingested in its purest form, without any alterations that might affect its original structure or meaning. Source type - GIT For users who rely on Git repositories to manage their code, documents, or other types of projects, this source type allows to streamline the process of linking and extracting data from these repositories. Here, we outline the options, settings, and parameters available for your GIT source type. Name - specify a unique name for your source configuration. This helps in easily identifying and managing multiple sources. URL - link to Git Repo. To connect to your Git repository, you'll need to provide the URL. ELITEA supports two types of Git repository links: SSH - for a secure and password-less connection. If you choose this option, an SSH key pair is required, with the public key added to your Git account and the private key entered in the subsequent SSH Key field. For SSH : input the SSH Key in the designated field. HTTPS - a widely used method that might require username and password authentication based on the repository's access settings. For HTTPS : if prompted, enter the username and password to authenticate. Important Note : To ensure a successful connection, you must clone your Git repository and provide the cloned Git link . Simply copying the Git repository address from your browser's address bar is not sufficient. Cloning the repository ensures that you're using a valid, accessible link that ELITEA can connect to without issues. Branch - here, specify the branch within your Git repository you wish to access. By default, the ' main ' branch is selected, but you may adjust this to any branch name that suits your current focus or project needs. Advanced Settings - under this tab, we offer options to further customize how data is retrieved from your Git repository. Multithreading - enabling multithreading can significantly speed up the process of fetching data from your Git repo, especially beneficial for large repositories or when network latency is a concern. This option allows the system to perform multiple operations in parallel, reducing overall extraction time. Default Document Loader - choose the mechanism by which your document is loaded into the system. Each loader handles your file differently, catering to specific needs. TextLoader : - optimized for plain text documents, ensuring swift and efficient loading. PythonLoader : - best suited for technical or coded documents, offering more sophisticated parsing capabilities. Extension Whitelist - specify file extensions that are explicitly allowed. This security measure ensures only designated file types are processed, safeguarding against unwanted or potentially harmful files. List the extensions separated by commas (e.g., .pdf , .docx , .txt ), overriding the default supported types if necessary. Extension Blacklist - conversely, list file extensions you wish to exclude from processing. Any file type (e.g., .exe , .bin , .png ) mentioned here will be automatically rejected, further enhancing security and control over the documents your system handles. Source type - Confluence For users who rely on Confluence pages to manage their information, documents, or other types of projects, this source type allows to streamline the process of linking and extracting data from these knowledge pages. Here, we outline the options, settings, and parameters available for your Confluence source type. Name - specify a unique name for your source configuration. This helps in easily identifying and managing multiple sources. URL - link to Confluence. To connect to your Confluence KB, you'll need to provide the URL. No need to provide the full link as the page (e.g. https://www.kb.epam.com/ is enough) handling must be done with the help of Filters option. Regarding authentication, you have two options to securely connect to Confluence: API Key : If you choose the API Key option, you'll need to generate an API Key from your Confluence account and input it in the provided API Key field. The Secret and Password options are available. Token : Similarly, if the Token option suits you better, you'll have to create an authentication Token from your Confluence user settings and enter it in the Token field. The Secret and Password options are available. Note : These authentication methods ensure secure access to your Confluence content, maintaining the integrity and confidentiality of your data. Username - input the username associated with your Confluence account. This is the same username you use to log in to your Confluence site. Hosting Option - choose the appropriate hosting type for your Confluence setup: Cloud - if your Confluence is hosted on Atlassian\u2019s cloud. Server - if your Confluence is hosted on your own servers or enterprise environment. Important Note : When connecting to Epam's Confluence, ensure you select the Server option to establish the correct configuration. Note :This distinction is crucial for establishing the correct connection and accessing your data appropriately. Filter - use the filter option to refine which Confluence pages you wish to fetch. You can filter by: Space Key - to fetch pages from specific Confluence spaces. Page IDs - to target specific pages. Labels - to retrieve pages tagged with specific labels. Important Note : To establish a successful connection to Confluence from ELITEA, you must select one of these filters and provide the corresponding value for it. This step is crucial as it defines the scope of content that ELITEA will access and import from Confluence, aligning the integration process with your project's specific requirements. Advanced Settings - these settings offer additional controls over how your Confluence content is fetched and presented: Include Attachment - check this if you want to include page attachments in your data fetch. Useful for cases where documents or images are integral to your content. Content Format - select the format in which you wish to view or receive the content. Options include: View - the page content as displayed in Confluence. Storage - the raw storage format (HTML/XML) used by Confluence. Anonymous - content as it appears to users not logged in. Editor - content in an editable format. Pages Limit Per Request - define how many pages you want to fetch in a single request, with a default setting of 50. This helps manage data volume and response times. Max Total Pages - set the maximum number of pages the system should fetch, defaulting to 1000. Useful for limiting data scope and ensuring performance. Source type - QTest Integrating QTest with ELITEA enhances your test management by connecting directly to QTest Test Case Management System (TCMS). This integration allows you to select test cases for duplication checks, search functionalities, and leverage manual test cases for future automation with Generative AI. Below, we detail the configuration options, settings, and parameters available for the QTest source type. URL - the link to your QTest. Note : You must provide the link to your QTest in the following format https://<host of your installation of QTest>/api/<api version used> QTest Project ID - the specific project ID within QTest you wish to connect to. Enter the project ID to direct ELITEA to the correct QTest project. API Key - ELITEA supports two types of authentication methods for QTest API Keys to ensure secure access: Secret - Utilize a confidential key configured in the Secrets feature within ELITEA HUB for enhanced security during API requests. This secret can be selected from the secrets you have set up previously. Password - an option for API access, that verifies authorized requesters through a password. Test Cases per Page - configures the number of test cases displayed per page within the QTest for selection. DQL for QTest - this setting allows you to query and filter data before indexing it. Utilize DQL (Data Query Language) to define specific criteria that refine the data fetched from QTest, ensuring that only relevant data is processed and indexed. Columns - specify the columns within your test cases that you wish to focus on for analysis or embedding generation. Select single or multiple columns to tailor the analysis to your project's specific needs. To select multiple columns, separate each column name with a comma (\",\"). TRANSFORMERS Transformers enhance your documents by extracting significant keywords, summarizing content, and improving searchability. Please note if you don't clearly understand the purpose of the parameters and options available here than leave them as is. Don't make any changes. Extract Keywords - options include: For Document - analyses the entire document for keyword extraction. For Chunks - processes document sections independently for more granular insights. Keyword Extractor - the only available option is KeyBert , designed for efficient keyword extraction. Keyword Strategy - choices range from Max Sum , to Max MMR High , and Max MMR Low , each offering different focuses on relevance and diversity. Maximum Keyword Count - defines the limit on the number of keywords to be extracted. Split By - determines how the document is sectioned for analysis, with options like Chunks, Lines, Paragraphs, Sentences, or Nothing. SUMMARIZATION Summarization utilizes LLMs to condense documents into their core messages. Due to the high computational demand, use of this feature incurs additional costs. Please note if you don't clearly understand the purpose of the parameters and options available here than leave them as is. Don't make any changes. Summarization model - select from available LLMs based on your document\u2019s complexity. Document summarization - enables summarization of the entire document. Chunk summarization - applies summarization to specific sections or chunks of the document. Finally, click Create to index the dataset for use. Note that processing time can take up to 10 minutes, depending on the source type and size. Note : Multiple datasets can be utilized within the same datasource, enhancing versatility and depth of analysis. CONTEXT Context input field is a designated area for providing instructions (prompt'), that facilitates the utilization of information from configured datasets via LLMs. This prompt guides the LLM on how to interpret and analyze the dataset, ensuring that the generated output aligns with the user's specific objectives. Note : By providing detailed and clear instructions in the Context field, users effectively guide the processing and analysis of their datasets, leveraging the robust capabilities of LLMs for tailored insights and actions. WELCOME MESSAGE The Welcome Message feature allows you to provide additional context for prompts, datasources, and agents. Currently, the Welcome Message is sent to LLM along with other instructions. How to Add the Welcome Message : Add the Welcome Message : Type the welcome message text in the input field. Save the Configuration : After entering the desired text, ensure to save the changes to the datasource. This action makes the configured welcome message available to user in the Chat section. Using the Welcome Message : Go to the Chat section of the datasource. Here, you will see the configured Welcome Message . It will provide additional notification, instruction to the user. Examples of Welcome Message : \"Use this datasource for asking questions about FT Armenia\" \"Don't forget to double-check the generated responses\" CONVERSATION STARTERS The Conversation Starter feature enables you to configure and add predefined text that can be used to initiate a conversation when executing an agent. This feature is particularly useful for setting a consistent starting point for interactions facilitated by the datasource. How to Add a Conversation Starter : Access the Configuration Panel : Navigate to the Conversation Starter section. Add a Conversation Starter : Click the + icon to open the text input field where you can type the text you wish to use as a conversation starter. Save the Configuration : After entering the desired text, ensure to save the changes to the prompt. This action makes the configured conversation starter available for use. Using a Conversation Starter : Initiate a Conversation : Go to the Chat section of the datasource. Here, you will find the saved conversation starters listed. Click on the desired starter to automatically populate the chat input and execute the datasource. Examples of Conversation Starters : \"How to create a prompt?\" \"I am on bench, and want to know what activities can be done\" By setting up conversation starters, you streamline the process of initiating specific tasks or queries, making your interactions with the datasource more efficient and standardized. Working with Your Dataset After you've successfully created your dataset(s), a variety of features become available for you to explore and utilize. These features are designed to help you interact with your dataset in a more intuitive and productive manner. Here's a brief overview of what you can do: Chat The Chat feature is tailored for conversational AI models, enabling you to engage in dialogues or interactions akin to conversing with a human. Whether you're asking a question, making a statement, or giving a command, this feature is designed to generate responses that mimic human conversation. To use the Chat and query info : Select the Embedding model from the dropdown list. Note : It must be the same one which is used for creating the datasource. Choose an Chat model (e.g., gpt-4-0125-preview, gpt-35-turbo, etc.) suited to your conversation needs. Optionally, you can configure Advanced Settings for more tailord outputs by clicking the Settings icon. Note : Please exercise caution with these settings. If unsure about their functions, it's advisable to leave them at their default values. The following settings are available: Initial Lookup Result (1 \u2013 50) - specifies the number of initial results retrieved from the indexed dataset(s) for further processing. Higher values : More initial results are retrieved, which can increase the chances of finding relevant information but may slow down processing. Lower values : Fewer initial results are retrieved, which can speed up processing but might miss some relevant information. Pages Per Document (1 \u2013 30) - defines the number of pages to be considered per document during the retrieval or processing phase. Higher values : More pages per document are considered, which can provide more comprehensive information but may slow down processing. Lower values : Fewer pages per document are considered, which can speed up processing but might miss some important details. Expected Search Results (1 \u2013 40) - sets the anticipated number of search results to be returned, guiding the system's retrieval scope. Higher values : More search results are returned, which can provide a broader range of information but may include less relevant results. Lower values : Fewer search results are returned, which can provide more focused and relevant information but might miss some useful results. Temperature (0.1-1.0) - adjusts the level of creativity or unpredictability in responses. Higher values : Responses are more creative and varied, but may be less consistent and more unpredictable. Lower values : Responses are more consistent and predictable, but may be less creative and varied. Top P (0-1) - determines the cumulative probability threshold for selecting words, balancing between creativity and consistency. Higher values : A wider range of words is considered, leading to more creative and diverse responses. Lower values : A narrower range of words is considered, leading to more consistent and predictable responses. Top K (1-40) - limits the choice of words to the K most probable, affecting the response's diversity and predictability. Higher values : More words are considered, leading to more diverse and potentially creative responses. Lower values : Fewer words are considered, leading to more predictable and focused responses. Maximum length - sets the cap on the response length, helping tailor responses to be as concise or detailed as desired. Higher values : Responses can be longer and more detailed. Lower values : Responses are shorter and more concise. Type your text in the chat box and click the Send icon to initiate the dialogue. Additional Interaction Features: Auto scroll to bottom : This option can be toggled on or off to automatically scroll to the bottom of the output as it is being generated. This feature is helpful during long outputs to keep the most recent content visible. Full Screen Mode : Increase the size of the output window for better visibility and focus. This mode can be activated to expand the output interface to the full screen. Post-Output Actions: Continue the Dialogue : To keep the conversation going, simply type your next question or command in the chat box and click the Send icon. Copy the Output : Click the Copy to clipboard icon to copy the generated text for use elsewhere. Regenerate Response : If the output isn't satisfactory, click the Regenerate icon to prompt the Gen AI to produce a new response. Delete Output : To remove the current output from the chat, click the Delete icon. Purge Chat History : For a fresh start or to clear sensitive data, click the Clean icon to erase the chat history. Specialized Download Options for Tabular outputs. When the Gen AI generates output in a tabular format, additional options become available to manage and utilize this structured data: Download as xlsx : Allows you to save the tabular output directly in an Excel spreadsheet format, facilitating easy data manipulation and analysis. Copy as markdown : Enables copying the tabular output in markdown format, suitable for use in markdown-supported environments like GitHub or blogging platforms. Copy as html : Permits copying the tabular output in HTML format, ideal for integration into web pages or emails, preserving the formatting and structure. Search The Search feature allows you to quickly locate specific information within your indexed dataset. How to Conduct a Search : Select the Embedding model from the dropdown list. Note : It must be the same one which is used for creating the datasource. Optionally, you can configure Advanced Settings for more tailord outputs by clicking the Settings icon. Note : Please exercise caution with these settings. If unsure about their functions, it's advisable to leave them at their default values. The following settings are available: Initial Lookup Result (1 \u2013 50) - specifies the number of initial results retrieved from the indexed dataset(s) for further processing. Higher values : More initial results are retrieved, which can increase the chances of finding relevant information but may slow down processing. Lower values : Fewer initial results are retrieved, which can speed up processing but might miss some relevant information. Pages Per Document (1 \u2013 30) - defines the number of pages to be considered per document during the retrieval or processing phase. Higher values : More pages per document are considered, which can provide more comprehensive information but may slow down processing. Lower values : Fewer pages per document are considered, which can speed up processing but might miss some important details. Expected Search Results (1 \u2013 40) - sets the anticipated number of search results to be returned, guiding the system's retrieval scope. Higher values : More search results are returned, which can provide a broader range of information but may include less relevant results. Lower values : Fewer search results are returned, which can provide more focused and relevant information but might miss some useful results. String content - determines whether the system should include or consider specific text data in its processing or generation. Type your query into the input field and hit the Send icon. Post-Output Actions: View Selection : A tool for quickly switching between Code view and List view views. Copy the Output : Click the Copy to clipboard icon to copy the generated text for use elsewhere. Full Screen Mode : Increase the size of the output window for better visibility and focus. This mode can be activated to expand the output interface to the full screen. Purge Chat History : For a fresh start or to clear sensitive data, click the Clean icon to erase the chat history. Deduplicate The Deduplication is a handy feature for identifying duplicate information. How to Run Deduplication : Select the Embedding model from the dropdown list. Note : It must be the same one which is used for creating the datasource. Configure the following settings: Cut-off Score (0.1-1.0) - determines the threshold for identifying duplicate content based on similarity scores. Higher values : More items will be excluded , as they will not be considered similar enough. This can be useful if you want to ensure that only highly unique content remains. Lower values : More items will be retained , as they will be considered similar enough. This can be useful if you want to keep more variations of the content. Optionally, you can configure Advanced Settings for more tailord outputs by clicking the Settings icon. Note : Please exercise caution with these settings. If unsure about their functions, it's advisable to leave them at their default values. The following settings are available: Show Additional Metadata - a checkbox option that determines whether to display extra information about the content. Selected : Additional metadata will be shown, providing more context and details about the content. Not Selected : Additional metadata will not be shown, resulting in a cleaner and simpler display of the content. Exclude Fields - a comma-separated list of field names that should be excluded from the deduplication process. Specified fields : The fields listed will be ignored during deduplication, which means differences in these fields will not affect whether content is considered a duplicate. This can be useful if certain fields (like timestamps or IDs) are not relevant to the deduplication criteria. No fields specified : All fields will be considered during deduplication, which means any differences in any field can affect whether content is considered a duplicate. Click the Run button to start the process. Note: Remember, deduplication efforts will hinge upon the parameters you've set for the dataset. By using these features, you\u2019re equipped to enhance your dataset, making it a more efficient and effective tool for your AI applications. Proceed with adjustments only if you're confident in your understanding of their implications. Post-Output Actions: View Selection : A tool for quickly switching between Code view and List view views. Show differences : An option allowing to quickly show/hide differences. Download result : Allows you to save the deduplication results directly in an Excel spreadsheet format, facilitating easy data manipulation and analysis. Copy the Output : Click the Copy to clipboard icon to copy the generated text for use elsewhere. Full Screen Mode : Increase the size of the output window for better visibility and focus. This mode can be activated to expand the output interface to the full screen. Purge Chat History : For a fresh start or to clear sensitive data, click the Clean icon to erase the chat history. Public project - Datasources menu The Datasources menu within Public project showcases a collection of published and shared datasources within the community. Layout of the Datasources Menu The Datasources menu is organized into three distinct pages, each designed to offer a unique perspective on the available datasources: Latest : Displays all recently published datasources, providing a fresh look at the newest contributions to the community. My Likes : Highlights the datasources that you have liked. This personalized page allows you to revisit favorites effortlessly. Trending : Showcases the datasources with the highest number of likes, serving as a valuable resource for discovering top-rated datasources that hold significant value and popularity within the community. Engaging with Published Datasources Interaction within the community is highly encouraged to recognize and appreciate valuable datasources. The following actions enable active participation: Liking Published Datasources Upon publication, a datasource becomes a crucial resource for the community. To support and acknowledge a datasource, use the Like functionality: To like a datasource, click on the Heart icon associated with it. If you wish to withdraw your like, simply click the Heart icon again to Unlike the datasource. Other Actions for Published Datasources Using Published Datasources : View and run datasources by clicking on the datasource card or name. Refer to the Exploring Datasources section for guidance on using datasource. Note : Modifications to a published datasource cannot be saved for future use.","title":"Datasources"},{"location":"platform-documentation/menus/datasources/#datasources","text":"","title":"Datasources"},{"location":"platform-documentation/menus/datasources/#private-project-datasources-menu","text":"Datasources play a pivotal role in broadening and enriching the functionalities of ELITEA and AI technologies. They enable the extension of LLMs by integrating user-specific or project-specific data, which is not initially part of the model\u2019s training set, thereby enhancing the LLM's context with tailored information.","title":"Private project - Datasources menu"},{"location":"platform-documentation/menus/datasources/#creating-a-datasource","text":"To set up a new datasource and augment your model's capabilities: Click the + Datasource button located at the top right corner. Fill out the Name and Description fields. Choose an Embedding model from the dropdown list provided. Select the desired Storage type from another dropdown menu. Optionally, add tags by typing a tag name or selecting from pre-existing tags in the Tags input box. Click Save to finalize the creation.","title":"Creating a Datasource"},{"location":"platform-documentation/menus/datasources/#exploring-datasources","text":"Discovering the intricacies of a datasource is both simple and insightful: Click on the card or the name of a datasource to unveil its configurations, providing a detailed overview of its setup and usage.","title":"Exploring Datasources"},{"location":"platform-documentation/menus/datasources/#connecting-a-dataset-to-the-datasource","text":"The initial step involves linking your dataset to the desired datasource: Press the + icon to start adding a new dataset. Enter a name for your dataset. From the dropdown list, select the source type of your dataset. Available options include: File : Any supported file type for upload. Table : Supported file types with a table structure, such as CSV or XLSX. GIT : Any accessible Git repository. Confluence : Any Confluence page accessible to you. QTest : Any QTest project accessible to you. Depending on the selected source type, various configurations may be necessary to access the dataset source, primarily involving authentication and authorization parameters. This step is exempt for File and Table options since the files will be directly uploaded.","title":"Connecting a Dataset to the Datasource"},{"location":"platform-documentation/menus/datasources/#source-type-file","text":"ELITEA supports a variety of file types and offers flexible settings to handle your documents effectively. Below is an easy-to-understand breakdown of the options, settings, and parameters available for configuration. Name - specify a unique name for your source configuration. This helps in easily identifying and managing multiple sources. Choose File Option - select the file you wish to process. ELITEA supports a range of commonly used file types, ensuring compatibility and ease of use. Supported file types: PDF, DOCX, TXT, JSON. Advanced Settings - under this section, additional features enable further customization of how your file is processed. Split Pages - when enabled, each page of your document is treated as a separate entity. This is particularly useful when dealing with PDF documents, enabling more granular control over the analysis or processing of individual pages. Parse Tables by Rows Selecting this option ensures that any tables within your document are parsed row by row, maintaining the structure and context. This setting is valuable when dealing with documents that contain tabular information, ensuring the data remains organized and comprehensible. Default Document Loader - choose the mechanism by which your document is loaded into the system. Each loader handles your file differently, catering to specific needs. TextLoader - optimized for plain text documents, ensuring swift and efficient loading. PythonLoader - best suited for technical or coded documents, offering more sophisticated parsing capabilities. Extension Whitelist - specify file extensions that are explicitly allowed. This security measure ensures only designated file types are processed, safeguarding against unwanted or potentially harmful files. List the extensions separated by commas (e.g., .pdf , .docx , .txt ), overriding the default supported types if necessary. Extension Blacklist - conversely, list file extensions you wish to exclude from processing. Any file type (e.g., .exe , .bin , .png ) mentioned here will be automatically rejected, further enhancing security and control over the documents your system handles.","title":"Source type - File"},{"location":"platform-documentation/menus/datasources/#source-type-table","text":"This functionality is crucial for users who work with structured data in formats such as spreadsheets or structured text files. The aim is to make the process straightforward for users without requiring deep technical knowledge. Here, we outline the options, settings, and parameters available for your table data sources. Name - specify a unique name for your source configuration. This helps in easily identifying and managing multiple sources. Choose File Option - select the file you wish to process. ELITEA supports a range of commonly used file types, ensuring compatibility and ease of use. Supported File Types: CSV, JSON, XLSX. Columns - specify which column(s) within your table you want to focus on. These columns should contain the data you wish to analyze or use for generating embeddings. You can select single or multiple columns depending on your requirement. This flexibility allows you to tailor the analysis to the specific data points that are most valuable to your objectives. To select multiple columns, separate each column name with a comma (\",\"). JSON Documents - enable this option if your table data is structured as JSON documents, particularly relevant when dealing with JSON files. This tells the system to parse the file as a collection of JSON entries, allowing for a more nuanced understanding and utilization of nested data structures within the file. Raw Content - when enabled, this setting ensures that your selected data is treated as raw content, bypassing any default preprocessing or formatting. This is particularly useful when you want the data to be ingested in its purest form, without any alterations that might affect its original structure or meaning.","title":"Source type - Table"},{"location":"platform-documentation/menus/datasources/#source-type-git","text":"For users who rely on Git repositories to manage their code, documents, or other types of projects, this source type allows to streamline the process of linking and extracting data from these repositories. Here, we outline the options, settings, and parameters available for your GIT source type. Name - specify a unique name for your source configuration. This helps in easily identifying and managing multiple sources. URL - link to Git Repo. To connect to your Git repository, you'll need to provide the URL. ELITEA supports two types of Git repository links: SSH - for a secure and password-less connection. If you choose this option, an SSH key pair is required, with the public key added to your Git account and the private key entered in the subsequent SSH Key field. For SSH : input the SSH Key in the designated field. HTTPS - a widely used method that might require username and password authentication based on the repository's access settings. For HTTPS : if prompted, enter the username and password to authenticate. Important Note : To ensure a successful connection, you must clone your Git repository and provide the cloned Git link . Simply copying the Git repository address from your browser's address bar is not sufficient. Cloning the repository ensures that you're using a valid, accessible link that ELITEA can connect to without issues. Branch - here, specify the branch within your Git repository you wish to access. By default, the ' main ' branch is selected, but you may adjust this to any branch name that suits your current focus or project needs. Advanced Settings - under this tab, we offer options to further customize how data is retrieved from your Git repository. Multithreading - enabling multithreading can significantly speed up the process of fetching data from your Git repo, especially beneficial for large repositories or when network latency is a concern. This option allows the system to perform multiple operations in parallel, reducing overall extraction time. Default Document Loader - choose the mechanism by which your document is loaded into the system. Each loader handles your file differently, catering to specific needs. TextLoader : - optimized for plain text documents, ensuring swift and efficient loading. PythonLoader : - best suited for technical or coded documents, offering more sophisticated parsing capabilities. Extension Whitelist - specify file extensions that are explicitly allowed. This security measure ensures only designated file types are processed, safeguarding against unwanted or potentially harmful files. List the extensions separated by commas (e.g., .pdf , .docx , .txt ), overriding the default supported types if necessary. Extension Blacklist - conversely, list file extensions you wish to exclude from processing. Any file type (e.g., .exe , .bin , .png ) mentioned here will be automatically rejected, further enhancing security and control over the documents your system handles.","title":"Source type - GIT"},{"location":"platform-documentation/menus/datasources/#source-type-confluence","text":"For users who rely on Confluence pages to manage their information, documents, or other types of projects, this source type allows to streamline the process of linking and extracting data from these knowledge pages. Here, we outline the options, settings, and parameters available for your Confluence source type. Name - specify a unique name for your source configuration. This helps in easily identifying and managing multiple sources. URL - link to Confluence. To connect to your Confluence KB, you'll need to provide the URL. No need to provide the full link as the page (e.g. https://www.kb.epam.com/ is enough) handling must be done with the help of Filters option. Regarding authentication, you have two options to securely connect to Confluence: API Key : If you choose the API Key option, you'll need to generate an API Key from your Confluence account and input it in the provided API Key field. The Secret and Password options are available. Token : Similarly, if the Token option suits you better, you'll have to create an authentication Token from your Confluence user settings and enter it in the Token field. The Secret and Password options are available. Note : These authentication methods ensure secure access to your Confluence content, maintaining the integrity and confidentiality of your data. Username - input the username associated with your Confluence account. This is the same username you use to log in to your Confluence site. Hosting Option - choose the appropriate hosting type for your Confluence setup: Cloud - if your Confluence is hosted on Atlassian\u2019s cloud. Server - if your Confluence is hosted on your own servers or enterprise environment. Important Note : When connecting to Epam's Confluence, ensure you select the Server option to establish the correct configuration. Note :This distinction is crucial for establishing the correct connection and accessing your data appropriately. Filter - use the filter option to refine which Confluence pages you wish to fetch. You can filter by: Space Key - to fetch pages from specific Confluence spaces. Page IDs - to target specific pages. Labels - to retrieve pages tagged with specific labels. Important Note : To establish a successful connection to Confluence from ELITEA, you must select one of these filters and provide the corresponding value for it. This step is crucial as it defines the scope of content that ELITEA will access and import from Confluence, aligning the integration process with your project's specific requirements. Advanced Settings - these settings offer additional controls over how your Confluence content is fetched and presented: Include Attachment - check this if you want to include page attachments in your data fetch. Useful for cases where documents or images are integral to your content. Content Format - select the format in which you wish to view or receive the content. Options include: View - the page content as displayed in Confluence. Storage - the raw storage format (HTML/XML) used by Confluence. Anonymous - content as it appears to users not logged in. Editor - content in an editable format. Pages Limit Per Request - define how many pages you want to fetch in a single request, with a default setting of 50. This helps manage data volume and response times. Max Total Pages - set the maximum number of pages the system should fetch, defaulting to 1000. Useful for limiting data scope and ensuring performance.","title":"Source type - Confluence"},{"location":"platform-documentation/menus/datasources/#source-type-qtest","text":"Integrating QTest with ELITEA enhances your test management by connecting directly to QTest Test Case Management System (TCMS). This integration allows you to select test cases for duplication checks, search functionalities, and leverage manual test cases for future automation with Generative AI. Below, we detail the configuration options, settings, and parameters available for the QTest source type. URL - the link to your QTest. Note : You must provide the link to your QTest in the following format https://<host of your installation of QTest>/api/<api version used> QTest Project ID - the specific project ID within QTest you wish to connect to. Enter the project ID to direct ELITEA to the correct QTest project. API Key - ELITEA supports two types of authentication methods for QTest API Keys to ensure secure access: Secret - Utilize a confidential key configured in the Secrets feature within ELITEA HUB for enhanced security during API requests. This secret can be selected from the secrets you have set up previously. Password - an option for API access, that verifies authorized requesters through a password. Test Cases per Page - configures the number of test cases displayed per page within the QTest for selection. DQL for QTest - this setting allows you to query and filter data before indexing it. Utilize DQL (Data Query Language) to define specific criteria that refine the data fetched from QTest, ensuring that only relevant data is processed and indexed. Columns - specify the columns within your test cases that you wish to focus on for analysis or embedding generation. Select single or multiple columns to tailor the analysis to your project's specific needs. To select multiple columns, separate each column name with a comma (\",\").","title":"Source type - QTest"},{"location":"platform-documentation/menus/datasources/#transformers","text":"Transformers enhance your documents by extracting significant keywords, summarizing content, and improving searchability. Please note if you don't clearly understand the purpose of the parameters and options available here than leave them as is. Don't make any changes. Extract Keywords - options include: For Document - analyses the entire document for keyword extraction. For Chunks - processes document sections independently for more granular insights. Keyword Extractor - the only available option is KeyBert , designed for efficient keyword extraction. Keyword Strategy - choices range from Max Sum , to Max MMR High , and Max MMR Low , each offering different focuses on relevance and diversity. Maximum Keyword Count - defines the limit on the number of keywords to be extracted. Split By - determines how the document is sectioned for analysis, with options like Chunks, Lines, Paragraphs, Sentences, or Nothing.","title":"TRANSFORMERS"},{"location":"platform-documentation/menus/datasources/#summarization","text":"Summarization utilizes LLMs to condense documents into their core messages. Due to the high computational demand, use of this feature incurs additional costs. Please note if you don't clearly understand the purpose of the parameters and options available here than leave them as is. Don't make any changes. Summarization model - select from available LLMs based on your document\u2019s complexity. Document summarization - enables summarization of the entire document. Chunk summarization - applies summarization to specific sections or chunks of the document. Finally, click Create to index the dataset for use. Note that processing time can take up to 10 minutes, depending on the source type and size. Note : Multiple datasets can be utilized within the same datasource, enhancing versatility and depth of analysis.","title":"SUMMARIZATION"},{"location":"platform-documentation/menus/datasources/#context","text":"Context input field is a designated area for providing instructions (prompt'), that facilitates the utilization of information from configured datasets via LLMs. This prompt guides the LLM on how to interpret and analyze the dataset, ensuring that the generated output aligns with the user's specific objectives. Note : By providing detailed and clear instructions in the Context field, users effectively guide the processing and analysis of their datasets, leveraging the robust capabilities of LLMs for tailored insights and actions.","title":"CONTEXT"},{"location":"platform-documentation/menus/datasources/#welcome-message","text":"The Welcome Message feature allows you to provide additional context for prompts, datasources, and agents. Currently, the Welcome Message is sent to LLM along with other instructions. How to Add the Welcome Message : Add the Welcome Message : Type the welcome message text in the input field. Save the Configuration : After entering the desired text, ensure to save the changes to the datasource. This action makes the configured welcome message available to user in the Chat section. Using the Welcome Message : Go to the Chat section of the datasource. Here, you will see the configured Welcome Message . It will provide additional notification, instruction to the user. Examples of Welcome Message : \"Use this datasource for asking questions about FT Armenia\" \"Don't forget to double-check the generated responses\"","title":"WELCOME MESSAGE"},{"location":"platform-documentation/menus/datasources/#conversation-starters","text":"The Conversation Starter feature enables you to configure and add predefined text that can be used to initiate a conversation when executing an agent. This feature is particularly useful for setting a consistent starting point for interactions facilitated by the datasource. How to Add a Conversation Starter : Access the Configuration Panel : Navigate to the Conversation Starter section. Add a Conversation Starter : Click the + icon to open the text input field where you can type the text you wish to use as a conversation starter. Save the Configuration : After entering the desired text, ensure to save the changes to the prompt. This action makes the configured conversation starter available for use. Using a Conversation Starter : Initiate a Conversation : Go to the Chat section of the datasource. Here, you will find the saved conversation starters listed. Click on the desired starter to automatically populate the chat input and execute the datasource. Examples of Conversation Starters : \"How to create a prompt?\" \"I am on bench, and want to know what activities can be done\" By setting up conversation starters, you streamline the process of initiating specific tasks or queries, making your interactions with the datasource more efficient and standardized.","title":"CONVERSATION STARTERS"},{"location":"platform-documentation/menus/datasources/#working-with-your-dataset","text":"After you've successfully created your dataset(s), a variety of features become available for you to explore and utilize. These features are designed to help you interact with your dataset in a more intuitive and productive manner. Here's a brief overview of what you can do:","title":"Working with Your Dataset"},{"location":"platform-documentation/menus/datasources/#chat","text":"The Chat feature is tailored for conversational AI models, enabling you to engage in dialogues or interactions akin to conversing with a human. Whether you're asking a question, making a statement, or giving a command, this feature is designed to generate responses that mimic human conversation. To use the Chat and query info : Select the Embedding model from the dropdown list. Note : It must be the same one which is used for creating the datasource. Choose an Chat model (e.g., gpt-4-0125-preview, gpt-35-turbo, etc.) suited to your conversation needs. Optionally, you can configure Advanced Settings for more tailord outputs by clicking the Settings icon. Note : Please exercise caution with these settings. If unsure about their functions, it's advisable to leave them at their default values. The following settings are available: Initial Lookup Result (1 \u2013 50) - specifies the number of initial results retrieved from the indexed dataset(s) for further processing. Higher values : More initial results are retrieved, which can increase the chances of finding relevant information but may slow down processing. Lower values : Fewer initial results are retrieved, which can speed up processing but might miss some relevant information. Pages Per Document (1 \u2013 30) - defines the number of pages to be considered per document during the retrieval or processing phase. Higher values : More pages per document are considered, which can provide more comprehensive information but may slow down processing. Lower values : Fewer pages per document are considered, which can speed up processing but might miss some important details. Expected Search Results (1 \u2013 40) - sets the anticipated number of search results to be returned, guiding the system's retrieval scope. Higher values : More search results are returned, which can provide a broader range of information but may include less relevant results. Lower values : Fewer search results are returned, which can provide more focused and relevant information but might miss some useful results. Temperature (0.1-1.0) - adjusts the level of creativity or unpredictability in responses. Higher values : Responses are more creative and varied, but may be less consistent and more unpredictable. Lower values : Responses are more consistent and predictable, but may be less creative and varied. Top P (0-1) - determines the cumulative probability threshold for selecting words, balancing between creativity and consistency. Higher values : A wider range of words is considered, leading to more creative and diverse responses. Lower values : A narrower range of words is considered, leading to more consistent and predictable responses. Top K (1-40) - limits the choice of words to the K most probable, affecting the response's diversity and predictability. Higher values : More words are considered, leading to more diverse and potentially creative responses. Lower values : Fewer words are considered, leading to more predictable and focused responses. Maximum length - sets the cap on the response length, helping tailor responses to be as concise or detailed as desired. Higher values : Responses can be longer and more detailed. Lower values : Responses are shorter and more concise. Type your text in the chat box and click the Send icon to initiate the dialogue. Additional Interaction Features: Auto scroll to bottom : This option can be toggled on or off to automatically scroll to the bottom of the output as it is being generated. This feature is helpful during long outputs to keep the most recent content visible. Full Screen Mode : Increase the size of the output window for better visibility and focus. This mode can be activated to expand the output interface to the full screen. Post-Output Actions: Continue the Dialogue : To keep the conversation going, simply type your next question or command in the chat box and click the Send icon. Copy the Output : Click the Copy to clipboard icon to copy the generated text for use elsewhere. Regenerate Response : If the output isn't satisfactory, click the Regenerate icon to prompt the Gen AI to produce a new response. Delete Output : To remove the current output from the chat, click the Delete icon. Purge Chat History : For a fresh start or to clear sensitive data, click the Clean icon to erase the chat history. Specialized Download Options for Tabular outputs. When the Gen AI generates output in a tabular format, additional options become available to manage and utilize this structured data: Download as xlsx : Allows you to save the tabular output directly in an Excel spreadsheet format, facilitating easy data manipulation and analysis. Copy as markdown : Enables copying the tabular output in markdown format, suitable for use in markdown-supported environments like GitHub or blogging platforms. Copy as html : Permits copying the tabular output in HTML format, ideal for integration into web pages or emails, preserving the formatting and structure.","title":"Chat"},{"location":"platform-documentation/menus/datasources/#search","text":"The Search feature allows you to quickly locate specific information within your indexed dataset. How to Conduct a Search : Select the Embedding model from the dropdown list. Note : It must be the same one which is used for creating the datasource. Optionally, you can configure Advanced Settings for more tailord outputs by clicking the Settings icon. Note : Please exercise caution with these settings. If unsure about their functions, it's advisable to leave them at their default values. The following settings are available: Initial Lookup Result (1 \u2013 50) - specifies the number of initial results retrieved from the indexed dataset(s) for further processing. Higher values : More initial results are retrieved, which can increase the chances of finding relevant information but may slow down processing. Lower values : Fewer initial results are retrieved, which can speed up processing but might miss some relevant information. Pages Per Document (1 \u2013 30) - defines the number of pages to be considered per document during the retrieval or processing phase. Higher values : More pages per document are considered, which can provide more comprehensive information but may slow down processing. Lower values : Fewer pages per document are considered, which can speed up processing but might miss some important details. Expected Search Results (1 \u2013 40) - sets the anticipated number of search results to be returned, guiding the system's retrieval scope. Higher values : More search results are returned, which can provide a broader range of information but may include less relevant results. Lower values : Fewer search results are returned, which can provide more focused and relevant information but might miss some useful results. String content - determines whether the system should include or consider specific text data in its processing or generation. Type your query into the input field and hit the Send icon. Post-Output Actions: View Selection : A tool for quickly switching between Code view and List view views. Copy the Output : Click the Copy to clipboard icon to copy the generated text for use elsewhere. Full Screen Mode : Increase the size of the output window for better visibility and focus. This mode can be activated to expand the output interface to the full screen. Purge Chat History : For a fresh start or to clear sensitive data, click the Clean icon to erase the chat history.","title":"Search"},{"location":"platform-documentation/menus/datasources/#deduplicate","text":"The Deduplication is a handy feature for identifying duplicate information. How to Run Deduplication : Select the Embedding model from the dropdown list. Note : It must be the same one which is used for creating the datasource. Configure the following settings: Cut-off Score (0.1-1.0) - determines the threshold for identifying duplicate content based on similarity scores. Higher values : More items will be excluded , as they will not be considered similar enough. This can be useful if you want to ensure that only highly unique content remains. Lower values : More items will be retained , as they will be considered similar enough. This can be useful if you want to keep more variations of the content. Optionally, you can configure Advanced Settings for more tailord outputs by clicking the Settings icon. Note : Please exercise caution with these settings. If unsure about their functions, it's advisable to leave them at their default values. The following settings are available: Show Additional Metadata - a checkbox option that determines whether to display extra information about the content. Selected : Additional metadata will be shown, providing more context and details about the content. Not Selected : Additional metadata will not be shown, resulting in a cleaner and simpler display of the content. Exclude Fields - a comma-separated list of field names that should be excluded from the deduplication process. Specified fields : The fields listed will be ignored during deduplication, which means differences in these fields will not affect whether content is considered a duplicate. This can be useful if certain fields (like timestamps or IDs) are not relevant to the deduplication criteria. No fields specified : All fields will be considered during deduplication, which means any differences in any field can affect whether content is considered a duplicate. Click the Run button to start the process. Note: Remember, deduplication efforts will hinge upon the parameters you've set for the dataset. By using these features, you\u2019re equipped to enhance your dataset, making it a more efficient and effective tool for your AI applications. Proceed with adjustments only if you're confident in your understanding of their implications. Post-Output Actions: View Selection : A tool for quickly switching between Code view and List view views. Show differences : An option allowing to quickly show/hide differences. Download result : Allows you to save the deduplication results directly in an Excel spreadsheet format, facilitating easy data manipulation and analysis. Copy the Output : Click the Copy to clipboard icon to copy the generated text for use elsewhere. Full Screen Mode : Increase the size of the output window for better visibility and focus. This mode can be activated to expand the output interface to the full screen. Purge Chat History : For a fresh start or to clear sensitive data, click the Clean icon to erase the chat history.","title":"Deduplicate"},{"location":"platform-documentation/menus/datasources/#public-project-datasources-menu","text":"The Datasources menu within Public project showcases a collection of published and shared datasources within the community.","title":"Public project - Datasources menu"},{"location":"platform-documentation/menus/datasources/#layout-of-the-datasources-menu","text":"The Datasources menu is organized into three distinct pages, each designed to offer a unique perspective on the available datasources: Latest : Displays all recently published datasources, providing a fresh look at the newest contributions to the community. My Likes : Highlights the datasources that you have liked. This personalized page allows you to revisit favorites effortlessly. Trending : Showcases the datasources with the highest number of likes, serving as a valuable resource for discovering top-rated datasources that hold significant value and popularity within the community.","title":"Layout of the Datasources Menu"},{"location":"platform-documentation/menus/datasources/#engaging-with-published-datasources","text":"Interaction within the community is highly encouraged to recognize and appreciate valuable datasources. The following actions enable active participation:","title":"Engaging with Published Datasources"},{"location":"platform-documentation/menus/datasources/#liking-published-datasources","text":"Upon publication, a datasource becomes a crucial resource for the community. To support and acknowledge a datasource, use the Like functionality: To like a datasource, click on the Heart icon associated with it. If you wish to withdraw your like, simply click the Heart icon again to Unlike the datasource.","title":"Liking Published Datasources"},{"location":"platform-documentation/menus/datasources/#other-actions-for-published-datasources","text":"Using Published Datasources : View and run datasources by clicking on the datasource card or name. Refer to the Exploring Datasources section for guidance on using datasource. Note : Modifications to a published datasource cannot be saved for future use.","title":"Other Actions for Published Datasources"},{"location":"platform-documentation/menus/overview/","text":"ELITEA Platform Overview ELITEA - Main Interface The ELITEA's main interface encompasses several sections, including the Discover Menu, Search feature, Quick Navigation tabs, Settings, a Quick button for creating new items (conversation, prompt, datasource, agent and collection, importing entities), Tags, and Trending Authors. Sections: Discover Menu : A sidebar menu allowing users to switch among different menus such as Chat, Prompts, Datasources, Agents, Collections and Artifacts. Search : A Search box available to find prompts, datasources, agents and collections by their names and descriptions. Note : The Search functionality operates within the selected menu and is not universal across the entire application. View Switcher : A tool for quickly switching between Card list and Table views. Quick button : A button that allows for the rapid creation of a new conversation, prompt, datasource, agent or collection. The default of this button ( +Conversation , +Prompt , +Datasource , +Agent or +Collection ) changes based on the selected menu. Notifications : Notification's bell allowing user to get notified about various events such as prompt publishing status within the ELITEA. Project Switcher : A tool for quickly switching among projects. Settings : Accessible by clicking on your user avatar/picture. Here, you can configure various project and profile specific settings. Tags : This section displays the tags (categories) associated with the content being viewed. The tags vary depending on the selected menu. Trending Authors : Shows the authors who have recently contributed or shared the most trending prompts, datasources and agents with the community. General Navigation and Management Across the Application This section provides an overview of the common functionalities and actions available across various menus and pages within the application. The aim is to ensure a consistent and efficient user experience by maintaining uniformity in navigation and management features across both Private and Public projects. Private Project Navigation : In a Private project, you have exclusive access to your personalized content across the following menus: Chat menu: Access all your private and public conversations, allowing for seamless communication and collaboration. Prompts menu: View and manage all the prompts you have created, enabling easy modification and reuse. Datasources menu: Contains all the datasources you have developed. Agents menu: Access all your created agents, each designed to perform specific tasks or sets of tasks. Collections menu: Manage your collections of prompts, datasources, and agents, organized for specific projects or themes. Artifacts menu: Utilize the Artifacts toolkit to create Buckets in ELITEA for saving, updating (appending), reading, and deleting files. Artifacts serve as a temporary file storage solution, enhancing your project's data management capabilities. Public Project Navigation : In a Public project, you can engage with the community and explore content created by other users through the following sections: Prompts menu: Navigate through the Latest prompts, explore prompts you've liked (My Likes), and discover Trending prompts within the community. Datasources menu: Access the Latest datasources, view datasources you've liked (My Likes), and explore Trending datasources shared by the community. Agents menu: Discover the Latest agents, check out agents you've liked (My Likes), and find Trending agents that are popular in the community. Collections menu: Explore the Latest collections, view collections you've liked (My Likes), and discover Trending collections that are gaining attention. While the context may vary depending on the specific page you're viewing, the core principles of action and functionality remain consistent. This unified approach ensures that whether you are navigating a private or public project, the experience is intuitive and user-friendly, facilitating effective management and exploration of content within the application. Common Viewing Options Card list view : Offers a compact, card-format snapshot of items like prompts, datasources, agents and collections, making it easy to visually scan through published materials. Table view : Provides an in-depth look at individual items, presenting extensive details for a comprehensive analysis. Search and Filtering Functionality Search : Seamlessly locate specific items by their name or description using the search feature, which operates within the menu you are currently exploring. This tool is invaluable for quickly finding relevant content. Filtering : Streamline your search by filtering items using specific tags. This feature is especially useful for discovering content related to particular subjects or themes. Sorting Options (Detailed View Only) Name & Description : Alphabetically organize published items by their names, providing an effortless method to find specific titles. Create : Sort items by their creation date to monitor the chronological development of content or pinpoint the newest additions. Likes : Order the items by the number of likes they have received. This functionality is applicable only for menus within Public project. Authors : Sort the items by the author's name. This functionality is applicable only for menus within Public project. These standardized functionalities across different menus and pages are designed to simplify navigation and enhance the content management process within the application, promoting a coherent and user-friendly environment. Discover - Menus ELITEA application consists of the following main menus: Chat Prompts Datasources Agents Collections Artifacts Navigation : To naviagte among the menus, click the ELITEA icon on the top left. The Sidebar menu is opened. Click on the menu name to navigate to the desired menu.","title":"Overview"},{"location":"platform-documentation/menus/overview/#elitea-platform-overview","text":"","title":"ELITEA Platform Overview"},{"location":"platform-documentation/menus/overview/#elitea-main-interface","text":"The ELITEA's main interface encompasses several sections, including the Discover Menu, Search feature, Quick Navigation tabs, Settings, a Quick button for creating new items (conversation, prompt, datasource, agent and collection, importing entities), Tags, and Trending Authors. Sections: Discover Menu : A sidebar menu allowing users to switch among different menus such as Chat, Prompts, Datasources, Agents, Collections and Artifacts. Search : A Search box available to find prompts, datasources, agents and collections by their names and descriptions. Note : The Search functionality operates within the selected menu and is not universal across the entire application. View Switcher : A tool for quickly switching between Card list and Table views. Quick button : A button that allows for the rapid creation of a new conversation, prompt, datasource, agent or collection. The default of this button ( +Conversation , +Prompt , +Datasource , +Agent or +Collection ) changes based on the selected menu. Notifications : Notification's bell allowing user to get notified about various events such as prompt publishing status within the ELITEA. Project Switcher : A tool for quickly switching among projects. Settings : Accessible by clicking on your user avatar/picture. Here, you can configure various project and profile specific settings. Tags : This section displays the tags (categories) associated with the content being viewed. The tags vary depending on the selected menu. Trending Authors : Shows the authors who have recently contributed or shared the most trending prompts, datasources and agents with the community.","title":"ELITEA - Main Interface"},{"location":"platform-documentation/menus/overview/#general-navigation-and-management-across-the-application","text":"This section provides an overview of the common functionalities and actions available across various menus and pages within the application. The aim is to ensure a consistent and efficient user experience by maintaining uniformity in navigation and management features across both Private and Public projects. Private Project Navigation : In a Private project, you have exclusive access to your personalized content across the following menus: Chat menu: Access all your private and public conversations, allowing for seamless communication and collaboration. Prompts menu: View and manage all the prompts you have created, enabling easy modification and reuse. Datasources menu: Contains all the datasources you have developed. Agents menu: Access all your created agents, each designed to perform specific tasks or sets of tasks. Collections menu: Manage your collections of prompts, datasources, and agents, organized for specific projects or themes. Artifacts menu: Utilize the Artifacts toolkit to create Buckets in ELITEA for saving, updating (appending), reading, and deleting files. Artifacts serve as a temporary file storage solution, enhancing your project's data management capabilities. Public Project Navigation : In a Public project, you can engage with the community and explore content created by other users through the following sections: Prompts menu: Navigate through the Latest prompts, explore prompts you've liked (My Likes), and discover Trending prompts within the community. Datasources menu: Access the Latest datasources, view datasources you've liked (My Likes), and explore Trending datasources shared by the community. Agents menu: Discover the Latest agents, check out agents you've liked (My Likes), and find Trending agents that are popular in the community. Collections menu: Explore the Latest collections, view collections you've liked (My Likes), and discover Trending collections that are gaining attention. While the context may vary depending on the specific page you're viewing, the core principles of action and functionality remain consistent. This unified approach ensures that whether you are navigating a private or public project, the experience is intuitive and user-friendly, facilitating effective management and exploration of content within the application.","title":"General Navigation and Management Across the Application"},{"location":"platform-documentation/menus/overview/#common-viewing-options","text":"Card list view : Offers a compact, card-format snapshot of items like prompts, datasources, agents and collections, making it easy to visually scan through published materials. Table view : Provides an in-depth look at individual items, presenting extensive details for a comprehensive analysis.","title":"Common Viewing Options"},{"location":"platform-documentation/menus/overview/#search-and-filtering-functionality","text":"Search : Seamlessly locate specific items by their name or description using the search feature, which operates within the menu you are currently exploring. This tool is invaluable for quickly finding relevant content. Filtering : Streamline your search by filtering items using specific tags. This feature is especially useful for discovering content related to particular subjects or themes.","title":"Search and Filtering Functionality"},{"location":"platform-documentation/menus/overview/#sorting-options-detailed-view-only","text":"Name & Description : Alphabetically organize published items by their names, providing an effortless method to find specific titles. Create : Sort items by their creation date to monitor the chronological development of content or pinpoint the newest additions. Likes : Order the items by the number of likes they have received. This functionality is applicable only for menus within Public project. Authors : Sort the items by the author's name. This functionality is applicable only for menus within Public project. These standardized functionalities across different menus and pages are designed to simplify navigation and enhance the content management process within the application, promoting a coherent and user-friendly environment.","title":"Sorting Options (Detailed View Only)"},{"location":"platform-documentation/menus/overview/#discover-menus","text":"ELITEA application consists of the following main menus: Chat Prompts Datasources Agents Collections Artifacts Navigation : To naviagte among the menus, click the ELITEA icon on the top left. The Sidebar menu is opened. Click on the menu name to navigate to the desired menu.","title":"Discover - Menus"},{"location":"platform-documentation/menus/prompts/","text":"Prompts Private project - Prompts menu The Prompts menu within Private project serves as a dedicated inventory for all your prompts, irrespective of their current status. Consider it your personal repository for saving and organizing the prompts you've crafted. How to Create a New Prompt In the context of AI and machine learning, a prompt is an instruction, question, or statement that is given to an AI model to elicit a response or output. It serves as the initial input for systems like conversational agents or generative models. Click the + Prompt button located on the top right of the Prompts menu. This action will navigate you to the Configuration tab, where you can define and set up your new prompt. Within the Configuration tab, you will need to fill in the mandatory fields: Name , Description , and Context . Name : Provide a clear and concise name for your prompt to easily identify it later. Description : Add a brief explanation of the prompt's purpose or intended use. Context : Enter the foundational information or instructions that will guide the AI model's responses. This is a crucial step in defining the scope and behavior of your prompt. After filling in the required information, click the Save button to create your prompt. Note : The Name and Description fields are non-editable after the prompt is saved. Ensure you have entered the correct information before saving. While creating your prompt in the Configuration tab, you can also configure other settings like Tags , Welcome Message , Conversation Starters , and Messages to further customize your prompt's behavior and interaction flow. After creating a prompt and saving it, the prompt's interface will be organized into three distinct tabs, each serving a specific purpose in managing and utilizing your prompt: Run tab : This is your primary interface for executing the prompt. Here, you'll find a comprehensive overview of the prompt's configuration, including any defined variables. If variables are configured, you can input or modify their values before execution. Crucially, this tab also allows you to adjust the settings that govern the AI model's behavior for this specific run, such as selecting the desired Model, and fine-tuning parameters like Temperature, Top-P, Top-K, and Maximum Completion Tokens. Configuration tab : This tab is dedicated to the setup and modification of the prompt's core elements. Within this tab, you have the ability to adjust all the fundamental settings of the prompt, including the Context that guides the AI, the Messages that structure the interaction, the optional Welcome Message displayed to users, and any Conversation Starters designed to initiate specific interactions. Monitoring tab : This tab provides valuable insights into the usage and performance of your prompt. Here, you can access monitoring data related to the prompt's executions, allowing you to track its activity, understand its usage patterns, and potentially identify areas for optimization or refinement. For more information about Monitoring, refer to the Monitoring . Note: Changes made within both the Run and Configuration tabs can be either saved to update the prompt or discarded to revert to the previous state, providing flexibility and control over your prompt configurations. Tags In ELITEA, Tags are a powerful organizational tool that allows you to categorize and manage your collection of prompts, datasources, and agents effectively. Think of them as labels that help you quickly identify and group related items. By assigning relevant tags to each prompt, you create an intuitive labeling system that significantly simplifies access and retrieval. This is particularly beneficial when you have a large number of prompts covering various topics or use cases. You can later filter your prompts by these tags, making it easy to find the precise prompt you need without sifting through an extensive list. Adding Tags to Your Prompt: Locate the Tags input box within the Configuration tab. Begin typing a tag name . As you type, you may see suggestions for pre-existing tags. You can either select one of these suggestions or continue typing to create a new tag. To finalize a tag, click the Enter key. This will add the tag to your prompt. Click the Save button to save the prompt with the selected tags. Note : You have the flexibility to assign one or more tags to each prompt, allowing for a multi-dimensional labeling system. This means a single prompt can be associated with multiple categories, enhancing its discoverability. CONTEXT The Context field in ELITEA is a fundamental component where you provide the essential background information, instructions, and guidelines that direct the LLM in generating accurate and relevant responses. This section acts as the foundational knowledge base for the model, enabling it to understand and effectively process your specific requests. A well-defined context is crucial for achieving the desired output from the AI. How to Effectively Input Context: Identify Key Information : Before you start typing, carefully consider the essential details or instructions the model needs to understand your request effectively. This might include the topic, specific terminology, relevant background information, the desired format of the output, or the specific task you want the model to perform. Enter the Details Clearly and Concisely : Input the identified information directly into the Context field. Ensure your language is clear, concise, and unambiguous. Avoid unnecessary jargon or overly complex sentences. The more direct and focused your context, the better the model can understand and respond appropriately. Leveraging Variables for Dynamic Content : For situations where you need to introduce dynamic elements into your prompts, you can incorporate variables directly within the Context . Variables are denoted by double curly braces, for example, {{variable_name}} . Once you define a variable in the Context , it will automatically appear in the Variables section, where you can assign a specific value to it. This allows you to create reusable prompts that can be easily adapted for different scenarios by simply changing the variable values. Note : For comprehensive guidance on crafting effective instructions for your prompts, please refer to the Prompting Frameworks document. This resource provides valuable strategies and examples to help you optimize your prompts for better results. Editability and Version Control You can edit the Context field at any time to update or refine the instructions: Editing Existing Context : Simply make changes directly in the Context field and save them. This updates the prompt to reflect the latest information. Creating New Versions : If you want to keep the original version, you can save your changes as a new version. This is useful for comparing different versions or keeping a history of changes. Note : For more information check the Managing Prompt Versions: Save, Create Versions, and Manage . These features allow you to adapt and improve the instructions as needed, ensuring the responses remain relevant and accurate. MESSAGES The MESSAGES section is a powerful feature that allows you to meticulously structure the flow of interaction within a prompt by defining specific roles and content for different participants in the conversation. This section is crucial for creating more complex and nuanced interactions with the LLM model. The MESSAGES utilizes three distinct message types: System Message : This message sets the overall context, instructions, and guidelines for the Gen AI's behavior. It's like providing the AI with its role and responsibilities for the interaction. This message is not visible to the end-user but is fundamental in shaping the AI's responses. Assistant Message : This represents the Gen AI's responses or contributions within the conversation. You can pre-define Assistant Messages to guide the interaction or provide examples of the desired output format. User Message : This simulates the input or queries from the user interacting with the Gen AI. You can use User Messages to set up specific scenarios or provide examples of how a user might interact with the prompt. These message types work in concert to create a structured and meaningful dialogue. The System Message establishes the framework, the User Message initiates and guides the conversation flow, and the Assistant Message provides the content of the interaction, all contributing to a coherent and purposeful exchange. Understanding the Message Types: System Message : Think of this as the \"director's notes\" for the AI. It defines the AI's persona, the task at hand, and any specific rules or constraints it should follow. System Message: \"You are a helpful AI assistant specialized in providing concise summaries of scientific articles. Focus on extracting the main findings and conclusions.\" Assistant Message : This allows you to pre-program the AI's responses or provide examples of how it should respond to certain user inputs. User Message: \"What is the main finding of this article?\" Assistant Message: \"The main finding of the article is that...\" User Message : This allows you to simulate user input and guide the conversation flow. User Message: \"Summarize the methodology section.\" Managing Messages: To enhance the interactivity of a prompt, you can add multiple messages of any type by clicking the + icon, selecting the desired message type from the dropdown, and providing the relevant content. You also have the flexibility to manage the order and content of your messages: Delete : Remove a message by clicking the delete icon. Copy : Duplicate a message by clicking the copy icon. Reorder : Change the order of messages by dragging and dropping the message boxes. This allows you to precisely control the flow of the conversation. WELCOME MESSAGE The Welcome Message feature allows you to provide an initial message or instruction that is displayed to the user when they interact with the prompt, datasource, or agent. While currently sent to the LLM along with other instructions, it primarily serves as a way to communicate specific guidance or information to the user before they begin interacting with the prompt. Adding a Welcome Message: Locate the Welcome Message input field within the Configuration tab. Type the desired welcome message text into the input field. This could be instructions, reminders, or any other information you want the user to see. Click the Save button to save the configuration. This will make the configured welcome message visible to the user in the Chat section. How the Welcome Message is Used: When a user navigates to the Chat section of the prompt, the configured Welcome Message will be displayed at the top of the chat interface. This provides an immediate notification or instruction, setting the stage for their interaction with the prompt. Examples of Effective Welcome Messages: \"Use this prompt for generating comprehensive test cases based on the provided requirements.\" \"Remember to carefully review the generated output before implementing it.\" \"This prompt is designed to assist with summarizing technical documentation. Please provide the document content below.\" CONVERSATION STARTERS The Conversation Starter feature empowers you to configure and add predefined text options that users can click to initiate a conversation or trigger a specific action when executing a prompt. This is particularly useful for guiding users and providing them with quick access to common or recommended interactions, ensuring a consistent and efficient starting point for their engagement with the prompt. Setting Up Conversation Starters: Navigate to the Conversation Starter section within the Configuration tab. Click the + icon. This will open a text input field where you can type the text you want to use as a conversation starter. Enter the desired text for the conversation starter. This should be a clear and actionable phrase or question. Click the Save button to save the configuration. The configured conversation starter will now be available for users. Using Conversation Starters to Initiate Interactions: When a user goes to the Chat section of the prompt, they will see a list of the saved conversation starters. Clicking on a desired starter will automatically populate the chat input field with that text and execute the prompt, streamlining the process of initiating specific tasks or queries. Examples of Effective Conversation Starters: \"Generate test cases for the following user story: [Paste User Story Here]\" \"Summarize the key findings from this research paper.\" \"Translate this document into Spanish.\" \"Explain the concept of [Technical Term].\" By providing these pre-defined options, you make it easier for users to understand the capabilities of the prompt and quickly initiate relevant interactions. By setting up conversation starters, you streamline the process of initiating specific tasks or queries, making your interactions with the prompt more efficient and standardized. VARIABLES The Variables within prompts introduce a powerful layer of dynamic customization, allowing you to create flexible and reusable prompts that can be easily adapted to specific needs or contexts without requiring modifications to the core prompt structure. This feature significantly enhances the versatility and efficiency of your prompts. Understanding Variables: Variables are placeholders within your prompt's Context or Messages that are denoted by double curly brackets, for example, {{user_story}} . These placeholders represent information that might change depending on the specific use case. How Variables Work: Define Variables in Context or Messages : Begin by identifying the elements within your Context or Messages that you want to make dynamic. Replace these static values with variable placeholders using the {{variable_name}} syntax. Choose descriptive names for your variables to easily understand their purpose. Automatic Population in the Variables Section : Once you define a variable in the Context or Messages , it will automatically appear in the VARIABLES section located below. Assign Values to Variables : In the VARIABLES section, you can assign specific values to each defined variable. This is where you provide the actual data that will replace the placeholder when the prompt is executed. This process empowers you to create prompts that can be easily adapted by simply changing the values of the variables, eliminating the need to rewrite the entire prompt for different scenarios. Note : You have the flexibility to define one or more variables within each prompt. Variables can be defined in both the Context and Messages sections, providing flexibility in how you structure your dynamic prompts. ADVANCED SETTINGS For users who require more granular control over the AI model's behavior, ELITEA provides Advanced Settings . These settings allow you to fine-tune the parameters that influence the generation of responses. To access these settings, click the Gear icon on the Configurations tab or SETTINGS section under the Run tab. The following advanced settings are available: Model : This dropdown menu allows you to select the specific Large Language Model (LLM) that will be used to process your prompt. Different models have varying capabilities and performance characteristics. Common options include: gpt-4o : A highly capable and advanced model known for its nuanced understanding and high-quality output. gpt-35-turbo : A more cost-effective and faster model that still provides excellent performance for a wide range of tasks. The choice of model can significantly impact the quality, speed, and cost of your prompt executions. Temperature : This parameter controls the randomness and creativity of the AI's responses. It is a value between 0 and 1 . A lower temperature (closer to 0) results in more predictable and focused responses. The AI will tend to choose the most likely next words, making the output more deterministic and consistent. This is suitable for tasks requiring factual accuracy and precision. A higher temperature (closer to 1 or above) introduces more randomness, leading to more creative and unexpected outputs. The AI will consider less probable words, potentially generating more diverse and novel responses. This is useful for brainstorming, creative writing, or when exploring different possibilities. Top P (0-1) : Also known as nucleus sampling, Top P offers another way to control the randomness of the output. It works by considering the smallest set of most probable tokens whose cumulative probability exceeds the value of P. A lower Top P value (e.g., 0.1) means the AI will only consider a very small, highly probable set of tokens, leading to more focused and deterministic responses. A higher Top P value (e.g., 0.9) allows the AI to consider a broader range of tokens, including less probable ones, resulting in more varied and potentially creative outputs. Top P provides a more dynamic way to control randomness compared to Temperature , as the number of tokens considered can vary depending on the context. Top K : This parameter limits the AI's token selection to the K most likely tokens at each step of the generation process. A lower Top K value (e.g., 10) restricts the AI to choosing from only the top 10 most probable tokens, leading to more focused and predictable responses. A higher Top K value (e.g., 100) allows the AI to choose from a wider range of likely tokens, potentially increasing the diversity and surprise in the output. Top K is useful for controlling the vocabulary and ensuring the AI stays within a certain range of likely words. Maximum Completion Tokens : This setting defines the maximum length of the AI's generated response, measured in tokens. Tokens can be roughly thought of as parts of words. Setting a lower value for Maximum Completion Tokens will result in shorter, more concise responses. This is useful when you need brief answers or summaries. Setting a higher value allows the AI to generate longer, more detailed responses. Be mindful that longer responses may consume more processing resources. By carefully adjusting these Advanced Settings , you can tailor the AI's behavior to suit the specific requirements of your prompt and achieve the desired output characteristics. Experimenting with these parameters can significantly enhance the effectiveness and versatility of your interactions with ELITEA. How to Execute Prompt Once your prompt is configured, ELITEA offers two primary methods to execute it and obtain the desired output: Chat : This method is designed for interactive, conversational exchanges with the AI model. It's ideal for scenarios where you want to engage in a dialogue, ask follow-up questions, or refine the output through iterative interactions. Completion : This method is more direct, providing a single output based on the prompt's configuration. It's suitable for tasks where you need a straightforward answer, generation, or completion without the need for back-and-forth conversation. Executing a Prompt Using the Chat Option: Navigate to the Run Tab : After configuring your prompt, access the Run tab. This tab provides the interface for executing your prompt and adjusting runtime settings. Review Prompt Configuration : In the Run tab, you'll see a summary of your prompt's setup. Ensure the Context , Messages , and any defined Variables are as intended. If variables are present, provide or adjust their values as needed. Select the AI Model : Choose the desired AI model from the Model dropdown list. The available models (e.g., gpt-4-0125-preview , gpt-35-turbo ) will influence the quality and nature of the generated responses. Adjust Basic Settings : You can quickly adjust the Temperature parameter to influence the creativity and predictability of the AI's responses. A lower temperature results in more focused and deterministic outputs, while a higher temperature encourages more creative and varied responses. Access Advanced Settings (Optional) : For more fine-grained control over the AI's output, check the Advanced Settings . Here, you can adjust parameters like Top P , Top K , and Maximum Completion Tokens . Refer to the Advanced Settings section for detailed information on these parameters. Initiate Interaction : In the chat input box, type your question, statement, or command to initiate the conversation with the AI. This input serves as the starting point for the interaction. Send Your Message : Click the Send icon (often represented by a paper airplane or similar symbol) to submit your input to the AI model. ELITEA will process your request based on the prompt's configuration and the selected settings. The AI's response will then appear in the chat interface. Additional Interaction Features: Auto scroll to bottom : This option can be toggled on or off to automatically scroll to the bottom of the output as it is being generated. This feature is helpful during long outputs to keep the most recent content visible. Full Screen Mode : Increase the size of the output window for better visibility and focus. This mode can be activated to expand the output interface to the full screen. Post-Output Actions: Continue the Dialogue : To keep the conversation going, simply type your next question or command in the chat box and click the Send icon. Copy the Output : Click the Copy to clipboard icon to copy the generated text for use elsewhere. Append to Assistant Message : Use the Copy to Messages icon to add the output directly to the Assistant Message section for reference or further use. Regenerate Response : If the output isn't satisfactory, click the Regenerate icon to prompt the Gen AI to produce a new response. Delete Output : To remove the current output from the chat, click the Delete icon. Purge Chat History : For a fresh start or to clear sensitive data, click the Clean icon to erase the chat history. Specialized Download Options for Tabular outputs. When the Gen AI generates output in a tabular format, additional options become available to manage and utilize this structured data: Download as xlsx : Allows you to save the tabular output directly in an Excel spreadsheet format, facilitating easy data manipulation and analysis. Copy as markdown : Enables copying the tabular output in markdown format, suitable for use in markdown-supported environments like GitHub or blogging platforms. Copy as html : Permits copying the tabular output in HTML format, ideal for integration into web pages or emails, preserving the formatting and structure. Executing a Prompt Using the Completion Option: Navigate to the Run Tab : After configuring your prompt, access the Run tab. This tab serves as the central hub for executing your prompts and managing related settings. Review Prompt Configuration : In the Run tab, carefully review the prompt's setup, including the Context , Messages , and any defined Variables . Ensure everything is configured correctly for your desired outcome. If variables are present, provide or adjust their values as necessary. Select the AI Model : Choose the appropriate AI model from the Model dropdown list. The available models (e.g., gpt-4-0125-preview , gpt-35-turbo ) offer different capabilities and performance characteristics, so select the one that best suits your needs. Adjust Basic Settings : You can quickly adjust the Temperature parameter to control the level of creativity and predictability in the AI's output. A lower temperature leads to more focused and deterministic results, while a higher temperature encourages more varied and creative responses. Access Advanced Settings (Optional) : For more fine-grained control over the AI's output, check the Advanced Settings . Here, you can adjust parameters like Top P , Top K , and Maximum Completion Tokens . Refer to the Advanced Settings section for detailed information on these parameters. Select the Completion Option : Ensure that the Completion option is selected as the execution method. This is typically a radio button or a tab within the Run tab interface. Initiate Execution : Once you have reviewed the configuration and selected the Completion option, click the Run button. ELITEA will then process your prompt based on the defined settings and generate a single, complete output. The result will be displayed in the output area. Managing Prompt Versions: Save, Create Versions, and Manage To optimally manage your prompts, understanding how to save and create versions is crucial. Follow these guidelines to efficiently save your prompt, create versions, and manage them. How to Save a Prompt: To save your work on a prompt for the first time, simply click the Save button. This action creates what's known as the \" latest \" version of your prompt. You can continue to modify your prompt and save the changes to the \" latest \" version at any time by clicking the Save button again. If you wish to discard any changes made, you have the option to click the Discard button before saving. Remember : The \" latest \" version represents the initial version you create. You can keep updating this version with your changes by saving them, without the need to create additional versions for your prompt. How to Create New Versions: For instances where you need to create and manage different iterations of your prompt: Initiate a New Version : Start by clicking the Save As Version button. Name Your Version : When saving your work, provide a version name that clearly identifies the iteration or changes made. Click Save to confirm your entry. Best Practices for Version Naming : Length : Keep the version name concise, not exceeding 48 characters. This ensures readability and compatibility across various systems. Characters : Avoid using special characters such as spaces (\" \"), underscores (\"_\"), and others that might cause parsing or recognition issues in certain environments. Clarity : Choose names that clearly and succinctly describe the version's purpose or the changes it introduces, facilitating easier tracking and management of different versions. Upon creating a new version of the prompt, several options become available to you: Publish : Make this particular version of the prompt available for use. Delete : Remove this version of the prompt if it\u2019s no longer needed. Execute : Run this specific version of the prompt to see how it performs. Navigate Versions : Use the Version dropdown list to switch between and select different versions of the prompt. This allows for easy comparison and management of various iterations. By following these steps, you can effectively manage the lifecycle and iterations of your prompts, ensuring that each version is appropriately saved, published, and utilized as per your requirements. How to Publish a Prompt To make your prompt available to the wider Epam Network and Communities, follow these steps for publication: Publishing Initiation : With your prompt crafted and saved, initiate the process by clicking the Publish button. Version Naming : Assign an informative version name (e.g., Gen-1.0) in the pop-up window. This name should encapsulate the essence or objective of the prompt, facilitating version management and future iterations. Review Submission : Finalize your submission by clicking Publish , forwarding your prompt for the moderation review process. This stage is vital to guarantee the prompts shared within the Epam community meet a standard of quality and relevance. For publishing a specific version, firstly select the desired version and opt to publish. The chosen version's name appears in the \" Publish version \" pop-up window. It can be published as is or renamed before the final publication step. Note : After publishing, the prompt can be retracted by selecting the Unpublish button. Moderator Review Process Submission to publication triggers a meticulous assessment by the moderators, tasked with ensuring prompt standards for quality, efficiency, and security are upheld. Evaluative Steps Undertaken by Moderators : Initial Assessment : An initial examination confirms the prompt's completeness and adherence to the submission guidelines. Content Review : Evaluates the prompt\u2019s relevance, clarity, compatibility with best practices, and information security. Practical Evaluation : Assesses the prompt's operational feasibility, including variables, system commands, and projected outcomes. Compliance Check : Final verification against community norms and security protocols, ensuring the protection of sensitive data. Possible Outcomes of the Review After the review process, a prompt can be categorized into one of the following statuses: Approved : If the prompt meets all specified criteria, it is accepted and added to the Public project under the Prompts section, making it accessible to the community. Rejected : If the prompt does not meet the necessary standards, it is not approved for publication. Constructive feedback is provided to the creator, enabling them to make the required adjustments and submit a revised version for future consideration. Tracking the Status of Prompts Prompts undergo several statuses through the review phase: All : An overview of all submissions regardless of their review stage. Draft : Saved yet unsubmitted prompts. Published : Moderation-approved prompts, now accessible in the Public project. On Moderation : Prompts currently under review. Approval : This status indicates that the prompt is awaiting the author's approval before a new version can be published. Note : This feature is currently under development and is not available at the moment. Rejected : Prompts evaluated and declined for publication. Prompt Actions ELITEA provides a set of convenient actions you can perform on your prompts to manage, share, and organize them effectively. These actions are easily accessible through dedicated icons associated with each prompt. Copy link to clipboard : Clicking the Copy icon will copy a direct link to the current prompt to your clipboard. This allows you to easily share the prompt with colleagues or reference it in other documents. Add to collection : The Bookmark icon allows you to add the current prompt to one of your existing collections. This helps you organize your prompts into logical groups based on topic, project, or any other criteria you find useful. Export prompt : Clicking the Export icon will initiate the process of exporting your prompt. The prompt will be saved as a JSON file to your local device. This file contains all the prompt's configurations, including context, messages, variables, and settings, making it easy to back up or share your prompt outside of ELITEA. Fork prompt : Clicking the Fork icon will initiate the process of creating a copy of the prompt within a different project. This is a useful feature for transferring prompts between projects without needing to export and import them. When you fork a prompt, a complete copy of its configuration is created in the target project, allowing you to modify it independently. Delete Prompt : Clicking the Thrash icon will delete the prompt. Be cautious when using this action, as deleted prompts cannot be recovered. How to Import a Prompt To use the prompts created in other projects, environments, follow these simple steps. Initiate Import : Select the Import option within ELITEA. Choose File : Browse and select the exported JSON prompt file. Complete Process : The prompt will be added under the Prompts section in ELITEA. Use Prompt : You can now access and utilize the imported prompt. Note : ELITEA supports Jinja template. Make sure the content and variables in your prompt adhere to this format, especially avoiding spaces in variable names. For more information please check ELITEA and Epam AI Dial document. Public project - Prompts menu The Prompts menu within Public project showcases a collection of published and shared prompts within the community. Layout of the Prompts Menu The Prompts menu is organized into three distinct pages, each designed to offer a unique perspective on the available prompts: Latest : Displays all recently published prompts, providing a fresh look at the newest contributions to the community. My Likes : Highlights the prompts that you have liked. This personalized page allows you to revisit favorites effortlessly. Trending : Showcases the prompts with the highest number of likes, serving as a valuable resource for discovering top-rated prompts that hold significant value and popularity within the community. Engaging with Published Prompts Interaction within the community is highly encouraged to recognize and appreciate valuable prompts. The following actions enable active participation: Liking Published Prompts Upon publication, a prompt becomes a crucial resource for the community. To support and acknowledge a prompt, use the Like functionality: To like a prompt, click on the Heart icon associated with it. If you wish to withdraw your like, simply click the Heart icon again to Unlike the prompt. Other Actions for Published Prompts Executing Published Prompts : View and run published prompts by clicking on the prompt card or name. Refer to the How to Execute Prompt section for guidance on running a prompt.s Note : Modifications to a published prompt cannot be saved for future use. Adding Published Prompts to Collections : Enhance your collections by including published prompts. Visit the How to Add Prompt into Collection section for instructions on incorporation. Exporting Published Prompts : For external use or backup, published prompts can be exported. Details on this process are found in the How to Export a Prompt section.","title":"Prompts"},{"location":"platform-documentation/menus/prompts/#prompts","text":"","title":"Prompts"},{"location":"platform-documentation/menus/prompts/#private-project-prompts-menu","text":"The Prompts menu within Private project serves as a dedicated inventory for all your prompts, irrespective of their current status. Consider it your personal repository for saving and organizing the prompts you've crafted.","title":"Private project - Prompts menu"},{"location":"platform-documentation/menus/prompts/#how-to-create-a-new-prompt","text":"In the context of AI and machine learning, a prompt is an instruction, question, or statement that is given to an AI model to elicit a response or output. It serves as the initial input for systems like conversational agents or generative models. Click the + Prompt button located on the top right of the Prompts menu. This action will navigate you to the Configuration tab, where you can define and set up your new prompt. Within the Configuration tab, you will need to fill in the mandatory fields: Name , Description , and Context . Name : Provide a clear and concise name for your prompt to easily identify it later. Description : Add a brief explanation of the prompt's purpose or intended use. Context : Enter the foundational information or instructions that will guide the AI model's responses. This is a crucial step in defining the scope and behavior of your prompt. After filling in the required information, click the Save button to create your prompt. Note : The Name and Description fields are non-editable after the prompt is saved. Ensure you have entered the correct information before saving. While creating your prompt in the Configuration tab, you can also configure other settings like Tags , Welcome Message , Conversation Starters , and Messages to further customize your prompt's behavior and interaction flow. After creating a prompt and saving it, the prompt's interface will be organized into three distinct tabs, each serving a specific purpose in managing and utilizing your prompt: Run tab : This is your primary interface for executing the prompt. Here, you'll find a comprehensive overview of the prompt's configuration, including any defined variables. If variables are configured, you can input or modify their values before execution. Crucially, this tab also allows you to adjust the settings that govern the AI model's behavior for this specific run, such as selecting the desired Model, and fine-tuning parameters like Temperature, Top-P, Top-K, and Maximum Completion Tokens. Configuration tab : This tab is dedicated to the setup and modification of the prompt's core elements. Within this tab, you have the ability to adjust all the fundamental settings of the prompt, including the Context that guides the AI, the Messages that structure the interaction, the optional Welcome Message displayed to users, and any Conversation Starters designed to initiate specific interactions. Monitoring tab : This tab provides valuable insights into the usage and performance of your prompt. Here, you can access monitoring data related to the prompt's executions, allowing you to track its activity, understand its usage patterns, and potentially identify areas for optimization or refinement. For more information about Monitoring, refer to the Monitoring . Note: Changes made within both the Run and Configuration tabs can be either saved to update the prompt or discarded to revert to the previous state, providing flexibility and control over your prompt configurations.","title":"How to Create a New Prompt"},{"location":"platform-documentation/menus/prompts/#tags","text":"In ELITEA, Tags are a powerful organizational tool that allows you to categorize and manage your collection of prompts, datasources, and agents effectively. Think of them as labels that help you quickly identify and group related items. By assigning relevant tags to each prompt, you create an intuitive labeling system that significantly simplifies access and retrieval. This is particularly beneficial when you have a large number of prompts covering various topics or use cases. You can later filter your prompts by these tags, making it easy to find the precise prompt you need without sifting through an extensive list. Adding Tags to Your Prompt: Locate the Tags input box within the Configuration tab. Begin typing a tag name . As you type, you may see suggestions for pre-existing tags. You can either select one of these suggestions or continue typing to create a new tag. To finalize a tag, click the Enter key. This will add the tag to your prompt. Click the Save button to save the prompt with the selected tags. Note : You have the flexibility to assign one or more tags to each prompt, allowing for a multi-dimensional labeling system. This means a single prompt can be associated with multiple categories, enhancing its discoverability.","title":"Tags"},{"location":"platform-documentation/menus/prompts/#context","text":"The Context field in ELITEA is a fundamental component where you provide the essential background information, instructions, and guidelines that direct the LLM in generating accurate and relevant responses. This section acts as the foundational knowledge base for the model, enabling it to understand and effectively process your specific requests. A well-defined context is crucial for achieving the desired output from the AI. How to Effectively Input Context: Identify Key Information : Before you start typing, carefully consider the essential details or instructions the model needs to understand your request effectively. This might include the topic, specific terminology, relevant background information, the desired format of the output, or the specific task you want the model to perform. Enter the Details Clearly and Concisely : Input the identified information directly into the Context field. Ensure your language is clear, concise, and unambiguous. Avoid unnecessary jargon or overly complex sentences. The more direct and focused your context, the better the model can understand and respond appropriately. Leveraging Variables for Dynamic Content : For situations where you need to introduce dynamic elements into your prompts, you can incorporate variables directly within the Context . Variables are denoted by double curly braces, for example, {{variable_name}} . Once you define a variable in the Context , it will automatically appear in the Variables section, where you can assign a specific value to it. This allows you to create reusable prompts that can be easily adapted for different scenarios by simply changing the variable values. Note : For comprehensive guidance on crafting effective instructions for your prompts, please refer to the Prompting Frameworks document. This resource provides valuable strategies and examples to help you optimize your prompts for better results.","title":"CONTEXT"},{"location":"platform-documentation/menus/prompts/#editability-and-version-control","text":"You can edit the Context field at any time to update or refine the instructions: Editing Existing Context : Simply make changes directly in the Context field and save them. This updates the prompt to reflect the latest information. Creating New Versions : If you want to keep the original version, you can save your changes as a new version. This is useful for comparing different versions or keeping a history of changes. Note : For more information check the Managing Prompt Versions: Save, Create Versions, and Manage . These features allow you to adapt and improve the instructions as needed, ensuring the responses remain relevant and accurate.","title":"Editability and Version Control"},{"location":"platform-documentation/menus/prompts/#messages","text":"The MESSAGES section is a powerful feature that allows you to meticulously structure the flow of interaction within a prompt by defining specific roles and content for different participants in the conversation. This section is crucial for creating more complex and nuanced interactions with the LLM model. The MESSAGES utilizes three distinct message types: System Message : This message sets the overall context, instructions, and guidelines for the Gen AI's behavior. It's like providing the AI with its role and responsibilities for the interaction. This message is not visible to the end-user but is fundamental in shaping the AI's responses. Assistant Message : This represents the Gen AI's responses or contributions within the conversation. You can pre-define Assistant Messages to guide the interaction or provide examples of the desired output format. User Message : This simulates the input or queries from the user interacting with the Gen AI. You can use User Messages to set up specific scenarios or provide examples of how a user might interact with the prompt. These message types work in concert to create a structured and meaningful dialogue. The System Message establishes the framework, the User Message initiates and guides the conversation flow, and the Assistant Message provides the content of the interaction, all contributing to a coherent and purposeful exchange. Understanding the Message Types: System Message : Think of this as the \"director's notes\" for the AI. It defines the AI's persona, the task at hand, and any specific rules or constraints it should follow. System Message: \"You are a helpful AI assistant specialized in providing concise summaries of scientific articles. Focus on extracting the main findings and conclusions.\" Assistant Message : This allows you to pre-program the AI's responses or provide examples of how it should respond to certain user inputs. User Message: \"What is the main finding of this article?\" Assistant Message: \"The main finding of the article is that...\" User Message : This allows you to simulate user input and guide the conversation flow. User Message: \"Summarize the methodology section.\" Managing Messages: To enhance the interactivity of a prompt, you can add multiple messages of any type by clicking the + icon, selecting the desired message type from the dropdown, and providing the relevant content. You also have the flexibility to manage the order and content of your messages: Delete : Remove a message by clicking the delete icon. Copy : Duplicate a message by clicking the copy icon. Reorder : Change the order of messages by dragging and dropping the message boxes. This allows you to precisely control the flow of the conversation.","title":"MESSAGES"},{"location":"platform-documentation/menus/prompts/#welcome-message","text":"The Welcome Message feature allows you to provide an initial message or instruction that is displayed to the user when they interact with the prompt, datasource, or agent. While currently sent to the LLM along with other instructions, it primarily serves as a way to communicate specific guidance or information to the user before they begin interacting with the prompt. Adding a Welcome Message: Locate the Welcome Message input field within the Configuration tab. Type the desired welcome message text into the input field. This could be instructions, reminders, or any other information you want the user to see. Click the Save button to save the configuration. This will make the configured welcome message visible to the user in the Chat section. How the Welcome Message is Used: When a user navigates to the Chat section of the prompt, the configured Welcome Message will be displayed at the top of the chat interface. This provides an immediate notification or instruction, setting the stage for their interaction with the prompt. Examples of Effective Welcome Messages: \"Use this prompt for generating comprehensive test cases based on the provided requirements.\" \"Remember to carefully review the generated output before implementing it.\" \"This prompt is designed to assist with summarizing technical documentation. Please provide the document content below.\"","title":"WELCOME MESSAGE"},{"location":"platform-documentation/menus/prompts/#conversation-starters","text":"The Conversation Starter feature empowers you to configure and add predefined text options that users can click to initiate a conversation or trigger a specific action when executing a prompt. This is particularly useful for guiding users and providing them with quick access to common or recommended interactions, ensuring a consistent and efficient starting point for their engagement with the prompt. Setting Up Conversation Starters: Navigate to the Conversation Starter section within the Configuration tab. Click the + icon. This will open a text input field where you can type the text you want to use as a conversation starter. Enter the desired text for the conversation starter. This should be a clear and actionable phrase or question. Click the Save button to save the configuration. The configured conversation starter will now be available for users. Using Conversation Starters to Initiate Interactions: When a user goes to the Chat section of the prompt, they will see a list of the saved conversation starters. Clicking on a desired starter will automatically populate the chat input field with that text and execute the prompt, streamlining the process of initiating specific tasks or queries. Examples of Effective Conversation Starters: \"Generate test cases for the following user story: [Paste User Story Here]\" \"Summarize the key findings from this research paper.\" \"Translate this document into Spanish.\" \"Explain the concept of [Technical Term].\" By providing these pre-defined options, you make it easier for users to understand the capabilities of the prompt and quickly initiate relevant interactions. By setting up conversation starters, you streamline the process of initiating specific tasks or queries, making your interactions with the prompt more efficient and standardized.","title":"CONVERSATION STARTERS"},{"location":"platform-documentation/menus/prompts/#variables","text":"The Variables within prompts introduce a powerful layer of dynamic customization, allowing you to create flexible and reusable prompts that can be easily adapted to specific needs or contexts without requiring modifications to the core prompt structure. This feature significantly enhances the versatility and efficiency of your prompts. Understanding Variables: Variables are placeholders within your prompt's Context or Messages that are denoted by double curly brackets, for example, {{user_story}} . These placeholders represent information that might change depending on the specific use case. How Variables Work: Define Variables in Context or Messages : Begin by identifying the elements within your Context or Messages that you want to make dynamic. Replace these static values with variable placeholders using the {{variable_name}} syntax. Choose descriptive names for your variables to easily understand their purpose. Automatic Population in the Variables Section : Once you define a variable in the Context or Messages , it will automatically appear in the VARIABLES section located below. Assign Values to Variables : In the VARIABLES section, you can assign specific values to each defined variable. This is where you provide the actual data that will replace the placeholder when the prompt is executed. This process empowers you to create prompts that can be easily adapted by simply changing the values of the variables, eliminating the need to rewrite the entire prompt for different scenarios. Note : You have the flexibility to define one or more variables within each prompt. Variables can be defined in both the Context and Messages sections, providing flexibility in how you structure your dynamic prompts.","title":"VARIABLES"},{"location":"platform-documentation/menus/prompts/#advanced-settings","text":"For users who require more granular control over the AI model's behavior, ELITEA provides Advanced Settings . These settings allow you to fine-tune the parameters that influence the generation of responses. To access these settings, click the Gear icon on the Configurations tab or SETTINGS section under the Run tab. The following advanced settings are available: Model : This dropdown menu allows you to select the specific Large Language Model (LLM) that will be used to process your prompt. Different models have varying capabilities and performance characteristics. Common options include: gpt-4o : A highly capable and advanced model known for its nuanced understanding and high-quality output. gpt-35-turbo : A more cost-effective and faster model that still provides excellent performance for a wide range of tasks. The choice of model can significantly impact the quality, speed, and cost of your prompt executions. Temperature : This parameter controls the randomness and creativity of the AI's responses. It is a value between 0 and 1 . A lower temperature (closer to 0) results in more predictable and focused responses. The AI will tend to choose the most likely next words, making the output more deterministic and consistent. This is suitable for tasks requiring factual accuracy and precision. A higher temperature (closer to 1 or above) introduces more randomness, leading to more creative and unexpected outputs. The AI will consider less probable words, potentially generating more diverse and novel responses. This is useful for brainstorming, creative writing, or when exploring different possibilities. Top P (0-1) : Also known as nucleus sampling, Top P offers another way to control the randomness of the output. It works by considering the smallest set of most probable tokens whose cumulative probability exceeds the value of P. A lower Top P value (e.g., 0.1) means the AI will only consider a very small, highly probable set of tokens, leading to more focused and deterministic responses. A higher Top P value (e.g., 0.9) allows the AI to consider a broader range of tokens, including less probable ones, resulting in more varied and potentially creative outputs. Top P provides a more dynamic way to control randomness compared to Temperature , as the number of tokens considered can vary depending on the context. Top K : This parameter limits the AI's token selection to the K most likely tokens at each step of the generation process. A lower Top K value (e.g., 10) restricts the AI to choosing from only the top 10 most probable tokens, leading to more focused and predictable responses. A higher Top K value (e.g., 100) allows the AI to choose from a wider range of likely tokens, potentially increasing the diversity and surprise in the output. Top K is useful for controlling the vocabulary and ensuring the AI stays within a certain range of likely words. Maximum Completion Tokens : This setting defines the maximum length of the AI's generated response, measured in tokens. Tokens can be roughly thought of as parts of words. Setting a lower value for Maximum Completion Tokens will result in shorter, more concise responses. This is useful when you need brief answers or summaries. Setting a higher value allows the AI to generate longer, more detailed responses. Be mindful that longer responses may consume more processing resources. By carefully adjusting these Advanced Settings , you can tailor the AI's behavior to suit the specific requirements of your prompt and achieve the desired output characteristics. Experimenting with these parameters can significantly enhance the effectiveness and versatility of your interactions with ELITEA.","title":"ADVANCED SETTINGS"},{"location":"platform-documentation/menus/prompts/#how-to-execute-prompt","text":"Once your prompt is configured, ELITEA offers two primary methods to execute it and obtain the desired output: Chat : This method is designed for interactive, conversational exchanges with the AI model. It's ideal for scenarios where you want to engage in a dialogue, ask follow-up questions, or refine the output through iterative interactions. Completion : This method is more direct, providing a single output based on the prompt's configuration. It's suitable for tasks where you need a straightforward answer, generation, or completion without the need for back-and-forth conversation.","title":"How to Execute Prompt"},{"location":"platform-documentation/menus/prompts/#executing-a-prompt-using-the-chat-option","text":"Navigate to the Run Tab : After configuring your prompt, access the Run tab. This tab provides the interface for executing your prompt and adjusting runtime settings. Review Prompt Configuration : In the Run tab, you'll see a summary of your prompt's setup. Ensure the Context , Messages , and any defined Variables are as intended. If variables are present, provide or adjust their values as needed. Select the AI Model : Choose the desired AI model from the Model dropdown list. The available models (e.g., gpt-4-0125-preview , gpt-35-turbo ) will influence the quality and nature of the generated responses. Adjust Basic Settings : You can quickly adjust the Temperature parameter to influence the creativity and predictability of the AI's responses. A lower temperature results in more focused and deterministic outputs, while a higher temperature encourages more creative and varied responses. Access Advanced Settings (Optional) : For more fine-grained control over the AI's output, check the Advanced Settings . Here, you can adjust parameters like Top P , Top K , and Maximum Completion Tokens . Refer to the Advanced Settings section for detailed information on these parameters. Initiate Interaction : In the chat input box, type your question, statement, or command to initiate the conversation with the AI. This input serves as the starting point for the interaction. Send Your Message : Click the Send icon (often represented by a paper airplane or similar symbol) to submit your input to the AI model. ELITEA will process your request based on the prompt's configuration and the selected settings. The AI's response will then appear in the chat interface. Additional Interaction Features: Auto scroll to bottom : This option can be toggled on or off to automatically scroll to the bottom of the output as it is being generated. This feature is helpful during long outputs to keep the most recent content visible. Full Screen Mode : Increase the size of the output window for better visibility and focus. This mode can be activated to expand the output interface to the full screen. Post-Output Actions: Continue the Dialogue : To keep the conversation going, simply type your next question or command in the chat box and click the Send icon. Copy the Output : Click the Copy to clipboard icon to copy the generated text for use elsewhere. Append to Assistant Message : Use the Copy to Messages icon to add the output directly to the Assistant Message section for reference or further use. Regenerate Response : If the output isn't satisfactory, click the Regenerate icon to prompt the Gen AI to produce a new response. Delete Output : To remove the current output from the chat, click the Delete icon. Purge Chat History : For a fresh start or to clear sensitive data, click the Clean icon to erase the chat history. Specialized Download Options for Tabular outputs. When the Gen AI generates output in a tabular format, additional options become available to manage and utilize this structured data: Download as xlsx : Allows you to save the tabular output directly in an Excel spreadsheet format, facilitating easy data manipulation and analysis. Copy as markdown : Enables copying the tabular output in markdown format, suitable for use in markdown-supported environments like GitHub or blogging platforms. Copy as html : Permits copying the tabular output in HTML format, ideal for integration into web pages or emails, preserving the formatting and structure.","title":"Executing a Prompt Using the Chat Option:"},{"location":"platform-documentation/menus/prompts/#executing-a-prompt-using-the-completion-option","text":"Navigate to the Run Tab : After configuring your prompt, access the Run tab. This tab serves as the central hub for executing your prompts and managing related settings. Review Prompt Configuration : In the Run tab, carefully review the prompt's setup, including the Context , Messages , and any defined Variables . Ensure everything is configured correctly for your desired outcome. If variables are present, provide or adjust their values as necessary. Select the AI Model : Choose the appropriate AI model from the Model dropdown list. The available models (e.g., gpt-4-0125-preview , gpt-35-turbo ) offer different capabilities and performance characteristics, so select the one that best suits your needs. Adjust Basic Settings : You can quickly adjust the Temperature parameter to control the level of creativity and predictability in the AI's output. A lower temperature leads to more focused and deterministic results, while a higher temperature encourages more varied and creative responses. Access Advanced Settings (Optional) : For more fine-grained control over the AI's output, check the Advanced Settings . Here, you can adjust parameters like Top P , Top K , and Maximum Completion Tokens . Refer to the Advanced Settings section for detailed information on these parameters. Select the Completion Option : Ensure that the Completion option is selected as the execution method. This is typically a radio button or a tab within the Run tab interface. Initiate Execution : Once you have reviewed the configuration and selected the Completion option, click the Run button. ELITEA will then process your prompt based on the defined settings and generate a single, complete output. The result will be displayed in the output area.","title":"Executing a Prompt Using the Completion Option:"},{"location":"platform-documentation/menus/prompts/#managing-prompt-versions-save-create-versions-and-manage","text":"To optimally manage your prompts, understanding how to save and create versions is crucial. Follow these guidelines to efficiently save your prompt, create versions, and manage them.","title":"Managing Prompt Versions: Save, Create Versions, and Manage"},{"location":"platform-documentation/menus/prompts/#how-to-save-a-prompt","text":"To save your work on a prompt for the first time, simply click the Save button. This action creates what's known as the \" latest \" version of your prompt. You can continue to modify your prompt and save the changes to the \" latest \" version at any time by clicking the Save button again. If you wish to discard any changes made, you have the option to click the Discard button before saving. Remember : The \" latest \" version represents the initial version you create. You can keep updating this version with your changes by saving them, without the need to create additional versions for your prompt.","title":"How to Save a Prompt:"},{"location":"platform-documentation/menus/prompts/#how-to-create-new-versions","text":"For instances where you need to create and manage different iterations of your prompt: Initiate a New Version : Start by clicking the Save As Version button. Name Your Version : When saving your work, provide a version name that clearly identifies the iteration or changes made. Click Save to confirm your entry. Best Practices for Version Naming : Length : Keep the version name concise, not exceeding 48 characters. This ensures readability and compatibility across various systems. Characters : Avoid using special characters such as spaces (\" \"), underscores (\"_\"), and others that might cause parsing or recognition issues in certain environments. Clarity : Choose names that clearly and succinctly describe the version's purpose or the changes it introduces, facilitating easier tracking and management of different versions. Upon creating a new version of the prompt, several options become available to you: Publish : Make this particular version of the prompt available for use. Delete : Remove this version of the prompt if it\u2019s no longer needed. Execute : Run this specific version of the prompt to see how it performs. Navigate Versions : Use the Version dropdown list to switch between and select different versions of the prompt. This allows for easy comparison and management of various iterations. By following these steps, you can effectively manage the lifecycle and iterations of your prompts, ensuring that each version is appropriately saved, published, and utilized as per your requirements.","title":"How to Create New Versions:"},{"location":"platform-documentation/menus/prompts/#how-to-publish-a-prompt","text":"To make your prompt available to the wider Epam Network and Communities, follow these steps for publication: Publishing Initiation : With your prompt crafted and saved, initiate the process by clicking the Publish button. Version Naming : Assign an informative version name (e.g., Gen-1.0) in the pop-up window. This name should encapsulate the essence or objective of the prompt, facilitating version management and future iterations. Review Submission : Finalize your submission by clicking Publish , forwarding your prompt for the moderation review process. This stage is vital to guarantee the prompts shared within the Epam community meet a standard of quality and relevance. For publishing a specific version, firstly select the desired version and opt to publish. The chosen version's name appears in the \" Publish version \" pop-up window. It can be published as is or renamed before the final publication step. Note : After publishing, the prompt can be retracted by selecting the Unpublish button.","title":"How to Publish a Prompt"},{"location":"platform-documentation/menus/prompts/#moderator-review-process","text":"Submission to publication triggers a meticulous assessment by the moderators, tasked with ensuring prompt standards for quality, efficiency, and security are upheld. Evaluative Steps Undertaken by Moderators : Initial Assessment : An initial examination confirms the prompt's completeness and adherence to the submission guidelines. Content Review : Evaluates the prompt\u2019s relevance, clarity, compatibility with best practices, and information security. Practical Evaluation : Assesses the prompt's operational feasibility, including variables, system commands, and projected outcomes. Compliance Check : Final verification against community norms and security protocols, ensuring the protection of sensitive data.","title":"Moderator Review Process"},{"location":"platform-documentation/menus/prompts/#possible-outcomes-of-the-review","text":"After the review process, a prompt can be categorized into one of the following statuses: Approved : If the prompt meets all specified criteria, it is accepted and added to the Public project under the Prompts section, making it accessible to the community. Rejected : If the prompt does not meet the necessary standards, it is not approved for publication. Constructive feedback is provided to the creator, enabling them to make the required adjustments and submit a revised version for future consideration.","title":"Possible Outcomes of the Review"},{"location":"platform-documentation/menus/prompts/#tracking-the-status-of-prompts","text":"Prompts undergo several statuses through the review phase: All : An overview of all submissions regardless of their review stage. Draft : Saved yet unsubmitted prompts. Published : Moderation-approved prompts, now accessible in the Public project. On Moderation : Prompts currently under review. Approval : This status indicates that the prompt is awaiting the author's approval before a new version can be published. Note : This feature is currently under development and is not available at the moment. Rejected : Prompts evaluated and declined for publication.","title":"Tracking the Status of Prompts"},{"location":"platform-documentation/menus/prompts/#prompt-actions","text":"ELITEA provides a set of convenient actions you can perform on your prompts to manage, share, and organize them effectively. These actions are easily accessible through dedicated icons associated with each prompt. Copy link to clipboard : Clicking the Copy icon will copy a direct link to the current prompt to your clipboard. This allows you to easily share the prompt with colleagues or reference it in other documents. Add to collection : The Bookmark icon allows you to add the current prompt to one of your existing collections. This helps you organize your prompts into logical groups based on topic, project, or any other criteria you find useful. Export prompt : Clicking the Export icon will initiate the process of exporting your prompt. The prompt will be saved as a JSON file to your local device. This file contains all the prompt's configurations, including context, messages, variables, and settings, making it easy to back up or share your prompt outside of ELITEA. Fork prompt : Clicking the Fork icon will initiate the process of creating a copy of the prompt within a different project. This is a useful feature for transferring prompts between projects without needing to export and import them. When you fork a prompt, a complete copy of its configuration is created in the target project, allowing you to modify it independently. Delete Prompt : Clicking the Thrash icon will delete the prompt. Be cautious when using this action, as deleted prompts cannot be recovered.","title":"Prompt Actions"},{"location":"platform-documentation/menus/prompts/#how-to-import-a-prompt","text":"To use the prompts created in other projects, environments, follow these simple steps. Initiate Import : Select the Import option within ELITEA. Choose File : Browse and select the exported JSON prompt file. Complete Process : The prompt will be added under the Prompts section in ELITEA. Use Prompt : You can now access and utilize the imported prompt. Note : ELITEA supports Jinja template. Make sure the content and variables in your prompt adhere to this format, especially avoiding spaces in variable names. For more information please check ELITEA and Epam AI Dial document.","title":"How to Import a Prompt"},{"location":"platform-documentation/menus/prompts/#public-project-prompts-menu","text":"The Prompts menu within Public project showcases a collection of published and shared prompts within the community.","title":"Public project - Prompts menu"},{"location":"platform-documentation/menus/prompts/#layout-of-the-prompts-menu","text":"The Prompts menu is organized into three distinct pages, each designed to offer a unique perspective on the available prompts: Latest : Displays all recently published prompts, providing a fresh look at the newest contributions to the community. My Likes : Highlights the prompts that you have liked. This personalized page allows you to revisit favorites effortlessly. Trending : Showcases the prompts with the highest number of likes, serving as a valuable resource for discovering top-rated prompts that hold significant value and popularity within the community.","title":"Layout of the Prompts Menu"},{"location":"platform-documentation/menus/prompts/#engaging-with-published-prompts","text":"Interaction within the community is highly encouraged to recognize and appreciate valuable prompts. The following actions enable active participation:","title":"Engaging with Published Prompts"},{"location":"platform-documentation/menus/prompts/#liking-published-prompts","text":"Upon publication, a prompt becomes a crucial resource for the community. To support and acknowledge a prompt, use the Like functionality: To like a prompt, click on the Heart icon associated with it. If you wish to withdraw your like, simply click the Heart icon again to Unlike the prompt.","title":"Liking Published Prompts"},{"location":"platform-documentation/menus/prompts/#other-actions-for-published-prompts","text":"Executing Published Prompts : View and run published prompts by clicking on the prompt card or name. Refer to the How to Execute Prompt section for guidance on running a prompt.s Note : Modifications to a published prompt cannot be saved for future use. Adding Published Prompts to Collections : Enhance your collections by including published prompts. Visit the How to Add Prompt into Collection section for instructions on incorporation. Exporting Published Prompts : For external use or backup, published prompts can be exported. Details on this process are found in the How to Export a Prompt section.","title":"Other Actions for Published Prompts"},{"location":"platform-documentation/menus/settings/","text":"Settings The Settings is designed to offer you a centralized space to manage vital aspects of your account and configurations. This centralized space is accessible by clicking on your avatar located at the top right corner of the page. The Settings consists of several tabs and settings each dedicated to specific functionalities: Profile : Customize your user profile within ELITEA. Monitoring : Keep track of usage statistics by selecting different metrics and timeframes. Configuration : Manage essential technical settings crucial for the smooth operation of ELITEA's features like Alita Code or Alita Code Chat. Deployments : Handle the management and launching of AI models or services linked to your ELITEA project. Projects : Manage users within project. This tab is only available for the user within admin permissions within the project. Theme : Switch between Dark and Light theme for the whole application. Log out : Securely log out from the ELITEA. Navigation : To navigate through the Settings menus, follow these steps: Click on the Your Avatar icon located at the top right corner of the page to open the Sidebar menu. Select the desired tab by clicking on its name to navigate to that specific section. Profile In the Profile , you\u2019re presented with options to personalize your account within ELITEA. About me - fill in or update your personal details to ensure your ELITEA profile remains current. Note : Markdown is supported. Monitoring The Monitoring feature in ELITEA is designed to provide a comprehensive overview of the application's usage and performance. This feature is essential for administrators and users who want to gain insights into various aspects of the application, from user engagement to the effectiveness of configured artifacts like prompts, datasources, and agents. By leveraging the detailed charts and statistics available within the Monitoring feature, you can make informed decisions to optimize the performance and user experience of your ELITEA application. This section will guide you through the various components of the Monitoring feature, including configuration options, key metrics, adoption and usage statistics, sentiment analysis, accuracy metrics, prompt topics, and topics summary. Each of these components offers valuable insights that can help you understand how the application is being used and how it can be improved. Configuration Options At the top of the Monitoring page, you have several options and settings to configure the charts and metrics you wish to monitor: Projects : A dropdown lits allowing you to select the project. Note : For your Private project, you can only see your private project data. If you have an admin role in another projects, you can select other projects to monitor. From and To Date Fields : These fields are used to select the time period for which you want to see the data. Aggregation : A dropdown list providing options to view aggregated data over different time periods. You can choose from Hour , Day , Week , Two Weeks , Three Weeks , and Month to tailor the data aggregation to your specific needs. Type : A dropdown list allowing you to select among Prompt , Datasource , Agent , and Conversation to focus your monitoring on specific elements. Name : A dropdown list to select specific items by name, such as created prompts, datasources, agents, or conversations. Users : A dropdown list to select which users' data you want to monitor. Note : For your private project, you can only see your own user data. If you have an admin role in another project, you can select other users to monitor. To apply any changes or selections, click the Apply button. Use the Refresh button to update the monitoring data based on the latest activities and configurations. Key Metrics Below the configuration options, you'll find an overview of key metrics that give you a snapshot of the current state of the system: Users : The total number of users interacting with the ELITEA application. Tokens In : The number of tokens consumed by the ELITEA application. Tokens Out : The number of tokens generated by the ELITEA application. Engagement : The percentage of active users out of all users who logged into ELITEA for the selected period, indicating the level of interaction with the application. Acceptance rate : The percentage of interactions during the selected period where users accepted the generated output by copying, downloading, or saving it, reflecting user satisfaction and utility of the results. Prompts : The total number of prompts created. Agents : The total number of agents created. Conversations : The total number of conversations created. These metrics are accompanied by a date range selector, allowing you to filter the data for a specific period. Adoption and Usage Below the key metrics, you'll find the Adoption and Usage section, which includes: Active Users : A bar chart displaying the number of active users over time. Token Usage : A line chart showing the tokens consumed (In) and generated (Out) over time. These charts provide insights into user engagement and the application's token economy. Acceptance Rate The Acceptance Rate section provides a comprehensive view of user interactions with the ELITEA application, focusing on how often users accept the generated outputs. This section includes visualizations that help you understand user satisfaction and the effectiveness of the system's responses. Acceptance Rate Chart The Acceptance Rate Chart displays the number of accepted and not accepted interactions for the selected period and filter options. This chart helps you assess how frequently users find the generated outputs useful enough to accept by copying, downloading, or saving them. Accepted Interactions : This metric shows the count of interactions where user(s) have accepted the generated output, indicating satisfaction and utility. Not Accepted Interactions : This metric reflects the number of interactions where user(s) did not accept the output, suggesting areas for potential improvement in response quality. By analyzing the Acceptance Rate Chart, you can gain insights into user satisfaction levels and identify opportunities to enhance the effectiveness of the ELITEA application, ultimately improving the overall user experience. Sentiments The Sentiments section provides a visual representation of the emotional tone of both user inputs and the outputs generated by LLMs. Understanding sentiment is crucial for tailoring responses to better meet user needs and improve overall interaction quality. Sentiment Analysis Overview Sentiment analysis categorizes text into three primary emotional states: Positive : Indicates a favorable or happy emotional tone. Negative : Indicates an unfavorable or unhappy emotional tone. Neutral : Indicates a neutral or indifferent emotional tone. ELITEA performs sentiment analysis on user inputs to gauge the user's emotional state. This capability is particularly important for providing high-quality customer service, as the LLM can adjust its response tone and content based on the user's emotions. Visual Representation The Sentiments section includes two pie charts that offer a clear visual representation of sentiment distribution: Human Input : This pie chart shows the sentiment distribution of user inputs. It helps you understand how users are feeling when they interact with the LLMs. LLM Output : This pie chart displays the sentiment distribution of LLM's outputs. It helps you ensure that the responses generated by the LLM are appropriate and aligned with user emotions. Practical Applications Understanding sentiment can significantly enhance the user experience in several ways: Customer Service : By analyzing the sentiment of user inputs, LLMs can adjust its responses to be more empathetic and supportive, thereby improving customer satisfaction. User Engagement : Monitoring sentiment trends over time can help you identify patterns in user behavior and adjust your strategies accordingly. Content Moderation : Sentiment analysis can be used to flag potentially harmful or inappropriate content, ensuring a safer and more positive interaction environment. Accuracy The Accuracy section provides detailed insights into the performance and reliability of the ELITEA application. This section includes various metrics and visualizations that help you understand how well the system is responding to user inputs and how effective your configured artifacts (prompts, datasources, agents, conversations) are. Relevance The Relevance metric is divided into two key lines: Input vs Context : This line measures the relevance of the user's input (question or query) against the context of the artifact (prompt, datasource, agent or conversation). In the ELITEA, \"context\" refers to the configured instructions for the artifact. A higher relevance score indicates that the user's input closely matches the context, making it easier for the LLM to provide accurate responses. Output vs Input : This line measures the relevance of the generated output by the LLM against the user's input. A higher relevance score here indicates that the output is closely aligned with the user's query, ensuring that the response is appropriate and useful. Note : The maximum value for relevance is 6. The higher the score, the better the relevance, indicating a more accurate and contextually appropriate interaction. Reliability The Reliability Score answers the question of whether there is enough context to respond accurately to the user's questions or queries. This metric helps you gauge the confidence level of the LLM's responses. Note : The maximum reliability score is 10. A higher score indicates that there is sufficient context to provide a correct and reliable response to the user's query. Instruction Quality vs Usage The Instruction Quality vs Usage is a 2x2 matrix that helps you evaluate the effectiveness and utilization of your artifacts (prompts, agents, datasources or conversations): Low Quality, Low Usage : Artifacts in this box have low quality scores and are rarely used. These artifacts may need to be re-evaluated or improved. High Quality, Low Usage : Artifacts in this box have high quality scores but are not frequently used. Efforts should be made to promote these high-quality artifacts to increase their usage. High Quality, High Usage : Artifacts in this box have high quality scores and are frequently used. These are your most effective artifacts and should be maintained. Low Quality, High Usage : Artifacts in this box have low quality scores but are frequently used. These artifacts should be improved in quality or their usage should be reduced in favor of higher-quality alternatives. Matrix legend : Quality Score : The maximum quality score is 4. A higher score indicates better quality. Calls : This metric shows how many times an artifact has been used. Depending on the context (matrix box), a higher number of calls can be either positive or negative. By analyzing these metrics, you can make informed decisions to improve the accuracy and reliability of your Alita AI application, ensuring a better user experience. Prompt Topics The Prompt Topics section provides an automatic classification of the available artifacts (prompts, datasources, and agents) within the Alita AI application. This section helps you understand the distribution and focus areas of your artifacts, enabling you to identify trends and gaps in your content. Chart Components The Prompt Topics section displays a clustered column chart that categorizes your artifacts by topic. This visual representation allows you to quickly see how many prompts, datasources, or agents are associated with each topic. The clustered column chart includes the following components: Items : Indicates the number of artifacts associated with each topic. Topic Name : Displays the name of each topic, helping you identify the subject matter of your artifacts. Practical Applications Understanding the distribution of your artifacts across different topics can provide several benefits: Content Gaps : Identify topics with fewer artifacts, indicating potential areas where additional content may be needed. Content Focus : Recognize topics with a high number of artifacts, helping you understand the primary focus areas of your users. Resource Allocation : Allocate resources more effectively by focusing on topics that require more attention or improvement. By leveraging the insights provided by the Prompt Topics section, you can ensure that your application covers a comprehensive range of topics, enhancing the overall user experience and effectiveness of the application. Topics Summary The Topics Summary section provides an automatic classification of user inputs, categorizing the topics that users have queried or questioned about. This section helps you understand user interests and the most frequently discussed topics within ELITEA. Chart Components The Topics Summary section displays a clustered column chart that categorizes user inputs by topic. This visual representation allows you to quickly see how many times users have queried information for each topic within a selected timeframe. The clustered column chart includes the following components: Items : Indicates the number of user queries associated with each topic. Topic Name : Displays the name of each topic, helping you identify the subject matter of user queries. Practical Applications Understanding the distribution of user queries across different topics can provide several benefits: User Interests : Identify the topics that users are most interested in, allowing you to tailor your content and responses to better meet their needs. Content Gaps : Recognize topics with fewer user queries, indicating potential areas where additional content or promotion may be needed. Trend Analysis : Monitor how user interests evolve over time, helping you stay ahead of emerging trends and adjust your strategies accordingly. By leveraging the insights provided by the Topics Summary section, you can ensure that ELITEA is aligned with user interests, enhancing the overall user experience and effectiveness of the application. The Monitoring feature in ELITEA offers a robust set of tools and metrics to help you understand the performance and usage of your application. By utilizing the various charts and statistics available, you can gain valuable insights into user engagement, sentiment, accuracy, and the distribution of topics within your project. These insights are crucial for making data-driven decisions that can enhance the overall user experience and effectiveness of your ELITEA application. Whether you are looking to improve customer's experience through sentiment analysis, optimize the relevance and reliability of LLM responses, or identify content gaps and user interests, the Monitoring feature provides the necessary data to guide your efforts. By regularly reviewing and analyzing these metrics, you can ensure that your project remains aligned with user needs and continues to perform at its best. By leveraging the comprehensive monitoring capabilities of ELITEA, you can create a more responsive, efficient, and user-friendly application, ultimately leading to higher user satisfaction and better overall performance. Configuration The Configuration page serves as the nucleus for managing essential technical settings that enable the smooth operation of ELITEA's features, such as Alita Code or Alita Code Chat. Note : The available settings and configurations may vary depending on the project selected. It's important to select the appropriate project from the project dropdown menu to access specific configurations relevant to that project. URL - this is the base web address through which you interact with ELITEA\u2019s services. It's a crucial link for all your API calls or web requests. Project ID & Integration UID - unique identifiers for your project and integration instances. These are required when setting up or customizing ELITEA\u2019s services to work within your specific project environment. Integration Options - allows to select and display available LLMs and Embeddings integrated with your deployments. Model Name - displays the correct name of selected integration option Personal Tokens - access tokens are your key to secure communication with ELITEA's backend. Here, you can generate tokens that authorize your applications or scripts to perform operations on behalf of your account. Treat these tokens with care and keep them confidential. To create a token: Click the + icon to create a new token. Enter a name and set an expiration date for the token. Click Generate to create the token. Immediately copy and securely store the generated token; it will not be visible again once you close the pop-up window. From the Integration Option dropdown list, select the desired LLM model (e.g., gpt-4, gpt-4o, gpt-4-0125-preview, etc.). Once the LLM model is selected, the Download VS Code Settings and the Download Jetbrains Settings icons will appear next to the created token. This allows you to download the configuration files to integrate and configure the ELITEA project with Alita Code extensions on VSCode and IntelliJ respectively. For more information about how to setup it, please refer to the Alita Code Documentation . Deployments The Deployments page is all about managing and launching AI models or services that you\u2019ve connected to your ELITEA project. Note : The available settings and configurations may vary depending on the project selected. It's important to select the appropriate project from the project dropdown menu to access specific configurations relevant to that project. Available Deployments - view a list of current AI deployments, such as AI Dial or Hugging Face, that have been linked to your project. This snapshot gives you quick access to manage these integrations. Creating New Deployments - while the possibility exists to set up new deployments, it\u2019s a process that requires coordination with the ELITEA team. This is to ensure seamless integration and avoid potential conflicts with existing configurations. Creating a New Deployment for EPAM AI Dial To set up a new deployment for EPAM AI Dial within your system, follow these detailed steps: Obtain API Key : Important : Before proceeding, you must obtain a separate API Key from the EPAM DIAL team. This key is essential for authenticating and enabling communication with the AI Dial services. API Key Retrieval : Once you have received the API Key and any additional required information via email, return to this page to input these details. Initiate Deployment Creation : Click the + icon to start creating a new deployment. Select Deployment Type : From the list of available deployment types, select AI Dial . Configure Deployment Details : In the configuration window, fill in the following information: Name : Enter a descriptive name for the deployment. This name will be displayed alongside LLM models configured with this deployment. API Base : For EPAM AI Dial, use https://ai-proxy.lab.epam.com as the API Base. Secret API Key : Paste the API Key that you received from the AI Dial team. API Version : Enter the API version information provided by the AI Dial team. Add Models to Deployment : Click the + icon to add one or more models associated with this deployment. For each model, provide the model's name, maximum input tokens, and capabilities. Important : Ensure that you enter the correct model name as used in EPAM AI DIAL. For detailed information on model specifications and configurations, refer to the EPAM AI Dial documentation . Click Save to complete the creation of the deployment. By following these steps, you can successfully create and configure a new deployment for EPAM AI Dial, enabling you to leverage advanced capabilities within your projects. Integrations The Integrations menu in ELITEA is designed to enhance the platform's functionality and flexibility by allowing users to connect with essential external tools such as Jira, Confluence, Testrail, and GitHub. These integrations enable seamless data flow and collaboration across different platforms, enhancing productivity and efficiency. Once configured, these integrations can be selected as configurations in the Agent's tool setup for each corresponding tool, allowing for streamlined operations within ELITEA. You can create integrations in both Private workspaces and Team projects, providing versatility in managing your connections. Confluence Integration Setup To set up a Confluence integration, follow these step-by-step instructions: Initiate New Integration : Click the + icon to start the process of creating a new integration. A pop-up window will appear, prompting you to select the type of integration you wish to create. Select Confluence : From the available options, select Confluence . This will open a new pop-up window where you can enter the necessary details for the integration. Enter Integration Details : Name : Provide a descriptive name for the integration, such as \"Conf_Integration\". URL : Enter the Confluence URL for your organization, e.g., https://kb.epam.com/ . Authentication Options : Choose your preferred method for secure connection: API Key : Select this option if you are using an API key for authentication. You have two choices for providing the necessary credentials: Password : Enter your API key value directly into the provided field. Secret : Select a pre-configured secret from the dropdown list. This secret should have been set up previously in Secrets page for secure storage and retrieval. Username : Additionally, you will need to input the Username associated with your Confluence account to complete the authentication process. Token : Select this option if you are using a token for authentication. Similar to the API key, you have two choices for providing the necessary credentials: Password : Enter the your token value directly into the provided field. Secret : Select a pre-configured secret from the dropdown list. This secret should have been set up previously in Secrets page for secure storage and retrieval. Hosting Option : Select the appropriate hosting type for your Jira setup: Cloud : If your Confluence is hosted on Atlassian\u2019s cloud. Server : If your Confluence is hosted on your own servers or an enterprise environment. Important Note : When connecting to Epam's Confluence, ensure you select the Server option to establish the correct configuration. Set as Default : Check the checkbox to set this integration as the default. Save the Integration : Click the Save button to finalize the integration setup. Your Confluence integration is now configured and ready to use. GitHub Integration Setup For GitHub integration, choose from the following authentication options: Initiate New Integration : Click the + icon to start the process of creating a new integration. A pop-up window will appear, prompting you to select the type of integration you wish to create. Select Confluence : From the available options, select GitHub . This will open a new pop-up window where you can enter the necessary details for the integration. Enter Integration Details : Name : Provide a descriptive name for the integration, such as \"GitHub_Integration\". Authentication Options : Choose your preferred method for secure connection: Private Key : Select this option if you are using an Private key for authentication. App ID : Enter the App ID associated with your GitHub integration. Private Key : Enter the configured Private key. You have two choices for providing the necessary credentials: Password : Enter your Private key value directly into the provided field. Secret : Select a pre-configured secret from the dropdown list. This secret should have been set up previously in Secrets page for secure storage and retrieval. Token : Select this option if you are using a token for authentication. Similar to the Private key, you have two choices for providing the necessary credentials: Password : Enter the your token value directly into the provided field. Secret : Select a pre-configured secret from the dropdown list. This secret should have been set up previously in Secrets page for secure storage and retrieval. Password : Select this option if you are using your GitHub account password for authentication. Password : Enter the password associated with your GitHub account. Similar to previous options, you have two choices for providing the necessary credentials: Password : Enter your password value directly into the provided field. Secret : Select a pre-configured secret from the dropdown list. This secret should have been set up previously in Secrets page for secure storage and retrieval. Username : Additionally, you will need to input the Username associated with your GitHub account to complete the authentication process. Anonymous : Select this option, if no anuthentication is required. Set as Default : Check the checkbox to set this integration as the default. Save the Integration : Click the Save button to finalize the integration setup. Your GitHub integration is now configured and ready to use. Jira Integration Setup To set up a Jira integration, follow these step-by-step instructions: Initiate New Integration : Click the + icon to start the process of creating a new integration. A pop-up window will appear, prompting you to select the type of integration you wish to create. Select Jira : From the available options, select Jira . This will open a new pop-up window where you can enter the necessary details for the integration. Enter Integration Details : Name : Provide a descriptive name for the integration, such as \"Jira_Integration\". URL : Enter the Jira URL for your organization, e.g., https://jiraeu.epam.com/ . Authentication Options : Choose your preferred method for secure connection: API Key : Select this option if you are using an API key for authentication. You have two choices for providing the necessary credentials: Password : Enter your API key value directly into the provided field. Secret : Select a pre-configured secret from the dropdown list. This secret should have been set up previously in Secrets page for secure storage and retrieval. Username : Additionally, you will need to input the Username associated with your Jira account to complete the authentication process. Token : Select this option if you are using a token for authentication. Similar to the API key, you have two choices for providing the necessary credentials: Password : Enter the your token value directly into the provided field. Secret : Select a pre-configured secret from the dropdown list. This secret should have been set up previously in Secrets page for secure storage and retrieval. Hosting Option : Select the appropriate hosting type for your Jira setup: Cloud : If your Jira is hosted on Atlassian\u2019s cloud. Server : If your Jira is hosted on your own servers or an enterprise environment. Important Note : When connecting to Epam's Jira, ensure you select the Server option to establish the correct configuration. Set as Default : Check the checkbox to set this integration as the default. Save the Integration : Click the Save button to finalize the integration setup. Your Jira integration is now configured and ready to use. TestRail Integration Setup To set up a Testrail integration, provide the following details: Initiate New Integration : Click the + icon to start the process of creating a new integration. A pop-up window will appear, prompting you to select the type of integration you wish to create. Select Jira : From the available options, select TestRail . This will open a new pop-up window where you can enter the necessary details for the integration. Enter Integration Details : Name : Provide a descriptive name for the integration, such as \"TestRail_Integration\". URL : Enter the TestRail URL for your organization, e.g., https://testrail.epam.com/ . Email : Enter the email used for authentication. Authentication Options : Choose your preferred method for secure connection: Password : Enter your password value directly into the provided field. Secret : Select a pre-configured secret from the dropdown list. This secret should have been set up previously in Secrets page for secure storage and retrieval. Set as Default : Check the checkbox to set this integration as the default. Save the Integration : Click the Save button to finalize the integration setup. Your TestRail integration is now configured and ready to use. By setting up these integrations, you can streamline workflows and enhance collaboration across different platforms, making ELITEA a more powerful tool for your projects. Projects The Projects menu is specifically designed for administrators and becomes accessible when you hold administrative privileges in any project other than your private project within ELITEA. Note : It's important to select the appropriate project from the project dropdown menu to access specific configurations relevant to that project. Groups The Groups feature in ELITEA is designed to facilitate efficient management and monitoring of multiple projects by admins or managers. This feature allows you to consolidate several projects under a single group, making it easier to oversee and coordinate activities across these projects. If you are an admin of two or more projects, you can leverage the Groups feature to organize and monitor your projects collectively: Create a New Group : Click the Pencil icon to initiate the creation of a new group. You will be prompted to name the group and select the projects you wish to include. Add Projects to Existing Group : If you already have established groups, you can add additional projects to these groups. This grouping functionality not only simplifies the administrative workload but also enhances the visibility and control over multiple projects, enabling more effective management and monitoring. Teammates The Teammates feature in ELITEA is specifically crafted to streamline the process of collaborating within projects by allowing you to invite new users (teammates) and assign them appropriate roles. These roles include system, admin, editor, and viewer, each providing different levels of access and control within the project. Note : Only users with an admin role are empowered to invite new members. This ensures that the invitation and role assignment process is managed by users with appropriate authority and understanding of the project\u2019s needs. Inviting New Teammates : Enter the prospective member's email address in the Email Address input field. Select their role from the Role dropdown menu. Click the Invite button. An invitation will be sent, and upon their first login, their details will be added to the Teammates , activating their account. Notes Multiple users can be invited simultaneously by separating email addresses with a comma. For Epam projects, use the invitee's Epam email. For customer projects, the customer's Active Directory is utilized for invitations. Managing Teammates : The Teammates table displays all members, their roles, and their last login information. Admins can modify a user's role or revoke access by clicking the respective Edit or Delete icons next to a user's name. Secrets The Secrets feature in ELITEA serves as a secure vault designed to store and manage sensitive information such as passwords, tokens, API keys, and other authentication details. This centralized system allows you to configure secrets once and utilize them across various components, such as Agent's toolkits within ELITEA. Creating a Secret : To add a new secret to the vault, follow these steps: Click the + icon to initiate the creation of a new secret. Enter a descriptive name for the secret to help you identify its use. In the Value field, input the token, password, API key, or any other authentication details. Once configured, this secret can now be selected and used within various components of ELITEA. Managing Secrets : The management of secrets is straightforward and secure, facilitated by the Secrets table which displays all your configured secrets: View Secret : Click the Eye icon to reveal the value of a configured secret. This allows you to quickly check the details without modifying them. Copy Secret : Easily copy the secret value to your clipboard (by clicking the hidden value) for use in configurations or integrations. Hide Secret : Hide the secret from the interface to maintain security when not actively managing the secret. Modify Secret : Update the value of the secret if the existing credentials change or need to be corrected. Delete Secret : Remove a secret permanently from the vault if it is no longer needed or if security concerns necessitate its deletion. This feature enhances the security and efficiency of managing sensitive information within ELITEA, ensuring that authentication details are handled in a secure, centralized manner.","title":"Settings"},{"location":"platform-documentation/menus/settings/#settings","text":"The Settings is designed to offer you a centralized space to manage vital aspects of your account and configurations. This centralized space is accessible by clicking on your avatar located at the top right corner of the page. The Settings consists of several tabs and settings each dedicated to specific functionalities: Profile : Customize your user profile within ELITEA. Monitoring : Keep track of usage statistics by selecting different metrics and timeframes. Configuration : Manage essential technical settings crucial for the smooth operation of ELITEA's features like Alita Code or Alita Code Chat. Deployments : Handle the management and launching of AI models or services linked to your ELITEA project. Projects : Manage users within project. This tab is only available for the user within admin permissions within the project. Theme : Switch between Dark and Light theme for the whole application. Log out : Securely log out from the ELITEA. Navigation : To navigate through the Settings menus, follow these steps: Click on the Your Avatar icon located at the top right corner of the page to open the Sidebar menu. Select the desired tab by clicking on its name to navigate to that specific section.","title":"Settings"},{"location":"platform-documentation/menus/settings/#profile","text":"In the Profile , you\u2019re presented with options to personalize your account within ELITEA. About me - fill in or update your personal details to ensure your ELITEA profile remains current. Note : Markdown is supported.","title":"Profile"},{"location":"platform-documentation/menus/settings/#monitoring","text":"The Monitoring feature in ELITEA is designed to provide a comprehensive overview of the application's usage and performance. This feature is essential for administrators and users who want to gain insights into various aspects of the application, from user engagement to the effectiveness of configured artifacts like prompts, datasources, and agents. By leveraging the detailed charts and statistics available within the Monitoring feature, you can make informed decisions to optimize the performance and user experience of your ELITEA application. This section will guide you through the various components of the Monitoring feature, including configuration options, key metrics, adoption and usage statistics, sentiment analysis, accuracy metrics, prompt topics, and topics summary. Each of these components offers valuable insights that can help you understand how the application is being used and how it can be improved.","title":"Monitoring"},{"location":"platform-documentation/menus/settings/#configuration-options","text":"At the top of the Monitoring page, you have several options and settings to configure the charts and metrics you wish to monitor: Projects : A dropdown lits allowing you to select the project. Note : For your Private project, you can only see your private project data. If you have an admin role in another projects, you can select other projects to monitor. From and To Date Fields : These fields are used to select the time period for which you want to see the data. Aggregation : A dropdown list providing options to view aggregated data over different time periods. You can choose from Hour , Day , Week , Two Weeks , Three Weeks , and Month to tailor the data aggregation to your specific needs. Type : A dropdown list allowing you to select among Prompt , Datasource , Agent , and Conversation to focus your monitoring on specific elements. Name : A dropdown list to select specific items by name, such as created prompts, datasources, agents, or conversations. Users : A dropdown list to select which users' data you want to monitor. Note : For your private project, you can only see your own user data. If you have an admin role in another project, you can select other users to monitor. To apply any changes or selections, click the Apply button. Use the Refresh button to update the monitoring data based on the latest activities and configurations.","title":"Configuration Options"},{"location":"platform-documentation/menus/settings/#key-metrics","text":"Below the configuration options, you'll find an overview of key metrics that give you a snapshot of the current state of the system: Users : The total number of users interacting with the ELITEA application. Tokens In : The number of tokens consumed by the ELITEA application. Tokens Out : The number of tokens generated by the ELITEA application. Engagement : The percentage of active users out of all users who logged into ELITEA for the selected period, indicating the level of interaction with the application. Acceptance rate : The percentage of interactions during the selected period where users accepted the generated output by copying, downloading, or saving it, reflecting user satisfaction and utility of the results. Prompts : The total number of prompts created. Agents : The total number of agents created. Conversations : The total number of conversations created. These metrics are accompanied by a date range selector, allowing you to filter the data for a specific period.","title":"Key Metrics"},{"location":"platform-documentation/menus/settings/#adoption-and-usage","text":"Below the key metrics, you'll find the Adoption and Usage section, which includes: Active Users : A bar chart displaying the number of active users over time. Token Usage : A line chart showing the tokens consumed (In) and generated (Out) over time. These charts provide insights into user engagement and the application's token economy.","title":"Adoption and Usage"},{"location":"platform-documentation/menus/settings/#acceptance-rate","text":"The Acceptance Rate section provides a comprehensive view of user interactions with the ELITEA application, focusing on how often users accept the generated outputs. This section includes visualizations that help you understand user satisfaction and the effectiveness of the system's responses. Acceptance Rate Chart The Acceptance Rate Chart displays the number of accepted and not accepted interactions for the selected period and filter options. This chart helps you assess how frequently users find the generated outputs useful enough to accept by copying, downloading, or saving them. Accepted Interactions : This metric shows the count of interactions where user(s) have accepted the generated output, indicating satisfaction and utility. Not Accepted Interactions : This metric reflects the number of interactions where user(s) did not accept the output, suggesting areas for potential improvement in response quality. By analyzing the Acceptance Rate Chart, you can gain insights into user satisfaction levels and identify opportunities to enhance the effectiveness of the ELITEA application, ultimately improving the overall user experience.","title":"Acceptance Rate"},{"location":"platform-documentation/menus/settings/#sentiments","text":"The Sentiments section provides a visual representation of the emotional tone of both user inputs and the outputs generated by LLMs. Understanding sentiment is crucial for tailoring responses to better meet user needs and improve overall interaction quality.","title":"Sentiments"},{"location":"platform-documentation/menus/settings/#sentiment-analysis-overview","text":"Sentiment analysis categorizes text into three primary emotional states: Positive : Indicates a favorable or happy emotional tone. Negative : Indicates an unfavorable or unhappy emotional tone. Neutral : Indicates a neutral or indifferent emotional tone. ELITEA performs sentiment analysis on user inputs to gauge the user's emotional state. This capability is particularly important for providing high-quality customer service, as the LLM can adjust its response tone and content based on the user's emotions.","title":"Sentiment Analysis Overview"},{"location":"platform-documentation/menus/settings/#visual-representation","text":"The Sentiments section includes two pie charts that offer a clear visual representation of sentiment distribution: Human Input : This pie chart shows the sentiment distribution of user inputs. It helps you understand how users are feeling when they interact with the LLMs. LLM Output : This pie chart displays the sentiment distribution of LLM's outputs. It helps you ensure that the responses generated by the LLM are appropriate and aligned with user emotions.","title":"Visual Representation"},{"location":"platform-documentation/menus/settings/#practical-applications","text":"Understanding sentiment can significantly enhance the user experience in several ways: Customer Service : By analyzing the sentiment of user inputs, LLMs can adjust its responses to be more empathetic and supportive, thereby improving customer satisfaction. User Engagement : Monitoring sentiment trends over time can help you identify patterns in user behavior and adjust your strategies accordingly. Content Moderation : Sentiment analysis can be used to flag potentially harmful or inappropriate content, ensuring a safer and more positive interaction environment.","title":"Practical Applications"},{"location":"platform-documentation/menus/settings/#accuracy","text":"The Accuracy section provides detailed insights into the performance and reliability of the ELITEA application. This section includes various metrics and visualizations that help you understand how well the system is responding to user inputs and how effective your configured artifacts (prompts, datasources, agents, conversations) are.","title":"Accuracy"},{"location":"platform-documentation/menus/settings/#relevance","text":"The Relevance metric is divided into two key lines: Input vs Context : This line measures the relevance of the user's input (question or query) against the context of the artifact (prompt, datasource, agent or conversation). In the ELITEA, \"context\" refers to the configured instructions for the artifact. A higher relevance score indicates that the user's input closely matches the context, making it easier for the LLM to provide accurate responses. Output vs Input : This line measures the relevance of the generated output by the LLM against the user's input. A higher relevance score here indicates that the output is closely aligned with the user's query, ensuring that the response is appropriate and useful. Note : The maximum value for relevance is 6. The higher the score, the better the relevance, indicating a more accurate and contextually appropriate interaction.","title":"Relevance"},{"location":"platform-documentation/menus/settings/#reliability","text":"The Reliability Score answers the question of whether there is enough context to respond accurately to the user's questions or queries. This metric helps you gauge the confidence level of the LLM's responses. Note : The maximum reliability score is 10. A higher score indicates that there is sufficient context to provide a correct and reliable response to the user's query.","title":"Reliability"},{"location":"platform-documentation/menus/settings/#instruction-quality-vs-usage","text":"The Instruction Quality vs Usage is a 2x2 matrix that helps you evaluate the effectiveness and utilization of your artifacts (prompts, agents, datasources or conversations): Low Quality, Low Usage : Artifacts in this box have low quality scores and are rarely used. These artifacts may need to be re-evaluated or improved. High Quality, Low Usage : Artifacts in this box have high quality scores but are not frequently used. Efforts should be made to promote these high-quality artifacts to increase their usage. High Quality, High Usage : Artifacts in this box have high quality scores and are frequently used. These are your most effective artifacts and should be maintained. Low Quality, High Usage : Artifacts in this box have low quality scores but are frequently used. These artifacts should be improved in quality or their usage should be reduced in favor of higher-quality alternatives. Matrix legend : Quality Score : The maximum quality score is 4. A higher score indicates better quality. Calls : This metric shows how many times an artifact has been used. Depending on the context (matrix box), a higher number of calls can be either positive or negative. By analyzing these metrics, you can make informed decisions to improve the accuracy and reliability of your Alita AI application, ensuring a better user experience.","title":"Instruction Quality vs Usage"},{"location":"platform-documentation/menus/settings/#prompt-topics","text":"The Prompt Topics section provides an automatic classification of the available artifacts (prompts, datasources, and agents) within the Alita AI application. This section helps you understand the distribution and focus areas of your artifacts, enabling you to identify trends and gaps in your content.","title":"Prompt Topics"},{"location":"platform-documentation/menus/settings/#chart-components","text":"The Prompt Topics section displays a clustered column chart that categorizes your artifacts by topic. This visual representation allows you to quickly see how many prompts, datasources, or agents are associated with each topic. The clustered column chart includes the following components: Items : Indicates the number of artifacts associated with each topic. Topic Name : Displays the name of each topic, helping you identify the subject matter of your artifacts.","title":"Chart Components"},{"location":"platform-documentation/menus/settings/#practical-applications_1","text":"Understanding the distribution of your artifacts across different topics can provide several benefits: Content Gaps : Identify topics with fewer artifacts, indicating potential areas where additional content may be needed. Content Focus : Recognize topics with a high number of artifacts, helping you understand the primary focus areas of your users. Resource Allocation : Allocate resources more effectively by focusing on topics that require more attention or improvement. By leveraging the insights provided by the Prompt Topics section, you can ensure that your application covers a comprehensive range of topics, enhancing the overall user experience and effectiveness of the application.","title":"Practical Applications"},{"location":"platform-documentation/menus/settings/#topics-summary","text":"The Topics Summary section provides an automatic classification of user inputs, categorizing the topics that users have queried or questioned about. This section helps you understand user interests and the most frequently discussed topics within ELITEA.","title":"Topics Summary"},{"location":"platform-documentation/menus/settings/#chart-components_1","text":"The Topics Summary section displays a clustered column chart that categorizes user inputs by topic. This visual representation allows you to quickly see how many times users have queried information for each topic within a selected timeframe. The clustered column chart includes the following components: Items : Indicates the number of user queries associated with each topic. Topic Name : Displays the name of each topic, helping you identify the subject matter of user queries.","title":"Chart Components"},{"location":"platform-documentation/menus/settings/#practical-applications_2","text":"Understanding the distribution of user queries across different topics can provide several benefits: User Interests : Identify the topics that users are most interested in, allowing you to tailor your content and responses to better meet their needs. Content Gaps : Recognize topics with fewer user queries, indicating potential areas where additional content or promotion may be needed. Trend Analysis : Monitor how user interests evolve over time, helping you stay ahead of emerging trends and adjust your strategies accordingly. By leveraging the insights provided by the Topics Summary section, you can ensure that ELITEA is aligned with user interests, enhancing the overall user experience and effectiveness of the application. The Monitoring feature in ELITEA offers a robust set of tools and metrics to help you understand the performance and usage of your application. By utilizing the various charts and statistics available, you can gain valuable insights into user engagement, sentiment, accuracy, and the distribution of topics within your project. These insights are crucial for making data-driven decisions that can enhance the overall user experience and effectiveness of your ELITEA application. Whether you are looking to improve customer's experience through sentiment analysis, optimize the relevance and reliability of LLM responses, or identify content gaps and user interests, the Monitoring feature provides the necessary data to guide your efforts. By regularly reviewing and analyzing these metrics, you can ensure that your project remains aligned with user needs and continues to perform at its best. By leveraging the comprehensive monitoring capabilities of ELITEA, you can create a more responsive, efficient, and user-friendly application, ultimately leading to higher user satisfaction and better overall performance.","title":"Practical Applications"},{"location":"platform-documentation/menus/settings/#configuration","text":"The Configuration page serves as the nucleus for managing essential technical settings that enable the smooth operation of ELITEA's features, such as Alita Code or Alita Code Chat. Note : The available settings and configurations may vary depending on the project selected. It's important to select the appropriate project from the project dropdown menu to access specific configurations relevant to that project. URL - this is the base web address through which you interact with ELITEA\u2019s services. It's a crucial link for all your API calls or web requests. Project ID & Integration UID - unique identifiers for your project and integration instances. These are required when setting up or customizing ELITEA\u2019s services to work within your specific project environment. Integration Options - allows to select and display available LLMs and Embeddings integrated with your deployments. Model Name - displays the correct name of selected integration option Personal Tokens - access tokens are your key to secure communication with ELITEA's backend. Here, you can generate tokens that authorize your applications or scripts to perform operations on behalf of your account. Treat these tokens with care and keep them confidential. To create a token: Click the + icon to create a new token. Enter a name and set an expiration date for the token. Click Generate to create the token. Immediately copy and securely store the generated token; it will not be visible again once you close the pop-up window. From the Integration Option dropdown list, select the desired LLM model (e.g., gpt-4, gpt-4o, gpt-4-0125-preview, etc.). Once the LLM model is selected, the Download VS Code Settings and the Download Jetbrains Settings icons will appear next to the created token. This allows you to download the configuration files to integrate and configure the ELITEA project with Alita Code extensions on VSCode and IntelliJ respectively. For more information about how to setup it, please refer to the Alita Code Documentation .","title":"Configuration"},{"location":"platform-documentation/menus/settings/#deployments","text":"The Deployments page is all about managing and launching AI models or services that you\u2019ve connected to your ELITEA project. Note : The available settings and configurations may vary depending on the project selected. It's important to select the appropriate project from the project dropdown menu to access specific configurations relevant to that project. Available Deployments - view a list of current AI deployments, such as AI Dial or Hugging Face, that have been linked to your project. This snapshot gives you quick access to manage these integrations. Creating New Deployments - while the possibility exists to set up new deployments, it\u2019s a process that requires coordination with the ELITEA team. This is to ensure seamless integration and avoid potential conflicts with existing configurations.","title":"Deployments"},{"location":"platform-documentation/menus/settings/#creating-a-new-deployment-for-epam-ai-dial","text":"To set up a new deployment for EPAM AI Dial within your system, follow these detailed steps: Obtain API Key : Important : Before proceeding, you must obtain a separate API Key from the EPAM DIAL team. This key is essential for authenticating and enabling communication with the AI Dial services. API Key Retrieval : Once you have received the API Key and any additional required information via email, return to this page to input these details. Initiate Deployment Creation : Click the + icon to start creating a new deployment. Select Deployment Type : From the list of available deployment types, select AI Dial . Configure Deployment Details : In the configuration window, fill in the following information: Name : Enter a descriptive name for the deployment. This name will be displayed alongside LLM models configured with this deployment. API Base : For EPAM AI Dial, use https://ai-proxy.lab.epam.com as the API Base. Secret API Key : Paste the API Key that you received from the AI Dial team. API Version : Enter the API version information provided by the AI Dial team. Add Models to Deployment : Click the + icon to add one or more models associated with this deployment. For each model, provide the model's name, maximum input tokens, and capabilities. Important : Ensure that you enter the correct model name as used in EPAM AI DIAL. For detailed information on model specifications and configurations, refer to the EPAM AI Dial documentation . Click Save to complete the creation of the deployment. By following these steps, you can successfully create and configure a new deployment for EPAM AI Dial, enabling you to leverage advanced capabilities within your projects.","title":"Creating a New Deployment for EPAM AI Dial"},{"location":"platform-documentation/menus/settings/#integrations","text":"The Integrations menu in ELITEA is designed to enhance the platform's functionality and flexibility by allowing users to connect with essential external tools such as Jira, Confluence, Testrail, and GitHub. These integrations enable seamless data flow and collaboration across different platforms, enhancing productivity and efficiency. Once configured, these integrations can be selected as configurations in the Agent's tool setup for each corresponding tool, allowing for streamlined operations within ELITEA. You can create integrations in both Private workspaces and Team projects, providing versatility in managing your connections.","title":"Integrations"},{"location":"platform-documentation/menus/settings/#confluence-integration-setup","text":"To set up a Confluence integration, follow these step-by-step instructions: Initiate New Integration : Click the + icon to start the process of creating a new integration. A pop-up window will appear, prompting you to select the type of integration you wish to create. Select Confluence : From the available options, select Confluence . This will open a new pop-up window where you can enter the necessary details for the integration. Enter Integration Details : Name : Provide a descriptive name for the integration, such as \"Conf_Integration\". URL : Enter the Confluence URL for your organization, e.g., https://kb.epam.com/ . Authentication Options : Choose your preferred method for secure connection: API Key : Select this option if you are using an API key for authentication. You have two choices for providing the necessary credentials: Password : Enter your API key value directly into the provided field. Secret : Select a pre-configured secret from the dropdown list. This secret should have been set up previously in Secrets page for secure storage and retrieval. Username : Additionally, you will need to input the Username associated with your Confluence account to complete the authentication process. Token : Select this option if you are using a token for authentication. Similar to the API key, you have two choices for providing the necessary credentials: Password : Enter the your token value directly into the provided field. Secret : Select a pre-configured secret from the dropdown list. This secret should have been set up previously in Secrets page for secure storage and retrieval. Hosting Option : Select the appropriate hosting type for your Jira setup: Cloud : If your Confluence is hosted on Atlassian\u2019s cloud. Server : If your Confluence is hosted on your own servers or an enterprise environment. Important Note : When connecting to Epam's Confluence, ensure you select the Server option to establish the correct configuration. Set as Default : Check the checkbox to set this integration as the default. Save the Integration : Click the Save button to finalize the integration setup. Your Confluence integration is now configured and ready to use.","title":"Confluence Integration Setup"},{"location":"platform-documentation/menus/settings/#github-integration-setup","text":"For GitHub integration, choose from the following authentication options: Initiate New Integration : Click the + icon to start the process of creating a new integration. A pop-up window will appear, prompting you to select the type of integration you wish to create. Select Confluence : From the available options, select GitHub . This will open a new pop-up window where you can enter the necessary details for the integration. Enter Integration Details : Name : Provide a descriptive name for the integration, such as \"GitHub_Integration\". Authentication Options : Choose your preferred method for secure connection: Private Key : Select this option if you are using an Private key for authentication. App ID : Enter the App ID associated with your GitHub integration. Private Key : Enter the configured Private key. You have two choices for providing the necessary credentials: Password : Enter your Private key value directly into the provided field. Secret : Select a pre-configured secret from the dropdown list. This secret should have been set up previously in Secrets page for secure storage and retrieval. Token : Select this option if you are using a token for authentication. Similar to the Private key, you have two choices for providing the necessary credentials: Password : Enter the your token value directly into the provided field. Secret : Select a pre-configured secret from the dropdown list. This secret should have been set up previously in Secrets page for secure storage and retrieval. Password : Select this option if you are using your GitHub account password for authentication. Password : Enter the password associated with your GitHub account. Similar to previous options, you have two choices for providing the necessary credentials: Password : Enter your password value directly into the provided field. Secret : Select a pre-configured secret from the dropdown list. This secret should have been set up previously in Secrets page for secure storage and retrieval. Username : Additionally, you will need to input the Username associated with your GitHub account to complete the authentication process. Anonymous : Select this option, if no anuthentication is required. Set as Default : Check the checkbox to set this integration as the default. Save the Integration : Click the Save button to finalize the integration setup. Your GitHub integration is now configured and ready to use.","title":"GitHub Integration Setup"},{"location":"platform-documentation/menus/settings/#jira-integration-setup","text":"To set up a Jira integration, follow these step-by-step instructions: Initiate New Integration : Click the + icon to start the process of creating a new integration. A pop-up window will appear, prompting you to select the type of integration you wish to create. Select Jira : From the available options, select Jira . This will open a new pop-up window where you can enter the necessary details for the integration. Enter Integration Details : Name : Provide a descriptive name for the integration, such as \"Jira_Integration\". URL : Enter the Jira URL for your organization, e.g., https://jiraeu.epam.com/ . Authentication Options : Choose your preferred method for secure connection: API Key : Select this option if you are using an API key for authentication. You have two choices for providing the necessary credentials: Password : Enter your API key value directly into the provided field. Secret : Select a pre-configured secret from the dropdown list. This secret should have been set up previously in Secrets page for secure storage and retrieval. Username : Additionally, you will need to input the Username associated with your Jira account to complete the authentication process. Token : Select this option if you are using a token for authentication. Similar to the API key, you have two choices for providing the necessary credentials: Password : Enter the your token value directly into the provided field. Secret : Select a pre-configured secret from the dropdown list. This secret should have been set up previously in Secrets page for secure storage and retrieval. Hosting Option : Select the appropriate hosting type for your Jira setup: Cloud : If your Jira is hosted on Atlassian\u2019s cloud. Server : If your Jira is hosted on your own servers or an enterprise environment. Important Note : When connecting to Epam's Jira, ensure you select the Server option to establish the correct configuration. Set as Default : Check the checkbox to set this integration as the default. Save the Integration : Click the Save button to finalize the integration setup. Your Jira integration is now configured and ready to use.","title":"Jira Integration Setup"},{"location":"platform-documentation/menus/settings/#testrail-integration-setup","text":"To set up a Testrail integration, provide the following details: Initiate New Integration : Click the + icon to start the process of creating a new integration. A pop-up window will appear, prompting you to select the type of integration you wish to create. Select Jira : From the available options, select TestRail . This will open a new pop-up window where you can enter the necessary details for the integration. Enter Integration Details : Name : Provide a descriptive name for the integration, such as \"TestRail_Integration\". URL : Enter the TestRail URL for your organization, e.g., https://testrail.epam.com/ . Email : Enter the email used for authentication. Authentication Options : Choose your preferred method for secure connection: Password : Enter your password value directly into the provided field. Secret : Select a pre-configured secret from the dropdown list. This secret should have been set up previously in Secrets page for secure storage and retrieval. Set as Default : Check the checkbox to set this integration as the default. Save the Integration : Click the Save button to finalize the integration setup. Your TestRail integration is now configured and ready to use. By setting up these integrations, you can streamline workflows and enhance collaboration across different platforms, making ELITEA a more powerful tool for your projects.","title":"TestRail Integration Setup"},{"location":"platform-documentation/menus/settings/#projects","text":"The Projects menu is specifically designed for administrators and becomes accessible when you hold administrative privileges in any project other than your private project within ELITEA. Note : It's important to select the appropriate project from the project dropdown menu to access specific configurations relevant to that project.","title":"Projects"},{"location":"platform-documentation/menus/settings/#groups","text":"The Groups feature in ELITEA is designed to facilitate efficient management and monitoring of multiple projects by admins or managers. This feature allows you to consolidate several projects under a single group, making it easier to oversee and coordinate activities across these projects. If you are an admin of two or more projects, you can leverage the Groups feature to organize and monitor your projects collectively: Create a New Group : Click the Pencil icon to initiate the creation of a new group. You will be prompted to name the group and select the projects you wish to include. Add Projects to Existing Group : If you already have established groups, you can add additional projects to these groups. This grouping functionality not only simplifies the administrative workload but also enhances the visibility and control over multiple projects, enabling more effective management and monitoring.","title":"Groups"},{"location":"platform-documentation/menus/settings/#teammates","text":"The Teammates feature in ELITEA is specifically crafted to streamline the process of collaborating within projects by allowing you to invite new users (teammates) and assign them appropriate roles. These roles include system, admin, editor, and viewer, each providing different levels of access and control within the project. Note : Only users with an admin role are empowered to invite new members. This ensures that the invitation and role assignment process is managed by users with appropriate authority and understanding of the project\u2019s needs. Inviting New Teammates : Enter the prospective member's email address in the Email Address input field. Select their role from the Role dropdown menu. Click the Invite button. An invitation will be sent, and upon their first login, their details will be added to the Teammates , activating their account. Notes Multiple users can be invited simultaneously by separating email addresses with a comma. For Epam projects, use the invitee's Epam email. For customer projects, the customer's Active Directory is utilized for invitations. Managing Teammates : The Teammates table displays all members, their roles, and their last login information. Admins can modify a user's role or revoke access by clicking the respective Edit or Delete icons next to a user's name.","title":"Teammates"},{"location":"platform-documentation/menus/settings/#secrets","text":"The Secrets feature in ELITEA serves as a secure vault designed to store and manage sensitive information such as passwords, tokens, API keys, and other authentication details. This centralized system allows you to configure secrets once and utilize them across various components, such as Agent's toolkits within ELITEA. Creating a Secret : To add a new secret to the vault, follow these steps: Click the + icon to initiate the creation of a new secret. Enter a descriptive name for the secret to help you identify its use. In the Value field, input the token, password, API key, or any other authentication details. Once configured, this secret can now be selected and used within various components of ELITEA. Managing Secrets : The management of secrets is straightforward and secure, facilitated by the Secrets table which displays all your configured secrets: View Secret : Click the Eye icon to reveal the value of a configured secret. This allows you to quickly check the details without modifying them. Copy Secret : Easily copy the secret value to your clipboard (by clicking the hidden value) for use in configurations or integrations. Hide Secret : Hide the secret from the interface to maintain security when not actively managing the secret. Modify Secret : Update the value of the secret if the existing credentials change or need to be corrected. Delete Secret : Remove a secret permanently from the vault if it is no longer needed or if security concerns necessitate its deletion. This feature enhances the security and efficiency of managing sensitive information within ELITEA, ensuring that authentication details are handled in a secure, centralized manner.","title":"Secrets"},{"location":"release-notes/rn_current/","text":"ELITEA Release Notes Introduction ELITEA is an innovative web application that revolutionizes how you interact with prompts. Designed as a dynamic workspace, it empowers users to create, organize, and collaborate on prompts like never before. Information Release Version : 1.4.0 Released on : 15-Jan-2025 Access : ELITEA Platform New Features Nexus Elitea Environment : The new Nexus env is available for all Epamers and can be accessed without enabling EPAM's VPN. Agent Pipelines Framework : This cutting-edge feature allows users to design complex workflows where agents, prompts, tools, and datasources are steps to achieve results. By leveraging a state-of-the-art graph-based approach, users can now craft intricate processes that utilize a wide array of tools and decision-making capabilities, all within a user-friendly environment. New Toolkits for Agents : Enhance agent capabilities with the introduction of several powerful new toolkits, each designed to streamline specific aspects of project management, testing, and documentation: Report Portal : Integrate with Epam's Report Portal for real-time test reporting and analysis, aggregating test results from various frameworks to provide insightful analytics. TestIO : Leverage crowdtesting capabilities with TestIO, allowing agents to manage and deploy test cases to a community of testers for diverse and thorough testing coverage. ADO Boards : Enhance project tracking and agile management by interacting with Azure DevOps Boards, managing tasks, backlogs, and sprints directly from ELITEA. ADO Wiki : Manage and retrieve project documentation efficiently by accessing and updating Azure DevOps Wikis, facilitating better knowledge sharing. ADO Plans : Streamline release and sprint planning within Azure DevOps, managing timelines, iterations, and deliverables effectively. XRAY Cloud : Enhance test management and execution by creating, managing, and executing test cases directly in Jira. QTest : Organize, track, and execute test cases with robust tools for reporting and analytics to enhance test management. Zephyr Scale : Manage large volumes of test cases and cycles in Jira, supporting advanced test planning and metrics. Rally : Access Rally\u2019s agile project management features for better alignment, tracking, and execution of agile practices. GitLab Org : Enable direct interaction with GitLab Org repositories, providing specific project data to support informed decisions. Google Places : Connect to Google using Find places and Find near tools. Sonar : Connect to Sonar Cube and retrieve data using the Get Sonar data tool. SQL : Connect to Postgres and MySQL databases to execute SQL queries/scripts and display tables and data. Export/Import of Agents and Datasources Configuration : Facilitate the easy transfer of setup configurations between different environments or projects. Note : For security reasons, passwords and actual datasets are excluded from the export/import process. Forking Prompts, Agents, and Datasources : Introduce the forking feature to transfer Agents, Datasources, and Prompts between projects without needing to export and import the entities. Note : For security reasons, passwords and actual datasets are excluded from the forking process. Integrations : Enable seamless connections with external platforms such as Jira, Confluence, GitHub, and Testrail, enhancing workflow efficiency by allowing centralized management and improved collaboration across different tools. Configurations : Set up project-specific or personal configurations for Jira, Confluence, GitHub, and Testrail toolkits within the Agent interface, ensuring unique setups based on service URLs for optimal integration management. Magic Prompt Assistant : Auto-generate new prompts based on user input, enhancing the interactive capabilities of ELITEA. UI Enhancements: Full Screen View : Enable a Full Screen view for Context, Conversation Starter, and Welcome Message fields for Agents, Prompts, and Datasources. New BDD Loader : Reduce manual efforts required to update datasources for automation tests, allowing automation QAs to create specific datasources directly from the ELITEA UI. Improved Sorting and Ordering for Projects Dropdown List : Projects are now sorted in alphanumerical order, with Public and Private workspaces shown at the top of the list. Filtering of Entities by Author within Projects : Enhance navigation by allowing users to filter entities (prompts, datasources, collections, and agents) by author. Artifacts : Introduce a new feature allowing the creation of Buckets in ELITEA to save, update (append), read, and delete files using the Artifacts toolkit. Artifacts can be used as temporary file storage. Chat Enhancements : Add the ability to create grouped (Private) chats by adding users and select and show the history of each conversation with options such as All, Interaction, and Last N Messages. Monitoring Enhancements : Included Aggregation functionality and an Acceptance Rate chart. Persist user-selected filters during sessions in Monitoring Tabs for entities and the Monitoring page. Introduce a special ' Monitor ' role to provide a more accurate representation of active project users and usage metrics by hiding specific users (e.g., Epam admins and Support Engineers) from the project users list and excluding them from monitoring calculations. Show monitoring data per entity (for each prompt, datasource, and agent). Add new key metrics, Engagement and Acceptance rate , to provide deeper insights into user interaction and satisfaction: Engagement : Measures the percentage of active users out of all users who logged into ELITEA for the selected period. Acceptance Rate : Tracks the percentage of interactions where users accepted the generated output by copying, downloading, or saving it. Changed Features Entity Redesign : Complete redesign of Prompts, Datasources, and Agents entities. Collections : Enhanced capability to add Datasources and Agents to a Collection, improving organizational efficiency. UI Enhancements for Secrets Page : Improved user interface for managing secrets. Export Prompts and Collections in [DIAL] Format : This option has been removed. Chat Participants : Complete redesign of the Participants page. Maximum Length Option Renaming : The Maximum length is renamed to ' Max Completion Tokens ', with an added option to view available remaining tokens using the ' Remaining tokens ' option. Enable Save, Save as Version, and Discard Buttons in Toolkit Setup : Allow users to save or discard changes without needing to return to the previous screen, reducing confusion and improving efficiency. Known Issues GIT Source Authentication : SSH authentication for GIT sources fails. Workaround : Use HTTPS with Username and Password. Collections Import : After importing Collections, new collections are not being created under the Collections section. Test Connection : The test connection functionality for the toolkit is currently experiencing issues and may not operate correctly. Fixed Issues Confluence Source Filtering : Resolved issues with filtering by Space key and Page IDs. Error When Stopping Dataset in Running Status : Fixed error message displayed when stopping the dataset running process. Datasources - Clean Generated Result Button : Fixed issue where the button was not working in deduplication/list view. Unable to Search and Filter by Tag : Fixed error message displayed during search and filter by tag. Browser Toolkit: Multi Crawler Tool Fails with Validation Error : The Multi Crawler tool in the Browser Toolkit fails with a validation error when attempting to execute a user query to gather information from several web pages. Tags Editing Mode on Prompt's Page : Resolved issue where there was no way to exit from tags editing mode if there weren't any changes, as the Discard button was deactivated. Projects and Users Dropdown Lists on Monitoring Page : Made sortable in alphanumerical order. Projects should have Private and Public categories at the top, followed by an alphabetical list. Users should be sorted alphabetically. ELITEA Unresponsiveness During Agent Execution : Fixed issue where ELITEA became unresponsive when executing an agent with several tools and toolkits. If a tool within the toolkits became unresponsive, the entire platform displayed errors. A page refresh was required to navigate back. Renamed ELITEA Agent Display : Fixed issue where a renamed ELITEA Agent was incorrectly displayed on the Agent View Wizard. Browser Toolkit Tool Selection : Resolved issue where it was not possible to select any tools other than Google without providing an API Key and CSE ID, which were mandatory regardless of the selected tools. Created Secret Visibility : Fixed issue where a created secret did not automatically appear in applicable places such as Integrations, Dataset, and Agent's toolkits. A page refresh was required for the secret to become visible.","title":"RN 1.4.0"},{"location":"release-notes/rn_current/#elitea-release-notes","text":"","title":"ELITEA Release Notes"},{"location":"release-notes/rn_current/#introduction","text":"ELITEA is an innovative web application that revolutionizes how you interact with prompts. Designed as a dynamic workspace, it empowers users to create, organize, and collaborate on prompts like never before.","title":"Introduction"},{"location":"release-notes/rn_current/#information","text":"Release Version : 1.4.0 Released on : 15-Jan-2025 Access : ELITEA Platform","title":"Information"},{"location":"release-notes/rn_current/#new-features","text":"Nexus Elitea Environment : The new Nexus env is available for all Epamers and can be accessed without enabling EPAM's VPN. Agent Pipelines Framework : This cutting-edge feature allows users to design complex workflows where agents, prompts, tools, and datasources are steps to achieve results. By leveraging a state-of-the-art graph-based approach, users can now craft intricate processes that utilize a wide array of tools and decision-making capabilities, all within a user-friendly environment. New Toolkits for Agents : Enhance agent capabilities with the introduction of several powerful new toolkits, each designed to streamline specific aspects of project management, testing, and documentation: Report Portal : Integrate with Epam's Report Portal for real-time test reporting and analysis, aggregating test results from various frameworks to provide insightful analytics. TestIO : Leverage crowdtesting capabilities with TestIO, allowing agents to manage and deploy test cases to a community of testers for diverse and thorough testing coverage. ADO Boards : Enhance project tracking and agile management by interacting with Azure DevOps Boards, managing tasks, backlogs, and sprints directly from ELITEA. ADO Wiki : Manage and retrieve project documentation efficiently by accessing and updating Azure DevOps Wikis, facilitating better knowledge sharing. ADO Plans : Streamline release and sprint planning within Azure DevOps, managing timelines, iterations, and deliverables effectively. XRAY Cloud : Enhance test management and execution by creating, managing, and executing test cases directly in Jira. QTest : Organize, track, and execute test cases with robust tools for reporting and analytics to enhance test management. Zephyr Scale : Manage large volumes of test cases and cycles in Jira, supporting advanced test planning and metrics. Rally : Access Rally\u2019s agile project management features for better alignment, tracking, and execution of agile practices. GitLab Org : Enable direct interaction with GitLab Org repositories, providing specific project data to support informed decisions. Google Places : Connect to Google using Find places and Find near tools. Sonar : Connect to Sonar Cube and retrieve data using the Get Sonar data tool. SQL : Connect to Postgres and MySQL databases to execute SQL queries/scripts and display tables and data. Export/Import of Agents and Datasources Configuration : Facilitate the easy transfer of setup configurations between different environments or projects. Note : For security reasons, passwords and actual datasets are excluded from the export/import process. Forking Prompts, Agents, and Datasources : Introduce the forking feature to transfer Agents, Datasources, and Prompts between projects without needing to export and import the entities. Note : For security reasons, passwords and actual datasets are excluded from the forking process. Integrations : Enable seamless connections with external platforms such as Jira, Confluence, GitHub, and Testrail, enhancing workflow efficiency by allowing centralized management and improved collaboration across different tools. Configurations : Set up project-specific or personal configurations for Jira, Confluence, GitHub, and Testrail toolkits within the Agent interface, ensuring unique setups based on service URLs for optimal integration management. Magic Prompt Assistant : Auto-generate new prompts based on user input, enhancing the interactive capabilities of ELITEA. UI Enhancements: Full Screen View : Enable a Full Screen view for Context, Conversation Starter, and Welcome Message fields for Agents, Prompts, and Datasources. New BDD Loader : Reduce manual efforts required to update datasources for automation tests, allowing automation QAs to create specific datasources directly from the ELITEA UI. Improved Sorting and Ordering for Projects Dropdown List : Projects are now sorted in alphanumerical order, with Public and Private workspaces shown at the top of the list. Filtering of Entities by Author within Projects : Enhance navigation by allowing users to filter entities (prompts, datasources, collections, and agents) by author. Artifacts : Introduce a new feature allowing the creation of Buckets in ELITEA to save, update (append), read, and delete files using the Artifacts toolkit. Artifacts can be used as temporary file storage. Chat Enhancements : Add the ability to create grouped (Private) chats by adding users and select and show the history of each conversation with options such as All, Interaction, and Last N Messages. Monitoring Enhancements : Included Aggregation functionality and an Acceptance Rate chart. Persist user-selected filters during sessions in Monitoring Tabs for entities and the Monitoring page. Introduce a special ' Monitor ' role to provide a more accurate representation of active project users and usage metrics by hiding specific users (e.g., Epam admins and Support Engineers) from the project users list and excluding them from monitoring calculations. Show monitoring data per entity (for each prompt, datasource, and agent). Add new key metrics, Engagement and Acceptance rate , to provide deeper insights into user interaction and satisfaction: Engagement : Measures the percentage of active users out of all users who logged into ELITEA for the selected period. Acceptance Rate : Tracks the percentage of interactions where users accepted the generated output by copying, downloading, or saving it.","title":"New Features"},{"location":"release-notes/rn_current/#changed-features","text":"Entity Redesign : Complete redesign of Prompts, Datasources, and Agents entities. Collections : Enhanced capability to add Datasources and Agents to a Collection, improving organizational efficiency. UI Enhancements for Secrets Page : Improved user interface for managing secrets. Export Prompts and Collections in [DIAL] Format : This option has been removed. Chat Participants : Complete redesign of the Participants page. Maximum Length Option Renaming : The Maximum length is renamed to ' Max Completion Tokens ', with an added option to view available remaining tokens using the ' Remaining tokens ' option. Enable Save, Save as Version, and Discard Buttons in Toolkit Setup : Allow users to save or discard changes without needing to return to the previous screen, reducing confusion and improving efficiency.","title":"Changed Features"},{"location":"release-notes/rn_current/#known-issues","text":"GIT Source Authentication : SSH authentication for GIT sources fails. Workaround : Use HTTPS with Username and Password. Collections Import : After importing Collections, new collections are not being created under the Collections section. Test Connection : The test connection functionality for the toolkit is currently experiencing issues and may not operate correctly.","title":"Known Issues"},{"location":"release-notes/rn_current/#fixed-issues","text":"Confluence Source Filtering : Resolved issues with filtering by Space key and Page IDs. Error When Stopping Dataset in Running Status : Fixed error message displayed when stopping the dataset running process. Datasources - Clean Generated Result Button : Fixed issue where the button was not working in deduplication/list view. Unable to Search and Filter by Tag : Fixed error message displayed during search and filter by tag. Browser Toolkit: Multi Crawler Tool Fails with Validation Error : The Multi Crawler tool in the Browser Toolkit fails with a validation error when attempting to execute a user query to gather information from several web pages. Tags Editing Mode on Prompt's Page : Resolved issue where there was no way to exit from tags editing mode if there weren't any changes, as the Discard button was deactivated. Projects and Users Dropdown Lists on Monitoring Page : Made sortable in alphanumerical order. Projects should have Private and Public categories at the top, followed by an alphabetical list. Users should be sorted alphabetically. ELITEA Unresponsiveness During Agent Execution : Fixed issue where ELITEA became unresponsive when executing an agent with several tools and toolkits. If a tool within the toolkits became unresponsive, the entire platform displayed errors. A page refresh was required to navigate back. Renamed ELITEA Agent Display : Fixed issue where a renamed ELITEA Agent was incorrectly displayed on the Agent View Wizard. Browser Toolkit Tool Selection : Resolved issue where it was not possible to select any tools other than Google without providing an API Key and CSE ID, which were mandatory regardless of the selected tools. Created Secret Visibility : Fixed issue where a created secret did not automatically appear in applicable places such as Integrations, Dataset, and Agent's toolkits. A page refresh was required for the secret to become visible.","title":"Fixed Issues"},{"location":"release-notes/archived/rn1/","text":"Alita Release Notes Introduction Alita is an innovative web application that revolutionizes how you interact with prompts. Designed as a dynamic workspace, it empowers users to create, organize, and collaborate on prompts like never before. This initial version introduces a suite of features aimed at enhancing productivity and creativity in working with prompts. Information Release Version : 1.0.0 Released on : 23-Apr-2024 Access : Alita Platform . Note : You need to enable Epam VPN to access Alita. User Guide : Alita - User Guide New Features Create, Modify, and Save Prompts : Users can now create, modify, and save their prompts in a dedicated space, streamlining the prompt management process. Import Prompts : Seamlessly import prompts from Epam AI Dial, the previous version of Alita, ensuring continuity and ease of transition. Version Control : Maintain various versions of prompts in one place, with the capability to effortlessly switch between them. Execution Options : Execute prompts using Chat or Completion options, allowing users to gather and save the output (results) efficiently. Publish and Share Prompts : Publish your prompts and share them with your project and network, fostering collaboration and knowledge sharing. Engage with Published Prompts : Use published prompts and collections, with options to like them and mark them as favorites, enhancing community engagement. Organize with Collections and Tags : Group your prompts into Collections and categorize them with Tags for better organization and accessibility. Advanced Search Functionality : Enhanced search functionality to quickly find your prompts or public prompts and collections with various parameters. Tag-based Filtering : Filter prompts and collections using tags, making it easier to find relevant content. Datasource Configuration : Set up various datasources and configure them to enhance your results and the possibilities in using Generative AI. Embedding Creation : Users can create Embeddings, adding a layer of sophistication to prompt management. Similarity Search and Deduplication : Perform similarity searches and deduplicate content, ensuring the uniqueness and relevance of prompts. Known Issues N/A - As this is the initial release, there are currently no known issues. Feedback from users will be invaluable in identifying and addressing future improvements. Fixed Issues N/A - This being the first version, there are no previously fixed issues to report.","title":"RN 1.0.0"},{"location":"release-notes/archived/rn1/#alita-release-notes","text":"","title":"Alita Release Notes"},{"location":"release-notes/archived/rn1/#introduction","text":"Alita is an innovative web application that revolutionizes how you interact with prompts. Designed as a dynamic workspace, it empowers users to create, organize, and collaborate on prompts like never before. This initial version introduces a suite of features aimed at enhancing productivity and creativity in working with prompts.","title":"Introduction"},{"location":"release-notes/archived/rn1/#information","text":"Release Version : 1.0.0 Released on : 23-Apr-2024 Access : Alita Platform . Note : You need to enable Epam VPN to access Alita. User Guide : Alita - User Guide","title":"Information"},{"location":"release-notes/archived/rn1/#new-features","text":"Create, Modify, and Save Prompts : Users can now create, modify, and save their prompts in a dedicated space, streamlining the prompt management process. Import Prompts : Seamlessly import prompts from Epam AI Dial, the previous version of Alita, ensuring continuity and ease of transition. Version Control : Maintain various versions of prompts in one place, with the capability to effortlessly switch between them. Execution Options : Execute prompts using Chat or Completion options, allowing users to gather and save the output (results) efficiently. Publish and Share Prompts : Publish your prompts and share them with your project and network, fostering collaboration and knowledge sharing. Engage with Published Prompts : Use published prompts and collections, with options to like them and mark them as favorites, enhancing community engagement. Organize with Collections and Tags : Group your prompts into Collections and categorize them with Tags for better organization and accessibility. Advanced Search Functionality : Enhanced search functionality to quickly find your prompts or public prompts and collections with various parameters. Tag-based Filtering : Filter prompts and collections using tags, making it easier to find relevant content. Datasource Configuration : Set up various datasources and configure them to enhance your results and the possibilities in using Generative AI. Embedding Creation : Users can create Embeddings, adding a layer of sophistication to prompt management. Similarity Search and Deduplication : Perform similarity searches and deduplicate content, ensuring the uniqueness and relevance of prompts.","title":"New Features"},{"location":"release-notes/archived/rn1/#known-issues","text":"N/A - As this is the initial release, there are currently no known issues. Feedback from users will be invaluable in identifying and addressing future improvements.","title":"Known Issues"},{"location":"release-notes/archived/rn1/#fixed-issues","text":"N/A - This being the first version, there are no previously fixed issues to report.","title":"Fixed Issues"},{"location":"release-notes/archived/rn2/","text":"Alita Release Notes Introduction Alita is an innovative web application that revolutionizes how you interact with prompts. Designed as a dynamic workspace, it empowers users to create, organize, and collaborate on prompts like never before. Information Release Version : 1.0.1 Released on : 27-May-2024 Access : Alita Platform . Note : You need to enable Epam VPN to access Alita. User Guide : Alita - User Guide New Features IDE Extensions : Added support for Alita Code and Alita Code Chat extensions for both Visual Studio Code and IntelliJ IDEA, enhancing coding efficiency directly from your favorite development environments. QTest Integration : Introduced QTest as a new source type under Datasource\u2192Dataset, allowing for seamless integration and management of testing data. Project Switcher : Implemented a new tool for swiftly navigating between different projects, improving workflow fluidity. Enhanced Search Functionality : Improved search capabilities, enabling more precise and faster retrieval of information across the platform. Dataset Status Indicators : Enhanced user interface for dataset status: Done : No indicator displayed. Preparing/In Progress : Displays a circular progress indicator using the material default component. Error : Shows a warning icon alongside a closeable warning alert to inform users of issues that need attention. Known Issues Database Corruption During Indexing : If a user searches in one dataset while another is indexing, there is a risk of database corruption, leading to irreproducible bugs. Workaround : It is recommended to create a new datasource and reindex the data within it. Delayed File Finder in Alita HUB : Users may experience delays when opening the file finder in Alita HUB. Prompt Saving Error : There is an issue where prompts cannot be saved if the Name field is filled using a copy/paste action that includes leading spaces. Fixed Issues GUI Freezing During Indexing : Resolved an issue where the frontend would freeze when indexing large files in a dataset. Token Expiry Display : Fixed a bug where expired tokens were not marked as Expired in the Configuration tab. Modal Design Issue : Corrected the stretched and improperly displayed design of the Add to collections modal, ensuring it now renders correctly.","title":"RN 1.0.1"},{"location":"release-notes/archived/rn2/#alita-release-notes","text":"","title":"Alita Release Notes"},{"location":"release-notes/archived/rn2/#introduction","text":"Alita is an innovative web application that revolutionizes how you interact with prompts. Designed as a dynamic workspace, it empowers users to create, organize, and collaborate on prompts like never before.","title":"Introduction"},{"location":"release-notes/archived/rn2/#information","text":"Release Version : 1.0.1 Released on : 27-May-2024 Access : Alita Platform . Note : You need to enable Epam VPN to access Alita. User Guide : Alita - User Guide","title":"Information"},{"location":"release-notes/archived/rn2/#new-features","text":"IDE Extensions : Added support for Alita Code and Alita Code Chat extensions for both Visual Studio Code and IntelliJ IDEA, enhancing coding efficiency directly from your favorite development environments. QTest Integration : Introduced QTest as a new source type under Datasource\u2192Dataset, allowing for seamless integration and management of testing data. Project Switcher : Implemented a new tool for swiftly navigating between different projects, improving workflow fluidity. Enhanced Search Functionality : Improved search capabilities, enabling more precise and faster retrieval of information across the platform. Dataset Status Indicators : Enhanced user interface for dataset status: Done : No indicator displayed. Preparing/In Progress : Displays a circular progress indicator using the material default component. Error : Shows a warning icon alongside a closeable warning alert to inform users of issues that need attention.","title":"New Features"},{"location":"release-notes/archived/rn2/#known-issues","text":"Database Corruption During Indexing : If a user searches in one dataset while another is indexing, there is a risk of database corruption, leading to irreproducible bugs. Workaround : It is recommended to create a new datasource and reindex the data within it. Delayed File Finder in Alita HUB : Users may experience delays when opening the file finder in Alita HUB. Prompt Saving Error : There is an issue where prompts cannot be saved if the Name field is filled using a copy/paste action that includes leading spaces.","title":"Known Issues"},{"location":"release-notes/archived/rn2/#fixed-issues","text":"GUI Freezing During Indexing : Resolved an issue where the frontend would freeze when indexing large files in a dataset. Token Expiry Display : Fixed a bug where expired tokens were not marked as Expired in the Configuration tab. Modal Design Issue : Corrected the stretched and improperly displayed design of the Add to collections modal, ensuring it now renders correctly.","title":"Fixed Issues"},{"location":"release-notes/archived/rn3/","text":"ELITEA Release Notes Introduction ELITEA is an innovative web application that revolutionizes how you interact with prompts. Designed as a dynamic workspace, it empowers users to create, organize, and collaborate on prompts like never before. Information Release Version : 1.1.0 Released on : 31-May-2024 Access : ELITEA Platform . Note : You need to enable Epam VPN to access ELITEA. User Guide : ELITEA - User Guide New Features Agents Framework : Introducing a powerful new feature, Agents, which integrates prompts, datasources, and external toolkits into a unified mechanism. This allows for seamless decision-making and action-taking processes, such as searching on Google or creating Jira tickets directly through the ELITEA platform. Toolkits Available for Agents : Prompt Toolkit : Leverage pre-configured prompts from your ELITEA project to ensure consistent and accurate interactions. Datasource Toolkit : Access structured data from pre-configured datasources, enhancing the Agent's ability to process and analyze information. OpenAPI Toolkit : Integrate with OpenAPI-compliant APIs to expand the Agent's external functionalities and interactions. Browser Toolkit : Equip your Agent with search engine capabilities, enabling access to a vast array of online information. Confluence Toolkit : Integrate content from Confluence to enrich the Agent's knowledge base and improve response accuracy. GitHub Toolkit : Allow your Agent to interact directly with GitHub repositories, enhancing version control and development processes. GitLab Toolkit : Enable direct interaction with GitLab repositories, providing specific project data to support informed decisions. Jira Toolkit : Manage Jira issues and projects directly from ELITEA, streamlining project management and enhancing productivity. Agent Toolkit : Incorporate other pre-configured agents, enabling complex, layered interactions and processes within your projects. Monitoring Enhancements : Enhanced monitoring capabilities allow users to track usage statistics with selectable metrics and timeframes, providing deeper insights into application performance and usage patterns. Changed Features Brand Transition : Alita has been rebranded to ELITEA . This change reflects our commitment to evolving and enhancing the platform's capabilities, aligning with our vision to provide a more elite and refined experience for our users. All references to Alita in the platform, documentation, and related materials have been updated to reflect this new branding. Known Issues Database Corruption During Indexing : There is a risk of database corruption if a user searches in one dataset while another is indexing. Workaround : Create a new datasource and reindex the data within it to avoid this issue. Prompt Saving Error : Prompts cannot be saved if the Name field is filled using a copy/paste action that includes leading spaces. Datasources - GIT source Authentication Issue : Authentication using SSH for Git source type in Datasource fails. Workaround : Use the HTTPS option with Username and Password for successful authentication. Agent: Confluence tool - Token Authentication type : Authentication using Token for Confluence tool in Agents fails. Workaround : Use the API key option for successful authentication. Fixed Issues Deduplication Enhancements : Implemented several fixes and improvements to the deduplication functionality, enhancing data integrity and operational efficiency. Delayed File Finder in ELITEA HUB : Users may experience delays when accessing the file finder in ELITEA HUB.","title":"RN 1.1.0"},{"location":"release-notes/archived/rn3/#elitea-release-notes","text":"","title":"ELITEA Release Notes"},{"location":"release-notes/archived/rn3/#introduction","text":"ELITEA is an innovative web application that revolutionizes how you interact with prompts. Designed as a dynamic workspace, it empowers users to create, organize, and collaborate on prompts like never before.","title":"Introduction"},{"location":"release-notes/archived/rn3/#information","text":"Release Version : 1.1.0 Released on : 31-May-2024 Access : ELITEA Platform . Note : You need to enable Epam VPN to access ELITEA. User Guide : ELITEA - User Guide","title":"Information"},{"location":"release-notes/archived/rn3/#new-features","text":"Agents Framework : Introducing a powerful new feature, Agents, which integrates prompts, datasources, and external toolkits into a unified mechanism. This allows for seamless decision-making and action-taking processes, such as searching on Google or creating Jira tickets directly through the ELITEA platform. Toolkits Available for Agents : Prompt Toolkit : Leverage pre-configured prompts from your ELITEA project to ensure consistent and accurate interactions. Datasource Toolkit : Access structured data from pre-configured datasources, enhancing the Agent's ability to process and analyze information. OpenAPI Toolkit : Integrate with OpenAPI-compliant APIs to expand the Agent's external functionalities and interactions. Browser Toolkit : Equip your Agent with search engine capabilities, enabling access to a vast array of online information. Confluence Toolkit : Integrate content from Confluence to enrich the Agent's knowledge base and improve response accuracy. GitHub Toolkit : Allow your Agent to interact directly with GitHub repositories, enhancing version control and development processes. GitLab Toolkit : Enable direct interaction with GitLab repositories, providing specific project data to support informed decisions. Jira Toolkit : Manage Jira issues and projects directly from ELITEA, streamlining project management and enhancing productivity. Agent Toolkit : Incorporate other pre-configured agents, enabling complex, layered interactions and processes within your projects. Monitoring Enhancements : Enhanced monitoring capabilities allow users to track usage statistics with selectable metrics and timeframes, providing deeper insights into application performance and usage patterns.","title":"New Features"},{"location":"release-notes/archived/rn3/#changed-features","text":"Brand Transition : Alita has been rebranded to ELITEA . This change reflects our commitment to evolving and enhancing the platform's capabilities, aligning with our vision to provide a more elite and refined experience for our users. All references to Alita in the platform, documentation, and related materials have been updated to reflect this new branding.","title":"Changed Features"},{"location":"release-notes/archived/rn3/#known-issues","text":"Database Corruption During Indexing : There is a risk of database corruption if a user searches in one dataset while another is indexing. Workaround : Create a new datasource and reindex the data within it to avoid this issue. Prompt Saving Error : Prompts cannot be saved if the Name field is filled using a copy/paste action that includes leading spaces. Datasources - GIT source Authentication Issue : Authentication using SSH for Git source type in Datasource fails. Workaround : Use the HTTPS option with Username and Password for successful authentication. Agent: Confluence tool - Token Authentication type : Authentication using Token for Confluence tool in Agents fails. Workaround : Use the API key option for successful authentication.","title":"Known Issues"},{"location":"release-notes/archived/rn3/#fixed-issues","text":"Deduplication Enhancements : Implemented several fixes and improvements to the deduplication functionality, enhancing data integrity and operational efficiency. Delayed File Finder in ELITEA HUB : Users may experience delays when accessing the file finder in ELITEA HUB.","title":"Fixed Issues"},{"location":"release-notes/archived/rn4/","text":"ELITEA Release Notes Introduction ELITEA is an innovative web application that revolutionizes how you interact with prompts. Designed as a dynamic workspace, it empowers users to create, organize, and collaborate on prompts like never before. Information Release Version : 1.2.0 Released on : 21-June-2024 Access : ELITEA Platform . Note : You need to enable Epam VPN to access ELITEA. User Guide : ELITEA - User Guide New Features Chat Functionality : Introducing a comprehensive Chat feature that integrates all ELITEA functionalities into a single, cohesive environment for optimal output and collaboration: Public and Private Conversations : Engage openly with project members or conduct private discussions visible only to selected users. Participants : Enrich conversations by adding diverse participants such as users, prompts, data sources, agents, and language models. Interactions : Seamlessly interact with participants, copy responses, and utilize generated content effectively. Conversation Management : Organize your chats by saving, pinning, altering privacy settings, deleting, clearing, or exporting conversation contexts. Playback Feature : Navigate through conversation history with playback controls, allowing you to review without active model engagement. Artifact Toolkit for Agents : A new toolkit that enables agents to save their generated outputs directly as files, enhancing data management and retrieval. Jira Toolkit Enhancements : Introduce a tool to adjust the status of Jira issues directly, streamlining project management tasks. Browser Toolkit Extensions : Single URL Crawler : This tool is designed to crawl data from a specific web page within the Agent's context, making it ideal for targeted data extraction tasks. Multi URL Crawler : Use this tool to crawl data from multiple specified web pages within the Agent's context. It is suitable for broader data gathering operations across various sources. Get HTML Content : This tool allows you to retrieve the HTML content of a specified web page within the Agent's context, providing direct access to the page's structural data. Alita Agent Type : A new agent type that combines the strengths of OpenAI's and Langchain's ReAct approaches for complex, open-ended scenarios. This agent maintains chat history, improving its performance in prolonged interactions. Changed Features Confluence Toolkit Adjustments : Removed the Create Page and Page Exists tools to streamline functionalities. Browser Toolkit Changes : Removed the Duckduckgo search tool. Agent Type Updates : Declared the Raw agent type as obsolete, now reserved for legacy agents only. Datasource Authentication : Temporarily disabled SSH authentication for GIT sources, recommending HTTPS with Username and Password as an alternative. Known Issues Confluence Source Filtering : Issues with filtering by Space key and Page IDs. Workaround : Use the filtering by label option. Database Corruption During Indexing : Risk of database corruption if simultaneous actions occur in different datasets. Workaround : Create a new datasource and reindex. Prompt Saving Error : Issues saving prompts if the Name field contains leading spaces from copy/paste actions. GIT Source Authentication : SSH authentication for GIT sources fails. Workaround : Use HTTPS with Username and Password. Fixed Issues Confluence Tool Authentication : Resolved an issue with Token authentication; users should now use the API key method. GitLab Toolkit : Implemented several fixes to enhance functionality. Browser Toolkit : Added exception handling to operate without a Google CSE ID, ensuring broader accessibility and functionality.","title":"RN 1.2.0"},{"location":"release-notes/archived/rn4/#elitea-release-notes","text":"","title":"ELITEA Release Notes"},{"location":"release-notes/archived/rn4/#introduction","text":"ELITEA is an innovative web application that revolutionizes how you interact with prompts. Designed as a dynamic workspace, it empowers users to create, organize, and collaborate on prompts like never before.","title":"Introduction"},{"location":"release-notes/archived/rn4/#information","text":"Release Version : 1.2.0 Released on : 21-June-2024 Access : ELITEA Platform . Note : You need to enable Epam VPN to access ELITEA. User Guide : ELITEA - User Guide","title":"Information"},{"location":"release-notes/archived/rn4/#new-features","text":"Chat Functionality : Introducing a comprehensive Chat feature that integrates all ELITEA functionalities into a single, cohesive environment for optimal output and collaboration: Public and Private Conversations : Engage openly with project members or conduct private discussions visible only to selected users. Participants : Enrich conversations by adding diverse participants such as users, prompts, data sources, agents, and language models. Interactions : Seamlessly interact with participants, copy responses, and utilize generated content effectively. Conversation Management : Organize your chats by saving, pinning, altering privacy settings, deleting, clearing, or exporting conversation contexts. Playback Feature : Navigate through conversation history with playback controls, allowing you to review without active model engagement. Artifact Toolkit for Agents : A new toolkit that enables agents to save their generated outputs directly as files, enhancing data management and retrieval. Jira Toolkit Enhancements : Introduce a tool to adjust the status of Jira issues directly, streamlining project management tasks. Browser Toolkit Extensions : Single URL Crawler : This tool is designed to crawl data from a specific web page within the Agent's context, making it ideal for targeted data extraction tasks. Multi URL Crawler : Use this tool to crawl data from multiple specified web pages within the Agent's context. It is suitable for broader data gathering operations across various sources. Get HTML Content : This tool allows you to retrieve the HTML content of a specified web page within the Agent's context, providing direct access to the page's structural data. Alita Agent Type : A new agent type that combines the strengths of OpenAI's and Langchain's ReAct approaches for complex, open-ended scenarios. This agent maintains chat history, improving its performance in prolonged interactions.","title":"New Features"},{"location":"release-notes/archived/rn4/#changed-features","text":"Confluence Toolkit Adjustments : Removed the Create Page and Page Exists tools to streamline functionalities. Browser Toolkit Changes : Removed the Duckduckgo search tool. Agent Type Updates : Declared the Raw agent type as obsolete, now reserved for legacy agents only. Datasource Authentication : Temporarily disabled SSH authentication for GIT sources, recommending HTTPS with Username and Password as an alternative.","title":"Changed Features"},{"location":"release-notes/archived/rn4/#known-issues","text":"Confluence Source Filtering : Issues with filtering by Space key and Page IDs. Workaround : Use the filtering by label option. Database Corruption During Indexing : Risk of database corruption if simultaneous actions occur in different datasets. Workaround : Create a new datasource and reindex. Prompt Saving Error : Issues saving prompts if the Name field contains leading spaces from copy/paste actions. GIT Source Authentication : SSH authentication for GIT sources fails. Workaround : Use HTTPS with Username and Password.","title":"Known Issues"},{"location":"release-notes/archived/rn4/#fixed-issues","text":"Confluence Tool Authentication : Resolved an issue with Token authentication; users should now use the API key method. GitLab Toolkit : Implemented several fixes to enhance functionality. Browser Toolkit : Added exception handling to operate without a Google CSE ID, ensuring broader accessibility and functionality.","title":"Fixed Issues"},{"location":"release-notes/archived/rn5/","text":"ELITEA Release Notes Introduction ELITEA is an innovative web application that revolutionizes how you interact with prompts. Designed as a dynamic workspace, it empowers users to create, organize, and collaborate on prompts like never before. Information Release Version : 1.3.0 Released on : 16-Sep-2024 Access : ELITEA Platform . Note : You need to enable Epam VPN to access ELITEA. User Guide : ELITEA - User Guide New Features New Navigation Flow : Completely redesigned navigation flow within ELITEA HUB. Access prompts, datasources, agents, and collections through dedicated menus. A new Project Selection dropdown list has been added next to your avatar for easy switching between public and private projects. The 'My Libraries' menu has been completely removed. Light Theme : A new light theme has been added for users who prefer bright and vivid colors. Quickly switch between dark and light themes from the Settings menu. Preloaded LLM Models : Deploy, select, and use locally loaded LLM models to speed up output generation and allow simultaneous calls to LLM models. Secrets : Introducing a secure vault for setting up passwords, tokens, and other authentication options within ELITEA HUB. Configure secrets once and use them across various components like Agent's toolkits. Notifications : New notification functionality to alert users about various events such as prompt publishing status within the ELITEA Hub. ELITEA Extensions : Updated versions of Alita Chat and Alita Chat Code for VSCode and IntelliJ IDEs. These versions support prompt versioning and variables, allowing selection of versions and variable values. Enhanced design for Alita Code in VSCode IDE and improved settings management for Alita Code plugin in IntelliJ IDE. Option to download pre-generated settings for Alita Code from ELITEA Hub \u2192 Configurations page. Pgvector Storage : Added Pgvector storage type for datasources, enhancing indexing, saving, and querying of data. New Agent Types : Introduced new agent types including OpenAI, Llama, and Autogen. Enhanced performance and stability of ReAct and Alita agent types. Bitbucket Toolkit for Agents : Allow your Agent to interact directly with Bitbucket repositories, enhancing version control and development processes. TesTrail Toolkit for Agents : Allow your Agent to interact directly with TestRail test management tool. New tools for Confluence Toolkit : Added Create page , Create pages , Delete page , Update page by id , Update page bt title , Update labels , Update pages , Site search , Search by title , Get page tree and Read page by id tools. Export Datasource : New functionality to export datasource instructions, conversation starters, welcome messages, and settings. Note : Datasets within the datasource will not be exported for security reasons. Welcome Message : Added a welcome message feature for prompts, datasources, and agents, providing additional context. Currently, the welcome message is sent to LLM along with other instructions. Future updates will allow users to configure the delivery of welcome messages. Conversation Starter : Added a feature for prompts and datasources to configure and initiate conversations with predefined questions, queries, or information. Changed Features Chat Functionality : Completely redesigned and improved Chat functionality. Enhanced ability to search and add various participants easily. Fixes implemented for synchronization and speed issues. Now supports agent and prompt versions, as well as prompts with variables. Monitoring : Completely redesigned and enhanced Monitoring functionality. Now supports grouping projects and improved visualization with better charts and graphics. Projects : Redesigned the Settings\u2192Users page to a Projects page, allowing project admins to add new users to projects. Also supports creating/selecting groups for monitoring functionality. Known Issues Confluence Source Filtering : Issues with filtering by Space key and Page IDs. Workaround : Use the filtering by label option. Database Corruption During Indexing : Risk of database corruption if simultaneous actions occur in different datasets for Chroma storage type. Workaround : Create a new datasource and reindex, or use Pgvector storage type when creating a datasource. GIT Source Authentication : SSH authentication for GIT sources fails. Workaround : Use HTTPS with Username and Password. Fixed Issues Prompt Saving Error : Fixed issues with saving prompts if the Name field contains leading spaces from copy/paste actions. GitLab Toolkit - Set Active Branch Tool : Resolved an issue where the 'Set Active Branch' tool was not functioning properly. Users can now successfully set the active branch in GitLab without encountering errors. Typo in Error Message When Selecting 'Update File' from GitLab Tool : Resolved an issue where a typo in the error message appeared when selecting the 'Update file' option from the GitLab tool. Agents Disappear on Scroll and Incorrect Message Displayed : Fixed an issue where agents disappeared from the page when scrolling, and an incorrect message was displayed. A page refresh was required to bring the agents back. User Search Crash in Settings : Resolved an issue where attempting to search for a user via the Teammates 'search box' in Settings\u2192Projects\u2192Users caused the UI to crash. The search functionality now operates smoothly without causing disruptions. Date Selection Crash in Monitoring Settings : Fixed a problem where selecting an incorrect date in the date fields on the Settings\u2192Monitoring page caused the UI to crash. Proper error handling and date validation have been implemented to ensure stability and prevent crashes.","title":"RN 1.3.0"},{"location":"release-notes/archived/rn5/#elitea-release-notes","text":"","title":"ELITEA Release Notes"},{"location":"release-notes/archived/rn5/#introduction","text":"ELITEA is an innovative web application that revolutionizes how you interact with prompts. Designed as a dynamic workspace, it empowers users to create, organize, and collaborate on prompts like never before.","title":"Introduction"},{"location":"release-notes/archived/rn5/#information","text":"Release Version : 1.3.0 Released on : 16-Sep-2024 Access : ELITEA Platform . Note : You need to enable Epam VPN to access ELITEA. User Guide : ELITEA - User Guide","title":"Information"},{"location":"release-notes/archived/rn5/#new-features","text":"New Navigation Flow : Completely redesigned navigation flow within ELITEA HUB. Access prompts, datasources, agents, and collections through dedicated menus. A new Project Selection dropdown list has been added next to your avatar for easy switching between public and private projects. The 'My Libraries' menu has been completely removed. Light Theme : A new light theme has been added for users who prefer bright and vivid colors. Quickly switch between dark and light themes from the Settings menu. Preloaded LLM Models : Deploy, select, and use locally loaded LLM models to speed up output generation and allow simultaneous calls to LLM models. Secrets : Introducing a secure vault for setting up passwords, tokens, and other authentication options within ELITEA HUB. Configure secrets once and use them across various components like Agent's toolkits. Notifications : New notification functionality to alert users about various events such as prompt publishing status within the ELITEA Hub. ELITEA Extensions : Updated versions of Alita Chat and Alita Chat Code for VSCode and IntelliJ IDEs. These versions support prompt versioning and variables, allowing selection of versions and variable values. Enhanced design for Alita Code in VSCode IDE and improved settings management for Alita Code plugin in IntelliJ IDE. Option to download pre-generated settings for Alita Code from ELITEA Hub \u2192 Configurations page. Pgvector Storage : Added Pgvector storage type for datasources, enhancing indexing, saving, and querying of data. New Agent Types : Introduced new agent types including OpenAI, Llama, and Autogen. Enhanced performance and stability of ReAct and Alita agent types. Bitbucket Toolkit for Agents : Allow your Agent to interact directly with Bitbucket repositories, enhancing version control and development processes. TesTrail Toolkit for Agents : Allow your Agent to interact directly with TestRail test management tool. New tools for Confluence Toolkit : Added Create page , Create pages , Delete page , Update page by id , Update page bt title , Update labels , Update pages , Site search , Search by title , Get page tree and Read page by id tools. Export Datasource : New functionality to export datasource instructions, conversation starters, welcome messages, and settings. Note : Datasets within the datasource will not be exported for security reasons. Welcome Message : Added a welcome message feature for prompts, datasources, and agents, providing additional context. Currently, the welcome message is sent to LLM along with other instructions. Future updates will allow users to configure the delivery of welcome messages. Conversation Starter : Added a feature for prompts and datasources to configure and initiate conversations with predefined questions, queries, or information.","title":"New Features"},{"location":"release-notes/archived/rn5/#changed-features","text":"Chat Functionality : Completely redesigned and improved Chat functionality. Enhanced ability to search and add various participants easily. Fixes implemented for synchronization and speed issues. Now supports agent and prompt versions, as well as prompts with variables. Monitoring : Completely redesigned and enhanced Monitoring functionality. Now supports grouping projects and improved visualization with better charts and graphics. Projects : Redesigned the Settings\u2192Users page to a Projects page, allowing project admins to add new users to projects. Also supports creating/selecting groups for monitoring functionality.","title":"Changed Features"},{"location":"release-notes/archived/rn5/#known-issues","text":"Confluence Source Filtering : Issues with filtering by Space key and Page IDs. Workaround : Use the filtering by label option. Database Corruption During Indexing : Risk of database corruption if simultaneous actions occur in different datasets for Chroma storage type. Workaround : Create a new datasource and reindex, or use Pgvector storage type when creating a datasource. GIT Source Authentication : SSH authentication for GIT sources fails. Workaround : Use HTTPS with Username and Password.","title":"Known Issues"},{"location":"release-notes/archived/rn5/#fixed-issues","text":"Prompt Saving Error : Fixed issues with saving prompts if the Name field contains leading spaces from copy/paste actions. GitLab Toolkit - Set Active Branch Tool : Resolved an issue where the 'Set Active Branch' tool was not functioning properly. Users can now successfully set the active branch in GitLab without encountering errors. Typo in Error Message When Selecting 'Update File' from GitLab Tool : Resolved an issue where a typo in the error message appeared when selecting the 'Update file' option from the GitLab tool. Agents Disappear on Scroll and Incorrect Message Displayed : Fixed an issue where agents disappeared from the page when scrolling, and an incorrect message was displayed. A page refresh was required to bring the agents back. User Search Crash in Settings : Resolved an issue where attempting to search for a user via the Teammates 'search box' in Settings\u2192Projects\u2192Users caused the UI to crash. The search functionality now operates smoothly without causing disruptions. Date Selection Crash in Monitoring Settings : Fixed a problem where selecting an incorrect date in the date fields on the Settings\u2192Monitoring page caused the UI to crash. Proper error handling and date validation have been implemented to ensure stability and prevent crashes.","title":"Fixed Issues"},{"location":"support-resources/additional-resources/","text":"","title":"Resources & Materials"},{"location":"support-resources/contact-support/","text":"How to Contact ELITEA Support We understand that you may encounter questions or issues while using ELITEA. Our dedicated engineers and support team are always ready to assist you. This guide outlines how to reach us and provides best practices for reporting issues to ensure a quick and efficient resolution. Contacting ELITEA Support The primary way to reach our support team is via email: Email: SupportAlita@epam.com Please use this email address for all support-related inquiries. How to Report Issues and Ask Questions Effectively To help us quickly understand and resolve your issue, please provide as much relevant information as possible in your support request. The more details you include, the faster we can assist you. Here's a breakdown of the information we need, categorized by the type of issue you're experiencing: General Information (Mandatory for All Issues) Regardless of the specific issue, please include the following in your email: ELITEA Environment: Specify the ELITEA environment where you are encountering the problem (e.g., \"Nexus,\" \"Alita Lab,\" \"EYE\"). Project Details: Project Name: Provide the name of the specific project within the ELITEA environment where the issue occurs. Workspace Type: Indicate whether this is your \"Private\" workspace or a \"Team\" project. Issue Description: Clear and Concise: Provide a clear and concise description of the issue you are experiencing. Expected Result: Explain what you were trying to achieve and what the expected outcome should have been. Issues with Agents If you are experiencing issues with an agent, please include the following information: Agent Instructions: Screenshot or Text: Provide a screenshot of the agent's instructions or copy and paste the text of the instructions directly into your email. This allows us to understand the agent's configuration. Used Toolkits and Configuration: Screenshot or Text: If your agent uses specific toolkits (e.g., prompts, datasources, other agents, Jira, Confluence, etc.), provide screenshots of their configurations. This helps us understand how the toolkits are set up. Your Query/Question: Exact Text: Provide the exact query or question you used to execute the agent. This helps us replicate the issue. Error Text (if applicable): Copy from Chat Window: If you encountered an error, expand the error window, click the \"show all\" button for the error message in the Chat window, and copy the full error text into your email. This provides us with detailed error information. Issues with Datasources For issues related to datasources, please provide the following: Datasource Configuration: Screenshot: Provide a screenshot of your datasource configuration settings. Datasource Instructions: Screenshot: If you have specific instructions for the datasource, provide a screenshot of those instructions. Dataset Configuration: Screenshot: Provide a screenshot of the dataset configuration settings. Dataset Error Logs (if applicable): Download and Attach: If you encounter errors with datasets, download the error log file from the dataset and attach it to your email. Advanced Settings: Screenshot: If the issue relates to the Chat, Search, or Deduplicate tabs, provide a screenshot of the advanced settings in those tabs. Issues with Prompts If you are experiencing issues with a specific prompt, please include: Prompt Instructions: Screenshot: Provide a screenshot of the prompt's instructions. Configurations: Screenshot or Text: Provide screenshots or text of the prompt's configurations, including variable setup, selected LLM model, temperature settings, and other relevant parameters. Issues with Alita Code and Alita Code Chat Extensions For issues related to the Alita Code or Alita Code Chat extensions, please provide the following: Environment Connection: ELITEA Environment: Specify the ELITEA environment to which you are connecting the Alita Code extension (e.g., \"Nexus,\" \"Alita Lab,\" \"EYE\").. Extension Version: IDE Type: Indicate whether you are using the VSCode or JetBrains version of the extension. Alita Code Configuration: Screenshot: Provide a screenshot of the Alita Code configuration settings within the extension's settings. Error Messages (if applicable): Screenshot or Text: Provide a screenshot or copy and paste the text of any error messages you receive while using the extension or connecting it to an ELITEA project. Issue Description: Detailed Description: Provide a detailed description of the issue you are experiencing. Please specify whether it is: A connection issue to an ELITEA project. An execution issue (e.g., problems executing prompts or datasources). A synchronization issue (e.g., problems syncing prompts or datasources). An issue with running Alita Code Chat (e.g., problems executing prompts, agents, or datasources). Issues with ELITEA's Other Features For issues related to other features, please provide: Issue Description: Detailed Description: Provide a detailed description of the issue you are experiencing. Screenshots: Visual Context: Include screenshots that illustrate the issue. Dev Tools Console Log (if applicable): Screenshot or Text: If you are comfortable using your browser's developer tools, copy and paste any relevant error messages from the console log or the screenhsot into your email. Best Practices for Reporting Issues Be Specific: The more specific you are, the easier it is for us to understand the issue. Provide Context: Explain what you were trying to do and what you expected to happen. Include Screenshots: Visual aids are often very helpful in understanding the problem. One Issue per Email: If you have multiple unrelated issues, please send separate emails for each. This helps us track and resolve them more efficiently. Be Patient: Our support team will do their best to respond to your request as quickly as possible. By following these guidelines, you can help us provide you with the best possible support experience. We appreciate your cooperation and look forward to assisting you with your ELITEA journey! Before Contacting Support: Explore Available Resources Before reaching out to the support team, we encourage you to explore the available resources. Often, you can find answers to your questions or solutions to common issues by: Reviewing Documentation: Check the official ELITEA documentation for the specific feature you are using. Watching Video Materials: Look for video tutorials or demonstrations that might cover the topic. Checking Configurations: Double-check your configurations and settings to ensure they are correct. Join the ELITEA (Alita) Community We also encourage you to ask questions and share your experiences with other ELITEA users in our community on Viva Engage: ELITEA (Alita) Community This is a great place to connect with other users, learn from their experiences, and get help from the community.","title":"Contact Us"},{"location":"support-resources/contact-support/#how-to-contact-elitea-support","text":"We understand that you may encounter questions or issues while using ELITEA. Our dedicated engineers and support team are always ready to assist you. This guide outlines how to reach us and provides best practices for reporting issues to ensure a quick and efficient resolution.","title":"How to Contact ELITEA Support"},{"location":"support-resources/contact-support/#contacting-elitea-support","text":"The primary way to reach our support team is via email: Email: SupportAlita@epam.com Please use this email address for all support-related inquiries.","title":"Contacting ELITEA Support"},{"location":"support-resources/contact-support/#how-to-report-issues-and-ask-questions-effectively","text":"To help us quickly understand and resolve your issue, please provide as much relevant information as possible in your support request. The more details you include, the faster we can assist you. Here's a breakdown of the information we need, categorized by the type of issue you're experiencing:","title":"How to Report Issues and Ask Questions Effectively"},{"location":"support-resources/contact-support/#general-information-mandatory-for-all-issues","text":"Regardless of the specific issue, please include the following in your email: ELITEA Environment: Specify the ELITEA environment where you are encountering the problem (e.g., \"Nexus,\" \"Alita Lab,\" \"EYE\"). Project Details: Project Name: Provide the name of the specific project within the ELITEA environment where the issue occurs. Workspace Type: Indicate whether this is your \"Private\" workspace or a \"Team\" project. Issue Description: Clear and Concise: Provide a clear and concise description of the issue you are experiencing. Expected Result: Explain what you were trying to achieve and what the expected outcome should have been.","title":"General Information (Mandatory for All Issues)"},{"location":"support-resources/contact-support/#issues-with-agents","text":"If you are experiencing issues with an agent, please include the following information: Agent Instructions: Screenshot or Text: Provide a screenshot of the agent's instructions or copy and paste the text of the instructions directly into your email. This allows us to understand the agent's configuration. Used Toolkits and Configuration: Screenshot or Text: If your agent uses specific toolkits (e.g., prompts, datasources, other agents, Jira, Confluence, etc.), provide screenshots of their configurations. This helps us understand how the toolkits are set up. Your Query/Question: Exact Text: Provide the exact query or question you used to execute the agent. This helps us replicate the issue. Error Text (if applicable): Copy from Chat Window: If you encountered an error, expand the error window, click the \"show all\" button for the error message in the Chat window, and copy the full error text into your email. This provides us with detailed error information.","title":"Issues with Agents"},{"location":"support-resources/contact-support/#issues-with-datasources","text":"For issues related to datasources, please provide the following: Datasource Configuration: Screenshot: Provide a screenshot of your datasource configuration settings. Datasource Instructions: Screenshot: If you have specific instructions for the datasource, provide a screenshot of those instructions. Dataset Configuration: Screenshot: Provide a screenshot of the dataset configuration settings. Dataset Error Logs (if applicable): Download and Attach: If you encounter errors with datasets, download the error log file from the dataset and attach it to your email. Advanced Settings: Screenshot: If the issue relates to the Chat, Search, or Deduplicate tabs, provide a screenshot of the advanced settings in those tabs.","title":"Issues with Datasources"},{"location":"support-resources/contact-support/#issues-with-prompts","text":"If you are experiencing issues with a specific prompt, please include: Prompt Instructions: Screenshot: Provide a screenshot of the prompt's instructions. Configurations: Screenshot or Text: Provide screenshots or text of the prompt's configurations, including variable setup, selected LLM model, temperature settings, and other relevant parameters.","title":"Issues with Prompts"},{"location":"support-resources/contact-support/#issues-with-alita-code-and-alita-code-chat-extensions","text":"For issues related to the Alita Code or Alita Code Chat extensions, please provide the following: Environment Connection: ELITEA Environment: Specify the ELITEA environment to which you are connecting the Alita Code extension (e.g., \"Nexus,\" \"Alita Lab,\" \"EYE\").. Extension Version: IDE Type: Indicate whether you are using the VSCode or JetBrains version of the extension. Alita Code Configuration: Screenshot: Provide a screenshot of the Alita Code configuration settings within the extension's settings. Error Messages (if applicable): Screenshot or Text: Provide a screenshot or copy and paste the text of any error messages you receive while using the extension or connecting it to an ELITEA project. Issue Description: Detailed Description: Provide a detailed description of the issue you are experiencing. Please specify whether it is: A connection issue to an ELITEA project. An execution issue (e.g., problems executing prompts or datasources). A synchronization issue (e.g., problems syncing prompts or datasources). An issue with running Alita Code Chat (e.g., problems executing prompts, agents, or datasources).","title":"Issues with Alita Code and Alita Code Chat Extensions"},{"location":"support-resources/contact-support/#issues-with-eliteas-other-features","text":"For issues related to other features, please provide: Issue Description: Detailed Description: Provide a detailed description of the issue you are experiencing. Screenshots: Visual Context: Include screenshots that illustrate the issue. Dev Tools Console Log (if applicable): Screenshot or Text: If you are comfortable using your browser's developer tools, copy and paste any relevant error messages from the console log or the screenhsot into your email.","title":"Issues with ELITEA's Other Features"},{"location":"support-resources/contact-support/#best-practices-for-reporting-issues","text":"Be Specific: The more specific you are, the easier it is for us to understand the issue. Provide Context: Explain what you were trying to do and what you expected to happen. Include Screenshots: Visual aids are often very helpful in understanding the problem. One Issue per Email: If you have multiple unrelated issues, please send separate emails for each. This helps us track and resolve them more efficiently. Be Patient: Our support team will do their best to respond to your request as quickly as possible. By following these guidelines, you can help us provide you with the best possible support experience. We appreciate your cooperation and look forward to assisting you with your ELITEA journey!","title":"Best Practices for Reporting Issues"},{"location":"support-resources/contact-support/#before-contacting-support-explore-available-resources","text":"Before reaching out to the support team, we encourage you to explore the available resources. Often, you can find answers to your questions or solutions to common issues by: Reviewing Documentation: Check the official ELITEA documentation for the specific feature you are using. Watching Video Materials: Look for video tutorials or demonstrations that might cover the topic. Checking Configurations: Double-check your configurations and settings to ensure they are correct.","title":"Before Contacting Support: Explore Available Resources"},{"location":"support-resources/contact-support/#join-the-elitea-alita-community","text":"We also encourage you to ask questions and share your experiences with other ELITEA users in our community on Viva Engage: ELITEA (Alita) Community This is a great place to connect with other users, learn from their experiences, and get help from the community.","title":"Join the ELITEA (Alita) Community"}]}